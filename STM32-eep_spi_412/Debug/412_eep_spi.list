
412_eep_spi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006420  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001580  080065b0  080065b0  000165b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007b30  08007b30  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  08007b30  08007b30  00017b30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007b38  08007b38  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007b38  08007b38  00017b38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007b3c  08007b3c  00017b3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08007b40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000678  20000080  08007bc0  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006f8  08007bc0  000206f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015347  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c4a  00000000  00000000  000353f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001088  00000000  00000000  00038048  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fb8  00000000  00000000  000390d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000038d6  00000000  00000000  0003a088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014243  00000000  00000000  0003d95e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a4e19  00000000  00000000  00051ba1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f69ba  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004878  00000000  00000000  000f6a10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006598 	.word	0x08006598

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	08006598 	.word	0x08006598

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <UART_Printf>:


//***********************************************************************************************
//           usart tx printf
//***********************************************************************************************
void UART_Printf(const char* fmt, ...) {
 8000578:	b40f      	push	{r0, r1, r2, r3}
 800057a:	b580      	push	{r7, lr}
 800057c:	b0c2      	sub	sp, #264	; 0x108
 800057e:	af00      	add	r7, sp, #0
    char buff[256];
    va_list args;
    va_start(args, fmt);
 8000580:	f507 728a 	add.w	r2, r7, #276	; 0x114
 8000584:	1d3b      	adds	r3, r7, #4
 8000586:	601a      	str	r2, [r3, #0]
    vsnprintf(buff, sizeof(buff), fmt, args);
 8000588:	1d3b      	adds	r3, r7, #4
 800058a:	f107 0008 	add.w	r0, r7, #8
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8000594:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000598:	f005 fbe2 	bl	8005d60 <vsniprintf>
    HAL_UART_Transmit(&huart1, (uint8_t*)buff, strlen(buff),
 800059c:	f107 0308 	add.w	r3, r7, #8
 80005a0:	4618      	mov	r0, r3
 80005a2:	f7ff fe15 	bl	80001d0 <strlen>
 80005a6:	4603      	mov	r3, r0
 80005a8:	b29a      	uxth	r2, r3
 80005aa:	f107 0108 	add.w	r1, r7, #8
 80005ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005b2:	4805      	ldr	r0, [pc, #20]	; (80005c8 <UART_Printf+0x50>)
 80005b4:	f004 faee 	bl	8004b94 <HAL_UART_Transmit>
                      HAL_MAX_DELAY);
    va_end(args);
}
 80005b8:	bf00      	nop
 80005ba:	f507 7784 	add.w	r7, r7, #264	; 0x108
 80005be:	46bd      	mov	sp, r7
 80005c0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80005c4:	b004      	add	sp, #16
 80005c6:	4770      	bx	lr
 80005c8:	20000568 	.word	0x20000568

080005cc <tela>:
//***********************************************************************************************
void tela(void){
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0


	  sprintf(msg1, "%hs", vem);
 80005d0:	4a1d      	ldr	r2, [pc, #116]	; (8000648 <tela+0x7c>)
 80005d2:	491e      	ldr	r1, [pc, #120]	; (800064c <tela+0x80>)
 80005d4:	481e      	ldr	r0, [pc, #120]	; (8000650 <tela+0x84>)
 80005d6:	f005 fb77 	bl	8005cc8 <siprintf>
	  sprintf(msg2, "%04hu", d2);
 80005da:	4b1e      	ldr	r3, [pc, #120]	; (8000654 <tela+0x88>)
 80005dc:	881b      	ldrh	r3, [r3, #0]
 80005de:	461a      	mov	r2, r3
 80005e0:	491d      	ldr	r1, [pc, #116]	; (8000658 <tela+0x8c>)
 80005e2:	481e      	ldr	r0, [pc, #120]	; (800065c <tela+0x90>)
 80005e4:	f005 fb70 	bl	8005cc8 <siprintf>
	  sprintf(msg3, "%04hu", d3);
 80005e8:	4b1d      	ldr	r3, [pc, #116]	; (8000660 <tela+0x94>)
 80005ea:	881b      	ldrh	r3, [r3, #0]
 80005ec:	461a      	mov	r2, r3
 80005ee:	491a      	ldr	r1, [pc, #104]	; (8000658 <tela+0x8c>)
 80005f0:	481c      	ldr	r0, [pc, #112]	; (8000664 <tela+0x98>)
 80005f2:	f005 fb69 	bl	8005cc8 <siprintf>

	  SSD1306_GotoXY (8, 7);
 80005f6:	2107      	movs	r1, #7
 80005f8:	2008      	movs	r0, #8
 80005fa:	f000 fbbb 	bl	8000d74 <SSD1306_GotoXY>
	  SSD1306_Puts ("d1 ", &Font_7x10, 1);
 80005fe:	2201      	movs	r2, #1
 8000600:	4919      	ldr	r1, [pc, #100]	; (8000668 <tela+0x9c>)
 8000602:	481a      	ldr	r0, [pc, #104]	; (800066c <tela+0xa0>)
 8000604:	f000 fc4c 	bl	8000ea0 <SSD1306_Puts>
	  SSD1306_GotoXY (26, 7);
 8000608:	2107      	movs	r1, #7
 800060a:	201a      	movs	r0, #26
 800060c:	f000 fbb2 	bl	8000d74 <SSD1306_GotoXY>
	  SSD1306_Puts (msg1, &Font_7x10, 1);
 8000610:	2201      	movs	r2, #1
 8000612:	4915      	ldr	r1, [pc, #84]	; (8000668 <tela+0x9c>)
 8000614:	480e      	ldr	r0, [pc, #56]	; (8000650 <tela+0x84>)
 8000616:	f000 fc43 	bl	8000ea0 <SSD1306_Puts>
	  SSD1306_GotoXY (8, 27);
 800061a:	211b      	movs	r1, #27
 800061c:	2008      	movs	r0, #8
 800061e:	f000 fba9 	bl	8000d74 <SSD1306_GotoXY>
	  SSD1306_Puts ("d1 ", &Font_7x10, 1);
 8000622:	2201      	movs	r2, #1
 8000624:	4910      	ldr	r1, [pc, #64]	; (8000668 <tela+0x9c>)
 8000626:	4811      	ldr	r0, [pc, #68]	; (800066c <tela+0xa0>)
 8000628:	f000 fc3a 	bl	8000ea0 <SSD1306_Puts>
	  SSD1306_GotoXY (26, 27);
 800062c:	211b      	movs	r1, #27
 800062e:	201a      	movs	r0, #26
 8000630:	f000 fba0 	bl	8000d74 <SSD1306_GotoXY>
	  SSD1306_Puts (msg2, &Font_7x10, 1);
 8000634:	2201      	movs	r2, #1
 8000636:	490c      	ldr	r1, [pc, #48]	; (8000668 <tela+0x9c>)
 8000638:	4808      	ldr	r0, [pc, #32]	; (800065c <tela+0x90>)
 800063a:	f000 fc31 	bl	8000ea0 <SSD1306_Puts>

	  SSD1306_UpdateScreen();
 800063e:	f000 fae5 	bl	8000c0c <SSD1306_UpdateScreen>


}
 8000642:	bf00      	nop
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	20000658 	.word	0x20000658
 800064c:	080065b0 	.word	0x080065b0
 8000650:	20000558 	.word	0x20000558
 8000654:	200000a2 	.word	0x200000a2
 8000658:	080065b4 	.word	0x080065b4
 800065c:	20000560 	.word	0x20000560
 8000660:	200000a4 	.word	0x200000a4
 8000664:	200004cc 	.word	0x200004cc
 8000668:	20000000 	.word	0x20000000
 800066c:	080065bc 	.word	0x080065bc

08000670 <main>:
//************************************************************************************************
//        main
//************************************************************************************************
int main(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0
  HAL_Init();
 8000674:	f001 fa7b 	bl	8001b6e <HAL_Init>
  SystemClock_Config();
 8000678:	f000 f886 	bl	8000788 <SystemClock_Config>
  MX_GPIO_Init();
 800067c:	f000 f99c 	bl	80009b8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000680:	f000 f8ec 	bl	800085c <MX_I2C1_Init>
  MX_SPI1_Init();
 8000684:	f000 f92a 	bl	80008dc <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000688:	f000 f966 	bl	8000958 <MX_USART1_UART_Init>
  HAL_UART_Receive_IT(&huart1, (uint8_t *)UART1_rxBuffer, 40);
 800068c:	2228      	movs	r2, #40	; 0x28
 800068e:	4935      	ldr	r1, [pc, #212]	; (8000764 <main+0xf4>)
 8000690:	4835      	ldr	r0, [pc, #212]	; (8000768 <main+0xf8>)
 8000692:	f004 fb13 	bl	8004cbc <HAL_UART_Receive_IT>

    SSD1306_Init();
 8000696:	f000 f9f5 	bl	8000a84 <SSD1306_Init>
    SSD1306_GotoXY (0,1);
 800069a:	2101      	movs	r1, #1
 800069c:	2000      	movs	r0, #0
 800069e:	f000 fb69 	bl	8000d74 <SSD1306_GotoXY>
    SSD1306_Puts ("   Teste", &Font_11x18, 1);
 80006a2:	2201      	movs	r2, #1
 80006a4:	4931      	ldr	r1, [pc, #196]	; (800076c <main+0xfc>)
 80006a6:	4832      	ldr	r0, [pc, #200]	; (8000770 <main+0x100>)
 80006a8:	f000 fbfa 	bl	8000ea0 <SSD1306_Puts>
    SSD1306_GotoXY (3, 30);
 80006ac:	211e      	movs	r1, #30
 80006ae:	2003      	movs	r0, #3
 80006b0:	f000 fb60 	bl	8000d74 <SSD1306_GotoXY>
    SSD1306_Puts ("EEPROM foda", &Font_11x18, 1);
 80006b4:	2201      	movs	r2, #1
 80006b6:	492d      	ldr	r1, [pc, #180]	; (800076c <main+0xfc>)
 80006b8:	482e      	ldr	r0, [pc, #184]	; (8000774 <main+0x104>)
 80006ba:	f000 fbf1 	bl	8000ea0 <SSD1306_Puts>
    SSD1306_UpdateScreen();
 80006be:	f000 faa5 	bl	8000c0c <SSD1306_UpdateScreen>
    HAL_Delay (1500);
 80006c2:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80006c6:	f001 fac7 	bl	8001c58 <HAL_Delay>
    SSD1306_Clear();
 80006ca:	f000 fc0e 	bl	8000eea <SSD1306_Clear>

    W25qxx_Init();
 80006ce:	f000 ff2d 	bl	800152c <W25qxx_Init>
//        Loop
//************************************************************************************************
  while (1)
  {

	  if(!b1){
 80006d2:	2140      	movs	r1, #64	; 0x40
 80006d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006d8:	f001 fde4 	bl	80022a4 <HAL_GPIO_ReadPin>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d10e      	bne.n	8000700 <main+0x90>
		  W25qxx_EraseSector(12);
 80006e2:	200c      	movs	r0, #12
 80006e4:	f000 fff2 	bl	80016cc <W25qxx_EraseSector>
		  W25qxx_WriteSector("grava carai",1,0,11);
 80006e8:	230b      	movs	r3, #11
 80006ea:	2200      	movs	r2, #0
 80006ec:	2101      	movs	r1, #1
 80006ee:	4822      	ldr	r0, [pc, #136]	; (8000778 <main+0x108>)
 80006f0:	f001 f8d6 	bl	80018a0 <W25qxx_WriteSector>
		  //W25qxx_WriteByte(d1, 12);
		  UART_Printf("gravado");
 80006f4:	4821      	ldr	r0, [pc, #132]	; (800077c <main+0x10c>)
 80006f6:	f7ff ff3f 	bl	8000578 <UART_Printf>
		  HAL_Delay(200);
 80006fa:	20c8      	movs	r0, #200	; 0xc8
 80006fc:	f001 faac 	bl	8001c58 <HAL_Delay>
	      }
	  if(!b2){
 8000700:	2180      	movs	r1, #128	; 0x80
 8000702:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000706:	f001 fdcd 	bl	80022a4 <HAL_GPIO_ReadPin>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d113      	bne.n	8000738 <main+0xc8>
		  W25qxx_ReadSector(vem,1,0,11);
 8000710:	230b      	movs	r3, #11
 8000712:	2200      	movs	r2, #0
 8000714:	2101      	movs	r1, #1
 8000716:	481a      	ldr	r0, [pc, #104]	; (8000780 <main+0x110>)
 8000718:	f001 f99e 	bl	8001a58 <W25qxx_ReadSector>
		  //W25qxx_ReadByte(d2, 12);
		  HAL_Delay(200);
 800071c:	20c8      	movs	r0, #200	; 0xc8
 800071e:	f001 fa9b 	bl	8001c58 <HAL_Delay>
		  HAL_UART_Transmit(&huart1, (uint8_t*)vem, strlen(vem),HAL_MAX_DELAY);
 8000722:	4817      	ldr	r0, [pc, #92]	; (8000780 <main+0x110>)
 8000724:	f7ff fd54 	bl	80001d0 <strlen>
 8000728:	4603      	mov	r3, r0
 800072a:	b29a      	uxth	r2, r3
 800072c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000730:	4913      	ldr	r1, [pc, #76]	; (8000780 <main+0x110>)
 8000732:	480d      	ldr	r0, [pc, #52]	; (8000768 <main+0xf8>)
 8000734:	f004 fa2e 	bl	8004b94 <HAL_UART_Transmit>
		  //HAL_UART_Transmit(&huart1, (uint8_t*)d2, strlen(d2),HAL_MAX_DELAY);
	      }

	  ledvd_on;
 8000738:	2201      	movs	r2, #1
 800073a:	2110      	movs	r1, #16
 800073c:	4811      	ldr	r0, [pc, #68]	; (8000784 <main+0x114>)
 800073e:	f001 fdc9 	bl	80022d4 <HAL_GPIO_WritePin>
      HAL_Delay(500);
 8000742:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000746:	f001 fa87 	bl	8001c58 <HAL_Delay>
      ledvd_off;
 800074a:	2200      	movs	r2, #0
 800074c:	2110      	movs	r1, #16
 800074e:	480d      	ldr	r0, [pc, #52]	; (8000784 <main+0x114>)
 8000750:	f001 fdc0 	bl	80022d4 <HAL_GPIO_WritePin>
      HAL_Delay(500);
 8000754:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000758:	f001 fa7e 	bl	8001c58 <HAL_Delay>

      tela();
 800075c:	f7ff ff36 	bl	80005cc <tela>
	  if(!b1){
 8000760:	e7b7      	b.n	80006d2 <main+0x62>
 8000762:	bf00      	nop
 8000764:	2000009c 	.word	0x2000009c
 8000768:	20000568 	.word	0x20000568
 800076c:	20000008 	.word	0x20000008
 8000770:	080065c0 	.word	0x080065c0
 8000774:	080065cc 	.word	0x080065cc
 8000778:	080065d8 	.word	0x080065d8
 800077c:	080065e4 	.word	0x080065e4
 8000780:	20000658 	.word	0x20000658
 8000784:	48000400 	.word	0x48000400

08000788 <SystemClock_Config>:




void SystemClock_Config(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b0a4      	sub	sp, #144	; 0x90
 800078c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800078e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000792:	2244      	movs	r2, #68	; 0x44
 8000794:	2100      	movs	r1, #0
 8000796:	4618      	mov	r0, r3
 8000798:	f005 fa8e 	bl	8005cb8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800079c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80007a0:	2200      	movs	r2, #0
 80007a2:	601a      	str	r2, [r3, #0]
 80007a4:	605a      	str	r2, [r3, #4]
 80007a6:	609a      	str	r2, [r3, #8]
 80007a8:	60da      	str	r2, [r3, #12]
 80007aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007ac:	1d3b      	adds	r3, r7, #4
 80007ae:	2234      	movs	r2, #52	; 0x34
 80007b0:	2100      	movs	r1, #0
 80007b2:	4618      	mov	r0, r3
 80007b4:	f005 fa80 	bl	8005cb8 <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80007b8:	f44f 7000 	mov.w	r0, #512	; 0x200
 80007bc:	f002 fa48 	bl	8002c50 <HAL_PWREx_ControlVoltageScaling>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <SystemClock_Config+0x42>
  {
    Error_Handler();
 80007c6:	f000 f957 	bl	8000a78 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007ca:	2302      	movs	r3, #2
 80007cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007d2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007d4:	2340      	movs	r3, #64	; 0x40
 80007d6:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007d8:	2302      	movs	r3, #2
 80007da:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007dc:	2302      	movs	r3, #2
 80007de:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80007e0:	2301      	movs	r3, #1
 80007e2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLN = 8;
 80007e6:	2308      	movs	r3, #8
 80007e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007ec:	2302      	movs	r3, #2
 80007ee:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007f2:	2302      	movs	r3, #2
 80007f4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007f8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80007fc:	4618      	mov	r0, r3
 80007fe:	f002 fa7d 	bl	8002cfc <HAL_RCC_OscConfig>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000808:	f000 f936 	bl	8000a78 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800080c:	230f      	movs	r3, #15
 800080e:	63bb      	str	r3, [r7, #56]	; 0x38
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000810:	2303      	movs	r3, #3
 8000812:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000814:	2300      	movs	r3, #0
 8000816:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000818:	2300      	movs	r3, #0
 800081a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800081c:	2300      	movs	r3, #0
 800081e:	64bb      	str	r3, [r7, #72]	; 0x48

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000820:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000824:	2103      	movs	r1, #3
 8000826:	4618      	mov	r0, r3
 8000828:	f002 fece 	bl	80035c8 <HAL_RCC_ClockConfig>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000832:	f000 f921 	bl	8000a78 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8000836:	2341      	movs	r3, #65	; 0x41
 8000838:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800083a:	2300      	movs	r3, #0
 800083c:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800083e:	2300      	movs	r3, #0
 8000840:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000842:	1d3b      	adds	r3, r7, #4
 8000844:	4618      	mov	r0, r3
 8000846:	f003 f8c5 	bl	80039d4 <HAL_RCCEx_PeriphCLKConfig>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000850:	f000 f912 	bl	8000a78 <Error_Handler>
  }
}
 8000854:	bf00      	nop
 8000856:	3790      	adds	r7, #144	; 0x90
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}

0800085c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000860:	4b1b      	ldr	r3, [pc, #108]	; (80008d0 <MX_I2C1_Init+0x74>)
 8000862:	4a1c      	ldr	r2, [pc, #112]	; (80008d4 <MX_I2C1_Init+0x78>)
 8000864:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00602173;
 8000866:	4b1a      	ldr	r3, [pc, #104]	; (80008d0 <MX_I2C1_Init+0x74>)
 8000868:	4a1b      	ldr	r2, [pc, #108]	; (80008d8 <MX_I2C1_Init+0x7c>)
 800086a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800086c:	4b18      	ldr	r3, [pc, #96]	; (80008d0 <MX_I2C1_Init+0x74>)
 800086e:	2200      	movs	r2, #0
 8000870:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000872:	4b17      	ldr	r3, [pc, #92]	; (80008d0 <MX_I2C1_Init+0x74>)
 8000874:	2201      	movs	r2, #1
 8000876:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000878:	4b15      	ldr	r3, [pc, #84]	; (80008d0 <MX_I2C1_Init+0x74>)
 800087a:	2200      	movs	r2, #0
 800087c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800087e:	4b14      	ldr	r3, [pc, #80]	; (80008d0 <MX_I2C1_Init+0x74>)
 8000880:	2200      	movs	r2, #0
 8000882:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000884:	4b12      	ldr	r3, [pc, #72]	; (80008d0 <MX_I2C1_Init+0x74>)
 8000886:	2200      	movs	r2, #0
 8000888:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800088a:	4b11      	ldr	r3, [pc, #68]	; (80008d0 <MX_I2C1_Init+0x74>)
 800088c:	2200      	movs	r2, #0
 800088e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000890:	4b0f      	ldr	r3, [pc, #60]	; (80008d0 <MX_I2C1_Init+0x74>)
 8000892:	2200      	movs	r2, #0
 8000894:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000896:	480e      	ldr	r0, [pc, #56]	; (80008d0 <MX_I2C1_Init+0x74>)
 8000898:	f001 fd34 	bl	8002304 <HAL_I2C_Init>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80008a2:	f000 f8e9 	bl	8000a78 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008a6:	2100      	movs	r1, #0
 80008a8:	4809      	ldr	r0, [pc, #36]	; (80008d0 <MX_I2C1_Init+0x74>)
 80008aa:	f002 f92b 	bl	8002b04 <HAL_I2CEx_ConfigAnalogFilter>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80008b4:	f000 f8e0 	bl	8000a78 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80008b8:	2100      	movs	r1, #0
 80008ba:	4805      	ldr	r0, [pc, #20]	; (80008d0 <MX_I2C1_Init+0x74>)
 80008bc:	f002 f96d 	bl	8002b9a <HAL_I2CEx_ConfigDigitalFilter>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80008c6:	f000 f8d7 	bl	8000a78 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008ca:	bf00      	nop
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	2000050c 	.word	0x2000050c
 80008d4:	40005400 	.word	0x40005400
 80008d8:	00602173 	.word	0x00602173

080008dc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80008e0:	4b1b      	ldr	r3, [pc, #108]	; (8000950 <MX_SPI1_Init+0x74>)
 80008e2:	4a1c      	ldr	r2, [pc, #112]	; (8000954 <MX_SPI1_Init+0x78>)
 80008e4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80008e6:	4b1a      	ldr	r3, [pc, #104]	; (8000950 <MX_SPI1_Init+0x74>)
 80008e8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008ec:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80008ee:	4b18      	ldr	r3, [pc, #96]	; (8000950 <MX_SPI1_Init+0x74>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80008f4:	4b16      	ldr	r3, [pc, #88]	; (8000950 <MX_SPI1_Init+0x74>)
 80008f6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80008fa:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008fc:	4b14      	ldr	r3, [pc, #80]	; (8000950 <MX_SPI1_Init+0x74>)
 80008fe:	2200      	movs	r2, #0
 8000900:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000902:	4b13      	ldr	r3, [pc, #76]	; (8000950 <MX_SPI1_Init+0x74>)
 8000904:	2200      	movs	r2, #0
 8000906:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000908:	4b11      	ldr	r3, [pc, #68]	; (8000950 <MX_SPI1_Init+0x74>)
 800090a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800090e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000910:	4b0f      	ldr	r3, [pc, #60]	; (8000950 <MX_SPI1_Init+0x74>)
 8000912:	2210      	movs	r2, #16
 8000914:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000916:	4b0e      	ldr	r3, [pc, #56]	; (8000950 <MX_SPI1_Init+0x74>)
 8000918:	2200      	movs	r2, #0
 800091a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800091c:	4b0c      	ldr	r3, [pc, #48]	; (8000950 <MX_SPI1_Init+0x74>)
 800091e:	2200      	movs	r2, #0
 8000920:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000922:	4b0b      	ldr	r3, [pc, #44]	; (8000950 <MX_SPI1_Init+0x74>)
 8000924:	2200      	movs	r2, #0
 8000926:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000928:	4b09      	ldr	r3, [pc, #36]	; (8000950 <MX_SPI1_Init+0x74>)
 800092a:	2207      	movs	r2, #7
 800092c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800092e:	4b08      	ldr	r3, [pc, #32]	; (8000950 <MX_SPI1_Init+0x74>)
 8000930:	2200      	movs	r2, #0
 8000932:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000934:	4b06      	ldr	r3, [pc, #24]	; (8000950 <MX_SPI1_Init+0x74>)
 8000936:	2208      	movs	r2, #8
 8000938:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800093a:	4805      	ldr	r0, [pc, #20]	; (8000950 <MX_SPI1_Init+0x74>)
 800093c:	f003 f9d0 	bl	8003ce0 <HAL_SPI_Init>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000946:	f000 f897 	bl	8000a78 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800094a:	bf00      	nop
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	200005f0 	.word	0x200005f0
 8000954:	40013000 	.word	0x40013000

08000958 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800095c:	4b14      	ldr	r3, [pc, #80]	; (80009b0 <MX_USART1_UART_Init+0x58>)
 800095e:	4a15      	ldr	r2, [pc, #84]	; (80009b4 <MX_USART1_UART_Init+0x5c>)
 8000960:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000962:	4b13      	ldr	r3, [pc, #76]	; (80009b0 <MX_USART1_UART_Init+0x58>)
 8000964:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000968:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800096a:	4b11      	ldr	r3, [pc, #68]	; (80009b0 <MX_USART1_UART_Init+0x58>)
 800096c:	2200      	movs	r2, #0
 800096e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000970:	4b0f      	ldr	r3, [pc, #60]	; (80009b0 <MX_USART1_UART_Init+0x58>)
 8000972:	2200      	movs	r2, #0
 8000974:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000976:	4b0e      	ldr	r3, [pc, #56]	; (80009b0 <MX_USART1_UART_Init+0x58>)
 8000978:	2200      	movs	r2, #0
 800097a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800097c:	4b0c      	ldr	r3, [pc, #48]	; (80009b0 <MX_USART1_UART_Init+0x58>)
 800097e:	220c      	movs	r2, #12
 8000980:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000982:	4b0b      	ldr	r3, [pc, #44]	; (80009b0 <MX_USART1_UART_Init+0x58>)
 8000984:	2200      	movs	r2, #0
 8000986:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000988:	4b09      	ldr	r3, [pc, #36]	; (80009b0 <MX_USART1_UART_Init+0x58>)
 800098a:	2200      	movs	r2, #0
 800098c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800098e:	4b08      	ldr	r3, [pc, #32]	; (80009b0 <MX_USART1_UART_Init+0x58>)
 8000990:	2200      	movs	r2, #0
 8000992:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000994:	4b06      	ldr	r3, [pc, #24]	; (80009b0 <MX_USART1_UART_Init+0x58>)
 8000996:	2200      	movs	r2, #0
 8000998:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800099a:	4805      	ldr	r0, [pc, #20]	; (80009b0 <MX_USART1_UART_Init+0x58>)
 800099c:	f004 f8ac 	bl	8004af8 <HAL_UART_Init>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80009a6:	f000 f867 	bl	8000a78 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009aa:	bf00      	nop
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	20000568 	.word	0x20000568
 80009b4:	40013800 	.word	0x40013800

080009b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b088      	sub	sp, #32
 80009bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009be:	f107 030c 	add.w	r3, r7, #12
 80009c2:	2200      	movs	r2, #0
 80009c4:	601a      	str	r2, [r3, #0]
 80009c6:	605a      	str	r2, [r3, #4]
 80009c8:	609a      	str	r2, [r3, #8]
 80009ca:	60da      	str	r2, [r3, #12]
 80009cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ce:	4b28      	ldr	r3, [pc, #160]	; (8000a70 <MX_GPIO_Init+0xb8>)
 80009d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009d2:	4a27      	ldr	r2, [pc, #156]	; (8000a70 <MX_GPIO_Init+0xb8>)
 80009d4:	f043 0301 	orr.w	r3, r3, #1
 80009d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009da:	4b25      	ldr	r3, [pc, #148]	; (8000a70 <MX_GPIO_Init+0xb8>)
 80009dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009de:	f003 0301 	and.w	r3, r3, #1
 80009e2:	60bb      	str	r3, [r7, #8]
 80009e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009e6:	4b22      	ldr	r3, [pc, #136]	; (8000a70 <MX_GPIO_Init+0xb8>)
 80009e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ea:	4a21      	ldr	r2, [pc, #132]	; (8000a70 <MX_GPIO_Init+0xb8>)
 80009ec:	f043 0302 	orr.w	r3, r3, #2
 80009f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009f2:	4b1f      	ldr	r3, [pc, #124]	; (8000a70 <MX_GPIO_Init+0xb8>)
 80009f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009f6:	f003 0302 	and.w	r3, r3, #2
 80009fa:	607b      	str	r3, [r7, #4]
 80009fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(cs_pin_GPIO_Port, cs_pin_Pin, GPIO_PIN_RESET);
 80009fe:	2200      	movs	r2, #0
 8000a00:	2104      	movs	r1, #4
 8000a02:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a06:	f001 fc65 	bl	80022d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ledam_Pin|ledvm_Pin, GPIO_PIN_RESET);
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	2118      	movs	r1, #24
 8000a0e:	4819      	ldr	r0, [pc, #100]	; (8000a74 <MX_GPIO_Init+0xbc>)
 8000a10:	f001 fc60 	bl	80022d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : cs_pin_Pin */
  GPIO_InitStruct.Pin = cs_pin_Pin;
 8000a14:	2304      	movs	r3, #4
 8000a16:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a18:	2301      	movs	r3, #1
 8000a1a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a20:	2300      	movs	r3, #0
 8000a22:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(cs_pin_GPIO_Port, &GPIO_InitStruct);
 8000a24:	f107 030c 	add.w	r3, r7, #12
 8000a28:	4619      	mov	r1, r3
 8000a2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a2e:	f001 fac7 	bl	8001fc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : sw1_Pin sw2_Pin */
  GPIO_InitStruct.Pin = sw1_Pin|sw2_Pin;
 8000a32:	23c0      	movs	r3, #192	; 0xc0
 8000a34:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a36:	2300      	movs	r3, #0
 8000a38:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a3e:	f107 030c 	add.w	r3, r7, #12
 8000a42:	4619      	mov	r1, r3
 8000a44:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a48:	f001 faba 	bl	8001fc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ledam_Pin ledvm_Pin */
  GPIO_InitStruct.Pin = ledam_Pin|ledvm_Pin;
 8000a4c:	2318      	movs	r3, #24
 8000a4e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a50:	2301      	movs	r3, #1
 8000a52:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a54:	2300      	movs	r3, #0
 8000a56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a5c:	f107 030c 	add.w	r3, r7, #12
 8000a60:	4619      	mov	r1, r3
 8000a62:	4804      	ldr	r0, [pc, #16]	; (8000a74 <MX_GPIO_Init+0xbc>)
 8000a64:	f001 faac 	bl	8001fc0 <HAL_GPIO_Init>

}
 8000a68:	bf00      	nop
 8000a6a:	3720      	adds	r7, #32
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	40021000 	.word	0x40021000
 8000a74:	48000400 	.word	0x48000400

08000a78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a7c:	b672      	cpsid	i
}
 8000a7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a80:	e7fe      	b.n	8000a80 <Error_Handler+0x8>
	...

08000a84 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8000a8a:	f000 fa37 	bl	8000efc <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8000a8e:	f644 6320 	movw	r3, #20000	; 0x4e20
 8000a92:	2201      	movs	r2, #1
 8000a94:	2178      	movs	r1, #120	; 0x78
 8000a96:	485b      	ldr	r0, [pc, #364]	; (8000c04 <SSD1306_Init+0x180>)
 8000a98:	f001 fdb8 	bl	800260c <HAL_I2C_IsDeviceReady>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	e0a9      	b.n	8000bfa <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8000aa6:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8000aaa:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000aac:	e002      	b.n	8000ab4 <SSD1306_Init+0x30>
		p--;
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	3b01      	subs	r3, #1
 8000ab2:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d1f9      	bne.n	8000aae <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8000aba:	22ae      	movs	r2, #174	; 0xae
 8000abc:	2100      	movs	r1, #0
 8000abe:	2078      	movs	r0, #120	; 0x78
 8000ac0:	f000 fa7a 	bl	8000fb8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8000ac4:	2220      	movs	r2, #32
 8000ac6:	2100      	movs	r1, #0
 8000ac8:	2078      	movs	r0, #120	; 0x78
 8000aca:	f000 fa75 	bl	8000fb8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000ace:	2210      	movs	r2, #16
 8000ad0:	2100      	movs	r1, #0
 8000ad2:	2078      	movs	r0, #120	; 0x78
 8000ad4:	f000 fa70 	bl	8000fb8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000ad8:	22b0      	movs	r2, #176	; 0xb0
 8000ada:	2100      	movs	r1, #0
 8000adc:	2078      	movs	r0, #120	; 0x78
 8000ade:	f000 fa6b 	bl	8000fb8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8000ae2:	22c8      	movs	r2, #200	; 0xc8
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	2078      	movs	r0, #120	; 0x78
 8000ae8:	f000 fa66 	bl	8000fb8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8000aec:	2200      	movs	r2, #0
 8000aee:	2100      	movs	r1, #0
 8000af0:	2078      	movs	r0, #120	; 0x78
 8000af2:	f000 fa61 	bl	8000fb8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8000af6:	2210      	movs	r2, #16
 8000af8:	2100      	movs	r1, #0
 8000afa:	2078      	movs	r0, #120	; 0x78
 8000afc:	f000 fa5c 	bl	8000fb8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8000b00:	2240      	movs	r2, #64	; 0x40
 8000b02:	2100      	movs	r1, #0
 8000b04:	2078      	movs	r0, #120	; 0x78
 8000b06:	f000 fa57 	bl	8000fb8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8000b0a:	2281      	movs	r2, #129	; 0x81
 8000b0c:	2100      	movs	r1, #0
 8000b0e:	2078      	movs	r0, #120	; 0x78
 8000b10:	f000 fa52 	bl	8000fb8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8000b14:	22ff      	movs	r2, #255	; 0xff
 8000b16:	2100      	movs	r1, #0
 8000b18:	2078      	movs	r0, #120	; 0x78
 8000b1a:	f000 fa4d 	bl	8000fb8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8000b1e:	22a1      	movs	r2, #161	; 0xa1
 8000b20:	2100      	movs	r1, #0
 8000b22:	2078      	movs	r0, #120	; 0x78
 8000b24:	f000 fa48 	bl	8000fb8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8000b28:	22a6      	movs	r2, #166	; 0xa6
 8000b2a:	2100      	movs	r1, #0
 8000b2c:	2078      	movs	r0, #120	; 0x78
 8000b2e:	f000 fa43 	bl	8000fb8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8000b32:	22a8      	movs	r2, #168	; 0xa8
 8000b34:	2100      	movs	r1, #0
 8000b36:	2078      	movs	r0, #120	; 0x78
 8000b38:	f000 fa3e 	bl	8000fb8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8000b3c:	223f      	movs	r2, #63	; 0x3f
 8000b3e:	2100      	movs	r1, #0
 8000b40:	2078      	movs	r0, #120	; 0x78
 8000b42:	f000 fa39 	bl	8000fb8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000b46:	22a4      	movs	r2, #164	; 0xa4
 8000b48:	2100      	movs	r1, #0
 8000b4a:	2078      	movs	r0, #120	; 0x78
 8000b4c:	f000 fa34 	bl	8000fb8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8000b50:	22d3      	movs	r2, #211	; 0xd3
 8000b52:	2100      	movs	r1, #0
 8000b54:	2078      	movs	r0, #120	; 0x78
 8000b56:	f000 fa2f 	bl	8000fb8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	2078      	movs	r0, #120	; 0x78
 8000b60:	f000 fa2a 	bl	8000fb8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8000b64:	22d5      	movs	r2, #213	; 0xd5
 8000b66:	2100      	movs	r1, #0
 8000b68:	2078      	movs	r0, #120	; 0x78
 8000b6a:	f000 fa25 	bl	8000fb8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8000b6e:	22f0      	movs	r2, #240	; 0xf0
 8000b70:	2100      	movs	r1, #0
 8000b72:	2078      	movs	r0, #120	; 0x78
 8000b74:	f000 fa20 	bl	8000fb8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8000b78:	22d9      	movs	r2, #217	; 0xd9
 8000b7a:	2100      	movs	r1, #0
 8000b7c:	2078      	movs	r0, #120	; 0x78
 8000b7e:	f000 fa1b 	bl	8000fb8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8000b82:	2222      	movs	r2, #34	; 0x22
 8000b84:	2100      	movs	r1, #0
 8000b86:	2078      	movs	r0, #120	; 0x78
 8000b88:	f000 fa16 	bl	8000fb8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8000b8c:	22da      	movs	r2, #218	; 0xda
 8000b8e:	2100      	movs	r1, #0
 8000b90:	2078      	movs	r0, #120	; 0x78
 8000b92:	f000 fa11 	bl	8000fb8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8000b96:	2212      	movs	r2, #18
 8000b98:	2100      	movs	r1, #0
 8000b9a:	2078      	movs	r0, #120	; 0x78
 8000b9c:	f000 fa0c 	bl	8000fb8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8000ba0:	22db      	movs	r2, #219	; 0xdb
 8000ba2:	2100      	movs	r1, #0
 8000ba4:	2078      	movs	r0, #120	; 0x78
 8000ba6:	f000 fa07 	bl	8000fb8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8000baa:	2220      	movs	r2, #32
 8000bac:	2100      	movs	r1, #0
 8000bae:	2078      	movs	r0, #120	; 0x78
 8000bb0:	f000 fa02 	bl	8000fb8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8000bb4:	228d      	movs	r2, #141	; 0x8d
 8000bb6:	2100      	movs	r1, #0
 8000bb8:	2078      	movs	r0, #120	; 0x78
 8000bba:	f000 f9fd 	bl	8000fb8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8000bbe:	2214      	movs	r2, #20
 8000bc0:	2100      	movs	r1, #0
 8000bc2:	2078      	movs	r0, #120	; 0x78
 8000bc4:	f000 f9f8 	bl	8000fb8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8000bc8:	22af      	movs	r2, #175	; 0xaf
 8000bca:	2100      	movs	r1, #0
 8000bcc:	2078      	movs	r0, #120	; 0x78
 8000bce:	f000 f9f3 	bl	8000fb8 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8000bd2:	222e      	movs	r2, #46	; 0x2e
 8000bd4:	2100      	movs	r1, #0
 8000bd6:	2078      	movs	r0, #120	; 0x78
 8000bd8:	f000 f9ee 	bl	8000fb8 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000bdc:	2000      	movs	r0, #0
 8000bde:	f000 f847 	bl	8000c70 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8000be2:	f000 f813 	bl	8000c0c <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8000be6:	4b08      	ldr	r3, [pc, #32]	; (8000c08 <SSD1306_Init+0x184>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000bec:	4b06      	ldr	r3, [pc, #24]	; (8000c08 <SSD1306_Init+0x184>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8000bf2:	4b05      	ldr	r3, [pc, #20]	; (8000c08 <SSD1306_Init+0x184>)
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8000bf8:	2301      	movs	r3, #1
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	3708      	adds	r7, #8
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	2000050c 	.word	0x2000050c
 8000c08:	200004b8 	.word	0x200004b8

08000c0c <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8000c12:	2300      	movs	r3, #0
 8000c14:	71fb      	strb	r3, [r7, #7]
 8000c16:	e021      	b.n	8000c5c <SSD1306_UpdateScreen+0x50>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8000c18:	79fb      	ldrb	r3, [r7, #7]
 8000c1a:	3b50      	subs	r3, #80	; 0x50
 8000c1c:	b2db      	uxtb	r3, r3
 8000c1e:	461a      	mov	r2, r3
 8000c20:	2100      	movs	r1, #0
 8000c22:	2078      	movs	r0, #120	; 0x78
 8000c24:	f000 f9c8 	bl	8000fb8 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8000c28:	2200      	movs	r2, #0
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	2078      	movs	r0, #120	; 0x78
 8000c2e:	f000 f9c3 	bl	8000fb8 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8000c32:	2210      	movs	r2, #16
 8000c34:	2100      	movs	r1, #0
 8000c36:	2078      	movs	r0, #120	; 0x78
 8000c38:	f000 f9be 	bl	8000fb8 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8000c3c:	79fa      	ldrb	r2, [r7, #7]
 8000c3e:	4613      	mov	r3, r2
 8000c40:	019b      	lsls	r3, r3, #6
 8000c42:	4413      	add	r3, r2
 8000c44:	005b      	lsls	r3, r3, #1
 8000c46:	461a      	mov	r2, r3
 8000c48:	4b08      	ldr	r3, [pc, #32]	; (8000c6c <SSD1306_UpdateScreen+0x60>)
 8000c4a:	441a      	add	r2, r3
 8000c4c:	2382      	movs	r3, #130	; 0x82
 8000c4e:	2140      	movs	r1, #64	; 0x40
 8000c50:	2078      	movs	r0, #120	; 0x78
 8000c52:	f000 f969 	bl	8000f28 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8000c56:	79fb      	ldrb	r3, [r7, #7]
 8000c58:	3301      	adds	r3, #1
 8000c5a:	71fb      	strb	r3, [r7, #7]
 8000c5c:	79fb      	ldrb	r3, [r7, #7]
 8000c5e:	2b07      	cmp	r3, #7
 8000c60:	d9da      	bls.n	8000c18 <SSD1306_UpdateScreen+0xc>
	}
}
 8000c62:	bf00      	nop
 8000c64:	bf00      	nop
 8000c66:	3708      	adds	r7, #8
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	200000a8 	.word	0x200000a8

08000c70 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	4603      	mov	r3, r0
 8000c78:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000c7a:	79fb      	ldrb	r3, [r7, #7]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d101      	bne.n	8000c84 <SSD1306_Fill+0x14>
 8000c80:	2300      	movs	r3, #0
 8000c82:	e000      	b.n	8000c86 <SSD1306_Fill+0x16>
 8000c84:	23ff      	movs	r3, #255	; 0xff
 8000c86:	f44f 6282 	mov.w	r2, #1040	; 0x410
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	4803      	ldr	r0, [pc, #12]	; (8000c9c <SSD1306_Fill+0x2c>)
 8000c8e:	f005 f813 	bl	8005cb8 <memset>
}
 8000c92:	bf00      	nop
 8000c94:	3708      	adds	r7, #8
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	200000a8 	.word	0x200000a8

08000ca0 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8000ca0:	b490      	push	{r4, r7}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	80fb      	strh	r3, [r7, #6]
 8000caa:	460b      	mov	r3, r1
 8000cac:	80bb      	strh	r3, [r7, #4]
 8000cae:	4613      	mov	r3, r2
 8000cb0:	70fb      	strb	r3, [r7, #3]
	if (
 8000cb2:	88fb      	ldrh	r3, [r7, #6]
 8000cb4:	2b81      	cmp	r3, #129	; 0x81
 8000cb6:	d854      	bhi.n	8000d62 <SSD1306_DrawPixel+0xc2>
		x >= SSD1306_WIDTH ||
 8000cb8:	88bb      	ldrh	r3, [r7, #4]
 8000cba:	2b3f      	cmp	r3, #63	; 0x3f
 8000cbc:	d851      	bhi.n	8000d62 <SSD1306_DrawPixel+0xc2>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8000cbe:	4b2b      	ldr	r3, [pc, #172]	; (8000d6c <SSD1306_DrawPixel+0xcc>)
 8000cc0:	791b      	ldrb	r3, [r3, #4]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d006      	beq.n	8000cd4 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8000cc6:	78fb      	ldrb	r3, [r7, #3]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	bf0c      	ite	eq
 8000ccc:	2301      	moveq	r3, #1
 8000cce:	2300      	movne	r3, #0
 8000cd0:	b2db      	uxtb	r3, r3
 8000cd2:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8000cd4:	78fb      	ldrb	r3, [r7, #3]
 8000cd6:	2b01      	cmp	r3, #1
 8000cd8:	d120      	bne.n	8000d1c <SSD1306_DrawPixel+0x7c>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000cda:	88fa      	ldrh	r2, [r7, #6]
 8000cdc:	88bb      	ldrh	r3, [r7, #4]
 8000cde:	08db      	lsrs	r3, r3, #3
 8000ce0:	b298      	uxth	r0, r3
 8000ce2:	4601      	mov	r1, r0
 8000ce4:	460b      	mov	r3, r1
 8000ce6:	019b      	lsls	r3, r3, #6
 8000ce8:	440b      	add	r3, r1
 8000cea:	005b      	lsls	r3, r3, #1
 8000cec:	4413      	add	r3, r2
 8000cee:	4a20      	ldr	r2, [pc, #128]	; (8000d70 <SSD1306_DrawPixel+0xd0>)
 8000cf0:	5cd3      	ldrb	r3, [r2, r3]
 8000cf2:	b25a      	sxtb	r2, r3
 8000cf4:	88bb      	ldrh	r3, [r7, #4]
 8000cf6:	f003 0307 	and.w	r3, r3, #7
 8000cfa:	2101      	movs	r1, #1
 8000cfc:	fa01 f303 	lsl.w	r3, r1, r3
 8000d00:	b25b      	sxtb	r3, r3
 8000d02:	4313      	orrs	r3, r2
 8000d04:	b25c      	sxtb	r4, r3
 8000d06:	88fa      	ldrh	r2, [r7, #6]
 8000d08:	4601      	mov	r1, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	019b      	lsls	r3, r3, #6
 8000d0e:	440b      	add	r3, r1
 8000d10:	005b      	lsls	r3, r3, #1
 8000d12:	4413      	add	r3, r2
 8000d14:	b2e1      	uxtb	r1, r4
 8000d16:	4a16      	ldr	r2, [pc, #88]	; (8000d70 <SSD1306_DrawPixel+0xd0>)
 8000d18:	54d1      	strb	r1, [r2, r3]
 8000d1a:	e023      	b.n	8000d64 <SSD1306_DrawPixel+0xc4>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000d1c:	88fa      	ldrh	r2, [r7, #6]
 8000d1e:	88bb      	ldrh	r3, [r7, #4]
 8000d20:	08db      	lsrs	r3, r3, #3
 8000d22:	b298      	uxth	r0, r3
 8000d24:	4601      	mov	r1, r0
 8000d26:	460b      	mov	r3, r1
 8000d28:	019b      	lsls	r3, r3, #6
 8000d2a:	440b      	add	r3, r1
 8000d2c:	005b      	lsls	r3, r3, #1
 8000d2e:	4413      	add	r3, r2
 8000d30:	4a0f      	ldr	r2, [pc, #60]	; (8000d70 <SSD1306_DrawPixel+0xd0>)
 8000d32:	5cd3      	ldrb	r3, [r2, r3]
 8000d34:	b25a      	sxtb	r2, r3
 8000d36:	88bb      	ldrh	r3, [r7, #4]
 8000d38:	f003 0307 	and.w	r3, r3, #7
 8000d3c:	2101      	movs	r1, #1
 8000d3e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d42:	b25b      	sxtb	r3, r3
 8000d44:	43db      	mvns	r3, r3
 8000d46:	b25b      	sxtb	r3, r3
 8000d48:	4013      	ands	r3, r2
 8000d4a:	b25c      	sxtb	r4, r3
 8000d4c:	88fa      	ldrh	r2, [r7, #6]
 8000d4e:	4601      	mov	r1, r0
 8000d50:	460b      	mov	r3, r1
 8000d52:	019b      	lsls	r3, r3, #6
 8000d54:	440b      	add	r3, r1
 8000d56:	005b      	lsls	r3, r3, #1
 8000d58:	4413      	add	r3, r2
 8000d5a:	b2e1      	uxtb	r1, r4
 8000d5c:	4a04      	ldr	r2, [pc, #16]	; (8000d70 <SSD1306_DrawPixel+0xd0>)
 8000d5e:	54d1      	strb	r1, [r2, r3]
 8000d60:	e000      	b.n	8000d64 <SSD1306_DrawPixel+0xc4>
		return;
 8000d62:	bf00      	nop
	}
}
 8000d64:	3708      	adds	r7, #8
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bc90      	pop	{r4, r7}
 8000d6a:	4770      	bx	lr
 8000d6c:	200004b8 	.word	0x200004b8
 8000d70:	200000a8 	.word	0x200000a8

08000d74 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8000d74:	b480      	push	{r7}
 8000d76:	b083      	sub	sp, #12
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	460a      	mov	r2, r1
 8000d7e:	80fb      	strh	r3, [r7, #6]
 8000d80:	4613      	mov	r3, r2
 8000d82:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8000d84:	4a05      	ldr	r2, [pc, #20]	; (8000d9c <SSD1306_GotoXY+0x28>)
 8000d86:	88fb      	ldrh	r3, [r7, #6]
 8000d88:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8000d8a:	4a04      	ldr	r2, [pc, #16]	; (8000d9c <SSD1306_GotoXY+0x28>)
 8000d8c:	88bb      	ldrh	r3, [r7, #4]
 8000d8e:	8053      	strh	r3, [r2, #2]
}
 8000d90:	bf00      	nop
 8000d92:	370c      	adds	r7, #12
 8000d94:	46bd      	mov	sp, r7
 8000d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9a:	4770      	bx	lr
 8000d9c:	200004b8 	.word	0x200004b8

08000da0 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b086      	sub	sp, #24
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	4603      	mov	r3, r0
 8000da8:	6039      	str	r1, [r7, #0]
 8000daa:	71fb      	strb	r3, [r7, #7]
 8000dac:	4613      	mov	r3, r2
 8000dae:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000db0:	4b3a      	ldr	r3, [pc, #232]	; (8000e9c <SSD1306_Putc+0xfc>)
 8000db2:	881b      	ldrh	r3, [r3, #0]
 8000db4:	461a      	mov	r2, r3
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	781b      	ldrb	r3, [r3, #0]
 8000dba:	4413      	add	r3, r2
	if (
 8000dbc:	2b81      	cmp	r3, #129	; 0x81
 8000dbe:	dc07      	bgt.n	8000dd0 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8000dc0:	4b36      	ldr	r3, [pc, #216]	; (8000e9c <SSD1306_Putc+0xfc>)
 8000dc2:	885b      	ldrh	r3, [r3, #2]
 8000dc4:	461a      	mov	r2, r3
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	785b      	ldrb	r3, [r3, #1]
 8000dca:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000dcc:	2b3f      	cmp	r3, #63	; 0x3f
 8000dce:	dd01      	ble.n	8000dd4 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	e05e      	b.n	8000e92 <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	617b      	str	r3, [r7, #20]
 8000dd8:	e04b      	b.n	8000e72 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	685a      	ldr	r2, [r3, #4]
 8000dde:	79fb      	ldrb	r3, [r7, #7]
 8000de0:	3b20      	subs	r3, #32
 8000de2:	6839      	ldr	r1, [r7, #0]
 8000de4:	7849      	ldrb	r1, [r1, #1]
 8000de6:	fb01 f303 	mul.w	r3, r1, r3
 8000dea:	4619      	mov	r1, r3
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	440b      	add	r3, r1
 8000df0:	005b      	lsls	r3, r3, #1
 8000df2:	4413      	add	r3, r2
 8000df4:	881b      	ldrh	r3, [r3, #0]
 8000df6:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8000df8:	2300      	movs	r3, #0
 8000dfa:	613b      	str	r3, [r7, #16]
 8000dfc:	e030      	b.n	8000e60 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8000dfe:	68fa      	ldr	r2, [r7, #12]
 8000e00:	693b      	ldr	r3, [r7, #16]
 8000e02:	fa02 f303 	lsl.w	r3, r2, r3
 8000e06:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d010      	beq.n	8000e30 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8000e0e:	4b23      	ldr	r3, [pc, #140]	; (8000e9c <SSD1306_Putc+0xfc>)
 8000e10:	881a      	ldrh	r2, [r3, #0]
 8000e12:	693b      	ldr	r3, [r7, #16]
 8000e14:	b29b      	uxth	r3, r3
 8000e16:	4413      	add	r3, r2
 8000e18:	b298      	uxth	r0, r3
 8000e1a:	4b20      	ldr	r3, [pc, #128]	; (8000e9c <SSD1306_Putc+0xfc>)
 8000e1c:	885a      	ldrh	r2, [r3, #2]
 8000e1e:	697b      	ldr	r3, [r7, #20]
 8000e20:	b29b      	uxth	r3, r3
 8000e22:	4413      	add	r3, r2
 8000e24:	b29b      	uxth	r3, r3
 8000e26:	79ba      	ldrb	r2, [r7, #6]
 8000e28:	4619      	mov	r1, r3
 8000e2a:	f7ff ff39 	bl	8000ca0 <SSD1306_DrawPixel>
 8000e2e:	e014      	b.n	8000e5a <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8000e30:	4b1a      	ldr	r3, [pc, #104]	; (8000e9c <SSD1306_Putc+0xfc>)
 8000e32:	881a      	ldrh	r2, [r3, #0]
 8000e34:	693b      	ldr	r3, [r7, #16]
 8000e36:	b29b      	uxth	r3, r3
 8000e38:	4413      	add	r3, r2
 8000e3a:	b298      	uxth	r0, r3
 8000e3c:	4b17      	ldr	r3, [pc, #92]	; (8000e9c <SSD1306_Putc+0xfc>)
 8000e3e:	885a      	ldrh	r2, [r3, #2]
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	b29b      	uxth	r3, r3
 8000e44:	4413      	add	r3, r2
 8000e46:	b299      	uxth	r1, r3
 8000e48:	79bb      	ldrb	r3, [r7, #6]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	bf0c      	ite	eq
 8000e4e:	2301      	moveq	r3, #1
 8000e50:	2300      	movne	r3, #0
 8000e52:	b2db      	uxtb	r3, r3
 8000e54:	461a      	mov	r2, r3
 8000e56:	f7ff ff23 	bl	8000ca0 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8000e5a:	693b      	ldr	r3, [r7, #16]
 8000e5c:	3301      	adds	r3, #1
 8000e5e:	613b      	str	r3, [r7, #16]
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	461a      	mov	r2, r3
 8000e66:	693b      	ldr	r3, [r7, #16]
 8000e68:	4293      	cmp	r3, r2
 8000e6a:	d3c8      	bcc.n	8000dfe <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	3301      	adds	r3, #1
 8000e70:	617b      	str	r3, [r7, #20]
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	785b      	ldrb	r3, [r3, #1]
 8000e76:	461a      	mov	r2, r3
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d3ad      	bcc.n	8000dda <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8000e7e:	4b07      	ldr	r3, [pc, #28]	; (8000e9c <SSD1306_Putc+0xfc>)
 8000e80:	881a      	ldrh	r2, [r3, #0]
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	b29b      	uxth	r3, r3
 8000e88:	4413      	add	r3, r2
 8000e8a:	b29a      	uxth	r2, r3
 8000e8c:	4b03      	ldr	r3, [pc, #12]	; (8000e9c <SSD1306_Putc+0xfc>)
 8000e8e:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8000e90:	79fb      	ldrb	r3, [r7, #7]
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	3718      	adds	r7, #24
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	200004b8 	.word	0x200004b8

08000ea0 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b084      	sub	sp, #16
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	60f8      	str	r0, [r7, #12]
 8000ea8:	60b9      	str	r1, [r7, #8]
 8000eaa:	4613      	mov	r3, r2
 8000eac:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8000eae:	e012      	b.n	8000ed6 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	79fa      	ldrb	r2, [r7, #7]
 8000eb6:	68b9      	ldr	r1, [r7, #8]
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f7ff ff71 	bl	8000da0 <SSD1306_Putc>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	461a      	mov	r2, r3
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	781b      	ldrb	r3, [r3, #0]
 8000ec6:	429a      	cmp	r2, r3
 8000ec8:	d002      	beq.n	8000ed0 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	781b      	ldrb	r3, [r3, #0]
 8000ece:	e008      	b.n	8000ee2 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	3301      	adds	r3, #1
 8000ed4:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	781b      	ldrb	r3, [r3, #0]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d1e8      	bne.n	8000eb0 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	781b      	ldrb	r3, [r3, #0]
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	3710      	adds	r7, #16
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}

08000eea <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 8000eea:	b580      	push	{r7, lr}
 8000eec:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8000eee:	2000      	movs	r0, #0
 8000ef0:	f7ff febe 	bl	8000c70 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8000ef4:	f7ff fe8a 	bl	8000c0c <SSD1306_UpdateScreen>
}
 8000ef8:	bf00      	nop
 8000efa:	bd80      	pop	{r7, pc}

08000efc <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8000efc:	b480      	push	{r7}
 8000efe:	b083      	sub	sp, #12
 8000f00:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8000f02:	4b08      	ldr	r3, [pc, #32]	; (8000f24 <ssd1306_I2C_Init+0x28>)
 8000f04:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000f06:	e002      	b.n	8000f0e <ssd1306_I2C_Init+0x12>
		p--;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	3b01      	subs	r3, #1
 8000f0c:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d1f9      	bne.n	8000f08 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8000f14:	bf00      	nop
 8000f16:	bf00      	nop
 8000f18:	370c      	adds	r7, #12
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	0003d090 	.word	0x0003d090

08000f28 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8000f28:	b590      	push	{r4, r7, lr}
 8000f2a:	b0c7      	sub	sp, #284	; 0x11c
 8000f2c:	af02      	add	r7, sp, #8
 8000f2e:	4604      	mov	r4, r0
 8000f30:	4608      	mov	r0, r1
 8000f32:	4639      	mov	r1, r7
 8000f34:	600a      	str	r2, [r1, #0]
 8000f36:	4619      	mov	r1, r3
 8000f38:	1dfb      	adds	r3, r7, #7
 8000f3a:	4622      	mov	r2, r4
 8000f3c:	701a      	strb	r2, [r3, #0]
 8000f3e:	1dbb      	adds	r3, r7, #6
 8000f40:	4602      	mov	r2, r0
 8000f42:	701a      	strb	r2, [r3, #0]
 8000f44:	1d3b      	adds	r3, r7, #4
 8000f46:	460a      	mov	r2, r1
 8000f48:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8000f4a:	f107 030c 	add.w	r3, r7, #12
 8000f4e:	1dba      	adds	r2, r7, #6
 8000f50:	7812      	ldrb	r2, [r2, #0]
 8000f52:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8000f54:	2300      	movs	r3, #0
 8000f56:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8000f5a:	e010      	b.n	8000f7e <ssd1306_I2C_WriteMulti+0x56>
dt[i+1] = data[i];
 8000f5c:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000f60:	463a      	mov	r2, r7
 8000f62:	6812      	ldr	r2, [r2, #0]
 8000f64:	441a      	add	r2, r3
 8000f66:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000f6a:	3301      	adds	r3, #1
 8000f6c:	7811      	ldrb	r1, [r2, #0]
 8000f6e:	f107 020c 	add.w	r2, r7, #12
 8000f72:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8000f74:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000f78:	3301      	adds	r3, #1
 8000f7a:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8000f7e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000f82:	b29b      	uxth	r3, r3
 8000f84:	1d3a      	adds	r2, r7, #4
 8000f86:	8812      	ldrh	r2, [r2, #0]
 8000f88:	429a      	cmp	r2, r3
 8000f8a:	d8e7      	bhi.n	8000f5c <ssd1306_I2C_WriteMulti+0x34>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8000f8c:	1dfb      	adds	r3, r7, #7
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	b299      	uxth	r1, r3
 8000f92:	1d3b      	adds	r3, r7, #4
 8000f94:	881b      	ldrh	r3, [r3, #0]
 8000f96:	3301      	adds	r3, #1
 8000f98:	b29b      	uxth	r3, r3
 8000f9a:	f107 020c 	add.w	r2, r7, #12
 8000f9e:	200a      	movs	r0, #10
 8000fa0:	9000      	str	r0, [sp, #0]
 8000fa2:	4804      	ldr	r0, [pc, #16]	; (8000fb4 <ssd1306_I2C_WriteMulti+0x8c>)
 8000fa4:	f001 fa3e 	bl	8002424 <HAL_I2C_Master_Transmit>
}
 8000fa8:	bf00      	nop
 8000faa:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd90      	pop	{r4, r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	2000050c 	.word	0x2000050c

08000fb8 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b086      	sub	sp, #24
 8000fbc:	af02      	add	r7, sp, #8
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	71fb      	strb	r3, [r7, #7]
 8000fc2:	460b      	mov	r3, r1
 8000fc4:	71bb      	strb	r3, [r7, #6]
 8000fc6:	4613      	mov	r3, r2
 8000fc8:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8000fca:	79bb      	ldrb	r3, [r7, #6]
 8000fcc:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8000fce:	797b      	ldrb	r3, [r7, #5]
 8000fd0:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8000fd2:	79fb      	ldrb	r3, [r7, #7]
 8000fd4:	b299      	uxth	r1, r3
 8000fd6:	f107 020c 	add.w	r2, r7, #12
 8000fda:	230a      	movs	r3, #10
 8000fdc:	9300      	str	r3, [sp, #0]
 8000fde:	2302      	movs	r3, #2
 8000fe0:	4803      	ldr	r0, [pc, #12]	; (8000ff0 <ssd1306_I2C_Write+0x38>)
 8000fe2:	f001 fa1f 	bl	8002424 <HAL_I2C_Master_Transmit>
}
 8000fe6:	bf00      	nop
 8000fe8:	3710      	adds	r7, #16
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	2000050c 	.word	0x2000050c

08000ff4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ffa:	4b0f      	ldr	r3, [pc, #60]	; (8001038 <HAL_MspInit+0x44>)
 8000ffc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ffe:	4a0e      	ldr	r2, [pc, #56]	; (8001038 <HAL_MspInit+0x44>)
 8001000:	f043 0301 	orr.w	r3, r3, #1
 8001004:	6613      	str	r3, [r2, #96]	; 0x60
 8001006:	4b0c      	ldr	r3, [pc, #48]	; (8001038 <HAL_MspInit+0x44>)
 8001008:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800100a:	f003 0301 	and.w	r3, r3, #1
 800100e:	607b      	str	r3, [r7, #4]
 8001010:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001012:	4b09      	ldr	r3, [pc, #36]	; (8001038 <HAL_MspInit+0x44>)
 8001014:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001016:	4a08      	ldr	r2, [pc, #32]	; (8001038 <HAL_MspInit+0x44>)
 8001018:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800101c:	6593      	str	r3, [r2, #88]	; 0x58
 800101e:	4b06      	ldr	r3, [pc, #24]	; (8001038 <HAL_MspInit+0x44>)
 8001020:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001022:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001026:	603b      	str	r3, [r7, #0]
 8001028:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800102a:	bf00      	nop
 800102c:	370c      	adds	r7, #12
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	40021000 	.word	0x40021000

0800103c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b08a      	sub	sp, #40	; 0x28
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001044:	f107 0314 	add.w	r3, r7, #20
 8001048:	2200      	movs	r2, #0
 800104a:	601a      	str	r2, [r3, #0]
 800104c:	605a      	str	r2, [r3, #4]
 800104e:	609a      	str	r2, [r3, #8]
 8001050:	60da      	str	r2, [r3, #12]
 8001052:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a17      	ldr	r2, [pc, #92]	; (80010b8 <HAL_I2C_MspInit+0x7c>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d127      	bne.n	80010ae <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800105e:	4b17      	ldr	r3, [pc, #92]	; (80010bc <HAL_I2C_MspInit+0x80>)
 8001060:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001062:	4a16      	ldr	r2, [pc, #88]	; (80010bc <HAL_I2C_MspInit+0x80>)
 8001064:	f043 0302 	orr.w	r3, r3, #2
 8001068:	64d3      	str	r3, [r2, #76]	; 0x4c
 800106a:	4b14      	ldr	r3, [pc, #80]	; (80010bc <HAL_I2C_MspInit+0x80>)
 800106c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800106e:	f003 0302 	and.w	r3, r3, #2
 8001072:	613b      	str	r3, [r7, #16]
 8001074:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001076:	23c0      	movs	r3, #192	; 0xc0
 8001078:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800107a:	2312      	movs	r3, #18
 800107c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800107e:	2301      	movs	r3, #1
 8001080:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001082:	2303      	movs	r3, #3
 8001084:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001086:	2304      	movs	r3, #4
 8001088:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800108a:	f107 0314 	add.w	r3, r7, #20
 800108e:	4619      	mov	r1, r3
 8001090:	480b      	ldr	r0, [pc, #44]	; (80010c0 <HAL_I2C_MspInit+0x84>)
 8001092:	f000 ff95 	bl	8001fc0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001096:	4b09      	ldr	r3, [pc, #36]	; (80010bc <HAL_I2C_MspInit+0x80>)
 8001098:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800109a:	4a08      	ldr	r2, [pc, #32]	; (80010bc <HAL_I2C_MspInit+0x80>)
 800109c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80010a0:	6593      	str	r3, [r2, #88]	; 0x58
 80010a2:	4b06      	ldr	r3, [pc, #24]	; (80010bc <HAL_I2C_MspInit+0x80>)
 80010a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010aa:	60fb      	str	r3, [r7, #12]
 80010ac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80010ae:	bf00      	nop
 80010b0:	3728      	adds	r7, #40	; 0x28
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	40005400 	.word	0x40005400
 80010bc:	40021000 	.word	0x40021000
 80010c0:	48000400 	.word	0x48000400

080010c4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b08a      	sub	sp, #40	; 0x28
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010cc:	f107 0314 	add.w	r3, r7, #20
 80010d0:	2200      	movs	r2, #0
 80010d2:	601a      	str	r2, [r3, #0]
 80010d4:	605a      	str	r2, [r3, #4]
 80010d6:	609a      	str	r2, [r3, #8]
 80010d8:	60da      	str	r2, [r3, #12]
 80010da:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a18      	ldr	r2, [pc, #96]	; (8001144 <HAL_SPI_MspInit+0x80>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d129      	bne.n	800113a <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80010e6:	4b18      	ldr	r3, [pc, #96]	; (8001148 <HAL_SPI_MspInit+0x84>)
 80010e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010ea:	4a17      	ldr	r2, [pc, #92]	; (8001148 <HAL_SPI_MspInit+0x84>)
 80010ec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80010f0:	6613      	str	r3, [r2, #96]	; 0x60
 80010f2:	4b15      	ldr	r3, [pc, #84]	; (8001148 <HAL_SPI_MspInit+0x84>)
 80010f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010fa:	613b      	str	r3, [r7, #16]
 80010fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010fe:	4b12      	ldr	r3, [pc, #72]	; (8001148 <HAL_SPI_MspInit+0x84>)
 8001100:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001102:	4a11      	ldr	r2, [pc, #68]	; (8001148 <HAL_SPI_MspInit+0x84>)
 8001104:	f043 0301 	orr.w	r3, r3, #1
 8001108:	64d3      	str	r3, [r2, #76]	; 0x4c
 800110a:	4b0f      	ldr	r3, [pc, #60]	; (8001148 <HAL_SPI_MspInit+0x84>)
 800110c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800110e:	f003 0301 	and.w	r3, r3, #1
 8001112:	60fb      	str	r3, [r7, #12]
 8001114:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA11     ------> SPI1_MISO
    PA12     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_12;
 8001116:	f641 0302 	movw	r3, #6146	; 0x1802
 800111a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800111c:	2302      	movs	r3, #2
 800111e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001120:	2300      	movs	r3, #0
 8001122:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001124:	2303      	movs	r3, #3
 8001126:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001128:	2305      	movs	r3, #5
 800112a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800112c:	f107 0314 	add.w	r3, r7, #20
 8001130:	4619      	mov	r1, r3
 8001132:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001136:	f000 ff43 	bl	8001fc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800113a:	bf00      	nop
 800113c:	3728      	adds	r7, #40	; 0x28
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	40013000 	.word	0x40013000
 8001148:	40021000 	.word	0x40021000

0800114c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b08a      	sub	sp, #40	; 0x28
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001154:	f107 0314 	add.w	r3, r7, #20
 8001158:	2200      	movs	r2, #0
 800115a:	601a      	str	r2, [r3, #0]
 800115c:	605a      	str	r2, [r3, #4]
 800115e:	609a      	str	r2, [r3, #8]
 8001160:	60da      	str	r2, [r3, #12]
 8001162:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a1c      	ldr	r2, [pc, #112]	; (80011dc <HAL_UART_MspInit+0x90>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d131      	bne.n	80011d2 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800116e:	4b1c      	ldr	r3, [pc, #112]	; (80011e0 <HAL_UART_MspInit+0x94>)
 8001170:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001172:	4a1b      	ldr	r2, [pc, #108]	; (80011e0 <HAL_UART_MspInit+0x94>)
 8001174:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001178:	6613      	str	r3, [r2, #96]	; 0x60
 800117a:	4b19      	ldr	r3, [pc, #100]	; (80011e0 <HAL_UART_MspInit+0x94>)
 800117c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800117e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001182:	613b      	str	r3, [r7, #16]
 8001184:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001186:	4b16      	ldr	r3, [pc, #88]	; (80011e0 <HAL_UART_MspInit+0x94>)
 8001188:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800118a:	4a15      	ldr	r2, [pc, #84]	; (80011e0 <HAL_UART_MspInit+0x94>)
 800118c:	f043 0301 	orr.w	r3, r3, #1
 8001190:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001192:	4b13      	ldr	r3, [pc, #76]	; (80011e0 <HAL_UART_MspInit+0x94>)
 8001194:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001196:	f003 0301 	and.w	r3, r3, #1
 800119a:	60fb      	str	r3, [r7, #12]
 800119c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800119e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80011a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a4:	2302      	movs	r3, #2
 80011a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a8:	2300      	movs	r3, #0
 80011aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ac:	2303      	movs	r3, #3
 80011ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80011b0:	2307      	movs	r3, #7
 80011b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011b4:	f107 0314 	add.w	r3, r7, #20
 80011b8:	4619      	mov	r1, r3
 80011ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011be:	f000 feff 	bl	8001fc0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 4, 0);
 80011c2:	2200      	movs	r2, #0
 80011c4:	2104      	movs	r1, #4
 80011c6:	2025      	movs	r0, #37	; 0x25
 80011c8:	f000 fe45 	bl	8001e56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80011cc:	2025      	movs	r0, #37	; 0x25
 80011ce:	f000 fe5e 	bl	8001e8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80011d2:	bf00      	nop
 80011d4:	3728      	adds	r7, #40	; 0x28
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	40013800 	.word	0x40013800
 80011e0:	40021000 	.word	0x40021000

080011e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011e8:	e7fe      	b.n	80011e8 <NMI_Handler+0x4>

080011ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011ea:	b480      	push	{r7}
 80011ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011ee:	e7fe      	b.n	80011ee <HardFault_Handler+0x4>

080011f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011f4:	e7fe      	b.n	80011f4 <MemManage_Handler+0x4>

080011f6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011f6:	b480      	push	{r7}
 80011f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011fa:	e7fe      	b.n	80011fa <BusFault_Handler+0x4>

080011fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001200:	e7fe      	b.n	8001200 <UsageFault_Handler+0x4>

08001202 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001202:	b480      	push	{r7}
 8001204:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001206:	bf00      	nop
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr

08001210 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001214:	bf00      	nop
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr

0800121e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800121e:	b480      	push	{r7}
 8001220:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001222:	bf00      	nop
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr

0800122c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001230:	f000 fcf2 	bl	8001c18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001234:	bf00      	nop
 8001236:	bd80      	pop	{r7, pc}

08001238 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800123c:	4802      	ldr	r0, [pc, #8]	; (8001248 <USART1_IRQHandler+0x10>)
 800123e:	f003 fd81 	bl	8004d44 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001242:	bf00      	nop
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	20000568 	.word	0x20000568

0800124c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b086      	sub	sp, #24
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001254:	4a14      	ldr	r2, [pc, #80]	; (80012a8 <_sbrk+0x5c>)
 8001256:	4b15      	ldr	r3, [pc, #84]	; (80012ac <_sbrk+0x60>)
 8001258:	1ad3      	subs	r3, r2, r3
 800125a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001260:	4b13      	ldr	r3, [pc, #76]	; (80012b0 <_sbrk+0x64>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d102      	bne.n	800126e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001268:	4b11      	ldr	r3, [pc, #68]	; (80012b0 <_sbrk+0x64>)
 800126a:	4a12      	ldr	r2, [pc, #72]	; (80012b4 <_sbrk+0x68>)
 800126c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800126e:	4b10      	ldr	r3, [pc, #64]	; (80012b0 <_sbrk+0x64>)
 8001270:	681a      	ldr	r2, [r3, #0]
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	4413      	add	r3, r2
 8001276:	693a      	ldr	r2, [r7, #16]
 8001278:	429a      	cmp	r2, r3
 800127a:	d207      	bcs.n	800128c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800127c:	f004 fcf2 	bl	8005c64 <__errno>
 8001280:	4603      	mov	r3, r0
 8001282:	220c      	movs	r2, #12
 8001284:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001286:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800128a:	e009      	b.n	80012a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800128c:	4b08      	ldr	r3, [pc, #32]	; (80012b0 <_sbrk+0x64>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001292:	4b07      	ldr	r3, [pc, #28]	; (80012b0 <_sbrk+0x64>)
 8001294:	681a      	ldr	r2, [r3, #0]
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	4413      	add	r3, r2
 800129a:	4a05      	ldr	r2, [pc, #20]	; (80012b0 <_sbrk+0x64>)
 800129c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800129e:	68fb      	ldr	r3, [r7, #12]
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	3718      	adds	r7, #24
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	2000a000 	.word	0x2000a000
 80012ac:	00000400 	.word	0x00000400
 80012b0:	200004c0 	.word	0x200004c0
 80012b4:	200006f8 	.word	0x200006f8

080012b8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80012bc:	4b15      	ldr	r3, [pc, #84]	; (8001314 <SystemInit+0x5c>)
 80012be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012c2:	4a14      	ldr	r2, [pc, #80]	; (8001314 <SystemInit+0x5c>)
 80012c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80012cc:	4b12      	ldr	r3, [pc, #72]	; (8001318 <SystemInit+0x60>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a11      	ldr	r2, [pc, #68]	; (8001318 <SystemInit+0x60>)
 80012d2:	f043 0301 	orr.w	r3, r3, #1
 80012d6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80012d8:	4b0f      	ldr	r3, [pc, #60]	; (8001318 <SystemInit+0x60>)
 80012da:	2200      	movs	r2, #0
 80012dc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80012de:	4b0e      	ldr	r3, [pc, #56]	; (8001318 <SystemInit+0x60>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4a0d      	ldr	r2, [pc, #52]	; (8001318 <SystemInit+0x60>)
 80012e4:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80012e8:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80012ec:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80012ee:	4b0a      	ldr	r3, [pc, #40]	; (8001318 <SystemInit+0x60>)
 80012f0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80012f4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80012f6:	4b08      	ldr	r3, [pc, #32]	; (8001318 <SystemInit+0x60>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4a07      	ldr	r2, [pc, #28]	; (8001318 <SystemInit+0x60>)
 80012fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001300:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001302:	4b05      	ldr	r3, [pc, #20]	; (8001318 <SystemInit+0x60>)
 8001304:	2200      	movs	r2, #0
 8001306:	619a      	str	r2, [r3, #24]
}
 8001308:	bf00      	nop
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop
 8001314:	e000ed00 	.word	0xe000ed00
 8001318:	40021000 	.word	0x40021000

0800131c <W25qxx_Spi>:
#else
#define	W25qxx_Delay(delay)		HAL_Delay(delay)
#endif
//###################################################################################################################
uint8_t	W25qxx_Spi(uint8_t	Data)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b086      	sub	sp, #24
 8001320:	af02      	add	r7, sp, #8
 8001322:	4603      	mov	r3, r0
 8001324:	71fb      	strb	r3, [r7, #7]
	uint8_t	ret;
	HAL_SPI_TransmitReceive(&_W25QXX_SPI,&Data,&ret,1,100);
 8001326:	f107 020f 	add.w	r2, r7, #15
 800132a:	1df9      	adds	r1, r7, #7
 800132c:	2364      	movs	r3, #100	; 0x64
 800132e:	9300      	str	r3, [sp, #0]
 8001330:	2301      	movs	r3, #1
 8001332:	4804      	ldr	r0, [pc, #16]	; (8001344 <W25qxx_Spi+0x28>)
 8001334:	f003 f815 	bl	8004362 <HAL_SPI_TransmitReceive>
	return ret;	
 8001338:	7bfb      	ldrb	r3, [r7, #15]
}
 800133a:	4618      	mov	r0, r3
 800133c:	3710      	adds	r7, #16
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	200005f0 	.word	0x200005f0

08001348 <W25qxx_ReadID>:
//###################################################################################################################
uint32_t W25qxx_ReadID(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b084      	sub	sp, #16
 800134c:	af00      	add	r7, sp, #0
  uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 800134e:	2300      	movs	r3, #0
 8001350:	60fb      	str	r3, [r7, #12]
 8001352:	2300      	movs	r3, #0
 8001354:	60bb      	str	r3, [r7, #8]
 8001356:	2300      	movs	r3, #0
 8001358:	607b      	str	r3, [r7, #4]
 800135a:	2300      	movs	r3, #0
 800135c:	603b      	str	r3, [r7, #0]
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 800135e:	2200      	movs	r2, #0
 8001360:	2104      	movs	r1, #4
 8001362:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001366:	f000 ffb5 	bl	80022d4 <HAL_GPIO_WritePin>
  W25qxx_Spi(0x9F);
 800136a:	209f      	movs	r0, #159	; 0x9f
 800136c:	f7ff ffd6 	bl	800131c <W25qxx_Spi>
  Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8001370:	20a5      	movs	r0, #165	; 0xa5
 8001372:	f7ff ffd3 	bl	800131c <W25qxx_Spi>
 8001376:	4603      	mov	r3, r0
 8001378:	60bb      	str	r3, [r7, #8]
  Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800137a:	20a5      	movs	r0, #165	; 0xa5
 800137c:	f7ff ffce 	bl	800131c <W25qxx_Spi>
 8001380:	4603      	mov	r3, r0
 8001382:	607b      	str	r3, [r7, #4]
  Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8001384:	20a5      	movs	r0, #165	; 0xa5
 8001386:	f7ff ffc9 	bl	800131c <W25qxx_Spi>
 800138a:	4603      	mov	r3, r0
 800138c:	603b      	str	r3, [r7, #0]
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 800138e:	2201      	movs	r2, #1
 8001390:	2104      	movs	r1, #4
 8001392:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001396:	f000 ff9d 	bl	80022d4 <HAL_GPIO_WritePin>
  Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 800139a:	68bb      	ldr	r3, [r7, #8]
 800139c:	041a      	lsls	r2, r3, #16
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	021b      	lsls	r3, r3, #8
 80013a2:	4313      	orrs	r3, r2
 80013a4:	683a      	ldr	r2, [r7, #0]
 80013a6:	4313      	orrs	r3, r2
 80013a8:	60fb      	str	r3, [r7, #12]
  return Temp;
 80013aa:	68fb      	ldr	r3, [r7, #12]
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	3710      	adds	r7, #16
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}

080013b4 <W25qxx_ReadUniqID>:
//###################################################################################################################
void W25qxx_ReadUniqID(void)
{
 80013b4:	b590      	push	{r4, r7, lr}
 80013b6:	b083      	sub	sp, #12
 80013b8:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 80013ba:	2200      	movs	r2, #0
 80013bc:	2104      	movs	r1, #4
 80013be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013c2:	f000 ff87 	bl	80022d4 <HAL_GPIO_WritePin>
  W25qxx_Spi(0x4B);
 80013c6:	204b      	movs	r0, #75	; 0x4b
 80013c8:	f7ff ffa8 	bl	800131c <W25qxx_Spi>
	for(uint8_t	i=0;i<4;i++)
 80013cc:	2300      	movs	r3, #0
 80013ce:	71fb      	strb	r3, [r7, #7]
 80013d0:	e005      	b.n	80013de <W25qxx_ReadUniqID+0x2a>
		W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80013d2:	20a5      	movs	r0, #165	; 0xa5
 80013d4:	f7ff ffa2 	bl	800131c <W25qxx_Spi>
	for(uint8_t	i=0;i<4;i++)
 80013d8:	79fb      	ldrb	r3, [r7, #7]
 80013da:	3301      	adds	r3, #1
 80013dc:	71fb      	strb	r3, [r7, #7]
 80013de:	79fb      	ldrb	r3, [r7, #7]
 80013e0:	2b03      	cmp	r3, #3
 80013e2:	d9f6      	bls.n	80013d2 <W25qxx_ReadUniqID+0x1e>
	for(uint8_t	i=0;i<8;i++)
 80013e4:	2300      	movs	r3, #0
 80013e6:	71bb      	strb	r3, [r7, #6]
 80013e8:	e00b      	b.n	8001402 <W25qxx_ReadUniqID+0x4e>
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80013ea:	79bc      	ldrb	r4, [r7, #6]
 80013ec:	20a5      	movs	r0, #165	; 0xa5
 80013ee:	f7ff ff95 	bl	800131c <W25qxx_Spi>
 80013f2:	4603      	mov	r3, r0
 80013f4:	461a      	mov	r2, r3
 80013f6:	4b09      	ldr	r3, [pc, #36]	; (800141c <W25qxx_ReadUniqID+0x68>)
 80013f8:	4423      	add	r3, r4
 80013fa:	705a      	strb	r2, [r3, #1]
	for(uint8_t	i=0;i<8;i++)
 80013fc:	79bb      	ldrb	r3, [r7, #6]
 80013fe:	3301      	adds	r3, #1
 8001400:	71bb      	strb	r3, [r7, #6]
 8001402:	79bb      	ldrb	r3, [r7, #6]
 8001404:	2b07      	cmp	r3, #7
 8001406:	d9f0      	bls.n	80013ea <W25qxx_ReadUniqID+0x36>
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8001408:	2201      	movs	r2, #1
 800140a:	2104      	movs	r1, #4
 800140c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001410:	f000 ff60 	bl	80022d4 <HAL_GPIO_WritePin>
}
 8001414:	bf00      	nop
 8001416:	370c      	adds	r7, #12
 8001418:	46bd      	mov	sp, r7
 800141a:	bd90      	pop	{r4, r7, pc}
 800141c:	200006bc 	.word	0x200006bc

08001420 <W25qxx_WriteEnable>:
//###################################################################################################################
void W25qxx_WriteEnable(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 8001424:	2200      	movs	r2, #0
 8001426:	2104      	movs	r1, #4
 8001428:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800142c:	f000 ff52 	bl	80022d4 <HAL_GPIO_WritePin>
  W25qxx_Spi(0x06);
 8001430:	2006      	movs	r0, #6
 8001432:	f7ff ff73 	bl	800131c <W25qxx_Spi>
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8001436:	2201      	movs	r2, #1
 8001438:	2104      	movs	r1, #4
 800143a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800143e:	f000 ff49 	bl	80022d4 <HAL_GPIO_WritePin>
	W25qxx_Delay(1);
 8001442:	2001      	movs	r0, #1
 8001444:	f000 fc08 	bl	8001c58 <HAL_Delay>
}
 8001448:	bf00      	nop
 800144a:	bd80      	pop	{r7, pc}

0800144c <W25qxx_ReadStatusRegister>:
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
	W25qxx_Delay(1);
}
//###################################################################################################################
uint8_t W25qxx_ReadStatusRegister(uint8_t	SelectStatusRegister_1_2_3)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b084      	sub	sp, #16
 8001450:	af00      	add	r7, sp, #0
 8001452:	4603      	mov	r3, r0
 8001454:	71fb      	strb	r3, [r7, #7]
	uint8_t	status=0;
 8001456:	2300      	movs	r3, #0
 8001458:	73fb      	strb	r3, [r7, #15]
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 800145a:	2200      	movs	r2, #0
 800145c:	2104      	movs	r1, #4
 800145e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001462:	f000 ff37 	bl	80022d4 <HAL_GPIO_WritePin>
	if(SelectStatusRegister_1_2_3==1)
 8001466:	79fb      	ldrb	r3, [r7, #7]
 8001468:	2b01      	cmp	r3, #1
 800146a:	d10c      	bne.n	8001486 <W25qxx_ReadStatusRegister+0x3a>
	{
		W25qxx_Spi(0x05);
 800146c:	2005      	movs	r0, #5
 800146e:	f7ff ff55 	bl	800131c <W25qxx_Spi>
		status=W25qxx_Spi(W25QXX_DUMMY_BYTE);	
 8001472:	20a5      	movs	r0, #165	; 0xa5
 8001474:	f7ff ff52 	bl	800131c <W25qxx_Spi>
 8001478:	4603      	mov	r3, r0
 800147a:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister1 = status;
 800147c:	4a15      	ldr	r2, [pc, #84]	; (80014d4 <W25qxx_ReadStatusRegister+0x88>)
 800147e:	7bfb      	ldrb	r3, [r7, #15]
 8001480:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 8001484:	e01b      	b.n	80014be <W25qxx_ReadStatusRegister+0x72>
	}
	else if(SelectStatusRegister_1_2_3==2)
 8001486:	79fb      	ldrb	r3, [r7, #7]
 8001488:	2b02      	cmp	r3, #2
 800148a:	d10c      	bne.n	80014a6 <W25qxx_ReadStatusRegister+0x5a>
	{
		W25qxx_Spi(0x35);
 800148c:	2035      	movs	r0, #53	; 0x35
 800148e:	f7ff ff45 	bl	800131c <W25qxx_Spi>
		status=W25qxx_Spi(W25QXX_DUMMY_BYTE);	
 8001492:	20a5      	movs	r0, #165	; 0xa5
 8001494:	f7ff ff42 	bl	800131c <W25qxx_Spi>
 8001498:	4603      	mov	r3, r0
 800149a:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister2 = status;
 800149c:	4a0d      	ldr	r2, [pc, #52]	; (80014d4 <W25qxx_ReadStatusRegister+0x88>)
 800149e:	7bfb      	ldrb	r3, [r7, #15]
 80014a0:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
 80014a4:	e00b      	b.n	80014be <W25qxx_ReadStatusRegister+0x72>
	}
	else
	{
		W25qxx_Spi(0x15);
 80014a6:	2015      	movs	r0, #21
 80014a8:	f7ff ff38 	bl	800131c <W25qxx_Spi>
		status=W25qxx_Spi(W25QXX_DUMMY_BYTE);	
 80014ac:	20a5      	movs	r0, #165	; 0xa5
 80014ae:	f7ff ff35 	bl	800131c <W25qxx_Spi>
 80014b2:	4603      	mov	r3, r0
 80014b4:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister3 = status;
 80014b6:	4a07      	ldr	r2, [pc, #28]	; (80014d4 <W25qxx_ReadStatusRegister+0x88>)
 80014b8:	7bfb      	ldrb	r3, [r7, #15]
 80014ba:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
	}	
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 80014be:	2201      	movs	r2, #1
 80014c0:	2104      	movs	r1, #4
 80014c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014c6:	f000 ff05 	bl	80022d4 <HAL_GPIO_WritePin>
	return status;
 80014ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	3710      	adds	r7, #16
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	200006bc 	.word	0x200006bc

080014d8 <W25qxx_WaitForWriteEnd>:
	W25qxx_Spi(Data);
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
}
//###################################################################################################################
void W25qxx_WaitForWriteEnd(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
	W25qxx_Delay(1);
 80014dc:	2001      	movs	r0, #1
 80014de:	f000 fbbb 	bl	8001c58 <HAL_Delay>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 80014e2:	2200      	movs	r2, #0
 80014e4:	2104      	movs	r1, #4
 80014e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014ea:	f000 fef3 	bl	80022d4 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x05);
 80014ee:	2005      	movs	r0, #5
 80014f0:	f7ff ff14 	bl	800131c <W25qxx_Spi>
  do
  {
    w25qxx.StatusRegister1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80014f4:	20a5      	movs	r0, #165	; 0xa5
 80014f6:	f7ff ff11 	bl	800131c <W25qxx_Spi>
 80014fa:	4603      	mov	r3, r0
 80014fc:	461a      	mov	r2, r3
 80014fe:	4b0a      	ldr	r3, [pc, #40]	; (8001528 <W25qxx_WaitForWriteEnd+0x50>)
 8001500:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		W25qxx_Delay(1);
 8001504:	2001      	movs	r0, #1
 8001506:	f000 fba7 	bl	8001c58 <HAL_Delay>
  }
  while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
 800150a:	4b07      	ldr	r3, [pc, #28]	; (8001528 <W25qxx_WaitForWriteEnd+0x50>)
 800150c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001510:	f003 0301 	and.w	r3, r3, #1
 8001514:	2b00      	cmp	r3, #0
 8001516:	d1ed      	bne.n	80014f4 <W25qxx_WaitForWriteEnd+0x1c>
 HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8001518:	2201      	movs	r2, #1
 800151a:	2104      	movs	r1, #4
 800151c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001520:	f000 fed8 	bl	80022d4 <HAL_GPIO_WritePin>
}
 8001524:	bf00      	nop
 8001526:	bd80      	pop	{r7, pc}
 8001528:	200006bc 	.word	0x200006bc

0800152c <W25qxx_Init>:
//###################################################################################################################
bool	W25qxx_Init(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
  w25qxx.Lock=1;	
 8001532:	4b65      	ldr	r3, [pc, #404]	; (80016c8 <W25qxx_Init+0x19c>)
 8001534:	2201      	movs	r2, #1
 8001536:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  while(HAL_GetTick()<100)
 800153a:	e002      	b.n	8001542 <W25qxx_Init+0x16>
    W25qxx_Delay(1);
 800153c:	2001      	movs	r0, #1
 800153e:	f000 fb8b 	bl	8001c58 <HAL_Delay>
  while(HAL_GetTick()<100)
 8001542:	f000 fb7d 	bl	8001c40 <HAL_GetTick>
 8001546:	4603      	mov	r3, r0
 8001548:	2b63      	cmp	r3, #99	; 0x63
 800154a:	d9f7      	bls.n	800153c <W25qxx_Init+0x10>
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 800154c:	2201      	movs	r2, #1
 800154e:	2104      	movs	r1, #4
 8001550:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001554:	f000 febe 	bl	80022d4 <HAL_GPIO_WritePin>
  W25qxx_Delay(100);
 8001558:	2064      	movs	r0, #100	; 0x64
 800155a:	f000 fb7d 	bl	8001c58 <HAL_Delay>
  uint32_t	id;
  #if (_W25QXX_DEBUG==1)
  printf("w25qxx Init Begin...\r\n");
  #endif
  id=W25qxx_ReadID();
 800155e:	f7ff fef3 	bl	8001348 <W25qxx_ReadID>
 8001562:	6078      	str	r0, [r7, #4]
	
  #if (_W25QXX_DEBUG==1)
  printf("w25qxx ID:0x%X\r\n", id);
  #endif
  switch(id & 0x000000FF)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	b2db      	uxtb	r3, r3
 8001568:	3b11      	subs	r3, #17
 800156a:	2b0f      	cmp	r3, #15
 800156c:	d86b      	bhi.n	8001646 <W25qxx_Init+0x11a>
 800156e:	a201      	add	r2, pc, #4	; (adr r2, 8001574 <W25qxx_Init+0x48>)
 8001570:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001574:	08001639 	.word	0x08001639
 8001578:	0800162b 	.word	0x0800162b
 800157c:	0800161d 	.word	0x0800161d
 8001580:	0800160f 	.word	0x0800160f
 8001584:	08001601 	.word	0x08001601
 8001588:	080015f3 	.word	0x080015f3
 800158c:	080015e5 	.word	0x080015e5
 8001590:	080015d5 	.word	0x080015d5
 8001594:	080015c5 	.word	0x080015c5
 8001598:	08001647 	.word	0x08001647
 800159c:	08001647 	.word	0x08001647
 80015a0:	08001647 	.word	0x08001647
 80015a4:	08001647 	.word	0x08001647
 80015a8:	08001647 	.word	0x08001647
 80015ac:	08001647 	.word	0x08001647
 80015b0:	080015b5 	.word	0x080015b5
  {
		case 0x20:	// 	w25q512
			w25qxx.ID=W25Q512;
 80015b4:	4b44      	ldr	r3, [pc, #272]	; (80016c8 <W25qxx_Init+0x19c>)
 80015b6:	220a      	movs	r2, #10
 80015b8:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=1024;
 80015ba:	4b43      	ldr	r3, [pc, #268]	; (80016c8 <W25qxx_Init+0x19c>)
 80015bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015c0:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q512\r\n");
			#endif
		break;
 80015c2:	e046      	b.n	8001652 <W25qxx_Init+0x126>
		case 0x19:	// 	w25q256
			w25qxx.ID=W25Q256;
 80015c4:	4b40      	ldr	r3, [pc, #256]	; (80016c8 <W25qxx_Init+0x19c>)
 80015c6:	2209      	movs	r2, #9
 80015c8:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=512;
 80015ca:	4b3f      	ldr	r3, [pc, #252]	; (80016c8 <W25qxx_Init+0x19c>)
 80015cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015d0:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q256\r\n");
			#endif
		break;
 80015d2:	e03e      	b.n	8001652 <W25qxx_Init+0x126>
		case 0x18:	// 	w25q128
			w25qxx.ID=W25Q128;
 80015d4:	4b3c      	ldr	r3, [pc, #240]	; (80016c8 <W25qxx_Init+0x19c>)
 80015d6:	2208      	movs	r2, #8
 80015d8:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=256;
 80015da:	4b3b      	ldr	r3, [pc, #236]	; (80016c8 <W25qxx_Init+0x19c>)
 80015dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015e0:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q128\r\n");
			#endif
		break;
 80015e2:	e036      	b.n	8001652 <W25qxx_Init+0x126>
		case 0x17:	//	w25q64
			w25qxx.ID=W25Q64;
 80015e4:	4b38      	ldr	r3, [pc, #224]	; (80016c8 <W25qxx_Init+0x19c>)
 80015e6:	2207      	movs	r2, #7
 80015e8:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=128;
 80015ea:	4b37      	ldr	r3, [pc, #220]	; (80016c8 <W25qxx_Init+0x19c>)
 80015ec:	2280      	movs	r2, #128	; 0x80
 80015ee:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q64\r\n");
			#endif
		break;
 80015f0:	e02f      	b.n	8001652 <W25qxx_Init+0x126>
		case 0x16:	//	w25q32
			w25qxx.ID=W25Q32;
 80015f2:	4b35      	ldr	r3, [pc, #212]	; (80016c8 <W25qxx_Init+0x19c>)
 80015f4:	2206      	movs	r2, #6
 80015f6:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=64;
 80015f8:	4b33      	ldr	r3, [pc, #204]	; (80016c8 <W25qxx_Init+0x19c>)
 80015fa:	2240      	movs	r2, #64	; 0x40
 80015fc:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q32\r\n");
			#endif
		break;
 80015fe:	e028      	b.n	8001652 <W25qxx_Init+0x126>
		case 0x15:	//	w25q16
			w25qxx.ID=W25Q16;
 8001600:	4b31      	ldr	r3, [pc, #196]	; (80016c8 <W25qxx_Init+0x19c>)
 8001602:	2205      	movs	r2, #5
 8001604:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=32;
 8001606:	4b30      	ldr	r3, [pc, #192]	; (80016c8 <W25qxx_Init+0x19c>)
 8001608:	2220      	movs	r2, #32
 800160a:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q16\r\n");
			#endif
		break;
 800160c:	e021      	b.n	8001652 <W25qxx_Init+0x126>
		case 0x14:	//	w25q80
			w25qxx.ID=W25Q80;
 800160e:	4b2e      	ldr	r3, [pc, #184]	; (80016c8 <W25qxx_Init+0x19c>)
 8001610:	2204      	movs	r2, #4
 8001612:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=16;
 8001614:	4b2c      	ldr	r3, [pc, #176]	; (80016c8 <W25qxx_Init+0x19c>)
 8001616:	2210      	movs	r2, #16
 8001618:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q80\r\n");
			#endif
		break;
 800161a:	e01a      	b.n	8001652 <W25qxx_Init+0x126>
		case 0x13:	//	w25q40
			w25qxx.ID=W25Q40;
 800161c:	4b2a      	ldr	r3, [pc, #168]	; (80016c8 <W25qxx_Init+0x19c>)
 800161e:	2203      	movs	r2, #3
 8001620:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=8;
 8001622:	4b29      	ldr	r3, [pc, #164]	; (80016c8 <W25qxx_Init+0x19c>)
 8001624:	2208      	movs	r2, #8
 8001626:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q40\r\n");
			#endif
		break;
 8001628:	e013      	b.n	8001652 <W25qxx_Init+0x126>
		case 0x12:	//	w25q20
			w25qxx.ID=W25Q20;
 800162a:	4b27      	ldr	r3, [pc, #156]	; (80016c8 <W25qxx_Init+0x19c>)
 800162c:	2202      	movs	r2, #2
 800162e:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=4;
 8001630:	4b25      	ldr	r3, [pc, #148]	; (80016c8 <W25qxx_Init+0x19c>)
 8001632:	2204      	movs	r2, #4
 8001634:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q20\r\n");
			#endif
		break;
 8001636:	e00c      	b.n	8001652 <W25qxx_Init+0x126>
		case 0x11:	//	w25q10
			w25qxx.ID=W25Q10;
 8001638:	4b23      	ldr	r3, [pc, #140]	; (80016c8 <W25qxx_Init+0x19c>)
 800163a:	2201      	movs	r2, #1
 800163c:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=2;
 800163e:	4b22      	ldr	r3, [pc, #136]	; (80016c8 <W25qxx_Init+0x19c>)
 8001640:	2202      	movs	r2, #2
 8001642:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q10\r\n");
			#endif
		break;
 8001644:	e005      	b.n	8001652 <W25qxx_Init+0x126>
		default:
				#if (_W25QXX_DEBUG==1)
				printf("w25qxx Unknown ID\r\n");
				#endif
			w25qxx.Lock=0;	
 8001646:	4b20      	ldr	r3, [pc, #128]	; (80016c8 <W25qxx_Init+0x19c>)
 8001648:	2200      	movs	r2, #0
 800164a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			return false;
 800164e:	2300      	movs	r3, #0
 8001650:	e036      	b.n	80016c0 <W25qxx_Init+0x194>
				
	}		
	w25qxx.PageSize=256;
 8001652:	4b1d      	ldr	r3, [pc, #116]	; (80016c8 <W25qxx_Init+0x19c>)
 8001654:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001658:	815a      	strh	r2, [r3, #10]
	w25qxx.SectorSize=0x1000;
 800165a:	4b1b      	ldr	r3, [pc, #108]	; (80016c8 <W25qxx_Init+0x19c>)
 800165c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001660:	611a      	str	r2, [r3, #16]
	w25qxx.SectorCount=w25qxx.BlockCount*16;
 8001662:	4b19      	ldr	r3, [pc, #100]	; (80016c8 <W25qxx_Init+0x19c>)
 8001664:	69db      	ldr	r3, [r3, #28]
 8001666:	011b      	lsls	r3, r3, #4
 8001668:	4a17      	ldr	r2, [pc, #92]	; (80016c8 <W25qxx_Init+0x19c>)
 800166a:	6153      	str	r3, [r2, #20]
	w25qxx.PageCount=(w25qxx.SectorCount*w25qxx.SectorSize)/w25qxx.PageSize;
 800166c:	4b16      	ldr	r3, [pc, #88]	; (80016c8 <W25qxx_Init+0x19c>)
 800166e:	695b      	ldr	r3, [r3, #20]
 8001670:	4a15      	ldr	r2, [pc, #84]	; (80016c8 <W25qxx_Init+0x19c>)
 8001672:	6912      	ldr	r2, [r2, #16]
 8001674:	fb02 f303 	mul.w	r3, r2, r3
 8001678:	4a13      	ldr	r2, [pc, #76]	; (80016c8 <W25qxx_Init+0x19c>)
 800167a:	8952      	ldrh	r2, [r2, #10]
 800167c:	fbb3 f3f2 	udiv	r3, r3, r2
 8001680:	4a11      	ldr	r2, [pc, #68]	; (80016c8 <W25qxx_Init+0x19c>)
 8001682:	60d3      	str	r3, [r2, #12]
	w25qxx.BlockSize=w25qxx.SectorSize*16;
 8001684:	4b10      	ldr	r3, [pc, #64]	; (80016c8 <W25qxx_Init+0x19c>)
 8001686:	691b      	ldr	r3, [r3, #16]
 8001688:	011b      	lsls	r3, r3, #4
 800168a:	4a0f      	ldr	r2, [pc, #60]	; (80016c8 <W25qxx_Init+0x19c>)
 800168c:	6193      	str	r3, [r2, #24]
	w25qxx.CapacityInKiloByte=(w25qxx.SectorCount*w25qxx.SectorSize)/1024;
 800168e:	4b0e      	ldr	r3, [pc, #56]	; (80016c8 <W25qxx_Init+0x19c>)
 8001690:	695b      	ldr	r3, [r3, #20]
 8001692:	4a0d      	ldr	r2, [pc, #52]	; (80016c8 <W25qxx_Init+0x19c>)
 8001694:	6912      	ldr	r2, [r2, #16]
 8001696:	fb02 f303 	mul.w	r3, r2, r3
 800169a:	0a9b      	lsrs	r3, r3, #10
 800169c:	4a0a      	ldr	r2, [pc, #40]	; (80016c8 <W25qxx_Init+0x19c>)
 800169e:	6213      	str	r3, [r2, #32]
	W25qxx_ReadUniqID();
 80016a0:	f7ff fe88 	bl	80013b4 <W25qxx_ReadUniqID>
	W25qxx_ReadStatusRegister(1);
 80016a4:	2001      	movs	r0, #1
 80016a6:	f7ff fed1 	bl	800144c <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(2);
 80016aa:	2002      	movs	r0, #2
 80016ac:	f7ff fece 	bl	800144c <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(3);
 80016b0:	2003      	movs	r0, #3
 80016b2:	f7ff fecb 	bl	800144c <W25qxx_ReadStatusRegister>
	printf("w25qxx Block Size: %d Bytes\r\n",w25qxx.BlockSize);
	printf("w25qxx Block Count: %d\r\n",w25qxx.BlockCount);
	printf("w25qxx Capacity: %d KiloBytes\r\n",w25qxx.CapacityInKiloByte);
	printf("w25qxx Init Done\r\n");
	#endif
	w25qxx.Lock=0;	
 80016b6:	4b04      	ldr	r3, [pc, #16]	; (80016c8 <W25qxx_Init+0x19c>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return true;
 80016be:	2301      	movs	r3, #1
}	
 80016c0:	4618      	mov	r0, r3
 80016c2:	3708      	adds	r7, #8
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	200006bc 	.word	0x200006bc

080016cc <W25qxx_EraseSector>:
	W25qxx_Delay(10);
	w25qxx.Lock=0;	
}
//###################################################################################################################
void W25qxx_EraseSector(uint32_t SectorAddr)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
	while(w25qxx.Lock==1)
 80016d4:	e002      	b.n	80016dc <W25qxx_EraseSector+0x10>
		W25qxx_Delay(1);
 80016d6:	2001      	movs	r0, #1
 80016d8:	f000 fabe 	bl	8001c58 <HAL_Delay>
	while(w25qxx.Lock==1)
 80016dc:	4b24      	ldr	r3, [pc, #144]	; (8001770 <W25qxx_EraseSector+0xa4>)
 80016de:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80016e2:	2b01      	cmp	r3, #1
 80016e4:	d0f7      	beq.n	80016d6 <W25qxx_EraseSector+0xa>
	w25qxx.Lock=1;	
 80016e6:	4b22      	ldr	r3, [pc, #136]	; (8001770 <W25qxx_EraseSector+0xa4>)
 80016e8:	2201      	movs	r2, #1
 80016ea:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	#if (_W25QXX_DEBUG==1)
	uint32_t	StartTime=HAL_GetTick();	
	printf("w25qxx EraseSector %d Begin...\r\n",SectorAddr);
	#endif
	W25qxx_WaitForWriteEnd();
 80016ee:	f7ff fef3 	bl	80014d8 <W25qxx_WaitForWriteEnd>
	SectorAddr = SectorAddr * w25qxx.SectorSize;
 80016f2:	4b1f      	ldr	r3, [pc, #124]	; (8001770 <W25qxx_EraseSector+0xa4>)
 80016f4:	691a      	ldr	r2, [r3, #16]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	fb02 f303 	mul.w	r3, r2, r3
 80016fc:	607b      	str	r3, [r7, #4]
  W25qxx_WriteEnable();
 80016fe:	f7ff fe8f 	bl	8001420 <W25qxx_WriteEnable>
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 8001702:	2200      	movs	r2, #0
 8001704:	2104      	movs	r1, #4
 8001706:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800170a:	f000 fde3 	bl	80022d4 <HAL_GPIO_WritePin>
  W25qxx_Spi(0x20);
 800170e:	2020      	movs	r0, #32
 8001710:	f7ff fe04 	bl	800131c <W25qxx_Spi>
	if(w25qxx.ID>=W25Q256)
 8001714:	4b16      	ldr	r3, [pc, #88]	; (8001770 <W25qxx_EraseSector+0xa4>)
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	2b08      	cmp	r3, #8
 800171a:	d905      	bls.n	8001728 <W25qxx_EraseSector+0x5c>
		W25qxx_Spi((SectorAddr & 0xFF000000) >> 24);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	0e1b      	lsrs	r3, r3, #24
 8001720:	b2db      	uxtb	r3, r3
 8001722:	4618      	mov	r0, r3
 8001724:	f7ff fdfa 	bl	800131c <W25qxx_Spi>
  W25qxx_Spi((SectorAddr & 0xFF0000) >> 16);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	0c1b      	lsrs	r3, r3, #16
 800172c:	b2db      	uxtb	r3, r3
 800172e:	4618      	mov	r0, r3
 8001730:	f7ff fdf4 	bl	800131c <W25qxx_Spi>
  W25qxx_Spi((SectorAddr & 0xFF00) >> 8);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	0a1b      	lsrs	r3, r3, #8
 8001738:	b2db      	uxtb	r3, r3
 800173a:	4618      	mov	r0, r3
 800173c:	f7ff fdee 	bl	800131c <W25qxx_Spi>
  W25qxx_Spi(SectorAddr & 0xFF);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	b2db      	uxtb	r3, r3
 8001744:	4618      	mov	r0, r3
 8001746:	f7ff fde9 	bl	800131c <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 800174a:	2201      	movs	r2, #1
 800174c:	2104      	movs	r1, #4
 800174e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001752:	f000 fdbf 	bl	80022d4 <HAL_GPIO_WritePin>
  W25qxx_WaitForWriteEnd();
 8001756:	f7ff febf 	bl	80014d8 <W25qxx_WaitForWriteEnd>
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx EraseSector done after %d ms\r\n",HAL_GetTick()-StartTime);
	#endif
	W25qxx_Delay(1);
 800175a:	2001      	movs	r0, #1
 800175c:	f000 fa7c 	bl	8001c58 <HAL_Delay>
	w25qxx.Lock=0;
 8001760:	4b03      	ldr	r3, [pc, #12]	; (8001770 <W25qxx_EraseSector+0xa4>)
 8001762:	2200      	movs	r2, #0
 8001764:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8001768:	bf00      	nop
 800176a:	3708      	adds	r7, #8
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}
 8001770:	200006bc 	.word	0x200006bc

08001774 <W25qxx_SectorToPage>:
{
	return ((SectorAddress*w25qxx.SectorSize)/w25qxx.BlockSize);
}
//###################################################################################################################
uint32_t	W25qxx_SectorToPage(uint32_t	SectorAddress)
{
 8001774:	b480      	push	{r7}
 8001776:	b083      	sub	sp, #12
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
	return (SectorAddress*w25qxx.SectorSize)/w25qxx.PageSize;
 800177c:	4b07      	ldr	r3, [pc, #28]	; (800179c <W25qxx_SectorToPage+0x28>)
 800177e:	691b      	ldr	r3, [r3, #16]
 8001780:	687a      	ldr	r2, [r7, #4]
 8001782:	fb02 f303 	mul.w	r3, r2, r3
 8001786:	4a05      	ldr	r2, [pc, #20]	; (800179c <W25qxx_SectorToPage+0x28>)
 8001788:	8952      	ldrh	r2, [r2, #10]
 800178a:	fbb3 f3f2 	udiv	r3, r3, r2
}
 800178e:	4618      	mov	r0, r3
 8001790:	370c      	adds	r7, #12
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr
 800179a:	bf00      	nop
 800179c:	200006bc 	.word	0x200006bc

080017a0 <W25qxx_WritePage>:
	#endif
	w25qxx.Lock=0;
}
//###################################################################################################################
void 	W25qxx_WritePage(uint8_t *pBuffer	,uint32_t Page_Address,uint32_t OffsetInByte,uint32_t NumByteToWrite_up_to_PageSize)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b084      	sub	sp, #16
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	60f8      	str	r0, [r7, #12]
 80017a8:	60b9      	str	r1, [r7, #8]
 80017aa:	607a      	str	r2, [r7, #4]
 80017ac:	603b      	str	r3, [r7, #0]
	while(w25qxx.Lock==1)
 80017ae:	e002      	b.n	80017b6 <W25qxx_WritePage+0x16>
		W25qxx_Delay(1);
 80017b0:	2001      	movs	r0, #1
 80017b2:	f000 fa51 	bl	8001c58 <HAL_Delay>
	while(w25qxx.Lock==1)
 80017b6:	4b38      	ldr	r3, [pc, #224]	; (8001898 <W25qxx_WritePage+0xf8>)
 80017b8:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80017bc:	2b01      	cmp	r3, #1
 80017be:	d0f7      	beq.n	80017b0 <W25qxx_WritePage+0x10>
	w25qxx.Lock=1;
 80017c0:	4b35      	ldr	r3, [pc, #212]	; (8001898 <W25qxx_WritePage+0xf8>)
 80017c2:	2201      	movs	r2, #1
 80017c4:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if(((NumByteToWrite_up_to_PageSize+OffsetInByte)>w25qxx.PageSize)||(NumByteToWrite_up_to_PageSize==0))
 80017c8:	683a      	ldr	r2, [r7, #0]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	4413      	add	r3, r2
 80017ce:	4a32      	ldr	r2, [pc, #200]	; (8001898 <W25qxx_WritePage+0xf8>)
 80017d0:	8952      	ldrh	r2, [r2, #10]
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d802      	bhi.n	80017dc <W25qxx_WritePage+0x3c>
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d105      	bne.n	80017e8 <W25qxx_WritePage+0x48>
		NumByteToWrite_up_to_PageSize=w25qxx.PageSize-OffsetInByte;
 80017dc:	4b2e      	ldr	r3, [pc, #184]	; (8001898 <W25qxx_WritePage+0xf8>)
 80017de:	895b      	ldrh	r3, [r3, #10]
 80017e0:	461a      	mov	r2, r3
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	603b      	str	r3, [r7, #0]
	if((OffsetInByte+NumByteToWrite_up_to_PageSize) > w25qxx.PageSize)
 80017e8:	687a      	ldr	r2, [r7, #4]
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	4413      	add	r3, r2
 80017ee:	4a2a      	ldr	r2, [pc, #168]	; (8001898 <W25qxx_WritePage+0xf8>)
 80017f0:	8952      	ldrh	r2, [r2, #10]
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d905      	bls.n	8001802 <W25qxx_WritePage+0x62>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize-OffsetInByte;
 80017f6:	4b28      	ldr	r3, [pc, #160]	; (8001898 <W25qxx_WritePage+0xf8>)
 80017f8:	895b      	ldrh	r3, [r3, #10]
 80017fa:	461a      	mov	r2, r3
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	1ad3      	subs	r3, r2, r3
 8001800:	603b      	str	r3, [r7, #0]
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx WritePage:%d, Offset:%d ,Writes %d Bytes, begin...\r\n",Page_Address,OffsetInByte,NumByteToWrite_up_to_PageSize);
	W25qxx_Delay(100);
	uint32_t	StartTime=HAL_GetTick();
	#endif	
	W25qxx_WaitForWriteEnd();
 8001802:	f7ff fe69 	bl	80014d8 <W25qxx_WaitForWriteEnd>
  W25qxx_WriteEnable();
 8001806:	f7ff fe0b 	bl	8001420 <W25qxx_WriteEnable>
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 800180a:	2200      	movs	r2, #0
 800180c:	2104      	movs	r1, #4
 800180e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001812:	f000 fd5f 	bl	80022d4 <HAL_GPIO_WritePin>
  W25qxx_Spi(0x02);
 8001816:	2002      	movs	r0, #2
 8001818:	f7ff fd80 	bl	800131c <W25qxx_Spi>
	Page_Address = (Page_Address*w25qxx.PageSize)+OffsetInByte;	
 800181c:	4b1e      	ldr	r3, [pc, #120]	; (8001898 <W25qxx_WritePage+0xf8>)
 800181e:	895b      	ldrh	r3, [r3, #10]
 8001820:	461a      	mov	r2, r3
 8001822:	68bb      	ldr	r3, [r7, #8]
 8001824:	fb03 f302 	mul.w	r3, r3, r2
 8001828:	687a      	ldr	r2, [r7, #4]
 800182a:	4413      	add	r3, r2
 800182c:	60bb      	str	r3, [r7, #8]
	if(w25qxx.ID>=W25Q256)
 800182e:	4b1a      	ldr	r3, [pc, #104]	; (8001898 <W25qxx_WritePage+0xf8>)
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	2b08      	cmp	r3, #8
 8001834:	d905      	bls.n	8001842 <W25qxx_WritePage+0xa2>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 8001836:	68bb      	ldr	r3, [r7, #8]
 8001838:	0e1b      	lsrs	r3, r3, #24
 800183a:	b2db      	uxtb	r3, r3
 800183c:	4618      	mov	r0, r3
 800183e:	f7ff fd6d 	bl	800131c <W25qxx_Spi>
  W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 8001842:	68bb      	ldr	r3, [r7, #8]
 8001844:	0c1b      	lsrs	r3, r3, #16
 8001846:	b2db      	uxtb	r3, r3
 8001848:	4618      	mov	r0, r3
 800184a:	f7ff fd67 	bl	800131c <W25qxx_Spi>
  W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 800184e:	68bb      	ldr	r3, [r7, #8]
 8001850:	0a1b      	lsrs	r3, r3, #8
 8001852:	b2db      	uxtb	r3, r3
 8001854:	4618      	mov	r0, r3
 8001856:	f7ff fd61 	bl	800131c <W25qxx_Spi>
  W25qxx_Spi(Page_Address&0xFF);
 800185a:	68bb      	ldr	r3, [r7, #8]
 800185c:	b2db      	uxtb	r3, r3
 800185e:	4618      	mov	r0, r3
 8001860:	f7ff fd5c 	bl	800131c <W25qxx_Spi>
	HAL_SPI_Transmit(&_W25QXX_SPI,pBuffer,NumByteToWrite_up_to_PageSize,100);	
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	b29a      	uxth	r2, r3
 8001868:	2364      	movs	r3, #100	; 0x64
 800186a:	68f9      	ldr	r1, [r7, #12]
 800186c:	480b      	ldr	r0, [pc, #44]	; (800189c <W25qxx_WritePage+0xfc>)
 800186e:	f002 fada 	bl	8003e26 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8001872:	2201      	movs	r2, #1
 8001874:	2104      	movs	r1, #4
 8001876:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800187a:	f000 fd2b 	bl	80022d4 <HAL_GPIO_WritePin>
  W25qxx_WaitForWriteEnd();
 800187e:	f7ff fe2b 	bl	80014d8 <W25qxx_WaitForWriteEnd>
	}	
	printf("\r\n");
	printf("w25qxx WritePage done after %d ms\r\n",StartTime);
	W25qxx_Delay(100);
	#endif	
	W25qxx_Delay(1);
 8001882:	2001      	movs	r0, #1
 8001884:	f000 f9e8 	bl	8001c58 <HAL_Delay>
	w25qxx.Lock=0;
 8001888:	4b03      	ldr	r3, [pc, #12]	; (8001898 <W25qxx_WritePage+0xf8>)
 800188a:	2200      	movs	r2, #0
 800188c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8001890:	bf00      	nop
 8001892:	3710      	adds	r7, #16
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	200006bc 	.word	0x200006bc
 800189c:	200005f0 	.word	0x200005f0

080018a0 <W25qxx_WriteSector>:
//###################################################################################################################
void 	W25qxx_WriteSector(uint8_t *pBuffer	,uint32_t Sector_Address,uint32_t OffsetInByte	,uint32_t NumByteToWrite_up_to_SectorSize)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b088      	sub	sp, #32
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	60f8      	str	r0, [r7, #12]
 80018a8:	60b9      	str	r1, [r7, #8]
 80018aa:	607a      	str	r2, [r7, #4]
 80018ac:	603b      	str	r3, [r7, #0]
	if((NumByteToWrite_up_to_SectorSize>w25qxx.SectorSize)||(NumByteToWrite_up_to_SectorSize==0))
 80018ae:	4b2c      	ldr	r3, [pc, #176]	; (8001960 <W25qxx_WriteSector+0xc0>)
 80018b0:	691b      	ldr	r3, [r3, #16]
 80018b2:	683a      	ldr	r2, [r7, #0]
 80018b4:	429a      	cmp	r2, r3
 80018b6:	d802      	bhi.n	80018be <W25qxx_WriteSector+0x1e>
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d102      	bne.n	80018c4 <W25qxx_WriteSector+0x24>
		NumByteToWrite_up_to_SectorSize=w25qxx.SectorSize;
 80018be:	4b28      	ldr	r3, [pc, #160]	; (8001960 <W25qxx_WriteSector+0xc0>)
 80018c0:	691b      	ldr	r3, [r3, #16]
 80018c2:	603b      	str	r3, [r7, #0]
	#if (_W25QXX_DEBUG==1)
	printf("+++w25qxx WriteSector:%d, Offset:%d ,Write %d Bytes, begin...\r\n",Sector_Address,OffsetInByte,NumByteToWrite_up_to_SectorSize);
	W25qxx_Delay(100);
	#endif	
	if(OffsetInByte>=w25qxx.SectorSize)
 80018c4:	4b26      	ldr	r3, [pc, #152]	; (8001960 <W25qxx_WriteSector+0xc0>)
 80018c6:	691b      	ldr	r3, [r3, #16]
 80018c8:	687a      	ldr	r2, [r7, #4]
 80018ca:	429a      	cmp	r2, r3
 80018cc:	d243      	bcs.n	8001956 <W25qxx_WriteSector+0xb6>
		return;
	}	
	uint32_t	StartPage;
	int32_t		BytesToWrite;
	uint32_t	LocalOffset;	
	if((OffsetInByte+NumByteToWrite_up_to_SectorSize) > w25qxx.SectorSize)
 80018ce:	687a      	ldr	r2, [r7, #4]
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	441a      	add	r2, r3
 80018d4:	4b22      	ldr	r3, [pc, #136]	; (8001960 <W25qxx_WriteSector+0xc0>)
 80018d6:	691b      	ldr	r3, [r3, #16]
 80018d8:	429a      	cmp	r2, r3
 80018da:	d905      	bls.n	80018e8 <W25qxx_WriteSector+0x48>
		BytesToWrite = w25qxx.SectorSize-OffsetInByte;
 80018dc:	4b20      	ldr	r3, [pc, #128]	; (8001960 <W25qxx_WriteSector+0xc0>)
 80018de:	691a      	ldr	r2, [r3, #16]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	1ad3      	subs	r3, r2, r3
 80018e4:	61bb      	str	r3, [r7, #24]
 80018e6:	e001      	b.n	80018ec <W25qxx_WriteSector+0x4c>
	else
		BytesToWrite = NumByteToWrite_up_to_SectorSize;	
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address)+(OffsetInByte/w25qxx.PageSize);
 80018ec:	68b8      	ldr	r0, [r7, #8]
 80018ee:	f7ff ff41 	bl	8001774 <W25qxx_SectorToPage>
 80018f2:	4602      	mov	r2, r0
 80018f4:	4b1a      	ldr	r3, [pc, #104]	; (8001960 <W25qxx_WriteSector+0xc0>)
 80018f6:	895b      	ldrh	r3, [r3, #10]
 80018f8:	4619      	mov	r1, r3
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	fbb3 f3f1 	udiv	r3, r3, r1
 8001900:	4413      	add	r3, r2
 8001902:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte%w25qxx.PageSize;	
 8001904:	4b16      	ldr	r3, [pc, #88]	; (8001960 <W25qxx_WriteSector+0xc0>)
 8001906:	895b      	ldrh	r3, [r3, #10]
 8001908:	461a      	mov	r2, r3
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	fbb3 f1f2 	udiv	r1, r3, r2
 8001910:	fb02 f201 	mul.w	r2, r2, r1
 8001914:	1a9b      	subs	r3, r3, r2
 8001916:	617b      	str	r3, [r7, #20]
	do
	{		
		W25qxx_WritePage(pBuffer,StartPage,LocalOffset,BytesToWrite);
 8001918:	69bb      	ldr	r3, [r7, #24]
 800191a:	697a      	ldr	r2, [r7, #20]
 800191c:	69f9      	ldr	r1, [r7, #28]
 800191e:	68f8      	ldr	r0, [r7, #12]
 8001920:	f7ff ff3e 	bl	80017a0 <W25qxx_WritePage>
		StartPage++;
 8001924:	69fb      	ldr	r3, [r7, #28]
 8001926:	3301      	adds	r3, #1
 8001928:	61fb      	str	r3, [r7, #28]
		BytesToWrite-=w25qxx.PageSize-LocalOffset;
 800192a:	4b0d      	ldr	r3, [pc, #52]	; (8001960 <W25qxx_WriteSector+0xc0>)
 800192c:	895b      	ldrh	r3, [r3, #10]
 800192e:	461a      	mov	r2, r3
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	1a9a      	subs	r2, r3, r2
 8001934:	69bb      	ldr	r3, [r7, #24]
 8001936:	4413      	add	r3, r2
 8001938:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 800193a:	4b09      	ldr	r3, [pc, #36]	; (8001960 <W25qxx_WriteSector+0xc0>)
 800193c:	895b      	ldrh	r3, [r3, #10]
 800193e:	461a      	mov	r2, r3
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	1ad3      	subs	r3, r2, r3
 8001944:	68fa      	ldr	r2, [r7, #12]
 8001946:	4413      	add	r3, r2
 8001948:	60fb      	str	r3, [r7, #12]
		LocalOffset=0;
 800194a:	2300      	movs	r3, #0
 800194c:	617b      	str	r3, [r7, #20]
	}while(BytesToWrite>0);		
 800194e:	69bb      	ldr	r3, [r7, #24]
 8001950:	2b00      	cmp	r3, #0
 8001952:	dce1      	bgt.n	8001918 <W25qxx_WriteSector+0x78>
 8001954:	e000      	b.n	8001958 <W25qxx_WriteSector+0xb8>
		return;
 8001956:	bf00      	nop
	#if (_W25QXX_DEBUG==1)
	printf("---w25qxx WriteSector Done\r\n");
	W25qxx_Delay(100);
	#endif	
}
 8001958:	3720      	adds	r7, #32
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	200006bc 	.word	0x200006bc

08001964 <W25qxx_ReadPage>:
	W25qxx_Delay(1);
	w25qxx.Lock=0;
}
//###################################################################################################################
void 	W25qxx_ReadPage(uint8_t *pBuffer,uint32_t Page_Address,uint32_t OffsetInByte,uint32_t NumByteToRead_up_to_PageSize)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b084      	sub	sp, #16
 8001968:	af00      	add	r7, sp, #0
 800196a:	60f8      	str	r0, [r7, #12]
 800196c:	60b9      	str	r1, [r7, #8]
 800196e:	607a      	str	r2, [r7, #4]
 8001970:	603b      	str	r3, [r7, #0]
	while(w25qxx.Lock==1)
 8001972:	e002      	b.n	800197a <W25qxx_ReadPage+0x16>
		W25qxx_Delay(1);
 8001974:	2001      	movs	r0, #1
 8001976:	f000 f96f 	bl	8001c58 <HAL_Delay>
	while(w25qxx.Lock==1)
 800197a:	4b35      	ldr	r3, [pc, #212]	; (8001a50 <W25qxx_ReadPage+0xec>)
 800197c:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8001980:	2b01      	cmp	r3, #1
 8001982:	d0f7      	beq.n	8001974 <W25qxx_ReadPage+0x10>
	w25qxx.Lock=1;
 8001984:	4b32      	ldr	r3, [pc, #200]	; (8001a50 <W25qxx_ReadPage+0xec>)
 8001986:	2201      	movs	r2, #1
 8001988:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if((NumByteToRead_up_to_PageSize>w25qxx.PageSize)||(NumByteToRead_up_to_PageSize==0))
 800198c:	4b30      	ldr	r3, [pc, #192]	; (8001a50 <W25qxx_ReadPage+0xec>)
 800198e:	895b      	ldrh	r3, [r3, #10]
 8001990:	461a      	mov	r2, r3
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	4293      	cmp	r3, r2
 8001996:	d802      	bhi.n	800199e <W25qxx_ReadPage+0x3a>
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d102      	bne.n	80019a4 <W25qxx_ReadPage+0x40>
		NumByteToRead_up_to_PageSize=w25qxx.PageSize;
 800199e:	4b2c      	ldr	r3, [pc, #176]	; (8001a50 <W25qxx_ReadPage+0xec>)
 80019a0:	895b      	ldrh	r3, [r3, #10]
 80019a2:	603b      	str	r3, [r7, #0]
	if((OffsetInByte+NumByteToRead_up_to_PageSize) > w25qxx.PageSize)
 80019a4:	687a      	ldr	r2, [r7, #4]
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	4413      	add	r3, r2
 80019aa:	4a29      	ldr	r2, [pc, #164]	; (8001a50 <W25qxx_ReadPage+0xec>)
 80019ac:	8952      	ldrh	r2, [r2, #10]
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d905      	bls.n	80019be <W25qxx_ReadPage+0x5a>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize-OffsetInByte;
 80019b2:	4b27      	ldr	r3, [pc, #156]	; (8001a50 <W25qxx_ReadPage+0xec>)
 80019b4:	895b      	ldrh	r3, [r3, #10]
 80019b6:	461a      	mov	r2, r3
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	1ad3      	subs	r3, r2, r3
 80019bc:	603b      	str	r3, [r7, #0]
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx ReadPage:%d, Offset:%d ,Read %d Bytes, begin...\r\n",Page_Address,OffsetInByte,NumByteToRead_up_to_PageSize);
	W25qxx_Delay(100);
	uint32_t	StartTime=HAL_GetTick();
	#endif	
	Page_Address = Page_Address*w25qxx.PageSize+OffsetInByte;
 80019be:	4b24      	ldr	r3, [pc, #144]	; (8001a50 <W25qxx_ReadPage+0xec>)
 80019c0:	895b      	ldrh	r3, [r3, #10]
 80019c2:	461a      	mov	r2, r3
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	fb03 f302 	mul.w	r3, r3, r2
 80019ca:	687a      	ldr	r2, [r7, #4]
 80019cc:	4413      	add	r3, r2
 80019ce:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 80019d0:	2200      	movs	r2, #0
 80019d2:	2104      	movs	r1, #4
 80019d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019d8:	f000 fc7c 	bl	80022d4 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x0B);
 80019dc:	200b      	movs	r0, #11
 80019de:	f7ff fc9d 	bl	800131c <W25qxx_Spi>
	if(w25qxx.ID>=W25Q256)
 80019e2:	4b1b      	ldr	r3, [pc, #108]	; (8001a50 <W25qxx_ReadPage+0xec>)
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	2b08      	cmp	r3, #8
 80019e8:	d905      	bls.n	80019f6 <W25qxx_ReadPage+0x92>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 80019ea:	68bb      	ldr	r3, [r7, #8]
 80019ec:	0e1b      	lsrs	r3, r3, #24
 80019ee:	b2db      	uxtb	r3, r3
 80019f0:	4618      	mov	r0, r3
 80019f2:	f7ff fc93 	bl	800131c <W25qxx_Spi>
  W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 80019f6:	68bb      	ldr	r3, [r7, #8]
 80019f8:	0c1b      	lsrs	r3, r3, #16
 80019fa:	b2db      	uxtb	r3, r3
 80019fc:	4618      	mov	r0, r3
 80019fe:	f7ff fc8d 	bl	800131c <W25qxx_Spi>
  W25qxx_Spi((Page_Address& 0xFF00) >> 8);
 8001a02:	68bb      	ldr	r3, [r7, #8]
 8001a04:	0a1b      	lsrs	r3, r3, #8
 8001a06:	b2db      	uxtb	r3, r3
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f7ff fc87 	bl	800131c <W25qxx_Spi>
  W25qxx_Spi(Page_Address & 0xFF);
 8001a0e:	68bb      	ldr	r3, [r7, #8]
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	4618      	mov	r0, r3
 8001a14:	f7ff fc82 	bl	800131c <W25qxx_Spi>
	W25qxx_Spi(0);
 8001a18:	2000      	movs	r0, #0
 8001a1a:	f7ff fc7f 	bl	800131c <W25qxx_Spi>
	HAL_SPI_Receive(&_W25QXX_SPI,pBuffer,NumByteToRead_up_to_PageSize,100);	
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	b29a      	uxth	r2, r3
 8001a22:	2364      	movs	r3, #100	; 0x64
 8001a24:	68f9      	ldr	r1, [r7, #12]
 8001a26:	480b      	ldr	r0, [pc, #44]	; (8001a54 <W25qxx_ReadPage+0xf0>)
 8001a28:	f002 fb6b 	bl	8004102 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	2104      	movs	r1, #4
 8001a30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a34:	f000 fc4e 	bl	80022d4 <HAL_GPIO_WritePin>
	}	
	printf("\r\n");
	printf("w25qxx ReadPage done after %d ms\r\n",StartTime);
	W25qxx_Delay(100);
	#endif	
	W25qxx_Delay(1);
 8001a38:	2001      	movs	r0, #1
 8001a3a:	f000 f90d 	bl	8001c58 <HAL_Delay>
	w25qxx.Lock=0;
 8001a3e:	4b04      	ldr	r3, [pc, #16]	; (8001a50 <W25qxx_ReadPage+0xec>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8001a46:	bf00      	nop
 8001a48:	3710      	adds	r7, #16
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	200006bc 	.word	0x200006bc
 8001a54:	200005f0 	.word	0x200005f0

08001a58 <W25qxx_ReadSector>:
//###################################################################################################################
void 	W25qxx_ReadSector(uint8_t *pBuffer,uint32_t Sector_Address,uint32_t OffsetInByte,uint32_t NumByteToRead_up_to_SectorSize)
{	
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b088      	sub	sp, #32
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	60f8      	str	r0, [r7, #12]
 8001a60:	60b9      	str	r1, [r7, #8]
 8001a62:	607a      	str	r2, [r7, #4]
 8001a64:	603b      	str	r3, [r7, #0]
	if((NumByteToRead_up_to_SectorSize>w25qxx.SectorSize)||(NumByteToRead_up_to_SectorSize==0))
 8001a66:	4b2c      	ldr	r3, [pc, #176]	; (8001b18 <W25qxx_ReadSector+0xc0>)
 8001a68:	691b      	ldr	r3, [r3, #16]
 8001a6a:	683a      	ldr	r2, [r7, #0]
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	d802      	bhi.n	8001a76 <W25qxx_ReadSector+0x1e>
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d102      	bne.n	8001a7c <W25qxx_ReadSector+0x24>
		NumByteToRead_up_to_SectorSize=w25qxx.SectorSize;
 8001a76:	4b28      	ldr	r3, [pc, #160]	; (8001b18 <W25qxx_ReadSector+0xc0>)
 8001a78:	691b      	ldr	r3, [r3, #16]
 8001a7a:	603b      	str	r3, [r7, #0]
	#if (_W25QXX_DEBUG==1)
	printf("+++w25qxx ReadSector:%d, Offset:%d ,Read %d Bytes, begin...\r\n",Sector_Address,OffsetInByte,NumByteToRead_up_to_SectorSize);
	W25qxx_Delay(100);
	#endif	
	if(OffsetInByte>=w25qxx.SectorSize)
 8001a7c:	4b26      	ldr	r3, [pc, #152]	; (8001b18 <W25qxx_ReadSector+0xc0>)
 8001a7e:	691b      	ldr	r3, [r3, #16]
 8001a80:	687a      	ldr	r2, [r7, #4]
 8001a82:	429a      	cmp	r2, r3
 8001a84:	d243      	bcs.n	8001b0e <W25qxx_ReadSector+0xb6>
		return;
	}	
	uint32_t	StartPage;
	int32_t		BytesToRead;
	uint32_t	LocalOffset;	
	if((OffsetInByte+NumByteToRead_up_to_SectorSize) > w25qxx.SectorSize)
 8001a86:	687a      	ldr	r2, [r7, #4]
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	441a      	add	r2, r3
 8001a8c:	4b22      	ldr	r3, [pc, #136]	; (8001b18 <W25qxx_ReadSector+0xc0>)
 8001a8e:	691b      	ldr	r3, [r3, #16]
 8001a90:	429a      	cmp	r2, r3
 8001a92:	d905      	bls.n	8001aa0 <W25qxx_ReadSector+0x48>
		BytesToRead = w25qxx.SectorSize-OffsetInByte;
 8001a94:	4b20      	ldr	r3, [pc, #128]	; (8001b18 <W25qxx_ReadSector+0xc0>)
 8001a96:	691a      	ldr	r2, [r3, #16]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	1ad3      	subs	r3, r2, r3
 8001a9c:	61bb      	str	r3, [r7, #24]
 8001a9e:	e001      	b.n	8001aa4 <W25qxx_ReadSector+0x4c>
	else
		BytesToRead = NumByteToRead_up_to_SectorSize;	
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address)+(OffsetInByte/w25qxx.PageSize);
 8001aa4:	68b8      	ldr	r0, [r7, #8]
 8001aa6:	f7ff fe65 	bl	8001774 <W25qxx_SectorToPage>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	4b1a      	ldr	r3, [pc, #104]	; (8001b18 <W25qxx_ReadSector+0xc0>)
 8001aae:	895b      	ldrh	r3, [r3, #10]
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ab8:	4413      	add	r3, r2
 8001aba:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte%w25qxx.PageSize;	
 8001abc:	4b16      	ldr	r3, [pc, #88]	; (8001b18 <W25qxx_ReadSector+0xc0>)
 8001abe:	895b      	ldrh	r3, [r3, #10]
 8001ac0:	461a      	mov	r2, r3
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	fbb3 f1f2 	udiv	r1, r3, r2
 8001ac8:	fb02 f201 	mul.w	r2, r2, r1
 8001acc:	1a9b      	subs	r3, r3, r2
 8001ace:	617b      	str	r3, [r7, #20]
	do
	{		
		W25qxx_ReadPage(pBuffer,StartPage,LocalOffset,BytesToRead);
 8001ad0:	69bb      	ldr	r3, [r7, #24]
 8001ad2:	697a      	ldr	r2, [r7, #20]
 8001ad4:	69f9      	ldr	r1, [r7, #28]
 8001ad6:	68f8      	ldr	r0, [r7, #12]
 8001ad8:	f7ff ff44 	bl	8001964 <W25qxx_ReadPage>
		StartPage++;
 8001adc:	69fb      	ldr	r3, [r7, #28]
 8001ade:	3301      	adds	r3, #1
 8001ae0:	61fb      	str	r3, [r7, #28]
		BytesToRead-=w25qxx.PageSize-LocalOffset;
 8001ae2:	4b0d      	ldr	r3, [pc, #52]	; (8001b18 <W25qxx_ReadSector+0xc0>)
 8001ae4:	895b      	ldrh	r3, [r3, #10]
 8001ae6:	461a      	mov	r2, r3
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	1a9a      	subs	r2, r3, r2
 8001aec:	69bb      	ldr	r3, [r7, #24]
 8001aee:	4413      	add	r3, r2
 8001af0:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 8001af2:	4b09      	ldr	r3, [pc, #36]	; (8001b18 <W25qxx_ReadSector+0xc0>)
 8001af4:	895b      	ldrh	r3, [r3, #10]
 8001af6:	461a      	mov	r2, r3
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	1ad3      	subs	r3, r2, r3
 8001afc:	68fa      	ldr	r2, [r7, #12]
 8001afe:	4413      	add	r3, r2
 8001b00:	60fb      	str	r3, [r7, #12]
		LocalOffset=0;
 8001b02:	2300      	movs	r3, #0
 8001b04:	617b      	str	r3, [r7, #20]
	}while(BytesToRead>0);		
 8001b06:	69bb      	ldr	r3, [r7, #24]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	dce1      	bgt.n	8001ad0 <W25qxx_ReadSector+0x78>
 8001b0c:	e000      	b.n	8001b10 <W25qxx_ReadSector+0xb8>
		return;
 8001b0e:	bf00      	nop
	#if (_W25QXX_DEBUG==1)
	printf("---w25qxx ReadSector Done\r\n");
	W25qxx_Delay(100);
	#endif	
}
 8001b10:	3720      	adds	r7, #32
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	200006bc 	.word	0x200006bc

08001b1c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001b1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b54 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b20:	f7ff fbca 	bl	80012b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001b24:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001b26:	e003      	b.n	8001b30 <LoopCopyDataInit>

08001b28 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001b28:	4b0b      	ldr	r3, [pc, #44]	; (8001b58 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001b2a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001b2c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001b2e:	3104      	adds	r1, #4

08001b30 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001b30:	480a      	ldr	r0, [pc, #40]	; (8001b5c <LoopForever+0xa>)
	ldr	r3, =_edata
 8001b32:	4b0b      	ldr	r3, [pc, #44]	; (8001b60 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001b34:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001b36:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001b38:	d3f6      	bcc.n	8001b28 <CopyDataInit>
	ldr	r2, =_sbss
 8001b3a:	4a0a      	ldr	r2, [pc, #40]	; (8001b64 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001b3c:	e002      	b.n	8001b44 <LoopFillZerobss>

08001b3e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001b3e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001b40:	f842 3b04 	str.w	r3, [r2], #4

08001b44 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001b44:	4b08      	ldr	r3, [pc, #32]	; (8001b68 <LoopForever+0x16>)
	cmp	r2, r3
 8001b46:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001b48:	d3f9      	bcc.n	8001b3e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b4a:	f004 f891 	bl	8005c70 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001b4e:	f7fe fd8f 	bl	8000670 <main>

08001b52 <LoopForever>:

LoopForever:
    b LoopForever
 8001b52:	e7fe      	b.n	8001b52 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001b54:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 8001b58:	08007b40 	.word	0x08007b40
	ldr	r0, =_sdata
 8001b5c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001b60:	20000080 	.word	0x20000080
	ldr	r2, =_sbss
 8001b64:	20000080 	.word	0x20000080
	ldr	r3, = _ebss
 8001b68:	200006f8 	.word	0x200006f8

08001b6c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001b6c:	e7fe      	b.n	8001b6c <ADC1_2_IRQHandler>

08001b6e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b6e:	b580      	push	{r7, lr}
 8001b70:	b082      	sub	sp, #8
 8001b72:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001b74:	2300      	movs	r3, #0
 8001b76:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b78:	2003      	movs	r0, #3
 8001b7a:	f000 f961 	bl	8001e40 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b7e:	2000      	movs	r0, #0
 8001b80:	f000 f80e 	bl	8001ba0 <HAL_InitTick>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d002      	beq.n	8001b90 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	71fb      	strb	r3, [r7, #7]
 8001b8e:	e001      	b.n	8001b94 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001b90:	f7ff fa30 	bl	8000ff4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001b94:	79fb      	ldrb	r3, [r7, #7]
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3708      	adds	r7, #8
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
	...

08001ba0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b084      	sub	sp, #16
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001bac:	4b17      	ldr	r3, [pc, #92]	; (8001c0c <HAL_InitTick+0x6c>)
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d023      	beq.n	8001bfc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001bb4:	4b16      	ldr	r3, [pc, #88]	; (8001c10 <HAL_InitTick+0x70>)
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	4b14      	ldr	r3, [pc, #80]	; (8001c0c <HAL_InitTick+0x6c>)
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f000 f96d 	bl	8001eaa <HAL_SYSTICK_Config>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d10f      	bne.n	8001bf6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2b0f      	cmp	r3, #15
 8001bda:	d809      	bhi.n	8001bf0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bdc:	2200      	movs	r2, #0
 8001bde:	6879      	ldr	r1, [r7, #4]
 8001be0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001be4:	f000 f937 	bl	8001e56 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001be8:	4a0a      	ldr	r2, [pc, #40]	; (8001c14 <HAL_InitTick+0x74>)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6013      	str	r3, [r2, #0]
 8001bee:	e007      	b.n	8001c00 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	73fb      	strb	r3, [r7, #15]
 8001bf4:	e004      	b.n	8001c00 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	73fb      	strb	r3, [r7, #15]
 8001bfa:	e001      	b.n	8001c00 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001c00:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3710      	adds	r7, #16
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	20000018 	.word	0x20000018
 8001c10:	20000010 	.word	0x20000010
 8001c14:	20000014 	.word	0x20000014

08001c18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c1c:	4b06      	ldr	r3, [pc, #24]	; (8001c38 <HAL_IncTick+0x20>)
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	461a      	mov	r2, r3
 8001c22:	4b06      	ldr	r3, [pc, #24]	; (8001c3c <HAL_IncTick+0x24>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4413      	add	r3, r2
 8001c28:	4a04      	ldr	r2, [pc, #16]	; (8001c3c <HAL_IncTick+0x24>)
 8001c2a:	6013      	str	r3, [r2, #0]
}
 8001c2c:	bf00      	nop
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr
 8001c36:	bf00      	nop
 8001c38:	20000018 	.word	0x20000018
 8001c3c:	200006e4 	.word	0x200006e4

08001c40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c40:	b480      	push	{r7}
 8001c42:	af00      	add	r7, sp, #0
  return uwTick;
 8001c44:	4b03      	ldr	r3, [pc, #12]	; (8001c54 <HAL_GetTick+0x14>)
 8001c46:	681b      	ldr	r3, [r3, #0]
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
 8001c52:	bf00      	nop
 8001c54:	200006e4 	.word	0x200006e4

08001c58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b084      	sub	sp, #16
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c60:	f7ff ffee 	bl	8001c40 <HAL_GetTick>
 8001c64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001c70:	d005      	beq.n	8001c7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001c72:	4b0a      	ldr	r3, [pc, #40]	; (8001c9c <HAL_Delay+0x44>)
 8001c74:	781b      	ldrb	r3, [r3, #0]
 8001c76:	461a      	mov	r2, r3
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	4413      	add	r3, r2
 8001c7c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c7e:	bf00      	nop
 8001c80:	f7ff ffde 	bl	8001c40 <HAL_GetTick>
 8001c84:	4602      	mov	r2, r0
 8001c86:	68bb      	ldr	r3, [r7, #8]
 8001c88:	1ad3      	subs	r3, r2, r3
 8001c8a:	68fa      	ldr	r2, [r7, #12]
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	d8f7      	bhi.n	8001c80 <HAL_Delay+0x28>
  {
  }
}
 8001c90:	bf00      	nop
 8001c92:	bf00      	nop
 8001c94:	3710      	adds	r7, #16
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	20000018 	.word	0x20000018

08001ca0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b085      	sub	sp, #20
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	f003 0307 	and.w	r3, r3, #7
 8001cae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cb0:	4b0c      	ldr	r3, [pc, #48]	; (8001ce4 <__NVIC_SetPriorityGrouping+0x44>)
 8001cb2:	68db      	ldr	r3, [r3, #12]
 8001cb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cb6:	68ba      	ldr	r2, [r7, #8]
 8001cb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cc8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ccc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cd2:	4a04      	ldr	r2, [pc, #16]	; (8001ce4 <__NVIC_SetPriorityGrouping+0x44>)
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	60d3      	str	r3, [r2, #12]
}
 8001cd8:	bf00      	nop
 8001cda:	3714      	adds	r7, #20
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr
 8001ce4:	e000ed00 	.word	0xe000ed00

08001ce8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cec:	4b04      	ldr	r3, [pc, #16]	; (8001d00 <__NVIC_GetPriorityGrouping+0x18>)
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	0a1b      	lsrs	r3, r3, #8
 8001cf2:	f003 0307 	and.w	r3, r3, #7
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr
 8001d00:	e000ed00 	.word	0xe000ed00

08001d04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b083      	sub	sp, #12
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	db0b      	blt.n	8001d2e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d16:	79fb      	ldrb	r3, [r7, #7]
 8001d18:	f003 021f 	and.w	r2, r3, #31
 8001d1c:	4907      	ldr	r1, [pc, #28]	; (8001d3c <__NVIC_EnableIRQ+0x38>)
 8001d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d22:	095b      	lsrs	r3, r3, #5
 8001d24:	2001      	movs	r0, #1
 8001d26:	fa00 f202 	lsl.w	r2, r0, r2
 8001d2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d2e:	bf00      	nop
 8001d30:	370c      	adds	r7, #12
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr
 8001d3a:	bf00      	nop
 8001d3c:	e000e100 	.word	0xe000e100

08001d40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	4603      	mov	r3, r0
 8001d48:	6039      	str	r1, [r7, #0]
 8001d4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	db0a      	blt.n	8001d6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	b2da      	uxtb	r2, r3
 8001d58:	490c      	ldr	r1, [pc, #48]	; (8001d8c <__NVIC_SetPriority+0x4c>)
 8001d5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d5e:	0112      	lsls	r2, r2, #4
 8001d60:	b2d2      	uxtb	r2, r2
 8001d62:	440b      	add	r3, r1
 8001d64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d68:	e00a      	b.n	8001d80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	b2da      	uxtb	r2, r3
 8001d6e:	4908      	ldr	r1, [pc, #32]	; (8001d90 <__NVIC_SetPriority+0x50>)
 8001d70:	79fb      	ldrb	r3, [r7, #7]
 8001d72:	f003 030f 	and.w	r3, r3, #15
 8001d76:	3b04      	subs	r3, #4
 8001d78:	0112      	lsls	r2, r2, #4
 8001d7a:	b2d2      	uxtb	r2, r2
 8001d7c:	440b      	add	r3, r1
 8001d7e:	761a      	strb	r2, [r3, #24]
}
 8001d80:	bf00      	nop
 8001d82:	370c      	adds	r7, #12
 8001d84:	46bd      	mov	sp, r7
 8001d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8a:	4770      	bx	lr
 8001d8c:	e000e100 	.word	0xe000e100
 8001d90:	e000ed00 	.word	0xe000ed00

08001d94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b089      	sub	sp, #36	; 0x24
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	60f8      	str	r0, [r7, #12]
 8001d9c:	60b9      	str	r1, [r7, #8]
 8001d9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	f003 0307 	and.w	r3, r3, #7
 8001da6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001da8:	69fb      	ldr	r3, [r7, #28]
 8001daa:	f1c3 0307 	rsb	r3, r3, #7
 8001dae:	2b04      	cmp	r3, #4
 8001db0:	bf28      	it	cs
 8001db2:	2304      	movcs	r3, #4
 8001db4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	3304      	adds	r3, #4
 8001dba:	2b06      	cmp	r3, #6
 8001dbc:	d902      	bls.n	8001dc4 <NVIC_EncodePriority+0x30>
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	3b03      	subs	r3, #3
 8001dc2:	e000      	b.n	8001dc6 <NVIC_EncodePriority+0x32>
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dc8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001dcc:	69bb      	ldr	r3, [r7, #24]
 8001dce:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd2:	43da      	mvns	r2, r3
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	401a      	ands	r2, r3
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ddc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	fa01 f303 	lsl.w	r3, r1, r3
 8001de6:	43d9      	mvns	r1, r3
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dec:	4313      	orrs	r3, r2
         );
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	3724      	adds	r7, #36	; 0x24
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr
	...

08001dfc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b082      	sub	sp, #8
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	3b01      	subs	r3, #1
 8001e08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e0c:	d301      	bcc.n	8001e12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e00f      	b.n	8001e32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e12:	4a0a      	ldr	r2, [pc, #40]	; (8001e3c <SysTick_Config+0x40>)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	3b01      	subs	r3, #1
 8001e18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e1a:	210f      	movs	r1, #15
 8001e1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e20:	f7ff ff8e 	bl	8001d40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e24:	4b05      	ldr	r3, [pc, #20]	; (8001e3c <SysTick_Config+0x40>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e2a:	4b04      	ldr	r3, [pc, #16]	; (8001e3c <SysTick_Config+0x40>)
 8001e2c:	2207      	movs	r2, #7
 8001e2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e30:	2300      	movs	r3, #0
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3708      	adds	r7, #8
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	e000e010 	.word	0xe000e010

08001e40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b082      	sub	sp, #8
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e48:	6878      	ldr	r0, [r7, #4]
 8001e4a:	f7ff ff29 	bl	8001ca0 <__NVIC_SetPriorityGrouping>
}
 8001e4e:	bf00      	nop
 8001e50:	3708      	adds	r7, #8
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}

08001e56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e56:	b580      	push	{r7, lr}
 8001e58:	b086      	sub	sp, #24
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	60b9      	str	r1, [r7, #8]
 8001e60:	607a      	str	r2, [r7, #4]
 8001e62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001e64:	2300      	movs	r3, #0
 8001e66:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001e68:	f7ff ff3e 	bl	8001ce8 <__NVIC_GetPriorityGrouping>
 8001e6c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e6e:	687a      	ldr	r2, [r7, #4]
 8001e70:	68b9      	ldr	r1, [r7, #8]
 8001e72:	6978      	ldr	r0, [r7, #20]
 8001e74:	f7ff ff8e 	bl	8001d94 <NVIC_EncodePriority>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e7e:	4611      	mov	r1, r2
 8001e80:	4618      	mov	r0, r3
 8001e82:	f7ff ff5d 	bl	8001d40 <__NVIC_SetPriority>
}
 8001e86:	bf00      	nop
 8001e88:	3718      	adds	r7, #24
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}

08001e8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e8e:	b580      	push	{r7, lr}
 8001e90:	b082      	sub	sp, #8
 8001e92:	af00      	add	r7, sp, #0
 8001e94:	4603      	mov	r3, r0
 8001e96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f7ff ff31 	bl	8001d04 <__NVIC_EnableIRQ>
}
 8001ea2:	bf00      	nop
 8001ea4:	3708      	adds	r7, #8
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}

08001eaa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001eaa:	b580      	push	{r7, lr}
 8001eac:	b082      	sub	sp, #8
 8001eae:	af00      	add	r7, sp, #0
 8001eb0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	f7ff ffa2 	bl	8001dfc <SysTick_Config>
 8001eb8:	4603      	mov	r3, r0
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3708      	adds	r7, #8
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}

08001ec2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001ec2:	b480      	push	{r7}
 8001ec4:	b085      	sub	sp, #20
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	2b02      	cmp	r3, #2
 8001ed8:	d008      	beq.n	8001eec <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2204      	movs	r2, #4
 8001ede:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	e022      	b.n	8001f32 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f022 020e 	bic.w	r2, r2, #14
 8001efa:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f022 0201 	bic.w	r2, r2, #1
 8001f0a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f10:	f003 021c 	and.w	r2, r3, #28
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f18:	2101      	movs	r1, #1
 8001f1a:	fa01 f202 	lsl.w	r2, r1, r2
 8001f1e:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2201      	movs	r2, #1
 8001f24:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001f30:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	3714      	adds	r7, #20
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr

08001f3e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f3e:	b580      	push	{r7, lr}
 8001f40:	b084      	sub	sp, #16
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f46:	2300      	movs	r3, #0
 8001f48:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	2b02      	cmp	r3, #2
 8001f54:	d005      	beq.n	8001f62 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2204      	movs	r2, #4
 8001f5a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	73fb      	strb	r3, [r7, #15]
 8001f60:	e029      	b.n	8001fb6 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f022 020e 	bic.w	r2, r2, #14
 8001f70:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f022 0201 	bic.w	r2, r2, #1
 8001f80:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f86:	f003 021c 	and.w	r2, r3, #28
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f8e:	2101      	movs	r1, #1
 8001f90:	fa01 f202 	lsl.w	r2, r1, r2
 8001f94:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2201      	movs	r2, #1
 8001f9a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d003      	beq.n	8001fb6 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	4798      	blx	r3
    }
  }
  return status;
 8001fb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	3710      	adds	r7, #16
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}

08001fc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b087      	sub	sp, #28
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
 8001fc8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fce:	e14e      	b.n	800226e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	2101      	movs	r1, #1
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	fa01 f303 	lsl.w	r3, r1, r3
 8001fdc:	4013      	ands	r3, r2
 8001fde:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	f000 8140 	beq.w	8002268 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	2b01      	cmp	r3, #1
 8001fee:	d00b      	beq.n	8002008 <HAL_GPIO_Init+0x48>
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	2b02      	cmp	r3, #2
 8001ff6:	d007      	beq.n	8002008 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ffc:	2b11      	cmp	r3, #17
 8001ffe:	d003      	beq.n	8002008 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	2b12      	cmp	r3, #18
 8002006:	d130      	bne.n	800206a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	005b      	lsls	r3, r3, #1
 8002012:	2203      	movs	r2, #3
 8002014:	fa02 f303 	lsl.w	r3, r2, r3
 8002018:	43db      	mvns	r3, r3
 800201a:	693a      	ldr	r2, [r7, #16]
 800201c:	4013      	ands	r3, r2
 800201e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	68da      	ldr	r2, [r3, #12]
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	005b      	lsls	r3, r3, #1
 8002028:	fa02 f303 	lsl.w	r3, r2, r3
 800202c:	693a      	ldr	r2, [r7, #16]
 800202e:	4313      	orrs	r3, r2
 8002030:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	693a      	ldr	r2, [r7, #16]
 8002036:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800203e:	2201      	movs	r2, #1
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	fa02 f303 	lsl.w	r3, r2, r3
 8002046:	43db      	mvns	r3, r3
 8002048:	693a      	ldr	r2, [r7, #16]
 800204a:	4013      	ands	r3, r2
 800204c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	091b      	lsrs	r3, r3, #4
 8002054:	f003 0201 	and.w	r2, r3, #1
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	fa02 f303 	lsl.w	r3, r2, r3
 800205e:	693a      	ldr	r2, [r7, #16]
 8002060:	4313      	orrs	r3, r2
 8002062:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	693a      	ldr	r2, [r7, #16]
 8002068:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	68db      	ldr	r3, [r3, #12]
 800206e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	005b      	lsls	r3, r3, #1
 8002074:	2203      	movs	r2, #3
 8002076:	fa02 f303 	lsl.w	r3, r2, r3
 800207a:	43db      	mvns	r3, r3
 800207c:	693a      	ldr	r2, [r7, #16]
 800207e:	4013      	ands	r3, r2
 8002080:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	689a      	ldr	r2, [r3, #8]
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	005b      	lsls	r3, r3, #1
 800208a:	fa02 f303 	lsl.w	r3, r2, r3
 800208e:	693a      	ldr	r2, [r7, #16]
 8002090:	4313      	orrs	r3, r2
 8002092:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	693a      	ldr	r2, [r7, #16]
 8002098:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	2b02      	cmp	r3, #2
 80020a0:	d003      	beq.n	80020aa <HAL_GPIO_Init+0xea>
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	2b12      	cmp	r3, #18
 80020a8:	d123      	bne.n	80020f2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	08da      	lsrs	r2, r3, #3
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	3208      	adds	r2, #8
 80020b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020b6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	f003 0307 	and.w	r3, r3, #7
 80020be:	009b      	lsls	r3, r3, #2
 80020c0:	220f      	movs	r2, #15
 80020c2:	fa02 f303 	lsl.w	r3, r2, r3
 80020c6:	43db      	mvns	r3, r3
 80020c8:	693a      	ldr	r2, [r7, #16]
 80020ca:	4013      	ands	r3, r2
 80020cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	691a      	ldr	r2, [r3, #16]
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	f003 0307 	and.w	r3, r3, #7
 80020d8:	009b      	lsls	r3, r3, #2
 80020da:	fa02 f303 	lsl.w	r3, r2, r3
 80020de:	693a      	ldr	r2, [r7, #16]
 80020e0:	4313      	orrs	r3, r2
 80020e2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	08da      	lsrs	r2, r3, #3
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	3208      	adds	r2, #8
 80020ec:	6939      	ldr	r1, [r7, #16]
 80020ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	005b      	lsls	r3, r3, #1
 80020fc:	2203      	movs	r2, #3
 80020fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002102:	43db      	mvns	r3, r3
 8002104:	693a      	ldr	r2, [r7, #16]
 8002106:	4013      	ands	r3, r2
 8002108:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	f003 0203 	and.w	r2, r3, #3
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	005b      	lsls	r3, r3, #1
 8002116:	fa02 f303 	lsl.w	r3, r2, r3
 800211a:	693a      	ldr	r2, [r7, #16]
 800211c:	4313      	orrs	r3, r2
 800211e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	693a      	ldr	r2, [r7, #16]
 8002124:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800212e:	2b00      	cmp	r3, #0
 8002130:	f000 809a 	beq.w	8002268 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002134:	4b55      	ldr	r3, [pc, #340]	; (800228c <HAL_GPIO_Init+0x2cc>)
 8002136:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002138:	4a54      	ldr	r2, [pc, #336]	; (800228c <HAL_GPIO_Init+0x2cc>)
 800213a:	f043 0301 	orr.w	r3, r3, #1
 800213e:	6613      	str	r3, [r2, #96]	; 0x60
 8002140:	4b52      	ldr	r3, [pc, #328]	; (800228c <HAL_GPIO_Init+0x2cc>)
 8002142:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002144:	f003 0301 	and.w	r3, r3, #1
 8002148:	60bb      	str	r3, [r7, #8]
 800214a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800214c:	4a50      	ldr	r2, [pc, #320]	; (8002290 <HAL_GPIO_Init+0x2d0>)
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	089b      	lsrs	r3, r3, #2
 8002152:	3302      	adds	r3, #2
 8002154:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002158:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	f003 0303 	and.w	r3, r3, #3
 8002160:	009b      	lsls	r3, r3, #2
 8002162:	220f      	movs	r2, #15
 8002164:	fa02 f303 	lsl.w	r3, r2, r3
 8002168:	43db      	mvns	r3, r3
 800216a:	693a      	ldr	r2, [r7, #16]
 800216c:	4013      	ands	r3, r2
 800216e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002176:	d013      	beq.n	80021a0 <HAL_GPIO_Init+0x1e0>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	4a46      	ldr	r2, [pc, #280]	; (8002294 <HAL_GPIO_Init+0x2d4>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d00d      	beq.n	800219c <HAL_GPIO_Init+0x1dc>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	4a45      	ldr	r2, [pc, #276]	; (8002298 <HAL_GPIO_Init+0x2d8>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d007      	beq.n	8002198 <HAL_GPIO_Init+0x1d8>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	4a44      	ldr	r2, [pc, #272]	; (800229c <HAL_GPIO_Init+0x2dc>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d101      	bne.n	8002194 <HAL_GPIO_Init+0x1d4>
 8002190:	2303      	movs	r3, #3
 8002192:	e006      	b.n	80021a2 <HAL_GPIO_Init+0x1e2>
 8002194:	2307      	movs	r3, #7
 8002196:	e004      	b.n	80021a2 <HAL_GPIO_Init+0x1e2>
 8002198:	2302      	movs	r3, #2
 800219a:	e002      	b.n	80021a2 <HAL_GPIO_Init+0x1e2>
 800219c:	2301      	movs	r3, #1
 800219e:	e000      	b.n	80021a2 <HAL_GPIO_Init+0x1e2>
 80021a0:	2300      	movs	r3, #0
 80021a2:	697a      	ldr	r2, [r7, #20]
 80021a4:	f002 0203 	and.w	r2, r2, #3
 80021a8:	0092      	lsls	r2, r2, #2
 80021aa:	4093      	lsls	r3, r2
 80021ac:	693a      	ldr	r2, [r7, #16]
 80021ae:	4313      	orrs	r3, r2
 80021b0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80021b2:	4937      	ldr	r1, [pc, #220]	; (8002290 <HAL_GPIO_Init+0x2d0>)
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	089b      	lsrs	r3, r3, #2
 80021b8:	3302      	adds	r3, #2
 80021ba:	693a      	ldr	r2, [r7, #16]
 80021bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80021c0:	4b37      	ldr	r3, [pc, #220]	; (80022a0 <HAL_GPIO_Init+0x2e0>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	43db      	mvns	r3, r3
 80021ca:	693a      	ldr	r2, [r7, #16]
 80021cc:	4013      	ands	r3, r2
 80021ce:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d003      	beq.n	80021e4 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80021dc:	693a      	ldr	r2, [r7, #16]
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	4313      	orrs	r3, r2
 80021e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80021e4:	4a2e      	ldr	r2, [pc, #184]	; (80022a0 <HAL_GPIO_Init+0x2e0>)
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80021ea:	4b2d      	ldr	r3, [pc, #180]	; (80022a0 <HAL_GPIO_Init+0x2e0>)
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	43db      	mvns	r3, r3
 80021f4:	693a      	ldr	r2, [r7, #16]
 80021f6:	4013      	ands	r3, r2
 80021f8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002202:	2b00      	cmp	r3, #0
 8002204:	d003      	beq.n	800220e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002206:	693a      	ldr	r2, [r7, #16]
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	4313      	orrs	r3, r2
 800220c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800220e:	4a24      	ldr	r2, [pc, #144]	; (80022a0 <HAL_GPIO_Init+0x2e0>)
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002214:	4b22      	ldr	r3, [pc, #136]	; (80022a0 <HAL_GPIO_Init+0x2e0>)
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	43db      	mvns	r3, r3
 800221e:	693a      	ldr	r2, [r7, #16]
 8002220:	4013      	ands	r3, r2
 8002222:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800222c:	2b00      	cmp	r3, #0
 800222e:	d003      	beq.n	8002238 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002230:	693a      	ldr	r2, [r7, #16]
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	4313      	orrs	r3, r2
 8002236:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002238:	4a19      	ldr	r2, [pc, #100]	; (80022a0 <HAL_GPIO_Init+0x2e0>)
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800223e:	4b18      	ldr	r3, [pc, #96]	; (80022a0 <HAL_GPIO_Init+0x2e0>)
 8002240:	68db      	ldr	r3, [r3, #12]
 8002242:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	43db      	mvns	r3, r3
 8002248:	693a      	ldr	r2, [r7, #16]
 800224a:	4013      	ands	r3, r2
 800224c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002256:	2b00      	cmp	r3, #0
 8002258:	d003      	beq.n	8002262 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800225a:	693a      	ldr	r2, [r7, #16]
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	4313      	orrs	r3, r2
 8002260:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002262:	4a0f      	ldr	r2, [pc, #60]	; (80022a0 <HAL_GPIO_Init+0x2e0>)
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	3301      	adds	r3, #1
 800226c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	fa22 f303 	lsr.w	r3, r2, r3
 8002278:	2b00      	cmp	r3, #0
 800227a:	f47f aea9 	bne.w	8001fd0 <HAL_GPIO_Init+0x10>
  }
}
 800227e:	bf00      	nop
 8002280:	bf00      	nop
 8002282:	371c      	adds	r7, #28
 8002284:	46bd      	mov	sp, r7
 8002286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228a:	4770      	bx	lr
 800228c:	40021000 	.word	0x40021000
 8002290:	40010000 	.word	0x40010000
 8002294:	48000400 	.word	0x48000400
 8002298:	48000800 	.word	0x48000800
 800229c:	48000c00 	.word	0x48000c00
 80022a0:	40010400 	.word	0x40010400

080022a4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b085      	sub	sp, #20
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
 80022ac:	460b      	mov	r3, r1
 80022ae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	691a      	ldr	r2, [r3, #16]
 80022b4:	887b      	ldrh	r3, [r7, #2]
 80022b6:	4013      	ands	r3, r2
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d002      	beq.n	80022c2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80022bc:	2301      	movs	r3, #1
 80022be:	73fb      	strb	r3, [r7, #15]
 80022c0:	e001      	b.n	80022c6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80022c2:	2300      	movs	r3, #0
 80022c4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80022c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	3714      	adds	r7, #20
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr

080022d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b083      	sub	sp, #12
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	460b      	mov	r3, r1
 80022de:	807b      	strh	r3, [r7, #2]
 80022e0:	4613      	mov	r3, r2
 80022e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80022e4:	787b      	ldrb	r3, [r7, #1]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d003      	beq.n	80022f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80022ea:	887a      	ldrh	r2, [r7, #2]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80022f0:	e002      	b.n	80022f8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80022f2:	887a      	ldrh	r2, [r7, #2]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80022f8:	bf00      	nop
 80022fa:	370c      	adds	r7, #12
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr

08002304 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b082      	sub	sp, #8
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d101      	bne.n	8002316 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e081      	b.n	800241a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800231c:	b2db      	uxtb	r3, r3
 800231e:	2b00      	cmp	r3, #0
 8002320:	d106      	bne.n	8002330 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2200      	movs	r2, #0
 8002326:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800232a:	6878      	ldr	r0, [r7, #4]
 800232c:	f7fe fe86 	bl	800103c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2224      	movs	r2, #36	; 0x24
 8002334:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f022 0201 	bic.w	r2, r2, #1
 8002346:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	685a      	ldr	r2, [r3, #4]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002354:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	689a      	ldr	r2, [r3, #8]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002364:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	68db      	ldr	r3, [r3, #12]
 800236a:	2b01      	cmp	r3, #1
 800236c:	d107      	bne.n	800237e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	689a      	ldr	r2, [r3, #8]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800237a:	609a      	str	r2, [r3, #8]
 800237c:	e006      	b.n	800238c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	689a      	ldr	r2, [r3, #8]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800238a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	2b02      	cmp	r3, #2
 8002392:	d104      	bne.n	800239e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800239c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	687a      	ldr	r2, [r7, #4]
 80023a6:	6812      	ldr	r2, [r2, #0]
 80023a8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80023ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023b0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	68da      	ldr	r2, [r3, #12]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80023c0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	691a      	ldr	r2, [r3, #16]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	695b      	ldr	r3, [r3, #20]
 80023ca:	ea42 0103 	orr.w	r1, r2, r3
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	699b      	ldr	r3, [r3, #24]
 80023d2:	021a      	lsls	r2, r3, #8
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	430a      	orrs	r2, r1
 80023da:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	69d9      	ldr	r1, [r3, #28]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6a1a      	ldr	r2, [r3, #32]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	430a      	orrs	r2, r1
 80023ea:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f042 0201 	orr.w	r2, r2, #1
 80023fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2200      	movs	r2, #0
 8002400:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2220      	movs	r2, #32
 8002406:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2200      	movs	r2, #0
 800240e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2200      	movs	r2, #0
 8002414:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002418:	2300      	movs	r3, #0
}
 800241a:	4618      	mov	r0, r3
 800241c:	3708      	adds	r7, #8
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
	...

08002424 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b088      	sub	sp, #32
 8002428:	af02      	add	r7, sp, #8
 800242a:	60f8      	str	r0, [r7, #12]
 800242c:	607a      	str	r2, [r7, #4]
 800242e:	461a      	mov	r2, r3
 8002430:	460b      	mov	r3, r1
 8002432:	817b      	strh	r3, [r7, #10]
 8002434:	4613      	mov	r3, r2
 8002436:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800243e:	b2db      	uxtb	r3, r3
 8002440:	2b20      	cmp	r3, #32
 8002442:	f040 80da 	bne.w	80025fa <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800244c:	2b01      	cmp	r3, #1
 800244e:	d101      	bne.n	8002454 <HAL_I2C_Master_Transmit+0x30>
 8002450:	2302      	movs	r3, #2
 8002452:	e0d3      	b.n	80025fc <HAL_I2C_Master_Transmit+0x1d8>
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	2201      	movs	r2, #1
 8002458:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800245c:	f7ff fbf0 	bl	8001c40 <HAL_GetTick>
 8002460:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	9300      	str	r3, [sp, #0]
 8002466:	2319      	movs	r3, #25
 8002468:	2201      	movs	r2, #1
 800246a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800246e:	68f8      	ldr	r0, [r7, #12]
 8002470:	f000 f9f7 	bl	8002862 <I2C_WaitOnFlagUntilTimeout>
 8002474:	4603      	mov	r3, r0
 8002476:	2b00      	cmp	r3, #0
 8002478:	d001      	beq.n	800247e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e0be      	b.n	80025fc <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	2221      	movs	r2, #33	; 0x21
 8002482:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	2210      	movs	r2, #16
 800248a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	2200      	movs	r2, #0
 8002492:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	687a      	ldr	r2, [r7, #4]
 8002498:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	893a      	ldrh	r2, [r7, #8]
 800249e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	2200      	movs	r2, #0
 80024a4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024aa:	b29b      	uxth	r3, r3
 80024ac:	2bff      	cmp	r3, #255	; 0xff
 80024ae:	d90e      	bls.n	80024ce <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	22ff      	movs	r2, #255	; 0xff
 80024b4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024ba:	b2da      	uxtb	r2, r3
 80024bc:	8979      	ldrh	r1, [r7, #10]
 80024be:	4b51      	ldr	r3, [pc, #324]	; (8002604 <HAL_I2C_Master_Transmit+0x1e0>)
 80024c0:	9300      	str	r3, [sp, #0]
 80024c2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80024c6:	68f8      	ldr	r0, [r7, #12]
 80024c8:	f000 faee 	bl	8002aa8 <I2C_TransferConfig>
 80024cc:	e06c      	b.n	80025a8 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024d2:	b29a      	uxth	r2, r3
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024dc:	b2da      	uxtb	r2, r3
 80024de:	8979      	ldrh	r1, [r7, #10]
 80024e0:	4b48      	ldr	r3, [pc, #288]	; (8002604 <HAL_I2C_Master_Transmit+0x1e0>)
 80024e2:	9300      	str	r3, [sp, #0]
 80024e4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80024e8:	68f8      	ldr	r0, [r7, #12]
 80024ea:	f000 fadd 	bl	8002aa8 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80024ee:	e05b      	b.n	80025a8 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024f0:	697a      	ldr	r2, [r7, #20]
 80024f2:	6a39      	ldr	r1, [r7, #32]
 80024f4:	68f8      	ldr	r0, [r7, #12]
 80024f6:	f000 f9f4 	bl	80028e2 <I2C_WaitOnTXISFlagUntilTimeout>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d001      	beq.n	8002504 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002500:	2301      	movs	r3, #1
 8002502:	e07b      	b.n	80025fc <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002508:	781a      	ldrb	r2, [r3, #0]
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002514:	1c5a      	adds	r2, r3, #1
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800251e:	b29b      	uxth	r3, r3
 8002520:	3b01      	subs	r3, #1
 8002522:	b29a      	uxth	r2, r3
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800252c:	3b01      	subs	r3, #1
 800252e:	b29a      	uxth	r2, r3
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002538:	b29b      	uxth	r3, r3
 800253a:	2b00      	cmp	r3, #0
 800253c:	d034      	beq.n	80025a8 <HAL_I2C_Master_Transmit+0x184>
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002542:	2b00      	cmp	r3, #0
 8002544:	d130      	bne.n	80025a8 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	9300      	str	r3, [sp, #0]
 800254a:	6a3b      	ldr	r3, [r7, #32]
 800254c:	2200      	movs	r2, #0
 800254e:	2180      	movs	r1, #128	; 0x80
 8002550:	68f8      	ldr	r0, [r7, #12]
 8002552:	f000 f986 	bl	8002862 <I2C_WaitOnFlagUntilTimeout>
 8002556:	4603      	mov	r3, r0
 8002558:	2b00      	cmp	r3, #0
 800255a:	d001      	beq.n	8002560 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800255c:	2301      	movs	r3, #1
 800255e:	e04d      	b.n	80025fc <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002564:	b29b      	uxth	r3, r3
 8002566:	2bff      	cmp	r3, #255	; 0xff
 8002568:	d90e      	bls.n	8002588 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	22ff      	movs	r2, #255	; 0xff
 800256e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002574:	b2da      	uxtb	r2, r3
 8002576:	8979      	ldrh	r1, [r7, #10]
 8002578:	2300      	movs	r3, #0
 800257a:	9300      	str	r3, [sp, #0]
 800257c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002580:	68f8      	ldr	r0, [r7, #12]
 8002582:	f000 fa91 	bl	8002aa8 <I2C_TransferConfig>
 8002586:	e00f      	b.n	80025a8 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800258c:	b29a      	uxth	r2, r3
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002596:	b2da      	uxtb	r2, r3
 8002598:	8979      	ldrh	r1, [r7, #10]
 800259a:	2300      	movs	r3, #0
 800259c:	9300      	str	r3, [sp, #0]
 800259e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80025a2:	68f8      	ldr	r0, [r7, #12]
 80025a4:	f000 fa80 	bl	8002aa8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025ac:	b29b      	uxth	r3, r3
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d19e      	bne.n	80024f0 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025b2:	697a      	ldr	r2, [r7, #20]
 80025b4:	6a39      	ldr	r1, [r7, #32]
 80025b6:	68f8      	ldr	r0, [r7, #12]
 80025b8:	f000 f9d3 	bl	8002962 <I2C_WaitOnSTOPFlagUntilTimeout>
 80025bc:	4603      	mov	r3, r0
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d001      	beq.n	80025c6 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e01a      	b.n	80025fc <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	2220      	movs	r2, #32
 80025cc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	6859      	ldr	r1, [r3, #4]
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	4b0b      	ldr	r3, [pc, #44]	; (8002608 <HAL_I2C_Master_Transmit+0x1e4>)
 80025da:	400b      	ands	r3, r1
 80025dc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	2220      	movs	r2, #32
 80025e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	2200      	movs	r2, #0
 80025ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	2200      	movs	r2, #0
 80025f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80025f6:	2300      	movs	r3, #0
 80025f8:	e000      	b.n	80025fc <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80025fa:	2302      	movs	r3, #2
  }
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	3718      	adds	r7, #24
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}
 8002604:	80002000 	.word	0x80002000
 8002608:	fe00e800 	.word	0xfe00e800

0800260c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b08a      	sub	sp, #40	; 0x28
 8002610:	af02      	add	r7, sp, #8
 8002612:	60f8      	str	r0, [r7, #12]
 8002614:	607a      	str	r2, [r7, #4]
 8002616:	603b      	str	r3, [r7, #0]
 8002618:	460b      	mov	r3, r1
 800261a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 800261c:	2300      	movs	r3, #0
 800261e:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002626:	b2db      	uxtb	r3, r3
 8002628:	2b20      	cmp	r3, #32
 800262a:	f040 80f1 	bne.w	8002810 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	699b      	ldr	r3, [r3, #24]
 8002634:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002638:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800263c:	d101      	bne.n	8002642 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 800263e:	2302      	movs	r3, #2
 8002640:	e0e7      	b.n	8002812 <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002648:	2b01      	cmp	r3, #1
 800264a:	d101      	bne.n	8002650 <HAL_I2C_IsDeviceReady+0x44>
 800264c:	2302      	movs	r3, #2
 800264e:	e0e0      	b.n	8002812 <HAL_I2C_IsDeviceReady+0x206>
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	2201      	movs	r2, #1
 8002654:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	2224      	movs	r2, #36	; 0x24
 800265c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	2200      	movs	r2, #0
 8002664:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	68db      	ldr	r3, [r3, #12]
 800266a:	2b01      	cmp	r3, #1
 800266c:	d107      	bne.n	800267e <HAL_I2C_IsDeviceReady+0x72>
 800266e:	897b      	ldrh	r3, [r7, #10]
 8002670:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002674:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002678:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800267c:	e004      	b.n	8002688 <HAL_I2C_IsDeviceReady+0x7c>
 800267e:	897b      	ldrh	r3, [r7, #10]
 8002680:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002684:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8002688:	68fa      	ldr	r2, [r7, #12]
 800268a:	6812      	ldr	r2, [r2, #0]
 800268c:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800268e:	f7ff fad7 	bl	8001c40 <HAL_GetTick>
 8002692:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	699b      	ldr	r3, [r3, #24]
 800269a:	f003 0320 	and.w	r3, r3, #32
 800269e:	2b20      	cmp	r3, #32
 80026a0:	bf0c      	ite	eq
 80026a2:	2301      	moveq	r3, #1
 80026a4:	2300      	movne	r3, #0
 80026a6:	b2db      	uxtb	r3, r3
 80026a8:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	699b      	ldr	r3, [r3, #24]
 80026b0:	f003 0310 	and.w	r3, r3, #16
 80026b4:	2b10      	cmp	r3, #16
 80026b6:	bf0c      	ite	eq
 80026b8:	2301      	moveq	r3, #1
 80026ba:	2300      	movne	r3, #0
 80026bc:	b2db      	uxtb	r3, r3
 80026be:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80026c0:	e034      	b.n	800272c <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80026c8:	d01a      	beq.n	8002700 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80026ca:	f7ff fab9 	bl	8001c40 <HAL_GetTick>
 80026ce:	4602      	mov	r2, r0
 80026d0:	69bb      	ldr	r3, [r7, #24]
 80026d2:	1ad3      	subs	r3, r2, r3
 80026d4:	683a      	ldr	r2, [r7, #0]
 80026d6:	429a      	cmp	r2, r3
 80026d8:	d302      	bcc.n	80026e0 <HAL_I2C_IsDeviceReady+0xd4>
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d10f      	bne.n	8002700 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	2220      	movs	r2, #32
 80026e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ec:	f043 0220 	orr.w	r2, r3, #32
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	2200      	movs	r2, #0
 80026f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 80026fc:	2301      	movs	r3, #1
 80026fe:	e088      	b.n	8002812 <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	699b      	ldr	r3, [r3, #24]
 8002706:	f003 0320 	and.w	r3, r3, #32
 800270a:	2b20      	cmp	r3, #32
 800270c:	bf0c      	ite	eq
 800270e:	2301      	moveq	r3, #1
 8002710:	2300      	movne	r3, #0
 8002712:	b2db      	uxtb	r3, r3
 8002714:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	699b      	ldr	r3, [r3, #24]
 800271c:	f003 0310 	and.w	r3, r3, #16
 8002720:	2b10      	cmp	r3, #16
 8002722:	bf0c      	ite	eq
 8002724:	2301      	moveq	r3, #1
 8002726:	2300      	movne	r3, #0
 8002728:	b2db      	uxtb	r3, r3
 800272a:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 800272c:	7ffb      	ldrb	r3, [r7, #31]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d102      	bne.n	8002738 <HAL_I2C_IsDeviceReady+0x12c>
 8002732:	7fbb      	ldrb	r3, [r7, #30]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d0c4      	beq.n	80026c2 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	699b      	ldr	r3, [r3, #24]
 800273e:	f003 0310 	and.w	r3, r3, #16
 8002742:	2b10      	cmp	r3, #16
 8002744:	d01a      	beq.n	800277c <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002746:	69bb      	ldr	r3, [r7, #24]
 8002748:	9300      	str	r3, [sp, #0]
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	2200      	movs	r2, #0
 800274e:	2120      	movs	r1, #32
 8002750:	68f8      	ldr	r0, [r7, #12]
 8002752:	f000 f886 	bl	8002862 <I2C_WaitOnFlagUntilTimeout>
 8002756:	4603      	mov	r3, r0
 8002758:	2b00      	cmp	r3, #0
 800275a:	d001      	beq.n	8002760 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 800275c:	2301      	movs	r3, #1
 800275e:	e058      	b.n	8002812 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	2220      	movs	r2, #32
 8002766:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	2220      	movs	r2, #32
 800276c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	2200      	movs	r2, #0
 8002774:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8002778:	2300      	movs	r3, #0
 800277a:	e04a      	b.n	8002812 <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800277c:	69bb      	ldr	r3, [r7, #24]
 800277e:	9300      	str	r3, [sp, #0]
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	2200      	movs	r2, #0
 8002784:	2120      	movs	r1, #32
 8002786:	68f8      	ldr	r0, [r7, #12]
 8002788:	f000 f86b 	bl	8002862 <I2C_WaitOnFlagUntilTimeout>
 800278c:	4603      	mov	r3, r0
 800278e:	2b00      	cmp	r3, #0
 8002790:	d001      	beq.n	8002796 <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	e03d      	b.n	8002812 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	2210      	movs	r2, #16
 800279c:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	2220      	movs	r2, #32
 80027a4:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	687a      	ldr	r2, [r7, #4]
 80027aa:	429a      	cmp	r2, r3
 80027ac:	d118      	bne.n	80027e0 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	685a      	ldr	r2, [r3, #4]
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80027bc:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80027be:	69bb      	ldr	r3, [r7, #24]
 80027c0:	9300      	str	r3, [sp, #0]
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	2200      	movs	r2, #0
 80027c6:	2120      	movs	r1, #32
 80027c8:	68f8      	ldr	r0, [r7, #12]
 80027ca:	f000 f84a 	bl	8002862 <I2C_WaitOnFlagUntilTimeout>
 80027ce:	4603      	mov	r3, r0
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d001      	beq.n	80027d8 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	e01c      	b.n	8002812 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	2220      	movs	r2, #32
 80027de:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	3301      	adds	r3, #1
 80027e4:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	687a      	ldr	r2, [r7, #4]
 80027ea:	429a      	cmp	r2, r3
 80027ec:	f63f af3b 	bhi.w	8002666 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	2220      	movs	r2, #32
 80027f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027fc:	f043 0220 	orr.w	r2, r3, #32
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	2200      	movs	r2, #0
 8002808:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	e000      	b.n	8002812 <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8002810:	2302      	movs	r3, #2
  }
}
 8002812:	4618      	mov	r0, r3
 8002814:	3720      	adds	r7, #32
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}

0800281a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800281a:	b480      	push	{r7}
 800281c:	b083      	sub	sp, #12
 800281e:	af00      	add	r7, sp, #0
 8002820:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	699b      	ldr	r3, [r3, #24]
 8002828:	f003 0302 	and.w	r3, r3, #2
 800282c:	2b02      	cmp	r3, #2
 800282e:	d103      	bne.n	8002838 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	2200      	movs	r2, #0
 8002836:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	699b      	ldr	r3, [r3, #24]
 800283e:	f003 0301 	and.w	r3, r3, #1
 8002842:	2b01      	cmp	r3, #1
 8002844:	d007      	beq.n	8002856 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	699a      	ldr	r2, [r3, #24]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f042 0201 	orr.w	r2, r2, #1
 8002854:	619a      	str	r2, [r3, #24]
  }
}
 8002856:	bf00      	nop
 8002858:	370c      	adds	r7, #12
 800285a:	46bd      	mov	sp, r7
 800285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002860:	4770      	bx	lr

08002862 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002862:	b580      	push	{r7, lr}
 8002864:	b084      	sub	sp, #16
 8002866:	af00      	add	r7, sp, #0
 8002868:	60f8      	str	r0, [r7, #12]
 800286a:	60b9      	str	r1, [r7, #8]
 800286c:	603b      	str	r3, [r7, #0]
 800286e:	4613      	mov	r3, r2
 8002870:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002872:	e022      	b.n	80028ba <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800287a:	d01e      	beq.n	80028ba <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800287c:	f7ff f9e0 	bl	8001c40 <HAL_GetTick>
 8002880:	4602      	mov	r2, r0
 8002882:	69bb      	ldr	r3, [r7, #24]
 8002884:	1ad3      	subs	r3, r2, r3
 8002886:	683a      	ldr	r2, [r7, #0]
 8002888:	429a      	cmp	r2, r3
 800288a:	d302      	bcc.n	8002892 <I2C_WaitOnFlagUntilTimeout+0x30>
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d113      	bne.n	80028ba <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002896:	f043 0220 	orr.w	r2, r3, #32
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	2220      	movs	r2, #32
 80028a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2200      	movs	r2, #0
 80028aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	2200      	movs	r2, #0
 80028b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e00f      	b.n	80028da <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	699a      	ldr	r2, [r3, #24]
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	4013      	ands	r3, r2
 80028c4:	68ba      	ldr	r2, [r7, #8]
 80028c6:	429a      	cmp	r2, r3
 80028c8:	bf0c      	ite	eq
 80028ca:	2301      	moveq	r3, #1
 80028cc:	2300      	movne	r3, #0
 80028ce:	b2db      	uxtb	r3, r3
 80028d0:	461a      	mov	r2, r3
 80028d2:	79fb      	ldrb	r3, [r7, #7]
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d0cd      	beq.n	8002874 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80028d8:	2300      	movs	r3, #0
}
 80028da:	4618      	mov	r0, r3
 80028dc:	3710      	adds	r7, #16
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}

080028e2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80028e2:	b580      	push	{r7, lr}
 80028e4:	b084      	sub	sp, #16
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	60f8      	str	r0, [r7, #12]
 80028ea:	60b9      	str	r1, [r7, #8]
 80028ec:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80028ee:	e02c      	b.n	800294a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80028f0:	687a      	ldr	r2, [r7, #4]
 80028f2:	68b9      	ldr	r1, [r7, #8]
 80028f4:	68f8      	ldr	r0, [r7, #12]
 80028f6:	f000 f871 	bl	80029dc <I2C_IsAcknowledgeFailed>
 80028fa:	4603      	mov	r3, r0
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d001      	beq.n	8002904 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	e02a      	b.n	800295a <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800290a:	d01e      	beq.n	800294a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800290c:	f7ff f998 	bl	8001c40 <HAL_GetTick>
 8002910:	4602      	mov	r2, r0
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	1ad3      	subs	r3, r2, r3
 8002916:	68ba      	ldr	r2, [r7, #8]
 8002918:	429a      	cmp	r2, r3
 800291a:	d302      	bcc.n	8002922 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d113      	bne.n	800294a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002926:	f043 0220 	orr.w	r2, r3, #32
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	2220      	movs	r2, #32
 8002932:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	2200      	movs	r2, #0
 800293a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	2200      	movs	r2, #0
 8002942:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e007      	b.n	800295a <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	699b      	ldr	r3, [r3, #24]
 8002950:	f003 0302 	and.w	r3, r3, #2
 8002954:	2b02      	cmp	r3, #2
 8002956:	d1cb      	bne.n	80028f0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002958:	2300      	movs	r3, #0
}
 800295a:	4618      	mov	r0, r3
 800295c:	3710      	adds	r7, #16
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}

08002962 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002962:	b580      	push	{r7, lr}
 8002964:	b084      	sub	sp, #16
 8002966:	af00      	add	r7, sp, #0
 8002968:	60f8      	str	r0, [r7, #12]
 800296a:	60b9      	str	r1, [r7, #8]
 800296c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800296e:	e028      	b.n	80029c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002970:	687a      	ldr	r2, [r7, #4]
 8002972:	68b9      	ldr	r1, [r7, #8]
 8002974:	68f8      	ldr	r0, [r7, #12]
 8002976:	f000 f831 	bl	80029dc <I2C_IsAcknowledgeFailed>
 800297a:	4603      	mov	r3, r0
 800297c:	2b00      	cmp	r3, #0
 800297e:	d001      	beq.n	8002984 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	e026      	b.n	80029d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002984:	f7ff f95c 	bl	8001c40 <HAL_GetTick>
 8002988:	4602      	mov	r2, r0
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	1ad3      	subs	r3, r2, r3
 800298e:	68ba      	ldr	r2, [r7, #8]
 8002990:	429a      	cmp	r2, r3
 8002992:	d302      	bcc.n	800299a <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d113      	bne.n	80029c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800299e:	f043 0220 	orr.w	r2, r3, #32
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	2220      	movs	r2, #32
 80029aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	2200      	movs	r2, #0
 80029b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	2200      	movs	r2, #0
 80029ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	e007      	b.n	80029d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	699b      	ldr	r3, [r3, #24]
 80029c8:	f003 0320 	and.w	r3, r3, #32
 80029cc:	2b20      	cmp	r3, #32
 80029ce:	d1cf      	bne.n	8002970 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80029d0:	2300      	movs	r3, #0
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	3710      	adds	r7, #16
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}
	...

080029dc <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b084      	sub	sp, #16
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	60f8      	str	r0, [r7, #12]
 80029e4:	60b9      	str	r1, [r7, #8]
 80029e6:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	699b      	ldr	r3, [r3, #24]
 80029ee:	f003 0310 	and.w	r3, r3, #16
 80029f2:	2b10      	cmp	r3, #16
 80029f4:	d151      	bne.n	8002a9a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80029f6:	e022      	b.n	8002a3e <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80029fe:	d01e      	beq.n	8002a3e <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a00:	f7ff f91e 	bl	8001c40 <HAL_GetTick>
 8002a04:	4602      	mov	r2, r0
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	1ad3      	subs	r3, r2, r3
 8002a0a:	68ba      	ldr	r2, [r7, #8]
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d302      	bcc.n	8002a16 <I2C_IsAcknowledgeFailed+0x3a>
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d113      	bne.n	8002a3e <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a1a:	f043 0220 	orr.w	r2, r3, #32
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	2220      	movs	r2, #32
 8002a26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	2200      	movs	r2, #0
 8002a36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e02e      	b.n	8002a9c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	699b      	ldr	r3, [r3, #24]
 8002a44:	f003 0320 	and.w	r3, r3, #32
 8002a48:	2b20      	cmp	r3, #32
 8002a4a:	d1d5      	bne.n	80029f8 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	2210      	movs	r2, #16
 8002a52:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	2220      	movs	r2, #32
 8002a5a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002a5c:	68f8      	ldr	r0, [r7, #12]
 8002a5e:	f7ff fedc 	bl	800281a <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	6859      	ldr	r1, [r3, #4]
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	4b0d      	ldr	r3, [pc, #52]	; (8002aa4 <I2C_IsAcknowledgeFailed+0xc8>)
 8002a6e:	400b      	ands	r3, r1
 8002a70:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a76:	f043 0204 	orr.w	r2, r3, #4
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	2220      	movs	r2, #32
 8002a82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2200      	movs	r2, #0
 8002a92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	e000      	b.n	8002a9c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8002a9a:	2300      	movs	r3, #0
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	3710      	adds	r7, #16
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}
 8002aa4:	fe00e800 	.word	0xfe00e800

08002aa8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b085      	sub	sp, #20
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	60f8      	str	r0, [r7, #12]
 8002ab0:	607b      	str	r3, [r7, #4]
 8002ab2:	460b      	mov	r3, r1
 8002ab4:	817b      	strh	r3, [r7, #10]
 8002ab6:	4613      	mov	r3, r2
 8002ab8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	685a      	ldr	r2, [r3, #4]
 8002ac0:	69bb      	ldr	r3, [r7, #24]
 8002ac2:	0d5b      	lsrs	r3, r3, #21
 8002ac4:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002ac8:	4b0d      	ldr	r3, [pc, #52]	; (8002b00 <I2C_TransferConfig+0x58>)
 8002aca:	430b      	orrs	r3, r1
 8002acc:	43db      	mvns	r3, r3
 8002ace:	ea02 0103 	and.w	r1, r2, r3
 8002ad2:	897b      	ldrh	r3, [r7, #10]
 8002ad4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002ad8:	7a7b      	ldrb	r3, [r7, #9]
 8002ada:	041b      	lsls	r3, r3, #16
 8002adc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002ae0:	431a      	orrs	r2, r3
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	431a      	orrs	r2, r3
 8002ae6:	69bb      	ldr	r3, [r7, #24]
 8002ae8:	431a      	orrs	r2, r3
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	430a      	orrs	r2, r1
 8002af0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8002af2:	bf00      	nop
 8002af4:	3714      	adds	r7, #20
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr
 8002afe:	bf00      	nop
 8002b00:	03ff63ff 	.word	0x03ff63ff

08002b04 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b083      	sub	sp, #12
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
 8002b0c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b14:	b2db      	uxtb	r3, r3
 8002b16:	2b20      	cmp	r3, #32
 8002b18:	d138      	bne.n	8002b8c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	d101      	bne.n	8002b28 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002b24:	2302      	movs	r3, #2
 8002b26:	e032      	b.n	8002b8e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2224      	movs	r2, #36	; 0x24
 8002b34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f022 0201 	bic.w	r2, r2, #1
 8002b46:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002b56:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	6819      	ldr	r1, [r3, #0]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	683a      	ldr	r2, [r7, #0]
 8002b64:	430a      	orrs	r2, r1
 8002b66:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f042 0201 	orr.w	r2, r2, #1
 8002b76:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2220      	movs	r2, #32
 8002b7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2200      	movs	r2, #0
 8002b84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	e000      	b.n	8002b8e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002b8c:	2302      	movs	r3, #2
  }
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	370c      	adds	r7, #12
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr

08002b9a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002b9a:	b480      	push	{r7}
 8002b9c:	b085      	sub	sp, #20
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	6078      	str	r0, [r7, #4]
 8002ba2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002baa:	b2db      	uxtb	r3, r3
 8002bac:	2b20      	cmp	r3, #32
 8002bae:	d139      	bne.n	8002c24 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d101      	bne.n	8002bbe <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002bba:	2302      	movs	r3, #2
 8002bbc:	e033      	b.n	8002c26 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2224      	movs	r2, #36	; 0x24
 8002bca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f022 0201 	bic.w	r2, r2, #1
 8002bdc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002bec:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	021b      	lsls	r3, r3, #8
 8002bf2:	68fa      	ldr	r2, [r7, #12]
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	68fa      	ldr	r2, [r7, #12]
 8002bfe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f042 0201 	orr.w	r2, r2, #1
 8002c0e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2220      	movs	r2, #32
 8002c14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002c20:	2300      	movs	r3, #0
 8002c22:	e000      	b.n	8002c26 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002c24:	2302      	movs	r3, #2
  }
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3714      	adds	r7, #20
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr
	...

08002c34 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002c34:	b480      	push	{r7}
 8002c36:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002c38:	4b04      	ldr	r3, [pc, #16]	; (8002c4c <HAL_PWREx_GetVoltageRange+0x18>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr
 8002c4a:	bf00      	nop
 8002c4c:	40007000 	.word	0x40007000

08002c50 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b085      	sub	sp, #20
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c5e:	d130      	bne.n	8002cc2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c60:	4b23      	ldr	r3, [pc, #140]	; (8002cf0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002c68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c6c:	d038      	beq.n	8002ce0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c6e:	4b20      	ldr	r3, [pc, #128]	; (8002cf0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002c76:	4a1e      	ldr	r2, [pc, #120]	; (8002cf0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c78:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c7c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002c7e:	4b1d      	ldr	r3, [pc, #116]	; (8002cf4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	2232      	movs	r2, #50	; 0x32
 8002c84:	fb02 f303 	mul.w	r3, r2, r3
 8002c88:	4a1b      	ldr	r2, [pc, #108]	; (8002cf8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002c8a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c8e:	0c9b      	lsrs	r3, r3, #18
 8002c90:	3301      	adds	r3, #1
 8002c92:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c94:	e002      	b.n	8002c9c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	3b01      	subs	r3, #1
 8002c9a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c9c:	4b14      	ldr	r3, [pc, #80]	; (8002cf0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c9e:	695b      	ldr	r3, [r3, #20]
 8002ca0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ca4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ca8:	d102      	bne.n	8002cb0 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d1f2      	bne.n	8002c96 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002cb0:	4b0f      	ldr	r3, [pc, #60]	; (8002cf0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002cb2:	695b      	ldr	r3, [r3, #20]
 8002cb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cbc:	d110      	bne.n	8002ce0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002cbe:	2303      	movs	r3, #3
 8002cc0:	e00f      	b.n	8002ce2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002cc2:	4b0b      	ldr	r3, [pc, #44]	; (8002cf0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002cca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cce:	d007      	beq.n	8002ce0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002cd0:	4b07      	ldr	r3, [pc, #28]	; (8002cf0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002cd8:	4a05      	ldr	r2, [pc, #20]	; (8002cf0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002cda:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002cde:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002ce0:	2300      	movs	r3, #0
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3714      	adds	r7, #20
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr
 8002cee:	bf00      	nop
 8002cf0:	40007000 	.word	0x40007000
 8002cf4:	20000010 	.word	0x20000010
 8002cf8:	431bde83 	.word	0x431bde83

08002cfc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b08a      	sub	sp, #40	; 0x28
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d102      	bne.n	8002d10 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	f000 bc56 	b.w	80035bc <HAL_RCC_OscConfig+0x8c0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d10:	4ba1      	ldr	r3, [pc, #644]	; (8002f98 <HAL_RCC_OscConfig+0x29c>)
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	f003 030c 	and.w	r3, r3, #12
 8002d18:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d1a:	4b9f      	ldr	r3, [pc, #636]	; (8002f98 <HAL_RCC_OscConfig+0x29c>)
 8002d1c:	68db      	ldr	r3, [r3, #12]
 8002d1e:	f003 0303 	and.w	r3, r3, #3
 8002d22:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f003 0310 	and.w	r3, r3, #16
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	f000 80e6 	beq.w	8002efe <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002d32:	6a3b      	ldr	r3, [r7, #32]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d007      	beq.n	8002d48 <HAL_RCC_OscConfig+0x4c>
 8002d38:	6a3b      	ldr	r3, [r7, #32]
 8002d3a:	2b0c      	cmp	r3, #12
 8002d3c:	f040 808d 	bne.w	8002e5a <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002d40:	69fb      	ldr	r3, [r7, #28]
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	f040 8089 	bne.w	8002e5a <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002d48:	4b93      	ldr	r3, [pc, #588]	; (8002f98 <HAL_RCC_OscConfig+0x29c>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f003 0302 	and.w	r3, r3, #2
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d006      	beq.n	8002d62 <HAL_RCC_OscConfig+0x66>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	69db      	ldr	r3, [r3, #28]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d102      	bne.n	8002d62 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	f000 bc2d 	b.w	80035bc <HAL_RCC_OscConfig+0x8c0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d66:	4b8c      	ldr	r3, [pc, #560]	; (8002f98 <HAL_RCC_OscConfig+0x29c>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f003 0308 	and.w	r3, r3, #8
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d004      	beq.n	8002d7c <HAL_RCC_OscConfig+0x80>
 8002d72:	4b89      	ldr	r3, [pc, #548]	; (8002f98 <HAL_RCC_OscConfig+0x29c>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d7a:	e005      	b.n	8002d88 <HAL_RCC_OscConfig+0x8c>
 8002d7c:	4b86      	ldr	r3, [pc, #536]	; (8002f98 <HAL_RCC_OscConfig+0x29c>)
 8002d7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d82:	091b      	lsrs	r3, r3, #4
 8002d84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d224      	bcs.n	8002dd6 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d90:	4618      	mov	r0, r3
 8002d92:	f000 fdbf 	bl	8003914 <RCC_SetFlashLatencyFromMSIRange>
 8002d96:	4603      	mov	r3, r0
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d002      	beq.n	8002da2 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	f000 bc0d 	b.w	80035bc <HAL_RCC_OscConfig+0x8c0>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002da2:	4b7d      	ldr	r3, [pc, #500]	; (8002f98 <HAL_RCC_OscConfig+0x29c>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a7c      	ldr	r2, [pc, #496]	; (8002f98 <HAL_RCC_OscConfig+0x29c>)
 8002da8:	f043 0308 	orr.w	r3, r3, #8
 8002dac:	6013      	str	r3, [r2, #0]
 8002dae:	4b7a      	ldr	r3, [pc, #488]	; (8002f98 <HAL_RCC_OscConfig+0x29c>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dba:	4977      	ldr	r1, [pc, #476]	; (8002f98 <HAL_RCC_OscConfig+0x29c>)
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002dc0:	4b75      	ldr	r3, [pc, #468]	; (8002f98 <HAL_RCC_OscConfig+0x29c>)
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6a1b      	ldr	r3, [r3, #32]
 8002dcc:	021b      	lsls	r3, r3, #8
 8002dce:	4972      	ldr	r1, [pc, #456]	; (8002f98 <HAL_RCC_OscConfig+0x29c>)
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	604b      	str	r3, [r1, #4]
 8002dd4:	e025      	b.n	8002e22 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002dd6:	4b70      	ldr	r3, [pc, #448]	; (8002f98 <HAL_RCC_OscConfig+0x29c>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a6f      	ldr	r2, [pc, #444]	; (8002f98 <HAL_RCC_OscConfig+0x29c>)
 8002ddc:	f043 0308 	orr.w	r3, r3, #8
 8002de0:	6013      	str	r3, [r2, #0]
 8002de2:	4b6d      	ldr	r3, [pc, #436]	; (8002f98 <HAL_RCC_OscConfig+0x29c>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dee:	496a      	ldr	r1, [pc, #424]	; (8002f98 <HAL_RCC_OscConfig+0x29c>)
 8002df0:	4313      	orrs	r3, r2
 8002df2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002df4:	4b68      	ldr	r3, [pc, #416]	; (8002f98 <HAL_RCC_OscConfig+0x29c>)
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6a1b      	ldr	r3, [r3, #32]
 8002e00:	021b      	lsls	r3, r3, #8
 8002e02:	4965      	ldr	r1, [pc, #404]	; (8002f98 <HAL_RCC_OscConfig+0x29c>)
 8002e04:	4313      	orrs	r3, r2
 8002e06:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e08:	6a3b      	ldr	r3, [r7, #32]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d109      	bne.n	8002e22 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e12:	4618      	mov	r0, r3
 8002e14:	f000 fd7e 	bl	8003914 <RCC_SetFlashLatencyFromMSIRange>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d001      	beq.n	8002e22 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e3cc      	b.n	80035bc <HAL_RCC_OscConfig+0x8c0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002e22:	f000 fcb3 	bl	800378c <HAL_RCC_GetSysClockFreq>
 8002e26:	4602      	mov	r2, r0
 8002e28:	4b5b      	ldr	r3, [pc, #364]	; (8002f98 <HAL_RCC_OscConfig+0x29c>)
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	091b      	lsrs	r3, r3, #4
 8002e2e:	f003 030f 	and.w	r3, r3, #15
 8002e32:	495a      	ldr	r1, [pc, #360]	; (8002f9c <HAL_RCC_OscConfig+0x2a0>)
 8002e34:	5ccb      	ldrb	r3, [r1, r3]
 8002e36:	f003 031f 	and.w	r3, r3, #31
 8002e3a:	fa22 f303 	lsr.w	r3, r2, r3
 8002e3e:	4a58      	ldr	r2, [pc, #352]	; (8002fa0 <HAL_RCC_OscConfig+0x2a4>)
 8002e40:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002e42:	4b58      	ldr	r3, [pc, #352]	; (8002fa4 <HAL_RCC_OscConfig+0x2a8>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4618      	mov	r0, r3
 8002e48:	f7fe feaa 	bl	8001ba0 <HAL_InitTick>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8002e50:	7dfb      	ldrb	r3, [r7, #23]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d052      	beq.n	8002efc <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8002e56:	7dfb      	ldrb	r3, [r7, #23]
 8002e58:	e3b0      	b.n	80035bc <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	69db      	ldr	r3, [r3, #28]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d032      	beq.n	8002ec8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002e62:	4b4d      	ldr	r3, [pc, #308]	; (8002f98 <HAL_RCC_OscConfig+0x29c>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a4c      	ldr	r2, [pc, #304]	; (8002f98 <HAL_RCC_OscConfig+0x29c>)
 8002e68:	f043 0301 	orr.w	r3, r3, #1
 8002e6c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002e6e:	f7fe fee7 	bl	8001c40 <HAL_GetTick>
 8002e72:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e74:	e008      	b.n	8002e88 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e76:	f7fe fee3 	bl	8001c40 <HAL_GetTick>
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	69bb      	ldr	r3, [r7, #24]
 8002e7e:	1ad3      	subs	r3, r2, r3
 8002e80:	2b02      	cmp	r3, #2
 8002e82:	d901      	bls.n	8002e88 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8002e84:	2303      	movs	r3, #3
 8002e86:	e399      	b.n	80035bc <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e88:	4b43      	ldr	r3, [pc, #268]	; (8002f98 <HAL_RCC_OscConfig+0x29c>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f003 0302 	and.w	r3, r3, #2
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d0f0      	beq.n	8002e76 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e94:	4b40      	ldr	r3, [pc, #256]	; (8002f98 <HAL_RCC_OscConfig+0x29c>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a3f      	ldr	r2, [pc, #252]	; (8002f98 <HAL_RCC_OscConfig+0x29c>)
 8002e9a:	f043 0308 	orr.w	r3, r3, #8
 8002e9e:	6013      	str	r3, [r2, #0]
 8002ea0:	4b3d      	ldr	r3, [pc, #244]	; (8002f98 <HAL_RCC_OscConfig+0x29c>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eac:	493a      	ldr	r1, [pc, #232]	; (8002f98 <HAL_RCC_OscConfig+0x29c>)
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002eb2:	4b39      	ldr	r3, [pc, #228]	; (8002f98 <HAL_RCC_OscConfig+0x29c>)
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6a1b      	ldr	r3, [r3, #32]
 8002ebe:	021b      	lsls	r3, r3, #8
 8002ec0:	4935      	ldr	r1, [pc, #212]	; (8002f98 <HAL_RCC_OscConfig+0x29c>)
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	604b      	str	r3, [r1, #4]
 8002ec6:	e01a      	b.n	8002efe <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002ec8:	4b33      	ldr	r3, [pc, #204]	; (8002f98 <HAL_RCC_OscConfig+0x29c>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a32      	ldr	r2, [pc, #200]	; (8002f98 <HAL_RCC_OscConfig+0x29c>)
 8002ece:	f023 0301 	bic.w	r3, r3, #1
 8002ed2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002ed4:	f7fe feb4 	bl	8001c40 <HAL_GetTick>
 8002ed8:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002eda:	e008      	b.n	8002eee <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002edc:	f7fe feb0 	bl	8001c40 <HAL_GetTick>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	69bb      	ldr	r3, [r7, #24]
 8002ee4:	1ad3      	subs	r3, r2, r3
 8002ee6:	2b02      	cmp	r3, #2
 8002ee8:	d901      	bls.n	8002eee <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002eea:	2303      	movs	r3, #3
 8002eec:	e366      	b.n	80035bc <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002eee:	4b2a      	ldr	r3, [pc, #168]	; (8002f98 <HAL_RCC_OscConfig+0x29c>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 0302 	and.w	r3, r3, #2
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d1f0      	bne.n	8002edc <HAL_RCC_OscConfig+0x1e0>
 8002efa:	e000      	b.n	8002efe <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002efc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 0301 	and.w	r3, r3, #1
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d073      	beq.n	8002ff2 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002f0a:	6a3b      	ldr	r3, [r7, #32]
 8002f0c:	2b08      	cmp	r3, #8
 8002f0e:	d005      	beq.n	8002f1c <HAL_RCC_OscConfig+0x220>
 8002f10:	6a3b      	ldr	r3, [r7, #32]
 8002f12:	2b0c      	cmp	r3, #12
 8002f14:	d10e      	bne.n	8002f34 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002f16:	69fb      	ldr	r3, [r7, #28]
 8002f18:	2b03      	cmp	r3, #3
 8002f1a:	d10b      	bne.n	8002f34 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f1c:	4b1e      	ldr	r3, [pc, #120]	; (8002f98 <HAL_RCC_OscConfig+0x29c>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d063      	beq.n	8002ff0 <HAL_RCC_OscConfig+0x2f4>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d15f      	bne.n	8002ff0 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8002f30:	2301      	movs	r3, #1
 8002f32:	e343      	b.n	80035bc <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f3c:	d106      	bne.n	8002f4c <HAL_RCC_OscConfig+0x250>
 8002f3e:	4b16      	ldr	r3, [pc, #88]	; (8002f98 <HAL_RCC_OscConfig+0x29c>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a15      	ldr	r2, [pc, #84]	; (8002f98 <HAL_RCC_OscConfig+0x29c>)
 8002f44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f48:	6013      	str	r3, [r2, #0]
 8002f4a:	e01d      	b.n	8002f88 <HAL_RCC_OscConfig+0x28c>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f54:	d10c      	bne.n	8002f70 <HAL_RCC_OscConfig+0x274>
 8002f56:	4b10      	ldr	r3, [pc, #64]	; (8002f98 <HAL_RCC_OscConfig+0x29c>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a0f      	ldr	r2, [pc, #60]	; (8002f98 <HAL_RCC_OscConfig+0x29c>)
 8002f5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f60:	6013      	str	r3, [r2, #0]
 8002f62:	4b0d      	ldr	r3, [pc, #52]	; (8002f98 <HAL_RCC_OscConfig+0x29c>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a0c      	ldr	r2, [pc, #48]	; (8002f98 <HAL_RCC_OscConfig+0x29c>)
 8002f68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f6c:	6013      	str	r3, [r2, #0]
 8002f6e:	e00b      	b.n	8002f88 <HAL_RCC_OscConfig+0x28c>
 8002f70:	4b09      	ldr	r3, [pc, #36]	; (8002f98 <HAL_RCC_OscConfig+0x29c>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a08      	ldr	r2, [pc, #32]	; (8002f98 <HAL_RCC_OscConfig+0x29c>)
 8002f76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f7a:	6013      	str	r3, [r2, #0]
 8002f7c:	4b06      	ldr	r3, [pc, #24]	; (8002f98 <HAL_RCC_OscConfig+0x29c>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a05      	ldr	r2, [pc, #20]	; (8002f98 <HAL_RCC_OscConfig+0x29c>)
 8002f82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d01b      	beq.n	8002fc8 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f90:	f7fe fe56 	bl	8001c40 <HAL_GetTick>
 8002f94:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f96:	e010      	b.n	8002fba <HAL_RCC_OscConfig+0x2be>
 8002f98:	40021000 	.word	0x40021000
 8002f9c:	08007ab4 	.word	0x08007ab4
 8002fa0:	20000010 	.word	0x20000010
 8002fa4:	20000014 	.word	0x20000014
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fa8:	f7fe fe4a 	bl	8001c40 <HAL_GetTick>
 8002fac:	4602      	mov	r2, r0
 8002fae:	69bb      	ldr	r3, [r7, #24]
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	2b64      	cmp	r3, #100	; 0x64
 8002fb4:	d901      	bls.n	8002fba <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	e300      	b.n	80035bc <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002fba:	4ba0      	ldr	r3, [pc, #640]	; (800323c <HAL_RCC_OscConfig+0x540>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d0f0      	beq.n	8002fa8 <HAL_RCC_OscConfig+0x2ac>
 8002fc6:	e014      	b.n	8002ff2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fc8:	f7fe fe3a 	bl	8001c40 <HAL_GetTick>
 8002fcc:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002fce:	e008      	b.n	8002fe2 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fd0:	f7fe fe36 	bl	8001c40 <HAL_GetTick>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	69bb      	ldr	r3, [r7, #24]
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	2b64      	cmp	r3, #100	; 0x64
 8002fdc:	d901      	bls.n	8002fe2 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8002fde:	2303      	movs	r3, #3
 8002fe0:	e2ec      	b.n	80035bc <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002fe2:	4b96      	ldr	r3, [pc, #600]	; (800323c <HAL_RCC_OscConfig+0x540>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d1f0      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x2d4>
 8002fee:	e000      	b.n	8002ff2 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ff0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 0302 	and.w	r3, r3, #2
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d060      	beq.n	80030c0 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002ffe:	6a3b      	ldr	r3, [r7, #32]
 8003000:	2b04      	cmp	r3, #4
 8003002:	d005      	beq.n	8003010 <HAL_RCC_OscConfig+0x314>
 8003004:	6a3b      	ldr	r3, [r7, #32]
 8003006:	2b0c      	cmp	r3, #12
 8003008:	d119      	bne.n	800303e <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800300a:	69fb      	ldr	r3, [r7, #28]
 800300c:	2b02      	cmp	r3, #2
 800300e:	d116      	bne.n	800303e <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003010:	4b8a      	ldr	r3, [pc, #552]	; (800323c <HAL_RCC_OscConfig+0x540>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003018:	2b00      	cmp	r3, #0
 800301a:	d005      	beq.n	8003028 <HAL_RCC_OscConfig+0x32c>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	68db      	ldr	r3, [r3, #12]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d101      	bne.n	8003028 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	e2c9      	b.n	80035bc <HAL_RCC_OscConfig+0x8c0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003028:	4b84      	ldr	r3, [pc, #528]	; (800323c <HAL_RCC_OscConfig+0x540>)
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	691b      	ldr	r3, [r3, #16]
 8003034:	061b      	lsls	r3, r3, #24
 8003036:	4981      	ldr	r1, [pc, #516]	; (800323c <HAL_RCC_OscConfig+0x540>)
 8003038:	4313      	orrs	r3, r2
 800303a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800303c:	e040      	b.n	80030c0 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	68db      	ldr	r3, [r3, #12]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d023      	beq.n	800308e <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003046:	4b7d      	ldr	r3, [pc, #500]	; (800323c <HAL_RCC_OscConfig+0x540>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a7c      	ldr	r2, [pc, #496]	; (800323c <HAL_RCC_OscConfig+0x540>)
 800304c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003050:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003052:	f7fe fdf5 	bl	8001c40 <HAL_GetTick>
 8003056:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003058:	e008      	b.n	800306c <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800305a:	f7fe fdf1 	bl	8001c40 <HAL_GetTick>
 800305e:	4602      	mov	r2, r0
 8003060:	69bb      	ldr	r3, [r7, #24]
 8003062:	1ad3      	subs	r3, r2, r3
 8003064:	2b02      	cmp	r3, #2
 8003066:	d901      	bls.n	800306c <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8003068:	2303      	movs	r3, #3
 800306a:	e2a7      	b.n	80035bc <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800306c:	4b73      	ldr	r3, [pc, #460]	; (800323c <HAL_RCC_OscConfig+0x540>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003074:	2b00      	cmp	r3, #0
 8003076:	d0f0      	beq.n	800305a <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003078:	4b70      	ldr	r3, [pc, #448]	; (800323c <HAL_RCC_OscConfig+0x540>)
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	691b      	ldr	r3, [r3, #16]
 8003084:	061b      	lsls	r3, r3, #24
 8003086:	496d      	ldr	r1, [pc, #436]	; (800323c <HAL_RCC_OscConfig+0x540>)
 8003088:	4313      	orrs	r3, r2
 800308a:	604b      	str	r3, [r1, #4]
 800308c:	e018      	b.n	80030c0 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800308e:	4b6b      	ldr	r3, [pc, #428]	; (800323c <HAL_RCC_OscConfig+0x540>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a6a      	ldr	r2, [pc, #424]	; (800323c <HAL_RCC_OscConfig+0x540>)
 8003094:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003098:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800309a:	f7fe fdd1 	bl	8001c40 <HAL_GetTick>
 800309e:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80030a0:	e008      	b.n	80030b4 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030a2:	f7fe fdcd 	bl	8001c40 <HAL_GetTick>
 80030a6:	4602      	mov	r2, r0
 80030a8:	69bb      	ldr	r3, [r7, #24]
 80030aa:	1ad3      	subs	r3, r2, r3
 80030ac:	2b02      	cmp	r3, #2
 80030ae:	d901      	bls.n	80030b4 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 80030b0:	2303      	movs	r3, #3
 80030b2:	e283      	b.n	80035bc <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80030b4:	4b61      	ldr	r3, [pc, #388]	; (800323c <HAL_RCC_OscConfig+0x540>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d1f0      	bne.n	80030a2 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f003 0308 	and.w	r3, r3, #8
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d07f      	beq.n	80031cc <HAL_RCC_OscConfig+0x4d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	695b      	ldr	r3, [r3, #20]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d05f      	beq.n	8003194 <HAL_RCC_OscConfig+0x498>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 80030d4:	4b59      	ldr	r3, [pc, #356]	; (800323c <HAL_RCC_OscConfig+0x540>)
 80030d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030da:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	699a      	ldr	r2, [r3, #24]
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	f003 0310 	and.w	r3, r3, #16
 80030e6:	429a      	cmp	r2, r3
 80030e8:	d037      	beq.n	800315a <HAL_RCC_OscConfig+0x45e>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	f003 0302 	and.w	r3, r3, #2
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d006      	beq.n	8003102 <HAL_RCC_OscConfig+0x406>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d101      	bne.n	8003102 <HAL_RCC_OscConfig+0x406>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	e25c      	b.n	80035bc <HAL_RCC_OscConfig+0x8c0>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	f003 0301 	and.w	r3, r3, #1
 8003108:	2b00      	cmp	r3, #0
 800310a:	d01b      	beq.n	8003144 <HAL_RCC_OscConfig+0x448>
        {
          __HAL_RCC_LSI_DISABLE();
 800310c:	4b4b      	ldr	r3, [pc, #300]	; (800323c <HAL_RCC_OscConfig+0x540>)
 800310e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003112:	4a4a      	ldr	r2, [pc, #296]	; (800323c <HAL_RCC_OscConfig+0x540>)
 8003114:	f023 0301 	bic.w	r3, r3, #1
 8003118:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800311c:	f7fe fd90 	bl	8001c40 <HAL_GetTick>
 8003120:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003122:	e008      	b.n	8003136 <HAL_RCC_OscConfig+0x43a>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003124:	f7fe fd8c 	bl	8001c40 <HAL_GetTick>
 8003128:	4602      	mov	r2, r0
 800312a:	69bb      	ldr	r3, [r7, #24]
 800312c:	1ad3      	subs	r3, r2, r3
 800312e:	2b11      	cmp	r3, #17
 8003130:	d901      	bls.n	8003136 <HAL_RCC_OscConfig+0x43a>
            {
              return HAL_TIMEOUT;
 8003132:	2303      	movs	r3, #3
 8003134:	e242      	b.n	80035bc <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003136:	4b41      	ldr	r3, [pc, #260]	; (800323c <HAL_RCC_OscConfig+0x540>)
 8003138:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800313c:	f003 0302 	and.w	r3, r3, #2
 8003140:	2b00      	cmp	r3, #0
 8003142:	d1ef      	bne.n	8003124 <HAL_RCC_OscConfig+0x428>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8003144:	4b3d      	ldr	r3, [pc, #244]	; (800323c <HAL_RCC_OscConfig+0x540>)
 8003146:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800314a:	f023 0210 	bic.w	r2, r3, #16
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	699b      	ldr	r3, [r3, #24]
 8003152:	493a      	ldr	r1, [pc, #232]	; (800323c <HAL_RCC_OscConfig+0x540>)
 8003154:	4313      	orrs	r3, r2
 8003156:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800315a:	4b38      	ldr	r3, [pc, #224]	; (800323c <HAL_RCC_OscConfig+0x540>)
 800315c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003160:	4a36      	ldr	r2, [pc, #216]	; (800323c <HAL_RCC_OscConfig+0x540>)
 8003162:	f043 0301 	orr.w	r3, r3, #1
 8003166:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800316a:	f7fe fd69 	bl	8001c40 <HAL_GetTick>
 800316e:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003170:	e008      	b.n	8003184 <HAL_RCC_OscConfig+0x488>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003172:	f7fe fd65 	bl	8001c40 <HAL_GetTick>
 8003176:	4602      	mov	r2, r0
 8003178:	69bb      	ldr	r3, [r7, #24]
 800317a:	1ad3      	subs	r3, r2, r3
 800317c:	2b11      	cmp	r3, #17
 800317e:	d901      	bls.n	8003184 <HAL_RCC_OscConfig+0x488>
        {
          return HAL_TIMEOUT;
 8003180:	2303      	movs	r3, #3
 8003182:	e21b      	b.n	80035bc <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003184:	4b2d      	ldr	r3, [pc, #180]	; (800323c <HAL_RCC_OscConfig+0x540>)
 8003186:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800318a:	f003 0302 	and.w	r3, r3, #2
 800318e:	2b00      	cmp	r3, #0
 8003190:	d0ef      	beq.n	8003172 <HAL_RCC_OscConfig+0x476>
 8003192:	e01b      	b.n	80031cc <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003194:	4b29      	ldr	r3, [pc, #164]	; (800323c <HAL_RCC_OscConfig+0x540>)
 8003196:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800319a:	4a28      	ldr	r2, [pc, #160]	; (800323c <HAL_RCC_OscConfig+0x540>)
 800319c:	f023 0301 	bic.w	r3, r3, #1
 80031a0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031a4:	f7fe fd4c 	bl	8001c40 <HAL_GetTick>
 80031a8:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80031aa:	e008      	b.n	80031be <HAL_RCC_OscConfig+0x4c2>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031ac:	f7fe fd48 	bl	8001c40 <HAL_GetTick>
 80031b0:	4602      	mov	r2, r0
 80031b2:	69bb      	ldr	r3, [r7, #24]
 80031b4:	1ad3      	subs	r3, r2, r3
 80031b6:	2b11      	cmp	r3, #17
 80031b8:	d901      	bls.n	80031be <HAL_RCC_OscConfig+0x4c2>
        {
          return HAL_TIMEOUT;
 80031ba:	2303      	movs	r3, #3
 80031bc:	e1fe      	b.n	80035bc <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80031be:	4b1f      	ldr	r3, [pc, #124]	; (800323c <HAL_RCC_OscConfig+0x540>)
 80031c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031c4:	f003 0302 	and.w	r3, r3, #2
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d1ef      	bne.n	80031ac <HAL_RCC_OscConfig+0x4b0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f003 0304 	and.w	r3, r3, #4
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	f000 80c1 	beq.w	800335c <HAL_RCC_OscConfig+0x660>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031da:	2300      	movs	r3, #0
 80031dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80031e0:	4b16      	ldr	r3, [pc, #88]	; (800323c <HAL_RCC_OscConfig+0x540>)
 80031e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d10e      	bne.n	800320a <HAL_RCC_OscConfig+0x50e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031ec:	4b13      	ldr	r3, [pc, #76]	; (800323c <HAL_RCC_OscConfig+0x540>)
 80031ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031f0:	4a12      	ldr	r2, [pc, #72]	; (800323c <HAL_RCC_OscConfig+0x540>)
 80031f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031f6:	6593      	str	r3, [r2, #88]	; 0x58
 80031f8:	4b10      	ldr	r3, [pc, #64]	; (800323c <HAL_RCC_OscConfig+0x540>)
 80031fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003200:	60fb      	str	r3, [r7, #12]
 8003202:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003204:	2301      	movs	r3, #1
 8003206:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800320a:	4b0d      	ldr	r3, [pc, #52]	; (8003240 <HAL_RCC_OscConfig+0x544>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003212:	2b00      	cmp	r3, #0
 8003214:	d11c      	bne.n	8003250 <HAL_RCC_OscConfig+0x554>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003216:	4b0a      	ldr	r3, [pc, #40]	; (8003240 <HAL_RCC_OscConfig+0x544>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a09      	ldr	r2, [pc, #36]	; (8003240 <HAL_RCC_OscConfig+0x544>)
 800321c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003220:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003222:	f7fe fd0d 	bl	8001c40 <HAL_GetTick>
 8003226:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003228:	e00c      	b.n	8003244 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800322a:	f7fe fd09 	bl	8001c40 <HAL_GetTick>
 800322e:	4602      	mov	r2, r0
 8003230:	69bb      	ldr	r3, [r7, #24]
 8003232:	1ad3      	subs	r3, r2, r3
 8003234:	2b02      	cmp	r3, #2
 8003236:	d905      	bls.n	8003244 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003238:	2303      	movs	r3, #3
 800323a:	e1bf      	b.n	80035bc <HAL_RCC_OscConfig+0x8c0>
 800323c:	40021000 	.word	0x40021000
 8003240:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003244:	4bb1      	ldr	r3, [pc, #708]	; (800350c <HAL_RCC_OscConfig+0x810>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800324c:	2b00      	cmp	r3, #0
 800324e:	d0ec      	beq.n	800322a <HAL_RCC_OscConfig+0x52e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	f003 0301 	and.w	r3, r3, #1
 8003258:	2b00      	cmp	r3, #0
 800325a:	d02c      	beq.n	80032b6 <HAL_RCC_OscConfig+0x5ba>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 800325c:	4bac      	ldr	r3, [pc, #688]	; (8003510 <HAL_RCC_OscConfig+0x814>)
 800325e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003262:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800326e:	49a8      	ldr	r1, [pc, #672]	; (8003510 <HAL_RCC_OscConfig+0x814>)
 8003270:	4313      	orrs	r3, r2
 8003272:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	f003 0304 	and.w	r3, r3, #4
 800327e:	2b00      	cmp	r3, #0
 8003280:	d010      	beq.n	80032a4 <HAL_RCC_OscConfig+0x5a8>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003282:	4ba3      	ldr	r3, [pc, #652]	; (8003510 <HAL_RCC_OscConfig+0x814>)
 8003284:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003288:	4aa1      	ldr	r2, [pc, #644]	; (8003510 <HAL_RCC_OscConfig+0x814>)
 800328a:	f043 0304 	orr.w	r3, r3, #4
 800328e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003292:	4b9f      	ldr	r3, [pc, #636]	; (8003510 <HAL_RCC_OscConfig+0x814>)
 8003294:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003298:	4a9d      	ldr	r2, [pc, #628]	; (8003510 <HAL_RCC_OscConfig+0x814>)
 800329a:	f043 0301 	orr.w	r3, r3, #1
 800329e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80032a2:	e018      	b.n	80032d6 <HAL_RCC_OscConfig+0x5da>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80032a4:	4b9a      	ldr	r3, [pc, #616]	; (8003510 <HAL_RCC_OscConfig+0x814>)
 80032a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032aa:	4a99      	ldr	r2, [pc, #612]	; (8003510 <HAL_RCC_OscConfig+0x814>)
 80032ac:	f043 0301 	orr.w	r3, r3, #1
 80032b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80032b4:	e00f      	b.n	80032d6 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80032b6:	4b96      	ldr	r3, [pc, #600]	; (8003510 <HAL_RCC_OscConfig+0x814>)
 80032b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032bc:	4a94      	ldr	r2, [pc, #592]	; (8003510 <HAL_RCC_OscConfig+0x814>)
 80032be:	f023 0301 	bic.w	r3, r3, #1
 80032c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80032c6:	4b92      	ldr	r3, [pc, #584]	; (8003510 <HAL_RCC_OscConfig+0x814>)
 80032c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032cc:	4a90      	ldr	r2, [pc, #576]	; (8003510 <HAL_RCC_OscConfig+0x814>)
 80032ce:	f023 0304 	bic.w	r3, r3, #4
 80032d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d016      	beq.n	800330c <HAL_RCC_OscConfig+0x610>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032de:	f7fe fcaf 	bl	8001c40 <HAL_GetTick>
 80032e2:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032e4:	e00a      	b.n	80032fc <HAL_RCC_OscConfig+0x600>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032e6:	f7fe fcab 	bl	8001c40 <HAL_GetTick>
 80032ea:	4602      	mov	r2, r0
 80032ec:	69bb      	ldr	r3, [r7, #24]
 80032ee:	1ad3      	subs	r3, r2, r3
 80032f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d901      	bls.n	80032fc <HAL_RCC_OscConfig+0x600>
        {
          return HAL_TIMEOUT;
 80032f8:	2303      	movs	r3, #3
 80032fa:	e15f      	b.n	80035bc <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032fc:	4b84      	ldr	r3, [pc, #528]	; (8003510 <HAL_RCC_OscConfig+0x814>)
 80032fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003302:	f003 0302 	and.w	r3, r3, #2
 8003306:	2b00      	cmp	r3, #0
 8003308:	d0ed      	beq.n	80032e6 <HAL_RCC_OscConfig+0x5ea>
 800330a:	e01d      	b.n	8003348 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800330c:	f7fe fc98 	bl	8001c40 <HAL_GetTick>
 8003310:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003312:	e00a      	b.n	800332a <HAL_RCC_OscConfig+0x62e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003314:	f7fe fc94 	bl	8001c40 <HAL_GetTick>
 8003318:	4602      	mov	r2, r0
 800331a:	69bb      	ldr	r3, [r7, #24]
 800331c:	1ad3      	subs	r3, r2, r3
 800331e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003322:	4293      	cmp	r3, r2
 8003324:	d901      	bls.n	800332a <HAL_RCC_OscConfig+0x62e>
        {
          return HAL_TIMEOUT;
 8003326:	2303      	movs	r3, #3
 8003328:	e148      	b.n	80035bc <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800332a:	4b79      	ldr	r3, [pc, #484]	; (8003510 <HAL_RCC_OscConfig+0x814>)
 800332c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003330:	f003 0302 	and.w	r3, r3, #2
 8003334:	2b00      	cmp	r3, #0
 8003336:	d1ed      	bne.n	8003314 <HAL_RCC_OscConfig+0x618>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8003338:	4b75      	ldr	r3, [pc, #468]	; (8003510 <HAL_RCC_OscConfig+0x814>)
 800333a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800333e:	4a74      	ldr	r2, [pc, #464]	; (8003510 <HAL_RCC_OscConfig+0x814>)
 8003340:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003344:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003348:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800334c:	2b01      	cmp	r3, #1
 800334e:	d105      	bne.n	800335c <HAL_RCC_OscConfig+0x660>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003350:	4b6f      	ldr	r3, [pc, #444]	; (8003510 <HAL_RCC_OscConfig+0x814>)
 8003352:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003354:	4a6e      	ldr	r2, [pc, #440]	; (8003510 <HAL_RCC_OscConfig+0x814>)
 8003356:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800335a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f003 0320 	and.w	r3, r3, #32
 8003364:	2b00      	cmp	r3, #0
 8003366:	d03c      	beq.n	80033e2 <HAL_RCC_OscConfig+0x6e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800336c:	2b00      	cmp	r3, #0
 800336e:	d01c      	beq.n	80033aa <HAL_RCC_OscConfig+0x6ae>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003370:	4b67      	ldr	r3, [pc, #412]	; (8003510 <HAL_RCC_OscConfig+0x814>)
 8003372:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003376:	4a66      	ldr	r2, [pc, #408]	; (8003510 <HAL_RCC_OscConfig+0x814>)
 8003378:	f043 0301 	orr.w	r3, r3, #1
 800337c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003380:	f7fe fc5e 	bl	8001c40 <HAL_GetTick>
 8003384:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003386:	e008      	b.n	800339a <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003388:	f7fe fc5a 	bl	8001c40 <HAL_GetTick>
 800338c:	4602      	mov	r2, r0
 800338e:	69bb      	ldr	r3, [r7, #24]
 8003390:	1ad3      	subs	r3, r2, r3
 8003392:	2b02      	cmp	r3, #2
 8003394:	d901      	bls.n	800339a <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8003396:	2303      	movs	r3, #3
 8003398:	e110      	b.n	80035bc <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800339a:	4b5d      	ldr	r3, [pc, #372]	; (8003510 <HAL_RCC_OscConfig+0x814>)
 800339c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80033a0:	f003 0302 	and.w	r3, r3, #2
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d0ef      	beq.n	8003388 <HAL_RCC_OscConfig+0x68c>
 80033a8:	e01b      	b.n	80033e2 <HAL_RCC_OscConfig+0x6e6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80033aa:	4b59      	ldr	r3, [pc, #356]	; (8003510 <HAL_RCC_OscConfig+0x814>)
 80033ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80033b0:	4a57      	ldr	r2, [pc, #348]	; (8003510 <HAL_RCC_OscConfig+0x814>)
 80033b2:	f023 0301 	bic.w	r3, r3, #1
 80033b6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033ba:	f7fe fc41 	bl	8001c40 <HAL_GetTick>
 80033be:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80033c0:	e008      	b.n	80033d4 <HAL_RCC_OscConfig+0x6d8>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80033c2:	f7fe fc3d 	bl	8001c40 <HAL_GetTick>
 80033c6:	4602      	mov	r2, r0
 80033c8:	69bb      	ldr	r3, [r7, #24]
 80033ca:	1ad3      	subs	r3, r2, r3
 80033cc:	2b02      	cmp	r3, #2
 80033ce:	d901      	bls.n	80033d4 <HAL_RCC_OscConfig+0x6d8>
        {
          return HAL_TIMEOUT;
 80033d0:	2303      	movs	r3, #3
 80033d2:	e0f3      	b.n	80035bc <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80033d4:	4b4e      	ldr	r3, [pc, #312]	; (8003510 <HAL_RCC_OscConfig+0x814>)
 80033d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80033da:	f003 0302 	and.w	r3, r3, #2
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d1ef      	bne.n	80033c2 <HAL_RCC_OscConfig+0x6c6>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	f000 80e7 	beq.w	80035ba <HAL_RCC_OscConfig+0x8be>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033f0:	2b02      	cmp	r3, #2
 80033f2:	f040 80b7 	bne.w	8003564 <HAL_RCC_OscConfig+0x868>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80033f6:	4b46      	ldr	r3, [pc, #280]	; (8003510 <HAL_RCC_OscConfig+0x814>)
 80033f8:	68db      	ldr	r3, [r3, #12]
 80033fa:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80033fc:	69fb      	ldr	r3, [r7, #28]
 80033fe:	f003 0203 	and.w	r2, r3, #3
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003406:	429a      	cmp	r2, r3
 8003408:	d124      	bne.n	8003454 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800340a:	69fb      	ldr	r3, [r7, #28]
 800340c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003414:	3b01      	subs	r3, #1
 8003416:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003418:	429a      	cmp	r2, r3
 800341a:	d11b      	bne.n	8003454 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800341c:	69fb      	ldr	r3, [r7, #28]
 800341e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003426:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003428:	429a      	cmp	r2, r3
 800342a:	d113      	bne.n	8003454 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800342c:	69fb      	ldr	r3, [r7, #28]
 800342e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003436:	085b      	lsrs	r3, r3, #1
 8003438:	3b01      	subs	r3, #1
 800343a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800343c:	429a      	cmp	r2, r3
 800343e:	d109      	bne.n	8003454 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003440:	69fb      	ldr	r3, [r7, #28]
 8003442:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344a:	085b      	lsrs	r3, r3, #1
 800344c:	3b01      	subs	r3, #1
 800344e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003450:	429a      	cmp	r2, r3
 8003452:	d061      	beq.n	8003518 <HAL_RCC_OscConfig+0x81c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003454:	6a3b      	ldr	r3, [r7, #32]
 8003456:	2b0c      	cmp	r3, #12
 8003458:	d056      	beq.n	8003508 <HAL_RCC_OscConfig+0x80c>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800345a:	4b2d      	ldr	r3, [pc, #180]	; (8003510 <HAL_RCC_OscConfig+0x814>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a2c      	ldr	r2, [pc, #176]	; (8003510 <HAL_RCC_OscConfig+0x814>)
 8003460:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003464:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003466:	f7fe fbeb 	bl	8001c40 <HAL_GetTick>
 800346a:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800346c:	e008      	b.n	8003480 <HAL_RCC_OscConfig+0x784>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800346e:	f7fe fbe7 	bl	8001c40 <HAL_GetTick>
 8003472:	4602      	mov	r2, r0
 8003474:	69bb      	ldr	r3, [r7, #24]
 8003476:	1ad3      	subs	r3, r2, r3
 8003478:	2b02      	cmp	r3, #2
 800347a:	d901      	bls.n	8003480 <HAL_RCC_OscConfig+0x784>
              {
                return HAL_TIMEOUT;
 800347c:	2303      	movs	r3, #3
 800347e:	e09d      	b.n	80035bc <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003480:	4b23      	ldr	r3, [pc, #140]	; (8003510 <HAL_RCC_OscConfig+0x814>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003488:	2b00      	cmp	r3, #0
 800348a:	d1f0      	bne.n	800346e <HAL_RCC_OscConfig+0x772>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800348c:	4b20      	ldr	r3, [pc, #128]	; (8003510 <HAL_RCC_OscConfig+0x814>)
 800348e:	68da      	ldr	r2, [r3, #12]
 8003490:	4b20      	ldr	r3, [pc, #128]	; (8003514 <HAL_RCC_OscConfig+0x818>)
 8003492:	4013      	ands	r3, r2
 8003494:	687a      	ldr	r2, [r7, #4]
 8003496:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003498:	687a      	ldr	r2, [r7, #4]
 800349a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800349c:	3a01      	subs	r2, #1
 800349e:	0112      	lsls	r2, r2, #4
 80034a0:	4311      	orrs	r1, r2
 80034a2:	687a      	ldr	r2, [r7, #4]
 80034a4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80034a6:	0212      	lsls	r2, r2, #8
 80034a8:	4311      	orrs	r1, r2
 80034aa:	687a      	ldr	r2, [r7, #4]
 80034ac:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80034ae:	0852      	lsrs	r2, r2, #1
 80034b0:	3a01      	subs	r2, #1
 80034b2:	0552      	lsls	r2, r2, #21
 80034b4:	4311      	orrs	r1, r2
 80034b6:	687a      	ldr	r2, [r7, #4]
 80034b8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80034ba:	0852      	lsrs	r2, r2, #1
 80034bc:	3a01      	subs	r2, #1
 80034be:	0652      	lsls	r2, r2, #25
 80034c0:	430a      	orrs	r2, r1
 80034c2:	4913      	ldr	r1, [pc, #76]	; (8003510 <HAL_RCC_OscConfig+0x814>)
 80034c4:	4313      	orrs	r3, r2
 80034c6:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80034c8:	4b11      	ldr	r3, [pc, #68]	; (8003510 <HAL_RCC_OscConfig+0x814>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a10      	ldr	r2, [pc, #64]	; (8003510 <HAL_RCC_OscConfig+0x814>)
 80034ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034d2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80034d4:	4b0e      	ldr	r3, [pc, #56]	; (8003510 <HAL_RCC_OscConfig+0x814>)
 80034d6:	68db      	ldr	r3, [r3, #12]
 80034d8:	4a0d      	ldr	r2, [pc, #52]	; (8003510 <HAL_RCC_OscConfig+0x814>)
 80034da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034de:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80034e0:	f7fe fbae 	bl	8001c40 <HAL_GetTick>
 80034e4:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034e6:	e008      	b.n	80034fa <HAL_RCC_OscConfig+0x7fe>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034e8:	f7fe fbaa 	bl	8001c40 <HAL_GetTick>
 80034ec:	4602      	mov	r2, r0
 80034ee:	69bb      	ldr	r3, [r7, #24]
 80034f0:	1ad3      	subs	r3, r2, r3
 80034f2:	2b02      	cmp	r3, #2
 80034f4:	d901      	bls.n	80034fa <HAL_RCC_OscConfig+0x7fe>
              {
                return HAL_TIMEOUT;
 80034f6:	2303      	movs	r3, #3
 80034f8:	e060      	b.n	80035bc <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034fa:	4b05      	ldr	r3, [pc, #20]	; (8003510 <HAL_RCC_OscConfig+0x814>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003502:	2b00      	cmp	r3, #0
 8003504:	d0f0      	beq.n	80034e8 <HAL_RCC_OscConfig+0x7ec>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003506:	e058      	b.n	80035ba <HAL_RCC_OscConfig+0x8be>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	e057      	b.n	80035bc <HAL_RCC_OscConfig+0x8c0>
 800350c:	40007000 	.word	0x40007000
 8003510:	40021000 	.word	0x40021000
 8003514:	f99f808c 	.word	0xf99f808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003518:	4b2a      	ldr	r3, [pc, #168]	; (80035c4 <HAL_RCC_OscConfig+0x8c8>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003520:	2b00      	cmp	r3, #0
 8003522:	d14a      	bne.n	80035ba <HAL_RCC_OscConfig+0x8be>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003524:	4b27      	ldr	r3, [pc, #156]	; (80035c4 <HAL_RCC_OscConfig+0x8c8>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a26      	ldr	r2, [pc, #152]	; (80035c4 <HAL_RCC_OscConfig+0x8c8>)
 800352a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800352e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003530:	4b24      	ldr	r3, [pc, #144]	; (80035c4 <HAL_RCC_OscConfig+0x8c8>)
 8003532:	68db      	ldr	r3, [r3, #12]
 8003534:	4a23      	ldr	r2, [pc, #140]	; (80035c4 <HAL_RCC_OscConfig+0x8c8>)
 8003536:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800353a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800353c:	f7fe fb80 	bl	8001c40 <HAL_GetTick>
 8003540:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003542:	e008      	b.n	8003556 <HAL_RCC_OscConfig+0x85a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003544:	f7fe fb7c 	bl	8001c40 <HAL_GetTick>
 8003548:	4602      	mov	r2, r0
 800354a:	69bb      	ldr	r3, [r7, #24]
 800354c:	1ad3      	subs	r3, r2, r3
 800354e:	2b02      	cmp	r3, #2
 8003550:	d901      	bls.n	8003556 <HAL_RCC_OscConfig+0x85a>
            {
              return HAL_TIMEOUT;
 8003552:	2303      	movs	r3, #3
 8003554:	e032      	b.n	80035bc <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003556:	4b1b      	ldr	r3, [pc, #108]	; (80035c4 <HAL_RCC_OscConfig+0x8c8>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800355e:	2b00      	cmp	r3, #0
 8003560:	d0f0      	beq.n	8003544 <HAL_RCC_OscConfig+0x848>
 8003562:	e02a      	b.n	80035ba <HAL_RCC_OscConfig+0x8be>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003564:	6a3b      	ldr	r3, [r7, #32]
 8003566:	2b0c      	cmp	r3, #12
 8003568:	d025      	beq.n	80035b6 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800356a:	4b16      	ldr	r3, [pc, #88]	; (80035c4 <HAL_RCC_OscConfig+0x8c8>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a15      	ldr	r2, [pc, #84]	; (80035c4 <HAL_RCC_OscConfig+0x8c8>)
 8003570:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003574:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003576:	4b13      	ldr	r3, [pc, #76]	; (80035c4 <HAL_RCC_OscConfig+0x8c8>)
 8003578:	68db      	ldr	r3, [r3, #12]
 800357a:	4a12      	ldr	r2, [pc, #72]	; (80035c4 <HAL_RCC_OscConfig+0x8c8>)
 800357c:	f023 0303 	bic.w	r3, r3, #3
 8003580:	60d3      	str	r3, [r2, #12]
#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 8003582:	4b10      	ldr	r3, [pc, #64]	; (80035c4 <HAL_RCC_OscConfig+0x8c8>)
 8003584:	68db      	ldr	r3, [r3, #12]
 8003586:	4a0f      	ldr	r2, [pc, #60]	; (80035c4 <HAL_RCC_OscConfig+0x8c8>)
 8003588:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800358c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800358e:	f7fe fb57 	bl	8001c40 <HAL_GetTick>
 8003592:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003594:	e008      	b.n	80035a8 <HAL_RCC_OscConfig+0x8ac>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003596:	f7fe fb53 	bl	8001c40 <HAL_GetTick>
 800359a:	4602      	mov	r2, r0
 800359c:	69bb      	ldr	r3, [r7, #24]
 800359e:	1ad3      	subs	r3, r2, r3
 80035a0:	2b02      	cmp	r3, #2
 80035a2:	d901      	bls.n	80035a8 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 80035a4:	2303      	movs	r3, #3
 80035a6:	e009      	b.n	80035bc <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035a8:	4b06      	ldr	r3, [pc, #24]	; (80035c4 <HAL_RCC_OscConfig+0x8c8>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d1f0      	bne.n	8003596 <HAL_RCC_OscConfig+0x89a>
 80035b4:	e001      	b.n	80035ba <HAL_RCC_OscConfig+0x8be>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	e000      	b.n	80035bc <HAL_RCC_OscConfig+0x8c0>
      }
    }
  }
  return HAL_OK;
 80035ba:	2300      	movs	r3, #0
}
 80035bc:	4618      	mov	r0, r3
 80035be:	3728      	adds	r7, #40	; 0x28
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}
 80035c4:	40021000 	.word	0x40021000

080035c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b084      	sub	sp, #16
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
 80035d0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d101      	bne.n	80035dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	e0c8      	b.n	800376e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80035dc:	4b66      	ldr	r3, [pc, #408]	; (8003778 <HAL_RCC_ClockConfig+0x1b0>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f003 0307 	and.w	r3, r3, #7
 80035e4:	683a      	ldr	r2, [r7, #0]
 80035e6:	429a      	cmp	r2, r3
 80035e8:	d910      	bls.n	800360c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035ea:	4b63      	ldr	r3, [pc, #396]	; (8003778 <HAL_RCC_ClockConfig+0x1b0>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f023 0207 	bic.w	r2, r3, #7
 80035f2:	4961      	ldr	r1, [pc, #388]	; (8003778 <HAL_RCC_ClockConfig+0x1b0>)
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	4313      	orrs	r3, r2
 80035f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035fa:	4b5f      	ldr	r3, [pc, #380]	; (8003778 <HAL_RCC_ClockConfig+0x1b0>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 0307 	and.w	r3, r3, #7
 8003602:	683a      	ldr	r2, [r7, #0]
 8003604:	429a      	cmp	r2, r3
 8003606:	d001      	beq.n	800360c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003608:	2301      	movs	r3, #1
 800360a:	e0b0      	b.n	800376e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f003 0301 	and.w	r3, r3, #1
 8003614:	2b00      	cmp	r3, #0
 8003616:	d04c      	beq.n	80036b2 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	2b03      	cmp	r3, #3
 800361e:	d107      	bne.n	8003630 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003620:	4b56      	ldr	r3, [pc, #344]	; (800377c <HAL_RCC_ClockConfig+0x1b4>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003628:	2b00      	cmp	r3, #0
 800362a:	d121      	bne.n	8003670 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	e09e      	b.n	800376e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	2b02      	cmp	r3, #2
 8003636:	d107      	bne.n	8003648 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003638:	4b50      	ldr	r3, [pc, #320]	; (800377c <HAL_RCC_ClockConfig+0x1b4>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003640:	2b00      	cmp	r3, #0
 8003642:	d115      	bne.n	8003670 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	e092      	b.n	800376e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d107      	bne.n	8003660 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003650:	4b4a      	ldr	r3, [pc, #296]	; (800377c <HAL_RCC_ClockConfig+0x1b4>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f003 0302 	and.w	r3, r3, #2
 8003658:	2b00      	cmp	r3, #0
 800365a:	d109      	bne.n	8003670 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	e086      	b.n	800376e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003660:	4b46      	ldr	r3, [pc, #280]	; (800377c <HAL_RCC_ClockConfig+0x1b4>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003668:	2b00      	cmp	r3, #0
 800366a:	d101      	bne.n	8003670 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800366c:	2301      	movs	r3, #1
 800366e:	e07e      	b.n	800376e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003670:	4b42      	ldr	r3, [pc, #264]	; (800377c <HAL_RCC_ClockConfig+0x1b4>)
 8003672:	689b      	ldr	r3, [r3, #8]
 8003674:	f023 0203 	bic.w	r2, r3, #3
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	493f      	ldr	r1, [pc, #252]	; (800377c <HAL_RCC_ClockConfig+0x1b4>)
 800367e:	4313      	orrs	r3, r2
 8003680:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003682:	f7fe fadd 	bl	8001c40 <HAL_GetTick>
 8003686:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003688:	e00a      	b.n	80036a0 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800368a:	f7fe fad9 	bl	8001c40 <HAL_GetTick>
 800368e:	4602      	mov	r2, r0
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	1ad3      	subs	r3, r2, r3
 8003694:	f241 3288 	movw	r2, #5000	; 0x1388
 8003698:	4293      	cmp	r3, r2
 800369a:	d901      	bls.n	80036a0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800369c:	2303      	movs	r3, #3
 800369e:	e066      	b.n	800376e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036a0:	4b36      	ldr	r3, [pc, #216]	; (800377c <HAL_RCC_ClockConfig+0x1b4>)
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	f003 020c 	and.w	r2, r3, #12
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	009b      	lsls	r3, r3, #2
 80036ae:	429a      	cmp	r2, r3
 80036b0:	d1eb      	bne.n	800368a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f003 0302 	and.w	r3, r3, #2
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d008      	beq.n	80036d0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036be:	4b2f      	ldr	r3, [pc, #188]	; (800377c <HAL_RCC_ClockConfig+0x1b4>)
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	689b      	ldr	r3, [r3, #8]
 80036ca:	492c      	ldr	r1, [pc, #176]	; (800377c <HAL_RCC_ClockConfig+0x1b4>)
 80036cc:	4313      	orrs	r3, r2
 80036ce:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80036d0:	4b29      	ldr	r3, [pc, #164]	; (8003778 <HAL_RCC_ClockConfig+0x1b0>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f003 0307 	and.w	r3, r3, #7
 80036d8:	683a      	ldr	r2, [r7, #0]
 80036da:	429a      	cmp	r2, r3
 80036dc:	d210      	bcs.n	8003700 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036de:	4b26      	ldr	r3, [pc, #152]	; (8003778 <HAL_RCC_ClockConfig+0x1b0>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f023 0207 	bic.w	r2, r3, #7
 80036e6:	4924      	ldr	r1, [pc, #144]	; (8003778 <HAL_RCC_ClockConfig+0x1b0>)
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	4313      	orrs	r3, r2
 80036ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036ee:	4b22      	ldr	r3, [pc, #136]	; (8003778 <HAL_RCC_ClockConfig+0x1b0>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f003 0307 	and.w	r3, r3, #7
 80036f6:	683a      	ldr	r2, [r7, #0]
 80036f8:	429a      	cmp	r2, r3
 80036fa:	d001      	beq.n	8003700 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	e036      	b.n	800376e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f003 0304 	and.w	r3, r3, #4
 8003708:	2b00      	cmp	r3, #0
 800370a:	d008      	beq.n	800371e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800370c:	4b1b      	ldr	r3, [pc, #108]	; (800377c <HAL_RCC_ClockConfig+0x1b4>)
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	68db      	ldr	r3, [r3, #12]
 8003718:	4918      	ldr	r1, [pc, #96]	; (800377c <HAL_RCC_ClockConfig+0x1b4>)
 800371a:	4313      	orrs	r3, r2
 800371c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f003 0308 	and.w	r3, r3, #8
 8003726:	2b00      	cmp	r3, #0
 8003728:	d009      	beq.n	800373e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800372a:	4b14      	ldr	r3, [pc, #80]	; (800377c <HAL_RCC_ClockConfig+0x1b4>)
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	691b      	ldr	r3, [r3, #16]
 8003736:	00db      	lsls	r3, r3, #3
 8003738:	4910      	ldr	r1, [pc, #64]	; (800377c <HAL_RCC_ClockConfig+0x1b4>)
 800373a:	4313      	orrs	r3, r2
 800373c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800373e:	f000 f825 	bl	800378c <HAL_RCC_GetSysClockFreq>
 8003742:	4602      	mov	r2, r0
 8003744:	4b0d      	ldr	r3, [pc, #52]	; (800377c <HAL_RCC_ClockConfig+0x1b4>)
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	091b      	lsrs	r3, r3, #4
 800374a:	f003 030f 	and.w	r3, r3, #15
 800374e:	490c      	ldr	r1, [pc, #48]	; (8003780 <HAL_RCC_ClockConfig+0x1b8>)
 8003750:	5ccb      	ldrb	r3, [r1, r3]
 8003752:	f003 031f 	and.w	r3, r3, #31
 8003756:	fa22 f303 	lsr.w	r3, r2, r3
 800375a:	4a0a      	ldr	r2, [pc, #40]	; (8003784 <HAL_RCC_ClockConfig+0x1bc>)
 800375c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800375e:	4b0a      	ldr	r3, [pc, #40]	; (8003788 <HAL_RCC_ClockConfig+0x1c0>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4618      	mov	r0, r3
 8003764:	f7fe fa1c 	bl	8001ba0 <HAL_InitTick>
 8003768:	4603      	mov	r3, r0
 800376a:	72fb      	strb	r3, [r7, #11]

  return status;
 800376c:	7afb      	ldrb	r3, [r7, #11]
}
 800376e:	4618      	mov	r0, r3
 8003770:	3710      	adds	r7, #16
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}
 8003776:	bf00      	nop
 8003778:	40022000 	.word	0x40022000
 800377c:	40021000 	.word	0x40021000
 8003780:	08007ab4 	.word	0x08007ab4
 8003784:	20000010 	.word	0x20000010
 8003788:	20000014 	.word	0x20000014

0800378c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800378c:	b480      	push	{r7}
 800378e:	b089      	sub	sp, #36	; 0x24
 8003790:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003792:	2300      	movs	r3, #0
 8003794:	61fb      	str	r3, [r7, #28]
 8003796:	2300      	movs	r3, #0
 8003798:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800379a:	4b3e      	ldr	r3, [pc, #248]	; (8003894 <HAL_RCC_GetSysClockFreq+0x108>)
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	f003 030c 	and.w	r3, r3, #12
 80037a2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80037a4:	4b3b      	ldr	r3, [pc, #236]	; (8003894 <HAL_RCC_GetSysClockFreq+0x108>)
 80037a6:	68db      	ldr	r3, [r3, #12]
 80037a8:	f003 0303 	and.w	r3, r3, #3
 80037ac:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d005      	beq.n	80037c0 <HAL_RCC_GetSysClockFreq+0x34>
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	2b0c      	cmp	r3, #12
 80037b8:	d121      	bne.n	80037fe <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d11e      	bne.n	80037fe <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80037c0:	4b34      	ldr	r3, [pc, #208]	; (8003894 <HAL_RCC_GetSysClockFreq+0x108>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f003 0308 	and.w	r3, r3, #8
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d107      	bne.n	80037dc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80037cc:	4b31      	ldr	r3, [pc, #196]	; (8003894 <HAL_RCC_GetSysClockFreq+0x108>)
 80037ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037d2:	0a1b      	lsrs	r3, r3, #8
 80037d4:	f003 030f 	and.w	r3, r3, #15
 80037d8:	61fb      	str	r3, [r7, #28]
 80037da:	e005      	b.n	80037e8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80037dc:	4b2d      	ldr	r3, [pc, #180]	; (8003894 <HAL_RCC_GetSysClockFreq+0x108>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	091b      	lsrs	r3, r3, #4
 80037e2:	f003 030f 	and.w	r3, r3, #15
 80037e6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80037e8:	4a2b      	ldr	r2, [pc, #172]	; (8003898 <HAL_RCC_GetSysClockFreq+0x10c>)
 80037ea:	69fb      	ldr	r3, [r7, #28]
 80037ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037f0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d10d      	bne.n	8003814 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80037f8:	69fb      	ldr	r3, [r7, #28]
 80037fa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80037fc:	e00a      	b.n	8003814 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	2b04      	cmp	r3, #4
 8003802:	d102      	bne.n	800380a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003804:	4b25      	ldr	r3, [pc, #148]	; (800389c <HAL_RCC_GetSysClockFreq+0x110>)
 8003806:	61bb      	str	r3, [r7, #24]
 8003808:	e004      	b.n	8003814 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	2b08      	cmp	r3, #8
 800380e:	d101      	bne.n	8003814 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003810:	4b23      	ldr	r3, [pc, #140]	; (80038a0 <HAL_RCC_GetSysClockFreq+0x114>)
 8003812:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	2b0c      	cmp	r3, #12
 8003818:	d134      	bne.n	8003884 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800381a:	4b1e      	ldr	r3, [pc, #120]	; (8003894 <HAL_RCC_GetSysClockFreq+0x108>)
 800381c:	68db      	ldr	r3, [r3, #12]
 800381e:	f003 0303 	and.w	r3, r3, #3
 8003822:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	2b02      	cmp	r3, #2
 8003828:	d003      	beq.n	8003832 <HAL_RCC_GetSysClockFreq+0xa6>
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	2b03      	cmp	r3, #3
 800382e:	d003      	beq.n	8003838 <HAL_RCC_GetSysClockFreq+0xac>
 8003830:	e005      	b.n	800383e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003832:	4b1a      	ldr	r3, [pc, #104]	; (800389c <HAL_RCC_GetSysClockFreq+0x110>)
 8003834:	617b      	str	r3, [r7, #20]
      break;
 8003836:	e005      	b.n	8003844 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003838:	4b19      	ldr	r3, [pc, #100]	; (80038a0 <HAL_RCC_GetSysClockFreq+0x114>)
 800383a:	617b      	str	r3, [r7, #20]
      break;
 800383c:	e002      	b.n	8003844 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800383e:	69fb      	ldr	r3, [r7, #28]
 8003840:	617b      	str	r3, [r7, #20]
      break;
 8003842:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003844:	4b13      	ldr	r3, [pc, #76]	; (8003894 <HAL_RCC_GetSysClockFreq+0x108>)
 8003846:	68db      	ldr	r3, [r3, #12]
 8003848:	091b      	lsrs	r3, r3, #4
 800384a:	f003 0307 	and.w	r3, r3, #7
 800384e:	3301      	adds	r3, #1
 8003850:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003852:	4b10      	ldr	r3, [pc, #64]	; (8003894 <HAL_RCC_GetSysClockFreq+0x108>)
 8003854:	68db      	ldr	r3, [r3, #12]
 8003856:	0a1b      	lsrs	r3, r3, #8
 8003858:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800385c:	697a      	ldr	r2, [r7, #20]
 800385e:	fb02 f203 	mul.w	r2, r2, r3
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	fbb2 f3f3 	udiv	r3, r2, r3
 8003868:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800386a:	4b0a      	ldr	r3, [pc, #40]	; (8003894 <HAL_RCC_GetSysClockFreq+0x108>)
 800386c:	68db      	ldr	r3, [r3, #12]
 800386e:	0e5b      	lsrs	r3, r3, #25
 8003870:	f003 0303 	and.w	r3, r3, #3
 8003874:	3301      	adds	r3, #1
 8003876:	005b      	lsls	r3, r3, #1
 8003878:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800387a:	697a      	ldr	r2, [r7, #20]
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003882:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003884:	69bb      	ldr	r3, [r7, #24]
}
 8003886:	4618      	mov	r0, r3
 8003888:	3724      	adds	r7, #36	; 0x24
 800388a:	46bd      	mov	sp, r7
 800388c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003890:	4770      	bx	lr
 8003892:	bf00      	nop
 8003894:	40021000 	.word	0x40021000
 8003898:	08007acc 	.word	0x08007acc
 800389c:	00f42400 	.word	0x00f42400
 80038a0:	007a1200 	.word	0x007a1200

080038a4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038a4:	b480      	push	{r7}
 80038a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038a8:	4b03      	ldr	r3, [pc, #12]	; (80038b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80038aa:	681b      	ldr	r3, [r3, #0]
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	46bd      	mov	sp, r7
 80038b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b4:	4770      	bx	lr
 80038b6:	bf00      	nop
 80038b8:	20000010 	.word	0x20000010

080038bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80038c0:	f7ff fff0 	bl	80038a4 <HAL_RCC_GetHCLKFreq>
 80038c4:	4602      	mov	r2, r0
 80038c6:	4b06      	ldr	r3, [pc, #24]	; (80038e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	0a1b      	lsrs	r3, r3, #8
 80038cc:	f003 0307 	and.w	r3, r3, #7
 80038d0:	4904      	ldr	r1, [pc, #16]	; (80038e4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80038d2:	5ccb      	ldrb	r3, [r1, r3]
 80038d4:	f003 031f 	and.w	r3, r3, #31
 80038d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038dc:	4618      	mov	r0, r3
 80038de:	bd80      	pop	{r7, pc}
 80038e0:	40021000 	.word	0x40021000
 80038e4:	08007ac4 	.word	0x08007ac4

080038e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80038ec:	f7ff ffda 	bl	80038a4 <HAL_RCC_GetHCLKFreq>
 80038f0:	4602      	mov	r2, r0
 80038f2:	4b06      	ldr	r3, [pc, #24]	; (800390c <HAL_RCC_GetPCLK2Freq+0x24>)
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	0adb      	lsrs	r3, r3, #11
 80038f8:	f003 0307 	and.w	r3, r3, #7
 80038fc:	4904      	ldr	r1, [pc, #16]	; (8003910 <HAL_RCC_GetPCLK2Freq+0x28>)
 80038fe:	5ccb      	ldrb	r3, [r1, r3]
 8003900:	f003 031f 	and.w	r3, r3, #31
 8003904:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003908:	4618      	mov	r0, r3
 800390a:	bd80      	pop	{r7, pc}
 800390c:	40021000 	.word	0x40021000
 8003910:	08007ac4 	.word	0x08007ac4

08003914 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b086      	sub	sp, #24
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800391c:	2300      	movs	r3, #0
 800391e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003920:	4b2a      	ldr	r3, [pc, #168]	; (80039cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003922:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003924:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003928:	2b00      	cmp	r3, #0
 800392a:	d003      	beq.n	8003934 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800392c:	f7ff f982 	bl	8002c34 <HAL_PWREx_GetVoltageRange>
 8003930:	6178      	str	r0, [r7, #20]
 8003932:	e014      	b.n	800395e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003934:	4b25      	ldr	r3, [pc, #148]	; (80039cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003936:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003938:	4a24      	ldr	r2, [pc, #144]	; (80039cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800393a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800393e:	6593      	str	r3, [r2, #88]	; 0x58
 8003940:	4b22      	ldr	r3, [pc, #136]	; (80039cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003942:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003944:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003948:	60fb      	str	r3, [r7, #12]
 800394a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800394c:	f7ff f972 	bl	8002c34 <HAL_PWREx_GetVoltageRange>
 8003950:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003952:	4b1e      	ldr	r3, [pc, #120]	; (80039cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003954:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003956:	4a1d      	ldr	r2, [pc, #116]	; (80039cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003958:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800395c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003964:	d10b      	bne.n	800397e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2b80      	cmp	r3, #128	; 0x80
 800396a:	d919      	bls.n	80039a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2ba0      	cmp	r3, #160	; 0xa0
 8003970:	d902      	bls.n	8003978 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003972:	2302      	movs	r3, #2
 8003974:	613b      	str	r3, [r7, #16]
 8003976:	e013      	b.n	80039a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003978:	2301      	movs	r3, #1
 800397a:	613b      	str	r3, [r7, #16]
 800397c:	e010      	b.n	80039a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2b80      	cmp	r3, #128	; 0x80
 8003982:	d902      	bls.n	800398a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003984:	2303      	movs	r3, #3
 8003986:	613b      	str	r3, [r7, #16]
 8003988:	e00a      	b.n	80039a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2b80      	cmp	r3, #128	; 0x80
 800398e:	d102      	bne.n	8003996 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003990:	2302      	movs	r3, #2
 8003992:	613b      	str	r3, [r7, #16]
 8003994:	e004      	b.n	80039a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2b70      	cmp	r3, #112	; 0x70
 800399a:	d101      	bne.n	80039a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800399c:	2301      	movs	r3, #1
 800399e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80039a0:	4b0b      	ldr	r3, [pc, #44]	; (80039d0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f023 0207 	bic.w	r2, r3, #7
 80039a8:	4909      	ldr	r1, [pc, #36]	; (80039d0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	4313      	orrs	r3, r2
 80039ae:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80039b0:	4b07      	ldr	r3, [pc, #28]	; (80039d0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f003 0307 	and.w	r3, r3, #7
 80039b8:	693a      	ldr	r2, [r7, #16]
 80039ba:	429a      	cmp	r2, r3
 80039bc:	d001      	beq.n	80039c2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	e000      	b.n	80039c4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80039c2:	2300      	movs	r3, #0
}
 80039c4:	4618      	mov	r0, r3
 80039c6:	3718      	adds	r7, #24
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd80      	pop	{r7, pc}
 80039cc:	40021000 	.word	0x40021000
 80039d0:	40022000 	.word	0x40022000

080039d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b086      	sub	sp, #24
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80039dc:	2300      	movs	r3, #0
 80039de:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80039e0:	2300      	movs	r3, #0
 80039e2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	f000 809e 	beq.w	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039f2:	2300      	movs	r3, #0
 80039f4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80039f6:	4b46      	ldr	r3, [pc, #280]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80039f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d101      	bne.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003a02:	2301      	movs	r3, #1
 8003a04:	e000      	b.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x34>
 8003a06:	2300      	movs	r3, #0
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d00d      	beq.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a0c:	4b40      	ldr	r3, [pc, #256]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003a0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a10:	4a3f      	ldr	r2, [pc, #252]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003a12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a16:	6593      	str	r3, [r2, #88]	; 0x58
 8003a18:	4b3d      	ldr	r3, [pc, #244]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003a1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a20:	60bb      	str	r3, [r7, #8]
 8003a22:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a24:	2301      	movs	r3, #1
 8003a26:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a28:	4b3a      	ldr	r3, [pc, #232]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a39      	ldr	r2, [pc, #228]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8003a2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a32:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003a34:	f7fe f904 	bl	8001c40 <HAL_GetTick>
 8003a38:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003a3a:	e009      	b.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a3c:	f7fe f900 	bl	8001c40 <HAL_GetTick>
 8003a40:	4602      	mov	r2, r0
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	1ad3      	subs	r3, r2, r3
 8003a46:	2b02      	cmp	r3, #2
 8003a48:	d902      	bls.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 8003a4a:	2303      	movs	r3, #3
 8003a4c:	74fb      	strb	r3, [r7, #19]
        break;
 8003a4e:	e005      	b.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003a50:	4b30      	ldr	r3, [pc, #192]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d0ef      	beq.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 8003a5c:	7cfb      	ldrb	r3, [r7, #19]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d15a      	bne.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003a62:	4b2b      	ldr	r3, [pc, #172]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003a64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a68:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a6c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d01e      	beq.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a78:	697a      	ldr	r2, [r7, #20]
 8003a7a:	429a      	cmp	r2, r3
 8003a7c:	d019      	beq.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003a7e:	4b24      	ldr	r3, [pc, #144]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003a80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a88:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003a8a:	4b21      	ldr	r3, [pc, #132]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003a8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a90:	4a1f      	ldr	r2, [pc, #124]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003a92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a96:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003a9a:	4b1d      	ldr	r3, [pc, #116]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003a9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aa0:	4a1b      	ldr	r2, [pc, #108]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003aa2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003aa6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003aaa:	4a19      	ldr	r2, [pc, #100]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	f003 0301 	and.w	r3, r3, #1
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d016      	beq.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003abc:	f7fe f8c0 	bl	8001c40 <HAL_GetTick>
 8003ac0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ac2:	e00b      	b.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ac4:	f7fe f8bc 	bl	8001c40 <HAL_GetTick>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	1ad3      	subs	r3, r2, r3
 8003ace:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d902      	bls.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 8003ad6:	2303      	movs	r3, #3
 8003ad8:	74fb      	strb	r3, [r7, #19]
            break;
 8003ada:	e006      	b.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003adc:	4b0c      	ldr	r3, [pc, #48]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003ade:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ae2:	f003 0302 	and.w	r3, r3, #2
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d0ec      	beq.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 8003aea:	7cfb      	ldrb	r3, [r7, #19]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d10b      	bne.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003af0:	4b07      	ldr	r3, [pc, #28]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003af2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003af6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003afe:	4904      	ldr	r1, [pc, #16]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003b00:	4313      	orrs	r3, r2
 8003b02:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003b06:	e009      	b.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003b08:	7cfb      	ldrb	r3, [r7, #19]
 8003b0a:	74bb      	strb	r3, [r7, #18]
 8003b0c:	e006      	b.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x148>
 8003b0e:	bf00      	nop
 8003b10:	40021000 	.word	0x40021000
 8003b14:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b18:	7cfb      	ldrb	r3, [r7, #19]
 8003b1a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b1c:	7c7b      	ldrb	r3, [r7, #17]
 8003b1e:	2b01      	cmp	r3, #1
 8003b20:	d105      	bne.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b22:	4b6e      	ldr	r3, [pc, #440]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003b24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b26:	4a6d      	ldr	r2, [pc, #436]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003b28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b2c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f003 0301 	and.w	r3, r3, #1
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d00a      	beq.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003b3a:	4b68      	ldr	r3, [pc, #416]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003b3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b40:	f023 0203 	bic.w	r2, r3, #3
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	4964      	ldr	r1, [pc, #400]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f003 0302 	and.w	r3, r3, #2
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d00a      	beq.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003b5c:	4b5f      	ldr	r3, [pc, #380]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003b5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b62:	f023 020c 	bic.w	r2, r3, #12
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	495c      	ldr	r1, [pc, #368]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f003 0304 	and.w	r3, r3, #4
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d00a      	beq.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003b7e:	4b57      	ldr	r3, [pc, #348]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003b80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b84:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	68db      	ldr	r3, [r3, #12]
 8003b8c:	4953      	ldr	r1, [pc, #332]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f003 0320 	and.w	r3, r3, #32
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d00a      	beq.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003ba0:	4b4e      	ldr	r3, [pc, #312]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ba6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	691b      	ldr	r3, [r3, #16]
 8003bae:	494b      	ldr	r1, [pc, #300]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d00a      	beq.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003bc2:	4b46      	ldr	r3, [pc, #280]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003bc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bc8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6a1b      	ldr	r3, [r3, #32]
 8003bd0:	4942      	ldr	r1, [pc, #264]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d00a      	beq.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003be4:	4b3d      	ldr	r3, [pc, #244]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003be6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bea:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf2:	493a      	ldr	r1, [pc, #232]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d00a      	beq.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003c06:	4b35      	ldr	r3, [pc, #212]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003c08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c0c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	695b      	ldr	r3, [r3, #20]
 8003c14:	4931      	ldr	r1, [pc, #196]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003c16:	4313      	orrs	r3, r2
 8003c18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d00a      	beq.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003c28:	4b2c      	ldr	r3, [pc, #176]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c2e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	699b      	ldr	r3, [r3, #24]
 8003c36:	4929      	ldr	r1, [pc, #164]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d00a      	beq.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003c4a:	4b24      	ldr	r3, [pc, #144]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003c4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c50:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	69db      	ldr	r3, [r3, #28]
 8003c58:	4920      	ldr	r1, [pc, #128]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d015      	beq.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003c6c:	4b1b      	ldr	r3, [pc, #108]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003c6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c72:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c7a:	4918      	ldr	r1, [pc, #96]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c86:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c8a:	d105      	bne.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c8c:	4b13      	ldr	r3, [pc, #76]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003c8e:	68db      	ldr	r3, [r3, #12]
 8003c90:	4a12      	ldr	r2, [pc, #72]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003c92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c96:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d015      	beq.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003ca4:	4b0d      	ldr	r3, [pc, #52]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003caa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cb2:	490a      	ldr	r1, [pc, #40]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cbe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003cc2:	d105      	bne.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003cc4:	4b05      	ldr	r3, [pc, #20]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003cc6:	68db      	ldr	r3, [r3, #12]
 8003cc8:	4a04      	ldr	r2, [pc, #16]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003cca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003cce:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003cd0:	7cbb      	ldrb	r3, [r7, #18]
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	3718      	adds	r7, #24
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}
 8003cda:	bf00      	nop
 8003cdc:	40021000 	.word	0x40021000

08003ce0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b084      	sub	sp, #16
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d101      	bne.n	8003cf2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	e095      	b.n	8003e1e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d108      	bne.n	8003d0c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d02:	d009      	beq.n	8003d18 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2200      	movs	r2, #0
 8003d08:	61da      	str	r2, [r3, #28]
 8003d0a:	e005      	b.n	8003d18 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2200      	movs	r2, #0
 8003d16:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003d24:	b2db      	uxtb	r3, r3
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d106      	bne.n	8003d38 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	f7fd f9c6 	bl	80010c4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2202      	movs	r2, #2
 8003d3c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	681a      	ldr	r2, [r3, #0]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d4e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	68db      	ldr	r3, [r3, #12]
 8003d54:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003d58:	d902      	bls.n	8003d60 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	60fb      	str	r3, [r7, #12]
 8003d5e:	e002      	b.n	8003d66 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003d60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003d64:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	68db      	ldr	r3, [r3, #12]
 8003d6a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003d6e:	d007      	beq.n	8003d80 <HAL_SPI_Init+0xa0>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	68db      	ldr	r3, [r3, #12]
 8003d74:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003d78:	d002      	beq.n	8003d80 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003d90:	431a      	orrs	r2, r3
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	691b      	ldr	r3, [r3, #16]
 8003d96:	f003 0302 	and.w	r3, r3, #2
 8003d9a:	431a      	orrs	r2, r3
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	695b      	ldr	r3, [r3, #20]
 8003da0:	f003 0301 	and.w	r3, r3, #1
 8003da4:	431a      	orrs	r2, r3
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	699b      	ldr	r3, [r3, #24]
 8003daa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003dae:	431a      	orrs	r2, r3
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	69db      	ldr	r3, [r3, #28]
 8003db4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003db8:	431a      	orrs	r2, r3
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6a1b      	ldr	r3, [r3, #32]
 8003dbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dc2:	ea42 0103 	orr.w	r1, r2, r3
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dca:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	430a      	orrs	r2, r1
 8003dd4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	699b      	ldr	r3, [r3, #24]
 8003dda:	0c1b      	lsrs	r3, r3, #16
 8003ddc:	f003 0204 	and.w	r2, r3, #4
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de4:	f003 0310 	and.w	r3, r3, #16
 8003de8:	431a      	orrs	r2, r3
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dee:	f003 0308 	and.w	r3, r3, #8
 8003df2:	431a      	orrs	r2, r3
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	68db      	ldr	r3, [r3, #12]
 8003df8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003dfc:	ea42 0103 	orr.w	r1, r2, r3
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	430a      	orrs	r2, r1
 8003e0c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2200      	movs	r2, #0
 8003e12:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2201      	movs	r2, #1
 8003e18:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003e1c:	2300      	movs	r3, #0
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	3710      	adds	r7, #16
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}

08003e26 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e26:	b580      	push	{r7, lr}
 8003e28:	b088      	sub	sp, #32
 8003e2a:	af00      	add	r7, sp, #0
 8003e2c:	60f8      	str	r0, [r7, #12]
 8003e2e:	60b9      	str	r1, [r7, #8]
 8003e30:	603b      	str	r3, [r7, #0]
 8003e32:	4613      	mov	r3, r2
 8003e34:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003e36:	2300      	movs	r3, #0
 8003e38:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003e40:	2b01      	cmp	r3, #1
 8003e42:	d101      	bne.n	8003e48 <HAL_SPI_Transmit+0x22>
 8003e44:	2302      	movs	r3, #2
 8003e46:	e158      	b.n	80040fa <HAL_SPI_Transmit+0x2d4>
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003e50:	f7fd fef6 	bl	8001c40 <HAL_GetTick>
 8003e54:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003e56:	88fb      	ldrh	r3, [r7, #6]
 8003e58:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003e60:	b2db      	uxtb	r3, r3
 8003e62:	2b01      	cmp	r3, #1
 8003e64:	d002      	beq.n	8003e6c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003e66:	2302      	movs	r3, #2
 8003e68:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003e6a:	e13d      	b.n	80040e8 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d002      	beq.n	8003e78 <HAL_SPI_Transmit+0x52>
 8003e72:	88fb      	ldrh	r3, [r7, #6]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d102      	bne.n	8003e7e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003e7c:	e134      	b.n	80040e8 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2203      	movs	r2, #3
 8003e82:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	68ba      	ldr	r2, [r7, #8]
 8003e90:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	88fa      	ldrh	r2, [r7, #6]
 8003e96:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	88fa      	ldrh	r2, [r7, #6]
 8003e9c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ec8:	d10f      	bne.n	8003eea <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	681a      	ldr	r2, [r3, #0]
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ed8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	681a      	ldr	r2, [r3, #0]
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ee8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ef4:	2b40      	cmp	r3, #64	; 0x40
 8003ef6:	d007      	beq.n	8003f08 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	681a      	ldr	r2, [r3, #0]
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f06:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	68db      	ldr	r3, [r3, #12]
 8003f0c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003f10:	d94b      	bls.n	8003faa <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d002      	beq.n	8003f20 <HAL_SPI_Transmit+0xfa>
 8003f1a:	8afb      	ldrh	r3, [r7, #22]
 8003f1c:	2b01      	cmp	r3, #1
 8003f1e:	d13e      	bne.n	8003f9e <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f24:	881a      	ldrh	r2, [r3, #0]
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f30:	1c9a      	adds	r2, r3, #2
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f3a:	b29b      	uxth	r3, r3
 8003f3c:	3b01      	subs	r3, #1
 8003f3e:	b29a      	uxth	r2, r3
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003f44:	e02b      	b.n	8003f9e <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	689b      	ldr	r3, [r3, #8]
 8003f4c:	f003 0302 	and.w	r3, r3, #2
 8003f50:	2b02      	cmp	r3, #2
 8003f52:	d112      	bne.n	8003f7a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f58:	881a      	ldrh	r2, [r3, #0]
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f64:	1c9a      	adds	r2, r3, #2
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f6e:	b29b      	uxth	r3, r3
 8003f70:	3b01      	subs	r3, #1
 8003f72:	b29a      	uxth	r2, r3
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003f78:	e011      	b.n	8003f9e <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003f7a:	f7fd fe61 	bl	8001c40 <HAL_GetTick>
 8003f7e:	4602      	mov	r2, r0
 8003f80:	69bb      	ldr	r3, [r7, #24]
 8003f82:	1ad3      	subs	r3, r2, r3
 8003f84:	683a      	ldr	r2, [r7, #0]
 8003f86:	429a      	cmp	r2, r3
 8003f88:	d803      	bhi.n	8003f92 <HAL_SPI_Transmit+0x16c>
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f90:	d102      	bne.n	8003f98 <HAL_SPI_Transmit+0x172>
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d102      	bne.n	8003f9e <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8003f98:	2303      	movs	r3, #3
 8003f9a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003f9c:	e0a4      	b.n	80040e8 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fa2:	b29b      	uxth	r3, r3
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d1ce      	bne.n	8003f46 <HAL_SPI_Transmit+0x120>
 8003fa8:	e07c      	b.n	80040a4 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d002      	beq.n	8003fb8 <HAL_SPI_Transmit+0x192>
 8003fb2:	8afb      	ldrh	r3, [r7, #22]
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d170      	bne.n	800409a <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fbc:	b29b      	uxth	r3, r3
 8003fbe:	2b01      	cmp	r3, #1
 8003fc0:	d912      	bls.n	8003fe8 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fc6:	881a      	ldrh	r2, [r3, #0]
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fd2:	1c9a      	adds	r2, r3, #2
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fdc:	b29b      	uxth	r3, r3
 8003fde:	3b02      	subs	r3, #2
 8003fe0:	b29a      	uxth	r2, r3
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003fe6:	e058      	b.n	800409a <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	330c      	adds	r3, #12
 8003ff2:	7812      	ldrb	r2, [r2, #0]
 8003ff4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ffa:	1c5a      	adds	r2, r3, #1
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004004:	b29b      	uxth	r3, r3
 8004006:	3b01      	subs	r3, #1
 8004008:	b29a      	uxth	r2, r3
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800400e:	e044      	b.n	800409a <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	f003 0302 	and.w	r3, r3, #2
 800401a:	2b02      	cmp	r3, #2
 800401c:	d12b      	bne.n	8004076 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004022:	b29b      	uxth	r3, r3
 8004024:	2b01      	cmp	r3, #1
 8004026:	d912      	bls.n	800404e <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800402c:	881a      	ldrh	r2, [r3, #0]
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004038:	1c9a      	adds	r2, r3, #2
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004042:	b29b      	uxth	r3, r3
 8004044:	3b02      	subs	r3, #2
 8004046:	b29a      	uxth	r2, r3
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800404c:	e025      	b.n	800409a <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	330c      	adds	r3, #12
 8004058:	7812      	ldrb	r2, [r2, #0]
 800405a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004060:	1c5a      	adds	r2, r3, #1
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800406a:	b29b      	uxth	r3, r3
 800406c:	3b01      	subs	r3, #1
 800406e:	b29a      	uxth	r2, r3
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004074:	e011      	b.n	800409a <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004076:	f7fd fde3 	bl	8001c40 <HAL_GetTick>
 800407a:	4602      	mov	r2, r0
 800407c:	69bb      	ldr	r3, [r7, #24]
 800407e:	1ad3      	subs	r3, r2, r3
 8004080:	683a      	ldr	r2, [r7, #0]
 8004082:	429a      	cmp	r2, r3
 8004084:	d803      	bhi.n	800408e <HAL_SPI_Transmit+0x268>
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800408c:	d102      	bne.n	8004094 <HAL_SPI_Transmit+0x26e>
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d102      	bne.n	800409a <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8004094:	2303      	movs	r3, #3
 8004096:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004098:	e026      	b.n	80040e8 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800409e:	b29b      	uxth	r3, r3
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d1b5      	bne.n	8004010 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80040a4:	69ba      	ldr	r2, [r7, #24]
 80040a6:	6839      	ldr	r1, [r7, #0]
 80040a8:	68f8      	ldr	r0, [r7, #12]
 80040aa:	f000 fcdf 	bl	8004a6c <SPI_EndRxTxTransaction>
 80040ae:	4603      	mov	r3, r0
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d002      	beq.n	80040ba <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2220      	movs	r2, #32
 80040b8:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	689b      	ldr	r3, [r3, #8]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d10a      	bne.n	80040d8 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80040c2:	2300      	movs	r3, #0
 80040c4:	613b      	str	r3, [r7, #16]
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	68db      	ldr	r3, [r3, #12]
 80040cc:	613b      	str	r3, [r7, #16]
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	689b      	ldr	r3, [r3, #8]
 80040d4:	613b      	str	r3, [r7, #16]
 80040d6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d002      	beq.n	80040e6 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80040e0:	2301      	movs	r3, #1
 80040e2:	77fb      	strb	r3, [r7, #31]
 80040e4:	e000      	b.n	80040e8 <HAL_SPI_Transmit+0x2c2>
  }

error:
 80040e6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2201      	movs	r2, #1
 80040ec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	2200      	movs	r2, #0
 80040f4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80040f8:	7ffb      	ldrb	r3, [r7, #31]
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	3720      	adds	r7, #32
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}

08004102 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004102:	b580      	push	{r7, lr}
 8004104:	b088      	sub	sp, #32
 8004106:	af02      	add	r7, sp, #8
 8004108:	60f8      	str	r0, [r7, #12]
 800410a:	60b9      	str	r1, [r7, #8]
 800410c:	603b      	str	r3, [r7, #0]
 800410e:	4613      	mov	r3, r2
 8004110:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004112:	2300      	movs	r3, #0
 8004114:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800411e:	d112      	bne.n	8004146 <HAL_SPI_Receive+0x44>
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d10e      	bne.n	8004146 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	2204      	movs	r2, #4
 800412c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004130:	88fa      	ldrh	r2, [r7, #6]
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	9300      	str	r3, [sp, #0]
 8004136:	4613      	mov	r3, r2
 8004138:	68ba      	ldr	r2, [r7, #8]
 800413a:	68b9      	ldr	r1, [r7, #8]
 800413c:	68f8      	ldr	r0, [r7, #12]
 800413e:	f000 f910 	bl	8004362 <HAL_SPI_TransmitReceive>
 8004142:	4603      	mov	r3, r0
 8004144:	e109      	b.n	800435a <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800414c:	2b01      	cmp	r3, #1
 800414e:	d101      	bne.n	8004154 <HAL_SPI_Receive+0x52>
 8004150:	2302      	movs	r3, #2
 8004152:	e102      	b.n	800435a <HAL_SPI_Receive+0x258>
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	2201      	movs	r2, #1
 8004158:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800415c:	f7fd fd70 	bl	8001c40 <HAL_GetTick>
 8004160:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004168:	b2db      	uxtb	r3, r3
 800416a:	2b01      	cmp	r3, #1
 800416c:	d002      	beq.n	8004174 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800416e:	2302      	movs	r3, #2
 8004170:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004172:	e0e9      	b.n	8004348 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d002      	beq.n	8004180 <HAL_SPI_Receive+0x7e>
 800417a:	88fb      	ldrh	r3, [r7, #6]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d102      	bne.n	8004186 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004180:	2301      	movs	r3, #1
 8004182:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004184:	e0e0      	b.n	8004348 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	2204      	movs	r2, #4
 800418a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	2200      	movs	r2, #0
 8004192:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	68ba      	ldr	r2, [r7, #8]
 8004198:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	88fa      	ldrh	r2, [r7, #6]
 800419e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	88fa      	ldrh	r2, [r7, #6]
 80041a6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	2200      	movs	r2, #0
 80041ae:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	2200      	movs	r2, #0
 80041b4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	2200      	movs	r2, #0
 80041ba:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	2200      	movs	r2, #0
 80041c0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	2200      	movs	r2, #0
 80041c6:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	68db      	ldr	r3, [r3, #12]
 80041cc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80041d0:	d908      	bls.n	80041e4 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	685a      	ldr	r2, [r3, #4]
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80041e0:	605a      	str	r2, [r3, #4]
 80041e2:	e007      	b.n	80041f4 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	685a      	ldr	r2, [r3, #4]
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80041f2:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	689b      	ldr	r3, [r3, #8]
 80041f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041fc:	d10f      	bne.n	800421e <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800420c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	681a      	ldr	r2, [r3, #0]
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800421c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004228:	2b40      	cmp	r3, #64	; 0x40
 800422a:	d007      	beq.n	800423c <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	681a      	ldr	r2, [r3, #0]
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800423a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	68db      	ldr	r3, [r3, #12]
 8004240:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004244:	d867      	bhi.n	8004316 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004246:	e030      	b.n	80042aa <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	689b      	ldr	r3, [r3, #8]
 800424e:	f003 0301 	and.w	r3, r3, #1
 8004252:	2b01      	cmp	r3, #1
 8004254:	d117      	bne.n	8004286 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f103 020c 	add.w	r2, r3, #12
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004262:	7812      	ldrb	r2, [r2, #0]
 8004264:	b2d2      	uxtb	r2, r2
 8004266:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800426c:	1c5a      	adds	r2, r3, #1
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004278:	b29b      	uxth	r3, r3
 800427a:	3b01      	subs	r3, #1
 800427c:	b29a      	uxth	r2, r3
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004284:	e011      	b.n	80042aa <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004286:	f7fd fcdb 	bl	8001c40 <HAL_GetTick>
 800428a:	4602      	mov	r2, r0
 800428c:	693b      	ldr	r3, [r7, #16]
 800428e:	1ad3      	subs	r3, r2, r3
 8004290:	683a      	ldr	r2, [r7, #0]
 8004292:	429a      	cmp	r2, r3
 8004294:	d803      	bhi.n	800429e <HAL_SPI_Receive+0x19c>
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800429c:	d102      	bne.n	80042a4 <HAL_SPI_Receive+0x1a2>
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d102      	bne.n	80042aa <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 80042a4:	2303      	movs	r3, #3
 80042a6:	75fb      	strb	r3, [r7, #23]
          goto error;
 80042a8:	e04e      	b.n	8004348 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80042b0:	b29b      	uxth	r3, r3
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d1c8      	bne.n	8004248 <HAL_SPI_Receive+0x146>
 80042b6:	e034      	b.n	8004322 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	689b      	ldr	r3, [r3, #8]
 80042be:	f003 0301 	and.w	r3, r3, #1
 80042c2:	2b01      	cmp	r3, #1
 80042c4:	d115      	bne.n	80042f2 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	68da      	ldr	r2, [r3, #12]
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d0:	b292      	uxth	r2, r2
 80042d2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d8:	1c9a      	adds	r2, r3, #2
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80042e4:	b29b      	uxth	r3, r3
 80042e6:	3b01      	subs	r3, #1
 80042e8:	b29a      	uxth	r2, r3
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80042f0:	e011      	b.n	8004316 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80042f2:	f7fd fca5 	bl	8001c40 <HAL_GetTick>
 80042f6:	4602      	mov	r2, r0
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	1ad3      	subs	r3, r2, r3
 80042fc:	683a      	ldr	r2, [r7, #0]
 80042fe:	429a      	cmp	r2, r3
 8004300:	d803      	bhi.n	800430a <HAL_SPI_Receive+0x208>
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004308:	d102      	bne.n	8004310 <HAL_SPI_Receive+0x20e>
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d102      	bne.n	8004316 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8004310:	2303      	movs	r3, #3
 8004312:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004314:	e018      	b.n	8004348 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800431c:	b29b      	uxth	r3, r3
 800431e:	2b00      	cmp	r3, #0
 8004320:	d1ca      	bne.n	80042b8 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004322:	693a      	ldr	r2, [r7, #16]
 8004324:	6839      	ldr	r1, [r7, #0]
 8004326:	68f8      	ldr	r0, [r7, #12]
 8004328:	f000 fb48 	bl	80049bc <SPI_EndRxTransaction>
 800432c:	4603      	mov	r3, r0
 800432e:	2b00      	cmp	r3, #0
 8004330:	d002      	beq.n	8004338 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	2220      	movs	r2, #32
 8004336:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800433c:	2b00      	cmp	r3, #0
 800433e:	d002      	beq.n	8004346 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8004340:	2301      	movs	r3, #1
 8004342:	75fb      	strb	r3, [r7, #23]
 8004344:	e000      	b.n	8004348 <HAL_SPI_Receive+0x246>
  }

error :
 8004346:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	2201      	movs	r2, #1
 800434c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	2200      	movs	r2, #0
 8004354:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004358:	7dfb      	ldrb	r3, [r7, #23]
}
 800435a:	4618      	mov	r0, r3
 800435c:	3718      	adds	r7, #24
 800435e:	46bd      	mov	sp, r7
 8004360:	bd80      	pop	{r7, pc}

08004362 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004362:	b580      	push	{r7, lr}
 8004364:	b08a      	sub	sp, #40	; 0x28
 8004366:	af00      	add	r7, sp, #0
 8004368:	60f8      	str	r0, [r7, #12]
 800436a:	60b9      	str	r1, [r7, #8]
 800436c:	607a      	str	r2, [r7, #4]
 800436e:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004370:	2301      	movs	r3, #1
 8004372:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004374:	2300      	movs	r3, #0
 8004376:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004380:	2b01      	cmp	r3, #1
 8004382:	d101      	bne.n	8004388 <HAL_SPI_TransmitReceive+0x26>
 8004384:	2302      	movs	r3, #2
 8004386:	e1fb      	b.n	8004780 <HAL_SPI_TransmitReceive+0x41e>
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2201      	movs	r2, #1
 800438c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004390:	f7fd fc56 	bl	8001c40 <HAL_GetTick>
 8004394:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800439c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80043a4:	887b      	ldrh	r3, [r7, #2]
 80043a6:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80043a8:	887b      	ldrh	r3, [r7, #2]
 80043aa:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80043ac:	7efb      	ldrb	r3, [r7, #27]
 80043ae:	2b01      	cmp	r3, #1
 80043b0:	d00e      	beq.n	80043d0 <HAL_SPI_TransmitReceive+0x6e>
 80043b2:	697b      	ldr	r3, [r7, #20]
 80043b4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80043b8:	d106      	bne.n	80043c8 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	689b      	ldr	r3, [r3, #8]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d102      	bne.n	80043c8 <HAL_SPI_TransmitReceive+0x66>
 80043c2:	7efb      	ldrb	r3, [r7, #27]
 80043c4:	2b04      	cmp	r3, #4
 80043c6:	d003      	beq.n	80043d0 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80043c8:	2302      	movs	r3, #2
 80043ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80043ce:	e1cd      	b.n	800476c <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d005      	beq.n	80043e2 <HAL_SPI_TransmitReceive+0x80>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d002      	beq.n	80043e2 <HAL_SPI_TransmitReceive+0x80>
 80043dc:	887b      	ldrh	r3, [r7, #2]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d103      	bne.n	80043ea <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80043e2:	2301      	movs	r3, #1
 80043e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80043e8:	e1c0      	b.n	800476c <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80043f0:	b2db      	uxtb	r3, r3
 80043f2:	2b04      	cmp	r3, #4
 80043f4:	d003      	beq.n	80043fe <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2205      	movs	r2, #5
 80043fa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2200      	movs	r2, #0
 8004402:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	687a      	ldr	r2, [r7, #4]
 8004408:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	887a      	ldrh	r2, [r7, #2]
 800440e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	887a      	ldrh	r2, [r7, #2]
 8004416:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	68ba      	ldr	r2, [r7, #8]
 800441e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	887a      	ldrh	r2, [r7, #2]
 8004424:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	887a      	ldrh	r2, [r7, #2]
 800442a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	2200      	movs	r2, #0
 8004430:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	2200      	movs	r2, #0
 8004436:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	68db      	ldr	r3, [r3, #12]
 800443c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004440:	d802      	bhi.n	8004448 <HAL_SPI_TransmitReceive+0xe6>
 8004442:	8a3b      	ldrh	r3, [r7, #16]
 8004444:	2b01      	cmp	r3, #1
 8004446:	d908      	bls.n	800445a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	685a      	ldr	r2, [r3, #4]
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004456:	605a      	str	r2, [r3, #4]
 8004458:	e007      	b.n	800446a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	685a      	ldr	r2, [r3, #4]
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004468:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004474:	2b40      	cmp	r3, #64	; 0x40
 8004476:	d007      	beq.n	8004488 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	681a      	ldr	r2, [r3, #0]
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004486:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	68db      	ldr	r3, [r3, #12]
 800448c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004490:	d97c      	bls.n	800458c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d002      	beq.n	80044a0 <HAL_SPI_TransmitReceive+0x13e>
 800449a:	8a7b      	ldrh	r3, [r7, #18]
 800449c:	2b01      	cmp	r3, #1
 800449e:	d169      	bne.n	8004574 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044a4:	881a      	ldrh	r2, [r3, #0]
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044b0:	1c9a      	adds	r2, r3, #2
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044ba:	b29b      	uxth	r3, r3
 80044bc:	3b01      	subs	r3, #1
 80044be:	b29a      	uxth	r2, r3
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80044c4:	e056      	b.n	8004574 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	f003 0302 	and.w	r3, r3, #2
 80044d0:	2b02      	cmp	r3, #2
 80044d2:	d11b      	bne.n	800450c <HAL_SPI_TransmitReceive+0x1aa>
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044d8:	b29b      	uxth	r3, r3
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d016      	beq.n	800450c <HAL_SPI_TransmitReceive+0x1aa>
 80044de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	d113      	bne.n	800450c <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044e8:	881a      	ldrh	r2, [r3, #0]
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044f4:	1c9a      	adds	r2, r3, #2
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044fe:	b29b      	uxth	r3, r3
 8004500:	3b01      	subs	r3, #1
 8004502:	b29a      	uxth	r2, r3
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004508:	2300      	movs	r3, #0
 800450a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	689b      	ldr	r3, [r3, #8]
 8004512:	f003 0301 	and.w	r3, r3, #1
 8004516:	2b01      	cmp	r3, #1
 8004518:	d11c      	bne.n	8004554 <HAL_SPI_TransmitReceive+0x1f2>
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004520:	b29b      	uxth	r3, r3
 8004522:	2b00      	cmp	r3, #0
 8004524:	d016      	beq.n	8004554 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	68da      	ldr	r2, [r3, #12]
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004530:	b292      	uxth	r2, r2
 8004532:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004538:	1c9a      	adds	r2, r3, #2
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004544:	b29b      	uxth	r3, r3
 8004546:	3b01      	subs	r3, #1
 8004548:	b29a      	uxth	r2, r3
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004550:	2301      	movs	r3, #1
 8004552:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004554:	f7fd fb74 	bl	8001c40 <HAL_GetTick>
 8004558:	4602      	mov	r2, r0
 800455a:	69fb      	ldr	r3, [r7, #28]
 800455c:	1ad3      	subs	r3, r2, r3
 800455e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004560:	429a      	cmp	r2, r3
 8004562:	d807      	bhi.n	8004574 <HAL_SPI_TransmitReceive+0x212>
 8004564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004566:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800456a:	d003      	beq.n	8004574 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800456c:	2303      	movs	r3, #3
 800456e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004572:	e0fb      	b.n	800476c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004578:	b29b      	uxth	r3, r3
 800457a:	2b00      	cmp	r3, #0
 800457c:	d1a3      	bne.n	80044c6 <HAL_SPI_TransmitReceive+0x164>
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004584:	b29b      	uxth	r3, r3
 8004586:	2b00      	cmp	r3, #0
 8004588:	d19d      	bne.n	80044c6 <HAL_SPI_TransmitReceive+0x164>
 800458a:	e0df      	b.n	800474c <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d003      	beq.n	800459c <HAL_SPI_TransmitReceive+0x23a>
 8004594:	8a7b      	ldrh	r3, [r7, #18]
 8004596:	2b01      	cmp	r3, #1
 8004598:	f040 80cb 	bne.w	8004732 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045a0:	b29b      	uxth	r3, r3
 80045a2:	2b01      	cmp	r3, #1
 80045a4:	d912      	bls.n	80045cc <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045aa:	881a      	ldrh	r2, [r3, #0]
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045b6:	1c9a      	adds	r2, r3, #2
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045c0:	b29b      	uxth	r3, r3
 80045c2:	3b02      	subs	r3, #2
 80045c4:	b29a      	uxth	r2, r3
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80045ca:	e0b2      	b.n	8004732 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	330c      	adds	r3, #12
 80045d6:	7812      	ldrb	r2, [r2, #0]
 80045d8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045de:	1c5a      	adds	r2, r3, #1
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045e8:	b29b      	uxth	r3, r3
 80045ea:	3b01      	subs	r3, #1
 80045ec:	b29a      	uxth	r2, r3
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80045f2:	e09e      	b.n	8004732 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	689b      	ldr	r3, [r3, #8]
 80045fa:	f003 0302 	and.w	r3, r3, #2
 80045fe:	2b02      	cmp	r3, #2
 8004600:	d134      	bne.n	800466c <HAL_SPI_TransmitReceive+0x30a>
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004606:	b29b      	uxth	r3, r3
 8004608:	2b00      	cmp	r3, #0
 800460a:	d02f      	beq.n	800466c <HAL_SPI_TransmitReceive+0x30a>
 800460c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800460e:	2b01      	cmp	r3, #1
 8004610:	d12c      	bne.n	800466c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004616:	b29b      	uxth	r3, r3
 8004618:	2b01      	cmp	r3, #1
 800461a:	d912      	bls.n	8004642 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004620:	881a      	ldrh	r2, [r3, #0]
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800462c:	1c9a      	adds	r2, r3, #2
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004636:	b29b      	uxth	r3, r3
 8004638:	3b02      	subs	r3, #2
 800463a:	b29a      	uxth	r2, r3
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004640:	e012      	b.n	8004668 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	330c      	adds	r3, #12
 800464c:	7812      	ldrb	r2, [r2, #0]
 800464e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004654:	1c5a      	adds	r2, r3, #1
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800465e:	b29b      	uxth	r3, r3
 8004660:	3b01      	subs	r3, #1
 8004662:	b29a      	uxth	r2, r3
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004668:	2300      	movs	r3, #0
 800466a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	f003 0301 	and.w	r3, r3, #1
 8004676:	2b01      	cmp	r3, #1
 8004678:	d148      	bne.n	800470c <HAL_SPI_TransmitReceive+0x3aa>
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004680:	b29b      	uxth	r3, r3
 8004682:	2b00      	cmp	r3, #0
 8004684:	d042      	beq.n	800470c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800468c:	b29b      	uxth	r3, r3
 800468e:	2b01      	cmp	r3, #1
 8004690:	d923      	bls.n	80046da <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	68da      	ldr	r2, [r3, #12]
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800469c:	b292      	uxth	r2, r2
 800469e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a4:	1c9a      	adds	r2, r3, #2
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80046b0:	b29b      	uxth	r3, r3
 80046b2:	3b02      	subs	r3, #2
 80046b4:	b29a      	uxth	r2, r3
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80046c2:	b29b      	uxth	r3, r3
 80046c4:	2b01      	cmp	r3, #1
 80046c6:	d81f      	bhi.n	8004708 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	685a      	ldr	r2, [r3, #4]
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80046d6:	605a      	str	r2, [r3, #4]
 80046d8:	e016      	b.n	8004708 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f103 020c 	add.w	r2, r3, #12
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e6:	7812      	ldrb	r2, [r2, #0]
 80046e8:	b2d2      	uxtb	r2, r2
 80046ea:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f0:	1c5a      	adds	r2, r3, #1
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80046fc:	b29b      	uxth	r3, r3
 80046fe:	3b01      	subs	r3, #1
 8004700:	b29a      	uxth	r2, r3
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004708:	2301      	movs	r3, #1
 800470a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800470c:	f7fd fa98 	bl	8001c40 <HAL_GetTick>
 8004710:	4602      	mov	r2, r0
 8004712:	69fb      	ldr	r3, [r7, #28]
 8004714:	1ad3      	subs	r3, r2, r3
 8004716:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004718:	429a      	cmp	r2, r3
 800471a:	d803      	bhi.n	8004724 <HAL_SPI_TransmitReceive+0x3c2>
 800471c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800471e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004722:	d102      	bne.n	800472a <HAL_SPI_TransmitReceive+0x3c8>
 8004724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004726:	2b00      	cmp	r3, #0
 8004728:	d103      	bne.n	8004732 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800472a:	2303      	movs	r3, #3
 800472c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004730:	e01c      	b.n	800476c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004736:	b29b      	uxth	r3, r3
 8004738:	2b00      	cmp	r3, #0
 800473a:	f47f af5b 	bne.w	80045f4 <HAL_SPI_TransmitReceive+0x292>
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004744:	b29b      	uxth	r3, r3
 8004746:	2b00      	cmp	r3, #0
 8004748:	f47f af54 	bne.w	80045f4 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800474c:	69fa      	ldr	r2, [r7, #28]
 800474e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004750:	68f8      	ldr	r0, [r7, #12]
 8004752:	f000 f98b 	bl	8004a6c <SPI_EndRxTxTransaction>
 8004756:	4603      	mov	r3, r0
 8004758:	2b00      	cmp	r3, #0
 800475a:	d006      	beq.n	800476a <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800475c:	2301      	movs	r3, #1
 800475e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	2220      	movs	r2, #32
 8004766:	661a      	str	r2, [r3, #96]	; 0x60
 8004768:	e000      	b.n	800476c <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800476a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	2201      	movs	r2, #1
 8004770:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	2200      	movs	r2, #0
 8004778:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800477c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004780:	4618      	mov	r0, r3
 8004782:	3728      	adds	r7, #40	; 0x28
 8004784:	46bd      	mov	sp, r7
 8004786:	bd80      	pop	{r7, pc}

08004788 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b088      	sub	sp, #32
 800478c:	af00      	add	r7, sp, #0
 800478e:	60f8      	str	r0, [r7, #12]
 8004790:	60b9      	str	r1, [r7, #8]
 8004792:	603b      	str	r3, [r7, #0]
 8004794:	4613      	mov	r3, r2
 8004796:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004798:	f7fd fa52 	bl	8001c40 <HAL_GetTick>
 800479c:	4602      	mov	r2, r0
 800479e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047a0:	1a9b      	subs	r3, r3, r2
 80047a2:	683a      	ldr	r2, [r7, #0]
 80047a4:	4413      	add	r3, r2
 80047a6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80047a8:	f7fd fa4a 	bl	8001c40 <HAL_GetTick>
 80047ac:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80047ae:	4b39      	ldr	r3, [pc, #228]	; (8004894 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	015b      	lsls	r3, r3, #5
 80047b4:	0d1b      	lsrs	r3, r3, #20
 80047b6:	69fa      	ldr	r2, [r7, #28]
 80047b8:	fb02 f303 	mul.w	r3, r2, r3
 80047bc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80047be:	e054      	b.n	800486a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80047c6:	d050      	beq.n	800486a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80047c8:	f7fd fa3a 	bl	8001c40 <HAL_GetTick>
 80047cc:	4602      	mov	r2, r0
 80047ce:	69bb      	ldr	r3, [r7, #24]
 80047d0:	1ad3      	subs	r3, r2, r3
 80047d2:	69fa      	ldr	r2, [r7, #28]
 80047d4:	429a      	cmp	r2, r3
 80047d6:	d902      	bls.n	80047de <SPI_WaitFlagStateUntilTimeout+0x56>
 80047d8:	69fb      	ldr	r3, [r7, #28]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d13d      	bne.n	800485a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	685a      	ldr	r2, [r3, #4]
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80047ec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80047f6:	d111      	bne.n	800481c <SPI_WaitFlagStateUntilTimeout+0x94>
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004800:	d004      	beq.n	800480c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	689b      	ldr	r3, [r3, #8]
 8004806:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800480a:	d107      	bne.n	800481c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	681a      	ldr	r2, [r3, #0]
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800481a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004820:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004824:	d10f      	bne.n	8004846 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	681a      	ldr	r2, [r3, #0]
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004834:	601a      	str	r2, [r3, #0]
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	681a      	ldr	r2, [r3, #0]
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004844:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	2201      	movs	r2, #1
 800484a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	2200      	movs	r2, #0
 8004852:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004856:	2303      	movs	r3, #3
 8004858:	e017      	b.n	800488a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d101      	bne.n	8004864 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004860:	2300      	movs	r3, #0
 8004862:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	3b01      	subs	r3, #1
 8004868:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	689a      	ldr	r2, [r3, #8]
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	4013      	ands	r3, r2
 8004874:	68ba      	ldr	r2, [r7, #8]
 8004876:	429a      	cmp	r2, r3
 8004878:	bf0c      	ite	eq
 800487a:	2301      	moveq	r3, #1
 800487c:	2300      	movne	r3, #0
 800487e:	b2db      	uxtb	r3, r3
 8004880:	461a      	mov	r2, r3
 8004882:	79fb      	ldrb	r3, [r7, #7]
 8004884:	429a      	cmp	r2, r3
 8004886:	d19b      	bne.n	80047c0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004888:	2300      	movs	r3, #0
}
 800488a:	4618      	mov	r0, r3
 800488c:	3720      	adds	r7, #32
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}
 8004892:	bf00      	nop
 8004894:	20000010 	.word	0x20000010

08004898 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b088      	sub	sp, #32
 800489c:	af00      	add	r7, sp, #0
 800489e:	60f8      	str	r0, [r7, #12]
 80048a0:	60b9      	str	r1, [r7, #8]
 80048a2:	607a      	str	r2, [r7, #4]
 80048a4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80048a6:	f7fd f9cb 	bl	8001c40 <HAL_GetTick>
 80048aa:	4602      	mov	r2, r0
 80048ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ae:	1a9b      	subs	r3, r3, r2
 80048b0:	683a      	ldr	r2, [r7, #0]
 80048b2:	4413      	add	r3, r2
 80048b4:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80048b6:	f7fd f9c3 	bl	8001c40 <HAL_GetTick>
 80048ba:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80048bc:	4b3e      	ldr	r3, [pc, #248]	; (80049b8 <SPI_WaitFifoStateUntilTimeout+0x120>)
 80048be:	681a      	ldr	r2, [r3, #0]
 80048c0:	4613      	mov	r3, r2
 80048c2:	009b      	lsls	r3, r3, #2
 80048c4:	4413      	add	r3, r2
 80048c6:	00da      	lsls	r2, r3, #3
 80048c8:	1ad3      	subs	r3, r2, r3
 80048ca:	0d1b      	lsrs	r3, r3, #20
 80048cc:	69fa      	ldr	r2, [r7, #28]
 80048ce:	fb02 f303 	mul.w	r3, r2, r3
 80048d2:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 80048d4:	e062      	b.n	800499c <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80048dc:	d109      	bne.n	80048f2 <SPI_WaitFifoStateUntilTimeout+0x5a>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d106      	bne.n	80048f2 <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	330c      	adds	r3, #12
 80048ea:	781b      	ldrb	r3, [r3, #0]
 80048ec:	b2db      	uxtb	r3, r3
 80048ee:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 80048f0:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80048f8:	d050      	beq.n	800499c <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80048fa:	f7fd f9a1 	bl	8001c40 <HAL_GetTick>
 80048fe:	4602      	mov	r2, r0
 8004900:	69bb      	ldr	r3, [r7, #24]
 8004902:	1ad3      	subs	r3, r2, r3
 8004904:	69fa      	ldr	r2, [r7, #28]
 8004906:	429a      	cmp	r2, r3
 8004908:	d902      	bls.n	8004910 <SPI_WaitFifoStateUntilTimeout+0x78>
 800490a:	69fb      	ldr	r3, [r7, #28]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d13d      	bne.n	800498c <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	685a      	ldr	r2, [r3, #4]
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800491e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004928:	d111      	bne.n	800494e <SPI_WaitFifoStateUntilTimeout+0xb6>
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	689b      	ldr	r3, [r3, #8]
 800492e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004932:	d004      	beq.n	800493e <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	689b      	ldr	r3, [r3, #8]
 8004938:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800493c:	d107      	bne.n	800494e <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	681a      	ldr	r2, [r3, #0]
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800494c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004952:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004956:	d10f      	bne.n	8004978 <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	681a      	ldr	r2, [r3, #0]
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004966:	601a      	str	r2, [r3, #0]
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	681a      	ldr	r2, [r3, #0]
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004976:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	2201      	movs	r2, #1
 800497c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	2200      	movs	r2, #0
 8004984:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004988:	2303      	movs	r3, #3
 800498a:	e010      	b.n	80049ae <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d101      	bne.n	8004996 <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 8004992:	2300      	movs	r3, #0
 8004994:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	3b01      	subs	r3, #1
 800499a:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	689a      	ldr	r2, [r3, #8]
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	4013      	ands	r3, r2
 80049a6:	687a      	ldr	r2, [r7, #4]
 80049a8:	429a      	cmp	r2, r3
 80049aa:	d194      	bne.n	80048d6 <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 80049ac:	2300      	movs	r3, #0
}
 80049ae:	4618      	mov	r0, r3
 80049b0:	3720      	adds	r7, #32
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd80      	pop	{r7, pc}
 80049b6:	bf00      	nop
 80049b8:	20000010 	.word	0x20000010

080049bc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b086      	sub	sp, #24
 80049c0:	af02      	add	r7, sp, #8
 80049c2:	60f8      	str	r0, [r7, #12]
 80049c4:	60b9      	str	r1, [r7, #8]
 80049c6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80049d0:	d111      	bne.n	80049f6 <SPI_EndRxTransaction+0x3a>
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	689b      	ldr	r3, [r3, #8]
 80049d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049da:	d004      	beq.n	80049e6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049e4:	d107      	bne.n	80049f6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	681a      	ldr	r2, [r3, #0]
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049f4:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	9300      	str	r3, [sp, #0]
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	2200      	movs	r2, #0
 80049fe:	2180      	movs	r1, #128	; 0x80
 8004a00:	68f8      	ldr	r0, [r7, #12]
 8004a02:	f7ff fec1 	bl	8004788 <SPI_WaitFlagStateUntilTimeout>
 8004a06:	4603      	mov	r3, r0
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d007      	beq.n	8004a1c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a10:	f043 0220 	orr.w	r2, r3, #32
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004a18:	2303      	movs	r3, #3
 8004a1a:	e023      	b.n	8004a64 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a24:	d11d      	bne.n	8004a62 <SPI_EndRxTransaction+0xa6>
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	689b      	ldr	r3, [r3, #8]
 8004a2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a2e:	d004      	beq.n	8004a3a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	689b      	ldr	r3, [r3, #8]
 8004a34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a38:	d113      	bne.n	8004a62 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	9300      	str	r3, [sp, #0]
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	2200      	movs	r2, #0
 8004a42:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004a46:	68f8      	ldr	r0, [r7, #12]
 8004a48:	f7ff ff26 	bl	8004898 <SPI_WaitFifoStateUntilTimeout>
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d007      	beq.n	8004a62 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a56:	f043 0220 	orr.w	r2, r3, #32
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8004a5e:	2303      	movs	r3, #3
 8004a60:	e000      	b.n	8004a64 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8004a62:	2300      	movs	r3, #0
}
 8004a64:	4618      	mov	r0, r3
 8004a66:	3710      	adds	r7, #16
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bd80      	pop	{r7, pc}

08004a6c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b086      	sub	sp, #24
 8004a70:	af02      	add	r7, sp, #8
 8004a72:	60f8      	str	r0, [r7, #12]
 8004a74:	60b9      	str	r1, [r7, #8]
 8004a76:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	9300      	str	r3, [sp, #0]
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004a84:	68f8      	ldr	r0, [r7, #12]
 8004a86:	f7ff ff07 	bl	8004898 <SPI_WaitFifoStateUntilTimeout>
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d007      	beq.n	8004aa0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a94:	f043 0220 	orr.w	r2, r3, #32
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004a9c:	2303      	movs	r3, #3
 8004a9e:	e027      	b.n	8004af0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	9300      	str	r3, [sp, #0]
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	2180      	movs	r1, #128	; 0x80
 8004aaa:	68f8      	ldr	r0, [r7, #12]
 8004aac:	f7ff fe6c 	bl	8004788 <SPI_WaitFlagStateUntilTimeout>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d007      	beq.n	8004ac6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004aba:	f043 0220 	orr.w	r2, r3, #32
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004ac2:	2303      	movs	r3, #3
 8004ac4:	e014      	b.n	8004af0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	9300      	str	r3, [sp, #0]
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	2200      	movs	r2, #0
 8004ace:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004ad2:	68f8      	ldr	r0, [r7, #12]
 8004ad4:	f7ff fee0 	bl	8004898 <SPI_WaitFifoStateUntilTimeout>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d007      	beq.n	8004aee <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ae2:	f043 0220 	orr.w	r2, r3, #32
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004aea:	2303      	movs	r3, #3
 8004aec:	e000      	b.n	8004af0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004aee:	2300      	movs	r3, #0
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	3710      	adds	r7, #16
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bd80      	pop	{r7, pc}

08004af8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b082      	sub	sp, #8
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d101      	bne.n	8004b0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b06:	2301      	movs	r3, #1
 8004b08:	e040      	b.n	8004b8c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d106      	bne.n	8004b20 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2200      	movs	r2, #0
 8004b16:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b1a:	6878      	ldr	r0, [r7, #4]
 8004b1c:	f7fc fb16 	bl	800114c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2224      	movs	r2, #36	; 0x24
 8004b24:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	681a      	ldr	r2, [r3, #0]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f022 0201 	bic.w	r2, r2, #1
 8004b34:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f000 fb30 	bl	800519c <UART_SetConfig>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	2b01      	cmp	r3, #1
 8004b40:	d101      	bne.n	8004b46 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004b42:	2301      	movs	r3, #1
 8004b44:	e022      	b.n	8004b8c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d002      	beq.n	8004b54 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004b4e:	6878      	ldr	r0, [r7, #4]
 8004b50:	f000 fd58 	bl	8005604 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	685a      	ldr	r2, [r3, #4]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004b62:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	689a      	ldr	r2, [r3, #8]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004b72:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	681a      	ldr	r2, [r3, #0]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f042 0201 	orr.w	r2, r2, #1
 8004b82:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004b84:	6878      	ldr	r0, [r7, #4]
 8004b86:	f000 fddf 	bl	8005748 <UART_CheckIdleState>
 8004b8a:	4603      	mov	r3, r0
}
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	3708      	adds	r7, #8
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bd80      	pop	{r7, pc}

08004b94 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b08a      	sub	sp, #40	; 0x28
 8004b98:	af02      	add	r7, sp, #8
 8004b9a:	60f8      	str	r0, [r7, #12]
 8004b9c:	60b9      	str	r1, [r7, #8]
 8004b9e:	603b      	str	r3, [r7, #0]
 8004ba0:	4613      	mov	r3, r2
 8004ba2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ba8:	2b20      	cmp	r3, #32
 8004baa:	f040 8082 	bne.w	8004cb2 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d002      	beq.n	8004bba <HAL_UART_Transmit+0x26>
 8004bb4:	88fb      	ldrh	r3, [r7, #6]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d101      	bne.n	8004bbe <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	e07a      	b.n	8004cb4 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004bc4:	2b01      	cmp	r3, #1
 8004bc6:	d101      	bne.n	8004bcc <HAL_UART_Transmit+0x38>
 8004bc8:	2302      	movs	r3, #2
 8004bca:	e073      	b.n	8004cb4 <HAL_UART_Transmit+0x120>
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	2201      	movs	r2, #1
 8004bd0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	2221      	movs	r2, #33	; 0x21
 8004be0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004be2:	f7fd f82d 	bl	8001c40 <HAL_GetTick>
 8004be6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	88fa      	ldrh	r2, [r7, #6]
 8004bec:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	88fa      	ldrh	r2, [r7, #6]
 8004bf4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	689b      	ldr	r3, [r3, #8]
 8004bfc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c00:	d108      	bne.n	8004c14 <HAL_UART_Transmit+0x80>
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	691b      	ldr	r3, [r3, #16]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d104      	bne.n	8004c14 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004c0e:	68bb      	ldr	r3, [r7, #8]
 8004c10:	61bb      	str	r3, [r7, #24]
 8004c12:	e003      	b.n	8004c1c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004c18:	2300      	movs	r3, #0
 8004c1a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	2200      	movs	r2, #0
 8004c20:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004c24:	e02d      	b.n	8004c82 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	9300      	str	r3, [sp, #0]
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	2180      	movs	r1, #128	; 0x80
 8004c30:	68f8      	ldr	r0, [r7, #12]
 8004c32:	f000 fdd2 	bl	80057da <UART_WaitOnFlagUntilTimeout>
 8004c36:	4603      	mov	r3, r0
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d001      	beq.n	8004c40 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004c3c:	2303      	movs	r3, #3
 8004c3e:	e039      	b.n	8004cb4 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004c40:	69fb      	ldr	r3, [r7, #28]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d10b      	bne.n	8004c5e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004c46:	69bb      	ldr	r3, [r7, #24]
 8004c48:	881a      	ldrh	r2, [r3, #0]
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c52:	b292      	uxth	r2, r2
 8004c54:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004c56:	69bb      	ldr	r3, [r7, #24]
 8004c58:	3302      	adds	r3, #2
 8004c5a:	61bb      	str	r3, [r7, #24]
 8004c5c:	e008      	b.n	8004c70 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004c5e:	69fb      	ldr	r3, [r7, #28]
 8004c60:	781a      	ldrb	r2, [r3, #0]
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	b292      	uxth	r2, r2
 8004c68:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004c6a:	69fb      	ldr	r3, [r7, #28]
 8004c6c:	3301      	adds	r3, #1
 8004c6e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004c76:	b29b      	uxth	r3, r3
 8004c78:	3b01      	subs	r3, #1
 8004c7a:	b29a      	uxth	r2, r3
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004c88:	b29b      	uxth	r3, r3
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d1cb      	bne.n	8004c26 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	9300      	str	r3, [sp, #0]
 8004c92:	697b      	ldr	r3, [r7, #20]
 8004c94:	2200      	movs	r2, #0
 8004c96:	2140      	movs	r1, #64	; 0x40
 8004c98:	68f8      	ldr	r0, [r7, #12]
 8004c9a:	f000 fd9e 	bl	80057da <UART_WaitOnFlagUntilTimeout>
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d001      	beq.n	8004ca8 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004ca4:	2303      	movs	r3, #3
 8004ca6:	e005      	b.n	8004cb4 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	2220      	movs	r2, #32
 8004cac:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004cae:	2300      	movs	r3, #0
 8004cb0:	e000      	b.n	8004cb4 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004cb2:	2302      	movs	r3, #2
  }
}
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	3720      	adds	r7, #32
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bd80      	pop	{r7, pc}

08004cbc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b084      	sub	sp, #16
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	60f8      	str	r0, [r7, #12]
 8004cc4:	60b9      	str	r1, [r7, #8]
 8004cc6:	4613      	mov	r3, r2
 8004cc8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004cce:	2b20      	cmp	r3, #32
 8004cd0:	d131      	bne.n	8004d36 <HAL_UART_Receive_IT+0x7a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d002      	beq.n	8004cde <HAL_UART_Receive_IT+0x22>
 8004cd8:	88fb      	ldrh	r3, [r7, #6]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d101      	bne.n	8004ce2 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8004cde:	2301      	movs	r3, #1
 8004ce0:	e02a      	b.n	8004d38 <HAL_UART_Receive_IT+0x7c>
    }

    __HAL_LOCK(huart);
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004ce8:	2b01      	cmp	r3, #1
 8004cea:	d101      	bne.n	8004cf0 <HAL_UART_Receive_IT+0x34>
 8004cec:	2302      	movs	r3, #2
 8004cee:	e023      	b.n	8004d38 <HAL_UART_Receive_IT+0x7c>
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4a0f      	ldr	r2, [pc, #60]	; (8004d40 <HAL_UART_Receive_IT+0x84>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d00e      	beq.n	8004d26 <HAL_UART_Receive_IT+0x6a>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d007      	beq.n	8004d26 <HAL_UART_Receive_IT+0x6a>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	681a      	ldr	r2, [r3, #0]
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8004d24:	601a      	str	r2, [r3, #0]
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 8004d26:	88fb      	ldrh	r3, [r7, #6]
 8004d28:	461a      	mov	r2, r3
 8004d2a:	68b9      	ldr	r1, [r7, #8]
 8004d2c:	68f8      	ldr	r0, [r7, #12]
 8004d2e:	f000 fdd1 	bl	80058d4 <UART_Start_Receive_IT>
 8004d32:	4603      	mov	r3, r0
 8004d34:	e000      	b.n	8004d38 <HAL_UART_Receive_IT+0x7c>
  }
  else
  {
    return HAL_BUSY;
 8004d36:	2302      	movs	r3, #2
  }
}
 8004d38:	4618      	mov	r0, r3
 8004d3a:	3710      	adds	r7, #16
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	bd80      	pop	{r7, pc}
 8004d40:	40008000 	.word	0x40008000

08004d44 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b088      	sub	sp, #32
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	69db      	ldr	r3, [r3, #28]
 8004d52:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	689b      	ldr	r3, [r3, #8]
 8004d62:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004d64:	69fa      	ldr	r2, [r7, #28]
 8004d66:	f640 030f 	movw	r3, #2063	; 0x80f
 8004d6a:	4013      	ands	r3, r2
 8004d6c:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d113      	bne.n	8004d9c <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004d74:	69fb      	ldr	r3, [r7, #28]
 8004d76:	f003 0320 	and.w	r3, r3, #32
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d00e      	beq.n	8004d9c <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004d7e:	69bb      	ldr	r3, [r7, #24]
 8004d80:	f003 0320 	and.w	r3, r3, #32
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d009      	beq.n	8004d9c <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	f000 81ce 	beq.w	800512e <HAL_UART_IRQHandler+0x3ea>
      {
        huart->RxISR(huart);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d96:	6878      	ldr	r0, [r7, #4]
 8004d98:	4798      	blx	r3
      }
      return;
 8004d9a:	e1c8      	b.n	800512e <HAL_UART_IRQHandler+0x3ea>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8004d9c:	693b      	ldr	r3, [r7, #16]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	f000 80e3 	beq.w	8004f6a <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	f003 0301 	and.w	r3, r3, #1
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d105      	bne.n	8004dba <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004dae:	69ba      	ldr	r2, [r7, #24]
 8004db0:	4ba6      	ldr	r3, [pc, #664]	; (800504c <HAL_UART_IRQHandler+0x308>)
 8004db2:	4013      	ands	r3, r2
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	f000 80d8 	beq.w	8004f6a <HAL_UART_IRQHandler+0x226>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004dba:	69fb      	ldr	r3, [r7, #28]
 8004dbc:	f003 0301 	and.w	r3, r3, #1
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d010      	beq.n	8004de6 <HAL_UART_IRQHandler+0xa2>
 8004dc4:	69bb      	ldr	r3, [r7, #24]
 8004dc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d00b      	beq.n	8004de6 <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ddc:	f043 0201 	orr.w	r2, r3, #1
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004de6:	69fb      	ldr	r3, [r7, #28]
 8004de8:	f003 0302 	and.w	r3, r3, #2
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d010      	beq.n	8004e12 <HAL_UART_IRQHandler+0xce>
 8004df0:	697b      	ldr	r3, [r7, #20]
 8004df2:	f003 0301 	and.w	r3, r3, #1
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d00b      	beq.n	8004e12 <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	2202      	movs	r2, #2
 8004e00:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e08:	f043 0204 	orr.w	r2, r3, #4
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004e12:	69fb      	ldr	r3, [r7, #28]
 8004e14:	f003 0304 	and.w	r3, r3, #4
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d010      	beq.n	8004e3e <HAL_UART_IRQHandler+0xfa>
 8004e1c:	697b      	ldr	r3, [r7, #20]
 8004e1e:	f003 0301 	and.w	r3, r3, #1
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d00b      	beq.n	8004e3e <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	2204      	movs	r2, #4
 8004e2c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e34:	f043 0202 	orr.w	r2, r3, #2
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004e3e:	69fb      	ldr	r3, [r7, #28]
 8004e40:	f003 0308 	and.w	r3, r3, #8
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d015      	beq.n	8004e74 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004e48:	69bb      	ldr	r3, [r7, #24]
 8004e4a:	f003 0320 	and.w	r3, r3, #32
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d104      	bne.n	8004e5c <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d00b      	beq.n	8004e74 <HAL_UART_IRQHandler+0x130>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	2208      	movs	r2, #8
 8004e62:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e6a:	f043 0208 	orr.w	r2, r3, #8
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004e74:	69fb      	ldr	r3, [r7, #28]
 8004e76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d011      	beq.n	8004ea2 <HAL_UART_IRQHandler+0x15e>
 8004e7e:	69bb      	ldr	r3, [r7, #24]
 8004e80:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d00c      	beq.n	8004ea2 <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004e90:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e98:	f043 0220 	orr.w	r2, r3, #32
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	f000 8142 	beq.w	8005132 <HAL_UART_IRQHandler+0x3ee>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004eae:	69fb      	ldr	r3, [r7, #28]
 8004eb0:	f003 0320 	and.w	r3, r3, #32
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d00c      	beq.n	8004ed2 <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004eb8:	69bb      	ldr	r3, [r7, #24]
 8004eba:	f003 0320 	and.w	r3, r3, #32
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d007      	beq.n	8004ed2 <HAL_UART_IRQHandler+0x18e>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d003      	beq.n	8004ed2 <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ece:	6878      	ldr	r0, [r7, #4]
 8004ed0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ed8:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	689b      	ldr	r3, [r3, #8]
 8004ee0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ee4:	2b40      	cmp	r3, #64	; 0x40
 8004ee6:	d004      	beq.n	8004ef2 <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d031      	beq.n	8004f56 <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004ef2:	6878      	ldr	r0, [r7, #4]
 8004ef4:	f000 fd76 	bl	80059e4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	689b      	ldr	r3, [r3, #8]
 8004efe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f02:	2b40      	cmp	r3, #64	; 0x40
 8004f04:	d123      	bne.n	8004f4e <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	689a      	ldr	r2, [r3, #8]
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f14:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d013      	beq.n	8004f46 <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f22:	4a4b      	ldr	r2, [pc, #300]	; (8005050 <HAL_UART_IRQHandler+0x30c>)
 8004f24:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	f7fd f807 	bl	8001f3e <HAL_DMA_Abort_IT>
 8004f30:	4603      	mov	r3, r0
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d017      	beq.n	8004f66 <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f3c:	687a      	ldr	r2, [r7, #4]
 8004f3e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8004f40:	4610      	mov	r0, r2
 8004f42:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f44:	e00f      	b.n	8004f66 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004f46:	6878      	ldr	r0, [r7, #4]
 8004f48:	f000 f912 	bl	8005170 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f4c:	e00b      	b.n	8004f66 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004f4e:	6878      	ldr	r0, [r7, #4]
 8004f50:	f000 f90e 	bl	8005170 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f54:	e007      	b.n	8004f66 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	f000 f90a 	bl	8005170 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8004f64:	e0e5      	b.n	8005132 <HAL_UART_IRQHandler+0x3ee>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f66:	bf00      	nop
    return;
 8004f68:	e0e3      	b.n	8005132 <HAL_UART_IRQHandler+0x3ee>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f6e:	2b01      	cmp	r3, #1
 8004f70:	f040 80a9 	bne.w	80050c6 <HAL_UART_IRQHandler+0x382>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8004f74:	69fb      	ldr	r3, [r7, #28]
 8004f76:	f003 0310 	and.w	r3, r3, #16
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	f000 80a3 	beq.w	80050c6 <HAL_UART_IRQHandler+0x382>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8004f80:	69bb      	ldr	r3, [r7, #24]
 8004f82:	f003 0310 	and.w	r3, r3, #16
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	f000 809d 	beq.w	80050c6 <HAL_UART_IRQHandler+0x382>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	2210      	movs	r2, #16
 8004f92:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	689b      	ldr	r3, [r3, #8]
 8004f9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f9e:	2b40      	cmp	r3, #64	; 0x40
 8004fa0:	d158      	bne.n	8005054 <HAL_UART_IRQHandler+0x310>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 8004fac:	893b      	ldrh	r3, [r7, #8]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	f000 80c1 	beq.w	8005136 <HAL_UART_IRQHandler+0x3f2>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004fba:	893a      	ldrh	r2, [r7, #8]
 8004fbc:	429a      	cmp	r2, r3
 8004fbe:	f080 80ba 	bcs.w	8005136 <HAL_UART_IRQHandler+0x3f2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	893a      	ldrh	r2, [r7, #8]
 8004fc6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f003 0320 	and.w	r3, r3, #32
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d12a      	bne.n	8005030 <HAL_UART_IRQHandler+0x2ec>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	681a      	ldr	r2, [r3, #0]
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004fe8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	689a      	ldr	r2, [r3, #8]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f022 0201 	bic.w	r2, r2, #1
 8004ff8:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	689a      	ldr	r2, [r3, #8]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005008:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2220      	movs	r2, #32
 800500e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2200      	movs	r2, #0
 8005014:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	681a      	ldr	r2, [r3, #0]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f022 0210 	bic.w	r2, r2, #16
 8005024:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800502a:	4618      	mov	r0, r3
 800502c:	f7fc ff49 	bl	8001ec2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800503c:	b29b      	uxth	r3, r3
 800503e:	1ad3      	subs	r3, r2, r3
 8005040:	b29b      	uxth	r3, r3
 8005042:	4619      	mov	r1, r3
 8005044:	6878      	ldr	r0, [r7, #4]
 8005046:	f000 f89d 	bl	8005184 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800504a:	e074      	b.n	8005136 <HAL_UART_IRQHandler+0x3f2>
 800504c:	04000120 	.word	0x04000120
 8005050:	08005a43 	.word	0x08005a43
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005060:	b29b      	uxth	r3, r3
 8005062:	1ad3      	subs	r3, r2, r3
 8005064:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800506c:	b29b      	uxth	r3, r3
 800506e:	2b00      	cmp	r3, #0
 8005070:	d063      	beq.n	800513a <HAL_UART_IRQHandler+0x3f6>
          &&(nb_rx_data > 0U) )
 8005072:	897b      	ldrh	r3, [r7, #10]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d060      	beq.n	800513a <HAL_UART_IRQHandler+0x3f6>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	681a      	ldr	r2, [r3, #0]
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005086:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	689a      	ldr	r2, [r3, #8]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f022 0201 	bic.w	r2, r2, #1
 8005096:	609a      	str	r2, [r3, #8]
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2220      	movs	r2, #32
 800509c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2200      	movs	r2, #0
 80050a2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2200      	movs	r2, #0
 80050a8:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	681a      	ldr	r2, [r3, #0]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f022 0210 	bic.w	r2, r2, #16
 80050b8:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80050ba:	897b      	ldrh	r3, [r7, #10]
 80050bc:	4619      	mov	r1, r3
 80050be:	6878      	ldr	r0, [r7, #4]
 80050c0:	f000 f860 	bl	8005184 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80050c4:	e039      	b.n	800513a <HAL_UART_IRQHandler+0x3f6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80050c6:	69fb      	ldr	r3, [r7, #28]
 80050c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d00d      	beq.n	80050ec <HAL_UART_IRQHandler+0x3a8>
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d008      	beq.n	80050ec <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80050e2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80050e4:	6878      	ldr	r0, [r7, #4]
 80050e6:	f000 fdb3 	bl	8005c50 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80050ea:	e029      	b.n	8005140 <HAL_UART_IRQHandler+0x3fc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80050ec:	69fb      	ldr	r3, [r7, #28]
 80050ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d00d      	beq.n	8005112 <HAL_UART_IRQHandler+0x3ce>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80050f6:	69bb      	ldr	r3, [r7, #24]
 80050f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d008      	beq.n	8005112 <HAL_UART_IRQHandler+0x3ce>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005104:	2b00      	cmp	r3, #0
 8005106:	d01a      	beq.n	800513e <HAL_UART_IRQHandler+0x3fa>
    {
      huart->TxISR(huart);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800510c:	6878      	ldr	r0, [r7, #4]
 800510e:	4798      	blx	r3
    }
    return;
 8005110:	e015      	b.n	800513e <HAL_UART_IRQHandler+0x3fa>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005112:	69fb      	ldr	r3, [r7, #28]
 8005114:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005118:	2b00      	cmp	r3, #0
 800511a:	d011      	beq.n	8005140 <HAL_UART_IRQHandler+0x3fc>
 800511c:	69bb      	ldr	r3, [r7, #24]
 800511e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005122:	2b00      	cmp	r3, #0
 8005124:	d00c      	beq.n	8005140 <HAL_UART_IRQHandler+0x3fc>
  {
    UART_EndTransmit_IT(huart);
 8005126:	6878      	ldr	r0, [r7, #4]
 8005128:	f000 fca1 	bl	8005a6e <UART_EndTransmit_IT>
    return;
 800512c:	e008      	b.n	8005140 <HAL_UART_IRQHandler+0x3fc>
      return;
 800512e:	bf00      	nop
 8005130:	e006      	b.n	8005140 <HAL_UART_IRQHandler+0x3fc>
    return;
 8005132:	bf00      	nop
 8005134:	e004      	b.n	8005140 <HAL_UART_IRQHandler+0x3fc>
      return;
 8005136:	bf00      	nop
 8005138:	e002      	b.n	8005140 <HAL_UART_IRQHandler+0x3fc>
      return;
 800513a:	bf00      	nop
 800513c:	e000      	b.n	8005140 <HAL_UART_IRQHandler+0x3fc>
    return;
 800513e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8005140:	3720      	adds	r7, #32
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}
 8005146:	bf00      	nop

08005148 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005148:	b480      	push	{r7}
 800514a:	b083      	sub	sp, #12
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005150:	bf00      	nop
 8005152:	370c      	adds	r7, #12
 8005154:	46bd      	mov	sp, r7
 8005156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515a:	4770      	bx	lr

0800515c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800515c:	b480      	push	{r7}
 800515e:	b083      	sub	sp, #12
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8005164:	bf00      	nop
 8005166:	370c      	adds	r7, #12
 8005168:	46bd      	mov	sp, r7
 800516a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516e:	4770      	bx	lr

08005170 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005170:	b480      	push	{r7}
 8005172:	b083      	sub	sp, #12
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005178:	bf00      	nop
 800517a:	370c      	adds	r7, #12
 800517c:	46bd      	mov	sp, r7
 800517e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005182:	4770      	bx	lr

08005184 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005184:	b480      	push	{r7}
 8005186:	b083      	sub	sp, #12
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
 800518c:	460b      	mov	r3, r1
 800518e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005190:	bf00      	nop
 8005192:	370c      	adds	r7, #12
 8005194:	46bd      	mov	sp, r7
 8005196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519a:	4770      	bx	lr

0800519c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800519c:	b5b0      	push	{r4, r5, r7, lr}
 800519e:	b088      	sub	sp, #32
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80051a4:	2300      	movs	r3, #0
 80051a6:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	689a      	ldr	r2, [r3, #8]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	691b      	ldr	r3, [r3, #16]
 80051b0:	431a      	orrs	r2, r3
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	695b      	ldr	r3, [r3, #20]
 80051b6:	431a      	orrs	r2, r3
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	69db      	ldr	r3, [r3, #28]
 80051bc:	4313      	orrs	r3, r2
 80051be:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	681a      	ldr	r2, [r3, #0]
 80051c6:	4baa      	ldr	r3, [pc, #680]	; (8005470 <UART_SetConfig+0x2d4>)
 80051c8:	4013      	ands	r3, r2
 80051ca:	687a      	ldr	r2, [r7, #4]
 80051cc:	6812      	ldr	r2, [r2, #0]
 80051ce:	69f9      	ldr	r1, [r7, #28]
 80051d0:	430b      	orrs	r3, r1
 80051d2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	685b      	ldr	r3, [r3, #4]
 80051da:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	68da      	ldr	r2, [r3, #12]
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	430a      	orrs	r2, r1
 80051e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	699b      	ldr	r3, [r3, #24]
 80051ee:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4a9f      	ldr	r2, [pc, #636]	; (8005474 <UART_SetConfig+0x2d8>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d004      	beq.n	8005204 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6a1b      	ldr	r3, [r3, #32]
 80051fe:	69fa      	ldr	r2, [r7, #28]
 8005200:	4313      	orrs	r3, r2
 8005202:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	689b      	ldr	r3, [r3, #8]
 800520a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	69fa      	ldr	r2, [r7, #28]
 8005214:	430a      	orrs	r2, r1
 8005216:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a96      	ldr	r2, [pc, #600]	; (8005478 <UART_SetConfig+0x2dc>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d121      	bne.n	8005266 <UART_SetConfig+0xca>
 8005222:	4b96      	ldr	r3, [pc, #600]	; (800547c <UART_SetConfig+0x2e0>)
 8005224:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005228:	f003 0303 	and.w	r3, r3, #3
 800522c:	2b03      	cmp	r3, #3
 800522e:	d817      	bhi.n	8005260 <UART_SetConfig+0xc4>
 8005230:	a201      	add	r2, pc, #4	; (adr r2, 8005238 <UART_SetConfig+0x9c>)
 8005232:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005236:	bf00      	nop
 8005238:	08005249 	.word	0x08005249
 800523c:	08005255 	.word	0x08005255
 8005240:	0800524f 	.word	0x0800524f
 8005244:	0800525b 	.word	0x0800525b
 8005248:	2301      	movs	r3, #1
 800524a:	76fb      	strb	r3, [r7, #27]
 800524c:	e096      	b.n	800537c <UART_SetConfig+0x1e0>
 800524e:	2302      	movs	r3, #2
 8005250:	76fb      	strb	r3, [r7, #27]
 8005252:	e093      	b.n	800537c <UART_SetConfig+0x1e0>
 8005254:	2304      	movs	r3, #4
 8005256:	76fb      	strb	r3, [r7, #27]
 8005258:	e090      	b.n	800537c <UART_SetConfig+0x1e0>
 800525a:	2308      	movs	r3, #8
 800525c:	76fb      	strb	r3, [r7, #27]
 800525e:	e08d      	b.n	800537c <UART_SetConfig+0x1e0>
 8005260:	2310      	movs	r3, #16
 8005262:	76fb      	strb	r3, [r7, #27]
 8005264:	e08a      	b.n	800537c <UART_SetConfig+0x1e0>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a85      	ldr	r2, [pc, #532]	; (8005480 <UART_SetConfig+0x2e4>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d132      	bne.n	80052d6 <UART_SetConfig+0x13a>
 8005270:	4b82      	ldr	r3, [pc, #520]	; (800547c <UART_SetConfig+0x2e0>)
 8005272:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005276:	f003 030c 	and.w	r3, r3, #12
 800527a:	2b0c      	cmp	r3, #12
 800527c:	d828      	bhi.n	80052d0 <UART_SetConfig+0x134>
 800527e:	a201      	add	r2, pc, #4	; (adr r2, 8005284 <UART_SetConfig+0xe8>)
 8005280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005284:	080052b9 	.word	0x080052b9
 8005288:	080052d1 	.word	0x080052d1
 800528c:	080052d1 	.word	0x080052d1
 8005290:	080052d1 	.word	0x080052d1
 8005294:	080052c5 	.word	0x080052c5
 8005298:	080052d1 	.word	0x080052d1
 800529c:	080052d1 	.word	0x080052d1
 80052a0:	080052d1 	.word	0x080052d1
 80052a4:	080052bf 	.word	0x080052bf
 80052a8:	080052d1 	.word	0x080052d1
 80052ac:	080052d1 	.word	0x080052d1
 80052b0:	080052d1 	.word	0x080052d1
 80052b4:	080052cb 	.word	0x080052cb
 80052b8:	2300      	movs	r3, #0
 80052ba:	76fb      	strb	r3, [r7, #27]
 80052bc:	e05e      	b.n	800537c <UART_SetConfig+0x1e0>
 80052be:	2302      	movs	r3, #2
 80052c0:	76fb      	strb	r3, [r7, #27]
 80052c2:	e05b      	b.n	800537c <UART_SetConfig+0x1e0>
 80052c4:	2304      	movs	r3, #4
 80052c6:	76fb      	strb	r3, [r7, #27]
 80052c8:	e058      	b.n	800537c <UART_SetConfig+0x1e0>
 80052ca:	2308      	movs	r3, #8
 80052cc:	76fb      	strb	r3, [r7, #27]
 80052ce:	e055      	b.n	800537c <UART_SetConfig+0x1e0>
 80052d0:	2310      	movs	r3, #16
 80052d2:	76fb      	strb	r3, [r7, #27]
 80052d4:	e052      	b.n	800537c <UART_SetConfig+0x1e0>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a6a      	ldr	r2, [pc, #424]	; (8005484 <UART_SetConfig+0x2e8>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d120      	bne.n	8005322 <UART_SetConfig+0x186>
 80052e0:	4b66      	ldr	r3, [pc, #408]	; (800547c <UART_SetConfig+0x2e0>)
 80052e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052e6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80052ea:	2b30      	cmp	r3, #48	; 0x30
 80052ec:	d013      	beq.n	8005316 <UART_SetConfig+0x17a>
 80052ee:	2b30      	cmp	r3, #48	; 0x30
 80052f0:	d814      	bhi.n	800531c <UART_SetConfig+0x180>
 80052f2:	2b20      	cmp	r3, #32
 80052f4:	d009      	beq.n	800530a <UART_SetConfig+0x16e>
 80052f6:	2b20      	cmp	r3, #32
 80052f8:	d810      	bhi.n	800531c <UART_SetConfig+0x180>
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d002      	beq.n	8005304 <UART_SetConfig+0x168>
 80052fe:	2b10      	cmp	r3, #16
 8005300:	d006      	beq.n	8005310 <UART_SetConfig+0x174>
 8005302:	e00b      	b.n	800531c <UART_SetConfig+0x180>
 8005304:	2300      	movs	r3, #0
 8005306:	76fb      	strb	r3, [r7, #27]
 8005308:	e038      	b.n	800537c <UART_SetConfig+0x1e0>
 800530a:	2302      	movs	r3, #2
 800530c:	76fb      	strb	r3, [r7, #27]
 800530e:	e035      	b.n	800537c <UART_SetConfig+0x1e0>
 8005310:	2304      	movs	r3, #4
 8005312:	76fb      	strb	r3, [r7, #27]
 8005314:	e032      	b.n	800537c <UART_SetConfig+0x1e0>
 8005316:	2308      	movs	r3, #8
 8005318:	76fb      	strb	r3, [r7, #27]
 800531a:	e02f      	b.n	800537c <UART_SetConfig+0x1e0>
 800531c:	2310      	movs	r3, #16
 800531e:	76fb      	strb	r3, [r7, #27]
 8005320:	e02c      	b.n	800537c <UART_SetConfig+0x1e0>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4a53      	ldr	r2, [pc, #332]	; (8005474 <UART_SetConfig+0x2d8>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d125      	bne.n	8005378 <UART_SetConfig+0x1dc>
 800532c:	4b53      	ldr	r3, [pc, #332]	; (800547c <UART_SetConfig+0x2e0>)
 800532e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005332:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005336:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800533a:	d017      	beq.n	800536c <UART_SetConfig+0x1d0>
 800533c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005340:	d817      	bhi.n	8005372 <UART_SetConfig+0x1d6>
 8005342:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005346:	d00b      	beq.n	8005360 <UART_SetConfig+0x1c4>
 8005348:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800534c:	d811      	bhi.n	8005372 <UART_SetConfig+0x1d6>
 800534e:	2b00      	cmp	r3, #0
 8005350:	d003      	beq.n	800535a <UART_SetConfig+0x1be>
 8005352:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005356:	d006      	beq.n	8005366 <UART_SetConfig+0x1ca>
 8005358:	e00b      	b.n	8005372 <UART_SetConfig+0x1d6>
 800535a:	2300      	movs	r3, #0
 800535c:	76fb      	strb	r3, [r7, #27]
 800535e:	e00d      	b.n	800537c <UART_SetConfig+0x1e0>
 8005360:	2302      	movs	r3, #2
 8005362:	76fb      	strb	r3, [r7, #27]
 8005364:	e00a      	b.n	800537c <UART_SetConfig+0x1e0>
 8005366:	2304      	movs	r3, #4
 8005368:	76fb      	strb	r3, [r7, #27]
 800536a:	e007      	b.n	800537c <UART_SetConfig+0x1e0>
 800536c:	2308      	movs	r3, #8
 800536e:	76fb      	strb	r3, [r7, #27]
 8005370:	e004      	b.n	800537c <UART_SetConfig+0x1e0>
 8005372:	2310      	movs	r3, #16
 8005374:	76fb      	strb	r3, [r7, #27]
 8005376:	e001      	b.n	800537c <UART_SetConfig+0x1e0>
 8005378:	2310      	movs	r3, #16
 800537a:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4a3c      	ldr	r2, [pc, #240]	; (8005474 <UART_SetConfig+0x2d8>)
 8005382:	4293      	cmp	r3, r2
 8005384:	f040 8082 	bne.w	800548c <UART_SetConfig+0x2f0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005388:	7efb      	ldrb	r3, [r7, #27]
 800538a:	2b08      	cmp	r3, #8
 800538c:	d823      	bhi.n	80053d6 <UART_SetConfig+0x23a>
 800538e:	a201      	add	r2, pc, #4	; (adr r2, 8005394 <UART_SetConfig+0x1f8>)
 8005390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005394:	080053b9 	.word	0x080053b9
 8005398:	080053d7 	.word	0x080053d7
 800539c:	080053c1 	.word	0x080053c1
 80053a0:	080053d7 	.word	0x080053d7
 80053a4:	080053c7 	.word	0x080053c7
 80053a8:	080053d7 	.word	0x080053d7
 80053ac:	080053d7 	.word	0x080053d7
 80053b0:	080053d7 	.word	0x080053d7
 80053b4:	080053cf 	.word	0x080053cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80053b8:	f7fe fa80 	bl	80038bc <HAL_RCC_GetPCLK1Freq>
 80053bc:	6178      	str	r0, [r7, #20]
        break;
 80053be:	e00f      	b.n	80053e0 <UART_SetConfig+0x244>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80053c0:	4b31      	ldr	r3, [pc, #196]	; (8005488 <UART_SetConfig+0x2ec>)
 80053c2:	617b      	str	r3, [r7, #20]
        break;
 80053c4:	e00c      	b.n	80053e0 <UART_SetConfig+0x244>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80053c6:	f7fe f9e1 	bl	800378c <HAL_RCC_GetSysClockFreq>
 80053ca:	6178      	str	r0, [r7, #20]
        break;
 80053cc:	e008      	b.n	80053e0 <UART_SetConfig+0x244>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80053ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80053d2:	617b      	str	r3, [r7, #20]
        break;
 80053d4:	e004      	b.n	80053e0 <UART_SetConfig+0x244>
      default:
        pclk = 0U;
 80053d6:	2300      	movs	r3, #0
 80053d8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80053da:	2301      	movs	r3, #1
 80053dc:	76bb      	strb	r3, [r7, #26]
        break;
 80053de:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80053e0:	697b      	ldr	r3, [r7, #20]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	f000 8100 	beq.w	80055e8 <UART_SetConfig+0x44c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	685a      	ldr	r2, [r3, #4]
 80053ec:	4613      	mov	r3, r2
 80053ee:	005b      	lsls	r3, r3, #1
 80053f0:	4413      	add	r3, r2
 80053f2:	697a      	ldr	r2, [r7, #20]
 80053f4:	429a      	cmp	r2, r3
 80053f6:	d305      	bcc.n	8005404 <UART_SetConfig+0x268>
          (pclk > (4096U * huart->Init.BaudRate)))
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80053fe:	697a      	ldr	r2, [r7, #20]
 8005400:	429a      	cmp	r2, r3
 8005402:	d902      	bls.n	800540a <UART_SetConfig+0x26e>
      {
        ret = HAL_ERROR;
 8005404:	2301      	movs	r3, #1
 8005406:	76bb      	strb	r3, [r7, #26]
 8005408:	e0ee      	b.n	80055e8 <UART_SetConfig+0x44c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800540a:	697b      	ldr	r3, [r7, #20]
 800540c:	4618      	mov	r0, r3
 800540e:	f04f 0100 	mov.w	r1, #0
 8005412:	f04f 0200 	mov.w	r2, #0
 8005416:	f04f 0300 	mov.w	r3, #0
 800541a:	020b      	lsls	r3, r1, #8
 800541c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005420:	0202      	lsls	r2, r0, #8
 8005422:	6879      	ldr	r1, [r7, #4]
 8005424:	6849      	ldr	r1, [r1, #4]
 8005426:	0849      	lsrs	r1, r1, #1
 8005428:	4608      	mov	r0, r1
 800542a:	f04f 0100 	mov.w	r1, #0
 800542e:	1814      	adds	r4, r2, r0
 8005430:	eb43 0501 	adc.w	r5, r3, r1
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	685b      	ldr	r3, [r3, #4]
 8005438:	461a      	mov	r2, r3
 800543a:	f04f 0300 	mov.w	r3, #0
 800543e:	4620      	mov	r0, r4
 8005440:	4629      	mov	r1, r5
 8005442:	f7fa ff1d 	bl	8000280 <__aeabi_uldivmod>
 8005446:	4602      	mov	r2, r0
 8005448:	460b      	mov	r3, r1
 800544a:	4613      	mov	r3, r2
 800544c:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800544e:	693b      	ldr	r3, [r7, #16]
 8005450:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005454:	d308      	bcc.n	8005468 <UART_SetConfig+0x2cc>
 8005456:	693b      	ldr	r3, [r7, #16]
 8005458:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800545c:	d204      	bcs.n	8005468 <UART_SetConfig+0x2cc>
        {
          huart->Instance->BRR = usartdiv;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	693a      	ldr	r2, [r7, #16]
 8005464:	60da      	str	r2, [r3, #12]
 8005466:	e0bf      	b.n	80055e8 <UART_SetConfig+0x44c>
        }
        else
        {
          ret = HAL_ERROR;
 8005468:	2301      	movs	r3, #1
 800546a:	76bb      	strb	r3, [r7, #26]
 800546c:	e0bc      	b.n	80055e8 <UART_SetConfig+0x44c>
 800546e:	bf00      	nop
 8005470:	efff69f3 	.word	0xefff69f3
 8005474:	40008000 	.word	0x40008000
 8005478:	40013800 	.word	0x40013800
 800547c:	40021000 	.word	0x40021000
 8005480:	40004400 	.word	0x40004400
 8005484:	40004800 	.word	0x40004800
 8005488:	00f42400 	.word	0x00f42400
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	69db      	ldr	r3, [r3, #28]
 8005490:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005494:	d15c      	bne.n	8005550 <UART_SetConfig+0x3b4>
  {
    switch (clocksource)
 8005496:	7efb      	ldrb	r3, [r7, #27]
 8005498:	2b08      	cmp	r3, #8
 800549a:	d828      	bhi.n	80054ee <UART_SetConfig+0x352>
 800549c:	a201      	add	r2, pc, #4	; (adr r2, 80054a4 <UART_SetConfig+0x308>)
 800549e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054a2:	bf00      	nop
 80054a4:	080054c9 	.word	0x080054c9
 80054a8:	080054d1 	.word	0x080054d1
 80054ac:	080054d9 	.word	0x080054d9
 80054b0:	080054ef 	.word	0x080054ef
 80054b4:	080054df 	.word	0x080054df
 80054b8:	080054ef 	.word	0x080054ef
 80054bc:	080054ef 	.word	0x080054ef
 80054c0:	080054ef 	.word	0x080054ef
 80054c4:	080054e7 	.word	0x080054e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80054c8:	f7fe f9f8 	bl	80038bc <HAL_RCC_GetPCLK1Freq>
 80054cc:	6178      	str	r0, [r7, #20]
        break;
 80054ce:	e013      	b.n	80054f8 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80054d0:	f7fe fa0a 	bl	80038e8 <HAL_RCC_GetPCLK2Freq>
 80054d4:	6178      	str	r0, [r7, #20]
        break;
 80054d6:	e00f      	b.n	80054f8 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80054d8:	4b49      	ldr	r3, [pc, #292]	; (8005600 <UART_SetConfig+0x464>)
 80054da:	617b      	str	r3, [r7, #20]
        break;
 80054dc:	e00c      	b.n	80054f8 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80054de:	f7fe f955 	bl	800378c <HAL_RCC_GetSysClockFreq>
 80054e2:	6178      	str	r0, [r7, #20]
        break;
 80054e4:	e008      	b.n	80054f8 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80054e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80054ea:	617b      	str	r3, [r7, #20]
        break;
 80054ec:	e004      	b.n	80054f8 <UART_SetConfig+0x35c>
      default:
        pclk = 0U;
 80054ee:	2300      	movs	r3, #0
 80054f0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80054f2:	2301      	movs	r3, #1
 80054f4:	76bb      	strb	r3, [r7, #26]
        break;
 80054f6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d074      	beq.n	80055e8 <UART_SetConfig+0x44c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80054fe:	697b      	ldr	r3, [r7, #20]
 8005500:	005a      	lsls	r2, r3, #1
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	085b      	lsrs	r3, r3, #1
 8005508:	441a      	add	r2, r3
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	685b      	ldr	r3, [r3, #4]
 800550e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005512:	b29b      	uxth	r3, r3
 8005514:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005516:	693b      	ldr	r3, [r7, #16]
 8005518:	2b0f      	cmp	r3, #15
 800551a:	d916      	bls.n	800554a <UART_SetConfig+0x3ae>
 800551c:	693b      	ldr	r3, [r7, #16]
 800551e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005522:	d212      	bcs.n	800554a <UART_SetConfig+0x3ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005524:	693b      	ldr	r3, [r7, #16]
 8005526:	b29b      	uxth	r3, r3
 8005528:	f023 030f 	bic.w	r3, r3, #15
 800552c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800552e:	693b      	ldr	r3, [r7, #16]
 8005530:	085b      	lsrs	r3, r3, #1
 8005532:	b29b      	uxth	r3, r3
 8005534:	f003 0307 	and.w	r3, r3, #7
 8005538:	b29a      	uxth	r2, r3
 800553a:	89fb      	ldrh	r3, [r7, #14]
 800553c:	4313      	orrs	r3, r2
 800553e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	89fa      	ldrh	r2, [r7, #14]
 8005546:	60da      	str	r2, [r3, #12]
 8005548:	e04e      	b.n	80055e8 <UART_SetConfig+0x44c>
      }
      else
      {
        ret = HAL_ERROR;
 800554a:	2301      	movs	r3, #1
 800554c:	76bb      	strb	r3, [r7, #26]
 800554e:	e04b      	b.n	80055e8 <UART_SetConfig+0x44c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005550:	7efb      	ldrb	r3, [r7, #27]
 8005552:	2b08      	cmp	r3, #8
 8005554:	d827      	bhi.n	80055a6 <UART_SetConfig+0x40a>
 8005556:	a201      	add	r2, pc, #4	; (adr r2, 800555c <UART_SetConfig+0x3c0>)
 8005558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800555c:	08005581 	.word	0x08005581
 8005560:	08005589 	.word	0x08005589
 8005564:	08005591 	.word	0x08005591
 8005568:	080055a7 	.word	0x080055a7
 800556c:	08005597 	.word	0x08005597
 8005570:	080055a7 	.word	0x080055a7
 8005574:	080055a7 	.word	0x080055a7
 8005578:	080055a7 	.word	0x080055a7
 800557c:	0800559f 	.word	0x0800559f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005580:	f7fe f99c 	bl	80038bc <HAL_RCC_GetPCLK1Freq>
 8005584:	6178      	str	r0, [r7, #20]
        break;
 8005586:	e013      	b.n	80055b0 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005588:	f7fe f9ae 	bl	80038e8 <HAL_RCC_GetPCLK2Freq>
 800558c:	6178      	str	r0, [r7, #20]
        break;
 800558e:	e00f      	b.n	80055b0 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005590:	4b1b      	ldr	r3, [pc, #108]	; (8005600 <UART_SetConfig+0x464>)
 8005592:	617b      	str	r3, [r7, #20]
        break;
 8005594:	e00c      	b.n	80055b0 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005596:	f7fe f8f9 	bl	800378c <HAL_RCC_GetSysClockFreq>
 800559a:	6178      	str	r0, [r7, #20]
        break;
 800559c:	e008      	b.n	80055b0 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800559e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80055a2:	617b      	str	r3, [r7, #20]
        break;
 80055a4:	e004      	b.n	80055b0 <UART_SetConfig+0x414>
      default:
        pclk = 0U;
 80055a6:	2300      	movs	r3, #0
 80055a8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80055aa:	2301      	movs	r3, #1
 80055ac:	76bb      	strb	r3, [r7, #26]
        break;
 80055ae:	bf00      	nop
    }

    if (pclk != 0U)
 80055b0:	697b      	ldr	r3, [r7, #20]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d018      	beq.n	80055e8 <UART_SetConfig+0x44c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	685b      	ldr	r3, [r3, #4]
 80055ba:	085a      	lsrs	r2, r3, #1
 80055bc:	697b      	ldr	r3, [r7, #20]
 80055be:	441a      	add	r2, r3
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	685b      	ldr	r3, [r3, #4]
 80055c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80055c8:	b29b      	uxth	r3, r3
 80055ca:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80055cc:	693b      	ldr	r3, [r7, #16]
 80055ce:	2b0f      	cmp	r3, #15
 80055d0:	d908      	bls.n	80055e4 <UART_SetConfig+0x448>
 80055d2:	693b      	ldr	r3, [r7, #16]
 80055d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055d8:	d204      	bcs.n	80055e4 <UART_SetConfig+0x448>
      {
        huart->Instance->BRR = usartdiv;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	693a      	ldr	r2, [r7, #16]
 80055e0:	60da      	str	r2, [r3, #12]
 80055e2:	e001      	b.n	80055e8 <UART_SetConfig+0x44c>
      }
      else
      {
        ret = HAL_ERROR;
 80055e4:	2301      	movs	r3, #1
 80055e6:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2200      	movs	r2, #0
 80055ec:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2200      	movs	r2, #0
 80055f2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80055f4:	7ebb      	ldrb	r3, [r7, #26]
}
 80055f6:	4618      	mov	r0, r3
 80055f8:	3720      	adds	r7, #32
 80055fa:	46bd      	mov	sp, r7
 80055fc:	bdb0      	pop	{r4, r5, r7, pc}
 80055fe:	bf00      	nop
 8005600:	00f42400 	.word	0x00f42400

08005604 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005604:	b480      	push	{r7}
 8005606:	b083      	sub	sp, #12
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005610:	f003 0301 	and.w	r3, r3, #1
 8005614:	2b00      	cmp	r3, #0
 8005616:	d00a      	beq.n	800562e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	430a      	orrs	r2, r1
 800562c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005632:	f003 0302 	and.w	r3, r3, #2
 8005636:	2b00      	cmp	r3, #0
 8005638:	d00a      	beq.n	8005650 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	685b      	ldr	r3, [r3, #4]
 8005640:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	430a      	orrs	r2, r1
 800564e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005654:	f003 0304 	and.w	r3, r3, #4
 8005658:	2b00      	cmp	r3, #0
 800565a:	d00a      	beq.n	8005672 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	685b      	ldr	r3, [r3, #4]
 8005662:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	430a      	orrs	r2, r1
 8005670:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005676:	f003 0308 	and.w	r3, r3, #8
 800567a:	2b00      	cmp	r3, #0
 800567c:	d00a      	beq.n	8005694 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	685b      	ldr	r3, [r3, #4]
 8005684:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	430a      	orrs	r2, r1
 8005692:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005698:	f003 0310 	and.w	r3, r3, #16
 800569c:	2b00      	cmp	r3, #0
 800569e:	d00a      	beq.n	80056b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	689b      	ldr	r3, [r3, #8]
 80056a6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	430a      	orrs	r2, r1
 80056b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ba:	f003 0320 	and.w	r3, r3, #32
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d00a      	beq.n	80056d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	689b      	ldr	r3, [r3, #8]
 80056c8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	430a      	orrs	r2, r1
 80056d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d01a      	beq.n	800571a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	685b      	ldr	r3, [r3, #4]
 80056ea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	430a      	orrs	r2, r1
 80056f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005702:	d10a      	bne.n	800571a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	430a      	orrs	r2, r1
 8005718:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800571e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005722:	2b00      	cmp	r3, #0
 8005724:	d00a      	beq.n	800573c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	685b      	ldr	r3, [r3, #4]
 800572c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	430a      	orrs	r2, r1
 800573a:	605a      	str	r2, [r3, #4]
  }
}
 800573c:	bf00      	nop
 800573e:	370c      	adds	r7, #12
 8005740:	46bd      	mov	sp, r7
 8005742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005746:	4770      	bx	lr

08005748 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b086      	sub	sp, #24
 800574c:	af02      	add	r7, sp, #8
 800574e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2200      	movs	r2, #0
 8005754:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005758:	f7fc fa72 	bl	8001c40 <HAL_GetTick>
 800575c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f003 0308 	and.w	r3, r3, #8
 8005768:	2b08      	cmp	r3, #8
 800576a:	d10e      	bne.n	800578a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800576c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005770:	9300      	str	r3, [sp, #0]
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	2200      	movs	r2, #0
 8005776:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800577a:	6878      	ldr	r0, [r7, #4]
 800577c:	f000 f82d 	bl	80057da <UART_WaitOnFlagUntilTimeout>
 8005780:	4603      	mov	r3, r0
 8005782:	2b00      	cmp	r3, #0
 8005784:	d001      	beq.n	800578a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005786:	2303      	movs	r3, #3
 8005788:	e023      	b.n	80057d2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f003 0304 	and.w	r3, r3, #4
 8005794:	2b04      	cmp	r3, #4
 8005796:	d10e      	bne.n	80057b6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005798:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800579c:	9300      	str	r3, [sp, #0]
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	2200      	movs	r2, #0
 80057a2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80057a6:	6878      	ldr	r0, [r7, #4]
 80057a8:	f000 f817 	bl	80057da <UART_WaitOnFlagUntilTimeout>
 80057ac:	4603      	mov	r3, r0
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d001      	beq.n	80057b6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80057b2:	2303      	movs	r3, #3
 80057b4:	e00d      	b.n	80057d2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2220      	movs	r2, #32
 80057ba:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2220      	movs	r2, #32
 80057c0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2200      	movs	r2, #0
 80057c6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2200      	movs	r2, #0
 80057cc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80057d0:	2300      	movs	r3, #0
}
 80057d2:	4618      	mov	r0, r3
 80057d4:	3710      	adds	r7, #16
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bd80      	pop	{r7, pc}

080057da <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80057da:	b580      	push	{r7, lr}
 80057dc:	b084      	sub	sp, #16
 80057de:	af00      	add	r7, sp, #0
 80057e0:	60f8      	str	r0, [r7, #12]
 80057e2:	60b9      	str	r1, [r7, #8]
 80057e4:	603b      	str	r3, [r7, #0]
 80057e6:	4613      	mov	r3, r2
 80057e8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057ea:	e05e      	b.n	80058aa <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057ec:	69bb      	ldr	r3, [r7, #24]
 80057ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80057f2:	d05a      	beq.n	80058aa <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057f4:	f7fc fa24 	bl	8001c40 <HAL_GetTick>
 80057f8:	4602      	mov	r2, r0
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	1ad3      	subs	r3, r2, r3
 80057fe:	69ba      	ldr	r2, [r7, #24]
 8005800:	429a      	cmp	r2, r3
 8005802:	d302      	bcc.n	800580a <UART_WaitOnFlagUntilTimeout+0x30>
 8005804:	69bb      	ldr	r3, [r7, #24]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d11b      	bne.n	8005842 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	681a      	ldr	r2, [r3, #0]
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005818:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	689a      	ldr	r2, [r3, #8]
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f022 0201 	bic.w	r2, r2, #1
 8005828:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	2220      	movs	r2, #32
 800582e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	2220      	movs	r2, #32
 8005834:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	2200      	movs	r2, #0
 800583a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800583e:	2303      	movs	r3, #3
 8005840:	e043      	b.n	80058ca <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f003 0304 	and.w	r3, r3, #4
 800584c:	2b00      	cmp	r3, #0
 800584e:	d02c      	beq.n	80058aa <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	69db      	ldr	r3, [r3, #28]
 8005856:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800585a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800585e:	d124      	bne.n	80058aa <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005868:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	681a      	ldr	r2, [r3, #0]
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005878:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	689a      	ldr	r2, [r3, #8]
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f022 0201 	bic.w	r2, r2, #1
 8005888:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	2220      	movs	r2, #32
 800588e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	2220      	movs	r2, #32
 8005894:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	2220      	movs	r2, #32
 800589a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	2200      	movs	r2, #0
 80058a2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80058a6:	2303      	movs	r3, #3
 80058a8:	e00f      	b.n	80058ca <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	69da      	ldr	r2, [r3, #28]
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	4013      	ands	r3, r2
 80058b4:	68ba      	ldr	r2, [r7, #8]
 80058b6:	429a      	cmp	r2, r3
 80058b8:	bf0c      	ite	eq
 80058ba:	2301      	moveq	r3, #1
 80058bc:	2300      	movne	r3, #0
 80058be:	b2db      	uxtb	r3, r3
 80058c0:	461a      	mov	r2, r3
 80058c2:	79fb      	ldrb	r3, [r7, #7]
 80058c4:	429a      	cmp	r2, r3
 80058c6:	d091      	beq.n	80057ec <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80058c8:	2300      	movs	r3, #0
}
 80058ca:	4618      	mov	r0, r3
 80058cc:	3710      	adds	r7, #16
 80058ce:	46bd      	mov	sp, r7
 80058d0:	bd80      	pop	{r7, pc}
	...

080058d4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80058d4:	b480      	push	{r7}
 80058d6:	b085      	sub	sp, #20
 80058d8:	af00      	add	r7, sp, #0
 80058da:	60f8      	str	r0, [r7, #12]
 80058dc:	60b9      	str	r1, [r7, #8]
 80058de:	4613      	mov	r3, r2
 80058e0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	68ba      	ldr	r2, [r7, #8]
 80058e6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	88fa      	ldrh	r2, [r7, #6]
 80058ec:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	88fa      	ldrh	r2, [r7, #6]
 80058f4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	2200      	movs	r2, #0
 80058fc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	689b      	ldr	r3, [r3, #8]
 8005902:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005906:	d10e      	bne.n	8005926 <UART_Start_Receive_IT+0x52>
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	691b      	ldr	r3, [r3, #16]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d105      	bne.n	800591c <UART_Start_Receive_IT+0x48>
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005916:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800591a:	e02d      	b.n	8005978 <UART_Start_Receive_IT+0xa4>
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	22ff      	movs	r2, #255	; 0xff
 8005920:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005924:	e028      	b.n	8005978 <UART_Start_Receive_IT+0xa4>
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	689b      	ldr	r3, [r3, #8]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d10d      	bne.n	800594a <UART_Start_Receive_IT+0x76>
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	691b      	ldr	r3, [r3, #16]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d104      	bne.n	8005940 <UART_Start_Receive_IT+0x6c>
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	22ff      	movs	r2, #255	; 0xff
 800593a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800593e:	e01b      	b.n	8005978 <UART_Start_Receive_IT+0xa4>
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	227f      	movs	r2, #127	; 0x7f
 8005944:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005948:	e016      	b.n	8005978 <UART_Start_Receive_IT+0xa4>
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	689b      	ldr	r3, [r3, #8]
 800594e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005952:	d10d      	bne.n	8005970 <UART_Start_Receive_IT+0x9c>
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	691b      	ldr	r3, [r3, #16]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d104      	bne.n	8005966 <UART_Start_Receive_IT+0x92>
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	227f      	movs	r2, #127	; 0x7f
 8005960:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005964:	e008      	b.n	8005978 <UART_Start_Receive_IT+0xa4>
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	223f      	movs	r2, #63	; 0x3f
 800596a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800596e:	e003      	b.n	8005978 <UART_Start_Receive_IT+0xa4>
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	2200      	movs	r2, #0
 8005974:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	2200      	movs	r2, #0
 800597c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	2222      	movs	r2, #34	; 0x22
 8005984:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	689a      	ldr	r2, [r3, #8]
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f042 0201 	orr.w	r2, r2, #1
 8005994:	609a      	str	r2, [r3, #8]
    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	689b      	ldr	r3, [r3, #8]
 800599a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800599e:	d107      	bne.n	80059b0 <UART_Start_Receive_IT+0xdc>
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	691b      	ldr	r3, [r3, #16]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d103      	bne.n	80059b0 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	4a0c      	ldr	r2, [pc, #48]	; (80059dc <UART_Start_Receive_IT+0x108>)
 80059ac:	665a      	str	r2, [r3, #100]	; 0x64
 80059ae:	e002      	b.n	80059b6 <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	4a0b      	ldr	r2, [pc, #44]	; (80059e0 <UART_Start_Receive_IT+0x10c>)
 80059b4:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	2200      	movs	r2, #0
 80059ba:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	681a      	ldr	r2, [r3, #0]
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 80059cc:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 80059ce:	2300      	movs	r3, #0
}
 80059d0:	4618      	mov	r0, r3
 80059d2:	3714      	adds	r7, #20
 80059d4:	46bd      	mov	sp, r7
 80059d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059da:	4770      	bx	lr
 80059dc:	08005b79 	.word	0x08005b79
 80059e0:	08005aa1 	.word	0x08005aa1

080059e4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80059e4:	b480      	push	{r7}
 80059e6:	b083      	sub	sp, #12
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	681a      	ldr	r2, [r3, #0]
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80059fa:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	689a      	ldr	r2, [r3, #8]
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f022 0201 	bic.w	r2, r2, #1
 8005a0a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a10:	2b01      	cmp	r3, #1
 8005a12:	d107      	bne.n	8005a24 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	681a      	ldr	r2, [r3, #0]
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f022 0210 	bic.w	r2, r2, #16
 8005a22:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2220      	movs	r2, #32
 8005a28:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2200      	movs	r2, #0
 8005a34:	665a      	str	r2, [r3, #100]	; 0x64
}
 8005a36:	bf00      	nop
 8005a38:	370c      	adds	r7, #12
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a40:	4770      	bx	lr

08005a42 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005a42:	b580      	push	{r7, lr}
 8005a44:	b084      	sub	sp, #16
 8005a46:	af00      	add	r7, sp, #0
 8005a48:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a4e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	2200      	movs	r2, #0
 8005a54:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005a60:	68f8      	ldr	r0, [r7, #12]
 8005a62:	f7ff fb85 	bl	8005170 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005a66:	bf00      	nop
 8005a68:	3710      	adds	r7, #16
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bd80      	pop	{r7, pc}

08005a6e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005a6e:	b580      	push	{r7, lr}
 8005a70:	b082      	sub	sp, #8
 8005a72:	af00      	add	r7, sp, #0
 8005a74:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	681a      	ldr	r2, [r3, #0]
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a84:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2220      	movs	r2, #32
 8005a8a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005a92:	6878      	ldr	r0, [r7, #4]
 8005a94:	f7ff fb58 	bl	8005148 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005a98:	bf00      	nop
 8005a9a:	3708      	adds	r7, #8
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	bd80      	pop	{r7, pc}

08005aa0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b084      	sub	sp, #16
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005aae:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ab4:	2b22      	cmp	r3, #34	; 0x22
 8005ab6:	d151      	bne.n	8005b5c <UART_RxISR_8BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005abe:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005ac0:	89bb      	ldrh	r3, [r7, #12]
 8005ac2:	b2d9      	uxtb	r1, r3
 8005ac4:	89fb      	ldrh	r3, [r7, #14]
 8005ac6:	b2da      	uxtb	r2, r3
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005acc:	400a      	ands	r2, r1
 8005ace:	b2d2      	uxtb	r2, r2
 8005ad0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ad6:	1c5a      	adds	r2, r3, #1
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005ae2:	b29b      	uxth	r3, r3
 8005ae4:	3b01      	subs	r3, #1
 8005ae6:	b29a      	uxth	r2, r3
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005af4:	b29b      	uxth	r3, r3
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d13a      	bne.n	8005b70 <UART_RxISR_8BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	681a      	ldr	r2, [r3, #0]
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005b08:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	689a      	ldr	r2, [r3, #8]
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f022 0201 	bic.w	r2, r2, #1
 8005b18:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2220      	movs	r2, #32
 8005b1e:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2200      	movs	r2, #0
 8005b24:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b2a:	2b01      	cmp	r3, #1
 8005b2c:	d10f      	bne.n	8005b4e <UART_RxISR_8BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	681a      	ldr	r2, [r3, #0]
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f022 0210 	bic.w	r2, r2, #16
 8005b3c:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005b44:	4619      	mov	r1, r3
 8005b46:	6878      	ldr	r0, [r7, #4]
 8005b48:	f7ff fb1c 	bl	8005184 <HAL_UARTEx_RxEventCallback>
 8005b4c:	e002      	b.n	8005b54 <UART_RxISR_8BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005b4e:	6878      	ldr	r0, [r7, #4]
 8005b50:	f7ff fb04 	bl	800515c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2200      	movs	r2, #0
 8005b58:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005b5a:	e009      	b.n	8005b70 <UART_RxISR_8BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	8b1b      	ldrh	r3, [r3, #24]
 8005b62:	b29a      	uxth	r2, r3
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f042 0208 	orr.w	r2, r2, #8
 8005b6c:	b292      	uxth	r2, r2
 8005b6e:	831a      	strh	r2, [r3, #24]
}
 8005b70:	bf00      	nop
 8005b72:	3710      	adds	r7, #16
 8005b74:	46bd      	mov	sp, r7
 8005b76:	bd80      	pop	{r7, pc}

08005b78 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b084      	sub	sp, #16
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005b86:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b8c:	2b22      	cmp	r3, #34	; 0x22
 8005b8e:	d151      	bne.n	8005c34 <UART_RxISR_16BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005b96:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b9c:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8005b9e:	89ba      	ldrh	r2, [r7, #12]
 8005ba0:	89fb      	ldrh	r3, [r7, #14]
 8005ba2:	4013      	ands	r3, r2
 8005ba4:	b29a      	uxth	r2, r3
 8005ba6:	68bb      	ldr	r3, [r7, #8]
 8005ba8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bae:	1c9a      	adds	r2, r3, #2
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005bba:	b29b      	uxth	r3, r3
 8005bbc:	3b01      	subs	r3, #1
 8005bbe:	b29a      	uxth	r2, r3
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005bcc:	b29b      	uxth	r3, r3
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d13a      	bne.n	8005c48 <UART_RxISR_16BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	681a      	ldr	r2, [r3, #0]
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005be0:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	689a      	ldr	r2, [r3, #8]
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f022 0201 	bic.w	r2, r2, #1
 8005bf0:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2220      	movs	r2, #32
 8005bf6:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c02:	2b01      	cmp	r3, #1
 8005c04:	d10f      	bne.n	8005c26 <UART_RxISR_16BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	681a      	ldr	r2, [r3, #0]
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f022 0210 	bic.w	r2, r2, #16
 8005c14:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005c1c:	4619      	mov	r1, r3
 8005c1e:	6878      	ldr	r0, [r7, #4]
 8005c20:	f7ff fab0 	bl	8005184 <HAL_UARTEx_RxEventCallback>
 8005c24:	e002      	b.n	8005c2c <UART_RxISR_16BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005c26:	6878      	ldr	r0, [r7, #4]
 8005c28:	f7ff fa98 	bl	800515c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005c32:	e009      	b.n	8005c48 <UART_RxISR_16BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	8b1b      	ldrh	r3, [r3, #24]
 8005c3a:	b29a      	uxth	r2, r3
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f042 0208 	orr.w	r2, r2, #8
 8005c44:	b292      	uxth	r2, r2
 8005c46:	831a      	strh	r2, [r3, #24]
}
 8005c48:	bf00      	nop
 8005c4a:	3710      	adds	r7, #16
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	bd80      	pop	{r7, pc}

08005c50 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005c50:	b480      	push	{r7}
 8005c52:	b083      	sub	sp, #12
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005c58:	bf00      	nop
 8005c5a:	370c      	adds	r7, #12
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c62:	4770      	bx	lr

08005c64 <__errno>:
 8005c64:	4b01      	ldr	r3, [pc, #4]	; (8005c6c <__errno+0x8>)
 8005c66:	6818      	ldr	r0, [r3, #0]
 8005c68:	4770      	bx	lr
 8005c6a:	bf00      	nop
 8005c6c:	2000001c 	.word	0x2000001c

08005c70 <__libc_init_array>:
 8005c70:	b570      	push	{r4, r5, r6, lr}
 8005c72:	4d0d      	ldr	r5, [pc, #52]	; (8005ca8 <__libc_init_array+0x38>)
 8005c74:	4c0d      	ldr	r4, [pc, #52]	; (8005cac <__libc_init_array+0x3c>)
 8005c76:	1b64      	subs	r4, r4, r5
 8005c78:	10a4      	asrs	r4, r4, #2
 8005c7a:	2600      	movs	r6, #0
 8005c7c:	42a6      	cmp	r6, r4
 8005c7e:	d109      	bne.n	8005c94 <__libc_init_array+0x24>
 8005c80:	4d0b      	ldr	r5, [pc, #44]	; (8005cb0 <__libc_init_array+0x40>)
 8005c82:	4c0c      	ldr	r4, [pc, #48]	; (8005cb4 <__libc_init_array+0x44>)
 8005c84:	f000 fc88 	bl	8006598 <_init>
 8005c88:	1b64      	subs	r4, r4, r5
 8005c8a:	10a4      	asrs	r4, r4, #2
 8005c8c:	2600      	movs	r6, #0
 8005c8e:	42a6      	cmp	r6, r4
 8005c90:	d105      	bne.n	8005c9e <__libc_init_array+0x2e>
 8005c92:	bd70      	pop	{r4, r5, r6, pc}
 8005c94:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c98:	4798      	blx	r3
 8005c9a:	3601      	adds	r6, #1
 8005c9c:	e7ee      	b.n	8005c7c <__libc_init_array+0xc>
 8005c9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ca2:	4798      	blx	r3
 8005ca4:	3601      	adds	r6, #1
 8005ca6:	e7f2      	b.n	8005c8e <__libc_init_array+0x1e>
 8005ca8:	08007b38 	.word	0x08007b38
 8005cac:	08007b38 	.word	0x08007b38
 8005cb0:	08007b38 	.word	0x08007b38
 8005cb4:	08007b3c 	.word	0x08007b3c

08005cb8 <memset>:
 8005cb8:	4402      	add	r2, r0
 8005cba:	4603      	mov	r3, r0
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d100      	bne.n	8005cc2 <memset+0xa>
 8005cc0:	4770      	bx	lr
 8005cc2:	f803 1b01 	strb.w	r1, [r3], #1
 8005cc6:	e7f9      	b.n	8005cbc <memset+0x4>

08005cc8 <siprintf>:
 8005cc8:	b40e      	push	{r1, r2, r3}
 8005cca:	b500      	push	{lr}
 8005ccc:	b09c      	sub	sp, #112	; 0x70
 8005cce:	ab1d      	add	r3, sp, #116	; 0x74
 8005cd0:	9002      	str	r0, [sp, #8]
 8005cd2:	9006      	str	r0, [sp, #24]
 8005cd4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005cd8:	4809      	ldr	r0, [pc, #36]	; (8005d00 <siprintf+0x38>)
 8005cda:	9107      	str	r1, [sp, #28]
 8005cdc:	9104      	str	r1, [sp, #16]
 8005cde:	4909      	ldr	r1, [pc, #36]	; (8005d04 <siprintf+0x3c>)
 8005ce0:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ce4:	9105      	str	r1, [sp, #20]
 8005ce6:	6800      	ldr	r0, [r0, #0]
 8005ce8:	9301      	str	r3, [sp, #4]
 8005cea:	a902      	add	r1, sp, #8
 8005cec:	f000 f8a2 	bl	8005e34 <_svfiprintf_r>
 8005cf0:	9b02      	ldr	r3, [sp, #8]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	701a      	strb	r2, [r3, #0]
 8005cf6:	b01c      	add	sp, #112	; 0x70
 8005cf8:	f85d eb04 	ldr.w	lr, [sp], #4
 8005cfc:	b003      	add	sp, #12
 8005cfe:	4770      	bx	lr
 8005d00:	2000001c 	.word	0x2000001c
 8005d04:	ffff0208 	.word	0xffff0208

08005d08 <_vsniprintf_r>:
 8005d08:	b530      	push	{r4, r5, lr}
 8005d0a:	1e14      	subs	r4, r2, #0
 8005d0c:	4605      	mov	r5, r0
 8005d0e:	b09b      	sub	sp, #108	; 0x6c
 8005d10:	4618      	mov	r0, r3
 8005d12:	da05      	bge.n	8005d20 <_vsniprintf_r+0x18>
 8005d14:	238b      	movs	r3, #139	; 0x8b
 8005d16:	602b      	str	r3, [r5, #0]
 8005d18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005d1c:	b01b      	add	sp, #108	; 0x6c
 8005d1e:	bd30      	pop	{r4, r5, pc}
 8005d20:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005d24:	f8ad 300c 	strh.w	r3, [sp, #12]
 8005d28:	bf14      	ite	ne
 8005d2a:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8005d2e:	4623      	moveq	r3, r4
 8005d30:	9302      	str	r3, [sp, #8]
 8005d32:	9305      	str	r3, [sp, #20]
 8005d34:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005d38:	9100      	str	r1, [sp, #0]
 8005d3a:	9104      	str	r1, [sp, #16]
 8005d3c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8005d40:	4602      	mov	r2, r0
 8005d42:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005d44:	4669      	mov	r1, sp
 8005d46:	4628      	mov	r0, r5
 8005d48:	f000 f874 	bl	8005e34 <_svfiprintf_r>
 8005d4c:	1c43      	adds	r3, r0, #1
 8005d4e:	bfbc      	itt	lt
 8005d50:	238b      	movlt	r3, #139	; 0x8b
 8005d52:	602b      	strlt	r3, [r5, #0]
 8005d54:	2c00      	cmp	r4, #0
 8005d56:	d0e1      	beq.n	8005d1c <_vsniprintf_r+0x14>
 8005d58:	9b00      	ldr	r3, [sp, #0]
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	701a      	strb	r2, [r3, #0]
 8005d5e:	e7dd      	b.n	8005d1c <_vsniprintf_r+0x14>

08005d60 <vsniprintf>:
 8005d60:	b507      	push	{r0, r1, r2, lr}
 8005d62:	9300      	str	r3, [sp, #0]
 8005d64:	4613      	mov	r3, r2
 8005d66:	460a      	mov	r2, r1
 8005d68:	4601      	mov	r1, r0
 8005d6a:	4803      	ldr	r0, [pc, #12]	; (8005d78 <vsniprintf+0x18>)
 8005d6c:	6800      	ldr	r0, [r0, #0]
 8005d6e:	f7ff ffcb 	bl	8005d08 <_vsniprintf_r>
 8005d72:	b003      	add	sp, #12
 8005d74:	f85d fb04 	ldr.w	pc, [sp], #4
 8005d78:	2000001c 	.word	0x2000001c

08005d7c <__ssputs_r>:
 8005d7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d80:	688e      	ldr	r6, [r1, #8]
 8005d82:	429e      	cmp	r6, r3
 8005d84:	4682      	mov	sl, r0
 8005d86:	460c      	mov	r4, r1
 8005d88:	4690      	mov	r8, r2
 8005d8a:	461f      	mov	r7, r3
 8005d8c:	d838      	bhi.n	8005e00 <__ssputs_r+0x84>
 8005d8e:	898a      	ldrh	r2, [r1, #12]
 8005d90:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005d94:	d032      	beq.n	8005dfc <__ssputs_r+0x80>
 8005d96:	6825      	ldr	r5, [r4, #0]
 8005d98:	6909      	ldr	r1, [r1, #16]
 8005d9a:	eba5 0901 	sub.w	r9, r5, r1
 8005d9e:	6965      	ldr	r5, [r4, #20]
 8005da0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005da4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005da8:	3301      	adds	r3, #1
 8005daa:	444b      	add	r3, r9
 8005dac:	106d      	asrs	r5, r5, #1
 8005dae:	429d      	cmp	r5, r3
 8005db0:	bf38      	it	cc
 8005db2:	461d      	movcc	r5, r3
 8005db4:	0553      	lsls	r3, r2, #21
 8005db6:	d531      	bpl.n	8005e1c <__ssputs_r+0xa0>
 8005db8:	4629      	mov	r1, r5
 8005dba:	f000 fb47 	bl	800644c <_malloc_r>
 8005dbe:	4606      	mov	r6, r0
 8005dc0:	b950      	cbnz	r0, 8005dd8 <__ssputs_r+0x5c>
 8005dc2:	230c      	movs	r3, #12
 8005dc4:	f8ca 3000 	str.w	r3, [sl]
 8005dc8:	89a3      	ldrh	r3, [r4, #12]
 8005dca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005dce:	81a3      	strh	r3, [r4, #12]
 8005dd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005dd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005dd8:	6921      	ldr	r1, [r4, #16]
 8005dda:	464a      	mov	r2, r9
 8005ddc:	f000 fabe 	bl	800635c <memcpy>
 8005de0:	89a3      	ldrh	r3, [r4, #12]
 8005de2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005de6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005dea:	81a3      	strh	r3, [r4, #12]
 8005dec:	6126      	str	r6, [r4, #16]
 8005dee:	6165      	str	r5, [r4, #20]
 8005df0:	444e      	add	r6, r9
 8005df2:	eba5 0509 	sub.w	r5, r5, r9
 8005df6:	6026      	str	r6, [r4, #0]
 8005df8:	60a5      	str	r5, [r4, #8]
 8005dfa:	463e      	mov	r6, r7
 8005dfc:	42be      	cmp	r6, r7
 8005dfe:	d900      	bls.n	8005e02 <__ssputs_r+0x86>
 8005e00:	463e      	mov	r6, r7
 8005e02:	4632      	mov	r2, r6
 8005e04:	6820      	ldr	r0, [r4, #0]
 8005e06:	4641      	mov	r1, r8
 8005e08:	f000 fab6 	bl	8006378 <memmove>
 8005e0c:	68a3      	ldr	r3, [r4, #8]
 8005e0e:	6822      	ldr	r2, [r4, #0]
 8005e10:	1b9b      	subs	r3, r3, r6
 8005e12:	4432      	add	r2, r6
 8005e14:	60a3      	str	r3, [r4, #8]
 8005e16:	6022      	str	r2, [r4, #0]
 8005e18:	2000      	movs	r0, #0
 8005e1a:	e7db      	b.n	8005dd4 <__ssputs_r+0x58>
 8005e1c:	462a      	mov	r2, r5
 8005e1e:	f000 fb6f 	bl	8006500 <_realloc_r>
 8005e22:	4606      	mov	r6, r0
 8005e24:	2800      	cmp	r0, #0
 8005e26:	d1e1      	bne.n	8005dec <__ssputs_r+0x70>
 8005e28:	6921      	ldr	r1, [r4, #16]
 8005e2a:	4650      	mov	r0, sl
 8005e2c:	f000 fabe 	bl	80063ac <_free_r>
 8005e30:	e7c7      	b.n	8005dc2 <__ssputs_r+0x46>
	...

08005e34 <_svfiprintf_r>:
 8005e34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e38:	4698      	mov	r8, r3
 8005e3a:	898b      	ldrh	r3, [r1, #12]
 8005e3c:	061b      	lsls	r3, r3, #24
 8005e3e:	b09d      	sub	sp, #116	; 0x74
 8005e40:	4607      	mov	r7, r0
 8005e42:	460d      	mov	r5, r1
 8005e44:	4614      	mov	r4, r2
 8005e46:	d50e      	bpl.n	8005e66 <_svfiprintf_r+0x32>
 8005e48:	690b      	ldr	r3, [r1, #16]
 8005e4a:	b963      	cbnz	r3, 8005e66 <_svfiprintf_r+0x32>
 8005e4c:	2140      	movs	r1, #64	; 0x40
 8005e4e:	f000 fafd 	bl	800644c <_malloc_r>
 8005e52:	6028      	str	r0, [r5, #0]
 8005e54:	6128      	str	r0, [r5, #16]
 8005e56:	b920      	cbnz	r0, 8005e62 <_svfiprintf_r+0x2e>
 8005e58:	230c      	movs	r3, #12
 8005e5a:	603b      	str	r3, [r7, #0]
 8005e5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005e60:	e0d1      	b.n	8006006 <_svfiprintf_r+0x1d2>
 8005e62:	2340      	movs	r3, #64	; 0x40
 8005e64:	616b      	str	r3, [r5, #20]
 8005e66:	2300      	movs	r3, #0
 8005e68:	9309      	str	r3, [sp, #36]	; 0x24
 8005e6a:	2320      	movs	r3, #32
 8005e6c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005e70:	f8cd 800c 	str.w	r8, [sp, #12]
 8005e74:	2330      	movs	r3, #48	; 0x30
 8005e76:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006020 <_svfiprintf_r+0x1ec>
 8005e7a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005e7e:	f04f 0901 	mov.w	r9, #1
 8005e82:	4623      	mov	r3, r4
 8005e84:	469a      	mov	sl, r3
 8005e86:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005e8a:	b10a      	cbz	r2, 8005e90 <_svfiprintf_r+0x5c>
 8005e8c:	2a25      	cmp	r2, #37	; 0x25
 8005e8e:	d1f9      	bne.n	8005e84 <_svfiprintf_r+0x50>
 8005e90:	ebba 0b04 	subs.w	fp, sl, r4
 8005e94:	d00b      	beq.n	8005eae <_svfiprintf_r+0x7a>
 8005e96:	465b      	mov	r3, fp
 8005e98:	4622      	mov	r2, r4
 8005e9a:	4629      	mov	r1, r5
 8005e9c:	4638      	mov	r0, r7
 8005e9e:	f7ff ff6d 	bl	8005d7c <__ssputs_r>
 8005ea2:	3001      	adds	r0, #1
 8005ea4:	f000 80aa 	beq.w	8005ffc <_svfiprintf_r+0x1c8>
 8005ea8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005eaa:	445a      	add	r2, fp
 8005eac:	9209      	str	r2, [sp, #36]	; 0x24
 8005eae:	f89a 3000 	ldrb.w	r3, [sl]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	f000 80a2 	beq.w	8005ffc <_svfiprintf_r+0x1c8>
 8005eb8:	2300      	movs	r3, #0
 8005eba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005ebe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005ec2:	f10a 0a01 	add.w	sl, sl, #1
 8005ec6:	9304      	str	r3, [sp, #16]
 8005ec8:	9307      	str	r3, [sp, #28]
 8005eca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005ece:	931a      	str	r3, [sp, #104]	; 0x68
 8005ed0:	4654      	mov	r4, sl
 8005ed2:	2205      	movs	r2, #5
 8005ed4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ed8:	4851      	ldr	r0, [pc, #324]	; (8006020 <_svfiprintf_r+0x1ec>)
 8005eda:	f7fa f981 	bl	80001e0 <memchr>
 8005ede:	9a04      	ldr	r2, [sp, #16]
 8005ee0:	b9d8      	cbnz	r0, 8005f1a <_svfiprintf_r+0xe6>
 8005ee2:	06d0      	lsls	r0, r2, #27
 8005ee4:	bf44      	itt	mi
 8005ee6:	2320      	movmi	r3, #32
 8005ee8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005eec:	0711      	lsls	r1, r2, #28
 8005eee:	bf44      	itt	mi
 8005ef0:	232b      	movmi	r3, #43	; 0x2b
 8005ef2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005ef6:	f89a 3000 	ldrb.w	r3, [sl]
 8005efa:	2b2a      	cmp	r3, #42	; 0x2a
 8005efc:	d015      	beq.n	8005f2a <_svfiprintf_r+0xf6>
 8005efe:	9a07      	ldr	r2, [sp, #28]
 8005f00:	4654      	mov	r4, sl
 8005f02:	2000      	movs	r0, #0
 8005f04:	f04f 0c0a 	mov.w	ip, #10
 8005f08:	4621      	mov	r1, r4
 8005f0a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005f0e:	3b30      	subs	r3, #48	; 0x30
 8005f10:	2b09      	cmp	r3, #9
 8005f12:	d94e      	bls.n	8005fb2 <_svfiprintf_r+0x17e>
 8005f14:	b1b0      	cbz	r0, 8005f44 <_svfiprintf_r+0x110>
 8005f16:	9207      	str	r2, [sp, #28]
 8005f18:	e014      	b.n	8005f44 <_svfiprintf_r+0x110>
 8005f1a:	eba0 0308 	sub.w	r3, r0, r8
 8005f1e:	fa09 f303 	lsl.w	r3, r9, r3
 8005f22:	4313      	orrs	r3, r2
 8005f24:	9304      	str	r3, [sp, #16]
 8005f26:	46a2      	mov	sl, r4
 8005f28:	e7d2      	b.n	8005ed0 <_svfiprintf_r+0x9c>
 8005f2a:	9b03      	ldr	r3, [sp, #12]
 8005f2c:	1d19      	adds	r1, r3, #4
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	9103      	str	r1, [sp, #12]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	bfbb      	ittet	lt
 8005f36:	425b      	neglt	r3, r3
 8005f38:	f042 0202 	orrlt.w	r2, r2, #2
 8005f3c:	9307      	strge	r3, [sp, #28]
 8005f3e:	9307      	strlt	r3, [sp, #28]
 8005f40:	bfb8      	it	lt
 8005f42:	9204      	strlt	r2, [sp, #16]
 8005f44:	7823      	ldrb	r3, [r4, #0]
 8005f46:	2b2e      	cmp	r3, #46	; 0x2e
 8005f48:	d10c      	bne.n	8005f64 <_svfiprintf_r+0x130>
 8005f4a:	7863      	ldrb	r3, [r4, #1]
 8005f4c:	2b2a      	cmp	r3, #42	; 0x2a
 8005f4e:	d135      	bne.n	8005fbc <_svfiprintf_r+0x188>
 8005f50:	9b03      	ldr	r3, [sp, #12]
 8005f52:	1d1a      	adds	r2, r3, #4
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	9203      	str	r2, [sp, #12]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	bfb8      	it	lt
 8005f5c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005f60:	3402      	adds	r4, #2
 8005f62:	9305      	str	r3, [sp, #20]
 8005f64:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006030 <_svfiprintf_r+0x1fc>
 8005f68:	7821      	ldrb	r1, [r4, #0]
 8005f6a:	2203      	movs	r2, #3
 8005f6c:	4650      	mov	r0, sl
 8005f6e:	f7fa f937 	bl	80001e0 <memchr>
 8005f72:	b140      	cbz	r0, 8005f86 <_svfiprintf_r+0x152>
 8005f74:	2340      	movs	r3, #64	; 0x40
 8005f76:	eba0 000a 	sub.w	r0, r0, sl
 8005f7a:	fa03 f000 	lsl.w	r0, r3, r0
 8005f7e:	9b04      	ldr	r3, [sp, #16]
 8005f80:	4303      	orrs	r3, r0
 8005f82:	3401      	adds	r4, #1
 8005f84:	9304      	str	r3, [sp, #16]
 8005f86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f8a:	4826      	ldr	r0, [pc, #152]	; (8006024 <_svfiprintf_r+0x1f0>)
 8005f8c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005f90:	2206      	movs	r2, #6
 8005f92:	f7fa f925 	bl	80001e0 <memchr>
 8005f96:	2800      	cmp	r0, #0
 8005f98:	d038      	beq.n	800600c <_svfiprintf_r+0x1d8>
 8005f9a:	4b23      	ldr	r3, [pc, #140]	; (8006028 <_svfiprintf_r+0x1f4>)
 8005f9c:	bb1b      	cbnz	r3, 8005fe6 <_svfiprintf_r+0x1b2>
 8005f9e:	9b03      	ldr	r3, [sp, #12]
 8005fa0:	3307      	adds	r3, #7
 8005fa2:	f023 0307 	bic.w	r3, r3, #7
 8005fa6:	3308      	adds	r3, #8
 8005fa8:	9303      	str	r3, [sp, #12]
 8005faa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005fac:	4433      	add	r3, r6
 8005fae:	9309      	str	r3, [sp, #36]	; 0x24
 8005fb0:	e767      	b.n	8005e82 <_svfiprintf_r+0x4e>
 8005fb2:	fb0c 3202 	mla	r2, ip, r2, r3
 8005fb6:	460c      	mov	r4, r1
 8005fb8:	2001      	movs	r0, #1
 8005fba:	e7a5      	b.n	8005f08 <_svfiprintf_r+0xd4>
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	3401      	adds	r4, #1
 8005fc0:	9305      	str	r3, [sp, #20]
 8005fc2:	4619      	mov	r1, r3
 8005fc4:	f04f 0c0a 	mov.w	ip, #10
 8005fc8:	4620      	mov	r0, r4
 8005fca:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005fce:	3a30      	subs	r2, #48	; 0x30
 8005fd0:	2a09      	cmp	r2, #9
 8005fd2:	d903      	bls.n	8005fdc <_svfiprintf_r+0x1a8>
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d0c5      	beq.n	8005f64 <_svfiprintf_r+0x130>
 8005fd8:	9105      	str	r1, [sp, #20]
 8005fda:	e7c3      	b.n	8005f64 <_svfiprintf_r+0x130>
 8005fdc:	fb0c 2101 	mla	r1, ip, r1, r2
 8005fe0:	4604      	mov	r4, r0
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	e7f0      	b.n	8005fc8 <_svfiprintf_r+0x194>
 8005fe6:	ab03      	add	r3, sp, #12
 8005fe8:	9300      	str	r3, [sp, #0]
 8005fea:	462a      	mov	r2, r5
 8005fec:	4b0f      	ldr	r3, [pc, #60]	; (800602c <_svfiprintf_r+0x1f8>)
 8005fee:	a904      	add	r1, sp, #16
 8005ff0:	4638      	mov	r0, r7
 8005ff2:	f3af 8000 	nop.w
 8005ff6:	1c42      	adds	r2, r0, #1
 8005ff8:	4606      	mov	r6, r0
 8005ffa:	d1d6      	bne.n	8005faa <_svfiprintf_r+0x176>
 8005ffc:	89ab      	ldrh	r3, [r5, #12]
 8005ffe:	065b      	lsls	r3, r3, #25
 8006000:	f53f af2c 	bmi.w	8005e5c <_svfiprintf_r+0x28>
 8006004:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006006:	b01d      	add	sp, #116	; 0x74
 8006008:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800600c:	ab03      	add	r3, sp, #12
 800600e:	9300      	str	r3, [sp, #0]
 8006010:	462a      	mov	r2, r5
 8006012:	4b06      	ldr	r3, [pc, #24]	; (800602c <_svfiprintf_r+0x1f8>)
 8006014:	a904      	add	r1, sp, #16
 8006016:	4638      	mov	r0, r7
 8006018:	f000 f87a 	bl	8006110 <_printf_i>
 800601c:	e7eb      	b.n	8005ff6 <_svfiprintf_r+0x1c2>
 800601e:	bf00      	nop
 8006020:	08007afc 	.word	0x08007afc
 8006024:	08007b06 	.word	0x08007b06
 8006028:	00000000 	.word	0x00000000
 800602c:	08005d7d 	.word	0x08005d7d
 8006030:	08007b02 	.word	0x08007b02

08006034 <_printf_common>:
 8006034:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006038:	4616      	mov	r6, r2
 800603a:	4699      	mov	r9, r3
 800603c:	688a      	ldr	r2, [r1, #8]
 800603e:	690b      	ldr	r3, [r1, #16]
 8006040:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006044:	4293      	cmp	r3, r2
 8006046:	bfb8      	it	lt
 8006048:	4613      	movlt	r3, r2
 800604a:	6033      	str	r3, [r6, #0]
 800604c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006050:	4607      	mov	r7, r0
 8006052:	460c      	mov	r4, r1
 8006054:	b10a      	cbz	r2, 800605a <_printf_common+0x26>
 8006056:	3301      	adds	r3, #1
 8006058:	6033      	str	r3, [r6, #0]
 800605a:	6823      	ldr	r3, [r4, #0]
 800605c:	0699      	lsls	r1, r3, #26
 800605e:	bf42      	ittt	mi
 8006060:	6833      	ldrmi	r3, [r6, #0]
 8006062:	3302      	addmi	r3, #2
 8006064:	6033      	strmi	r3, [r6, #0]
 8006066:	6825      	ldr	r5, [r4, #0]
 8006068:	f015 0506 	ands.w	r5, r5, #6
 800606c:	d106      	bne.n	800607c <_printf_common+0x48>
 800606e:	f104 0a19 	add.w	sl, r4, #25
 8006072:	68e3      	ldr	r3, [r4, #12]
 8006074:	6832      	ldr	r2, [r6, #0]
 8006076:	1a9b      	subs	r3, r3, r2
 8006078:	42ab      	cmp	r3, r5
 800607a:	dc26      	bgt.n	80060ca <_printf_common+0x96>
 800607c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006080:	1e13      	subs	r3, r2, #0
 8006082:	6822      	ldr	r2, [r4, #0]
 8006084:	bf18      	it	ne
 8006086:	2301      	movne	r3, #1
 8006088:	0692      	lsls	r2, r2, #26
 800608a:	d42b      	bmi.n	80060e4 <_printf_common+0xb0>
 800608c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006090:	4649      	mov	r1, r9
 8006092:	4638      	mov	r0, r7
 8006094:	47c0      	blx	r8
 8006096:	3001      	adds	r0, #1
 8006098:	d01e      	beq.n	80060d8 <_printf_common+0xa4>
 800609a:	6823      	ldr	r3, [r4, #0]
 800609c:	68e5      	ldr	r5, [r4, #12]
 800609e:	6832      	ldr	r2, [r6, #0]
 80060a0:	f003 0306 	and.w	r3, r3, #6
 80060a4:	2b04      	cmp	r3, #4
 80060a6:	bf08      	it	eq
 80060a8:	1aad      	subeq	r5, r5, r2
 80060aa:	68a3      	ldr	r3, [r4, #8]
 80060ac:	6922      	ldr	r2, [r4, #16]
 80060ae:	bf0c      	ite	eq
 80060b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80060b4:	2500      	movne	r5, #0
 80060b6:	4293      	cmp	r3, r2
 80060b8:	bfc4      	itt	gt
 80060ba:	1a9b      	subgt	r3, r3, r2
 80060bc:	18ed      	addgt	r5, r5, r3
 80060be:	2600      	movs	r6, #0
 80060c0:	341a      	adds	r4, #26
 80060c2:	42b5      	cmp	r5, r6
 80060c4:	d11a      	bne.n	80060fc <_printf_common+0xc8>
 80060c6:	2000      	movs	r0, #0
 80060c8:	e008      	b.n	80060dc <_printf_common+0xa8>
 80060ca:	2301      	movs	r3, #1
 80060cc:	4652      	mov	r2, sl
 80060ce:	4649      	mov	r1, r9
 80060d0:	4638      	mov	r0, r7
 80060d2:	47c0      	blx	r8
 80060d4:	3001      	adds	r0, #1
 80060d6:	d103      	bne.n	80060e0 <_printf_common+0xac>
 80060d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80060dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060e0:	3501      	adds	r5, #1
 80060e2:	e7c6      	b.n	8006072 <_printf_common+0x3e>
 80060e4:	18e1      	adds	r1, r4, r3
 80060e6:	1c5a      	adds	r2, r3, #1
 80060e8:	2030      	movs	r0, #48	; 0x30
 80060ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80060ee:	4422      	add	r2, r4
 80060f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80060f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80060f8:	3302      	adds	r3, #2
 80060fa:	e7c7      	b.n	800608c <_printf_common+0x58>
 80060fc:	2301      	movs	r3, #1
 80060fe:	4622      	mov	r2, r4
 8006100:	4649      	mov	r1, r9
 8006102:	4638      	mov	r0, r7
 8006104:	47c0      	blx	r8
 8006106:	3001      	adds	r0, #1
 8006108:	d0e6      	beq.n	80060d8 <_printf_common+0xa4>
 800610a:	3601      	adds	r6, #1
 800610c:	e7d9      	b.n	80060c2 <_printf_common+0x8e>
	...

08006110 <_printf_i>:
 8006110:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006114:	460c      	mov	r4, r1
 8006116:	4691      	mov	r9, r2
 8006118:	7e27      	ldrb	r7, [r4, #24]
 800611a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800611c:	2f78      	cmp	r7, #120	; 0x78
 800611e:	4680      	mov	r8, r0
 8006120:	469a      	mov	sl, r3
 8006122:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006126:	d807      	bhi.n	8006138 <_printf_i+0x28>
 8006128:	2f62      	cmp	r7, #98	; 0x62
 800612a:	d80a      	bhi.n	8006142 <_printf_i+0x32>
 800612c:	2f00      	cmp	r7, #0
 800612e:	f000 80d8 	beq.w	80062e2 <_printf_i+0x1d2>
 8006132:	2f58      	cmp	r7, #88	; 0x58
 8006134:	f000 80a3 	beq.w	800627e <_printf_i+0x16e>
 8006138:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800613c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006140:	e03a      	b.n	80061b8 <_printf_i+0xa8>
 8006142:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006146:	2b15      	cmp	r3, #21
 8006148:	d8f6      	bhi.n	8006138 <_printf_i+0x28>
 800614a:	a001      	add	r0, pc, #4	; (adr r0, 8006150 <_printf_i+0x40>)
 800614c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006150:	080061a9 	.word	0x080061a9
 8006154:	080061bd 	.word	0x080061bd
 8006158:	08006139 	.word	0x08006139
 800615c:	08006139 	.word	0x08006139
 8006160:	08006139 	.word	0x08006139
 8006164:	08006139 	.word	0x08006139
 8006168:	080061bd 	.word	0x080061bd
 800616c:	08006139 	.word	0x08006139
 8006170:	08006139 	.word	0x08006139
 8006174:	08006139 	.word	0x08006139
 8006178:	08006139 	.word	0x08006139
 800617c:	080062c9 	.word	0x080062c9
 8006180:	080061ed 	.word	0x080061ed
 8006184:	080062ab 	.word	0x080062ab
 8006188:	08006139 	.word	0x08006139
 800618c:	08006139 	.word	0x08006139
 8006190:	080062eb 	.word	0x080062eb
 8006194:	08006139 	.word	0x08006139
 8006198:	080061ed 	.word	0x080061ed
 800619c:	08006139 	.word	0x08006139
 80061a0:	08006139 	.word	0x08006139
 80061a4:	080062b3 	.word	0x080062b3
 80061a8:	680b      	ldr	r3, [r1, #0]
 80061aa:	1d1a      	adds	r2, r3, #4
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	600a      	str	r2, [r1, #0]
 80061b0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80061b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80061b8:	2301      	movs	r3, #1
 80061ba:	e0a3      	b.n	8006304 <_printf_i+0x1f4>
 80061bc:	6825      	ldr	r5, [r4, #0]
 80061be:	6808      	ldr	r0, [r1, #0]
 80061c0:	062e      	lsls	r6, r5, #24
 80061c2:	f100 0304 	add.w	r3, r0, #4
 80061c6:	d50a      	bpl.n	80061de <_printf_i+0xce>
 80061c8:	6805      	ldr	r5, [r0, #0]
 80061ca:	600b      	str	r3, [r1, #0]
 80061cc:	2d00      	cmp	r5, #0
 80061ce:	da03      	bge.n	80061d8 <_printf_i+0xc8>
 80061d0:	232d      	movs	r3, #45	; 0x2d
 80061d2:	426d      	negs	r5, r5
 80061d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80061d8:	485e      	ldr	r0, [pc, #376]	; (8006354 <_printf_i+0x244>)
 80061da:	230a      	movs	r3, #10
 80061dc:	e019      	b.n	8006212 <_printf_i+0x102>
 80061de:	f015 0f40 	tst.w	r5, #64	; 0x40
 80061e2:	6805      	ldr	r5, [r0, #0]
 80061e4:	600b      	str	r3, [r1, #0]
 80061e6:	bf18      	it	ne
 80061e8:	b22d      	sxthne	r5, r5
 80061ea:	e7ef      	b.n	80061cc <_printf_i+0xbc>
 80061ec:	680b      	ldr	r3, [r1, #0]
 80061ee:	6825      	ldr	r5, [r4, #0]
 80061f0:	1d18      	adds	r0, r3, #4
 80061f2:	6008      	str	r0, [r1, #0]
 80061f4:	0628      	lsls	r0, r5, #24
 80061f6:	d501      	bpl.n	80061fc <_printf_i+0xec>
 80061f8:	681d      	ldr	r5, [r3, #0]
 80061fa:	e002      	b.n	8006202 <_printf_i+0xf2>
 80061fc:	0669      	lsls	r1, r5, #25
 80061fe:	d5fb      	bpl.n	80061f8 <_printf_i+0xe8>
 8006200:	881d      	ldrh	r5, [r3, #0]
 8006202:	4854      	ldr	r0, [pc, #336]	; (8006354 <_printf_i+0x244>)
 8006204:	2f6f      	cmp	r7, #111	; 0x6f
 8006206:	bf0c      	ite	eq
 8006208:	2308      	moveq	r3, #8
 800620a:	230a      	movne	r3, #10
 800620c:	2100      	movs	r1, #0
 800620e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006212:	6866      	ldr	r6, [r4, #4]
 8006214:	60a6      	str	r6, [r4, #8]
 8006216:	2e00      	cmp	r6, #0
 8006218:	bfa2      	ittt	ge
 800621a:	6821      	ldrge	r1, [r4, #0]
 800621c:	f021 0104 	bicge.w	r1, r1, #4
 8006220:	6021      	strge	r1, [r4, #0]
 8006222:	b90d      	cbnz	r5, 8006228 <_printf_i+0x118>
 8006224:	2e00      	cmp	r6, #0
 8006226:	d04d      	beq.n	80062c4 <_printf_i+0x1b4>
 8006228:	4616      	mov	r6, r2
 800622a:	fbb5 f1f3 	udiv	r1, r5, r3
 800622e:	fb03 5711 	mls	r7, r3, r1, r5
 8006232:	5dc7      	ldrb	r7, [r0, r7]
 8006234:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006238:	462f      	mov	r7, r5
 800623a:	42bb      	cmp	r3, r7
 800623c:	460d      	mov	r5, r1
 800623e:	d9f4      	bls.n	800622a <_printf_i+0x11a>
 8006240:	2b08      	cmp	r3, #8
 8006242:	d10b      	bne.n	800625c <_printf_i+0x14c>
 8006244:	6823      	ldr	r3, [r4, #0]
 8006246:	07df      	lsls	r7, r3, #31
 8006248:	d508      	bpl.n	800625c <_printf_i+0x14c>
 800624a:	6923      	ldr	r3, [r4, #16]
 800624c:	6861      	ldr	r1, [r4, #4]
 800624e:	4299      	cmp	r1, r3
 8006250:	bfde      	ittt	le
 8006252:	2330      	movle	r3, #48	; 0x30
 8006254:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006258:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800625c:	1b92      	subs	r2, r2, r6
 800625e:	6122      	str	r2, [r4, #16]
 8006260:	f8cd a000 	str.w	sl, [sp]
 8006264:	464b      	mov	r3, r9
 8006266:	aa03      	add	r2, sp, #12
 8006268:	4621      	mov	r1, r4
 800626a:	4640      	mov	r0, r8
 800626c:	f7ff fee2 	bl	8006034 <_printf_common>
 8006270:	3001      	adds	r0, #1
 8006272:	d14c      	bne.n	800630e <_printf_i+0x1fe>
 8006274:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006278:	b004      	add	sp, #16
 800627a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800627e:	4835      	ldr	r0, [pc, #212]	; (8006354 <_printf_i+0x244>)
 8006280:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006284:	6823      	ldr	r3, [r4, #0]
 8006286:	680e      	ldr	r6, [r1, #0]
 8006288:	061f      	lsls	r7, r3, #24
 800628a:	f856 5b04 	ldr.w	r5, [r6], #4
 800628e:	600e      	str	r6, [r1, #0]
 8006290:	d514      	bpl.n	80062bc <_printf_i+0x1ac>
 8006292:	07d9      	lsls	r1, r3, #31
 8006294:	bf44      	itt	mi
 8006296:	f043 0320 	orrmi.w	r3, r3, #32
 800629a:	6023      	strmi	r3, [r4, #0]
 800629c:	b91d      	cbnz	r5, 80062a6 <_printf_i+0x196>
 800629e:	6823      	ldr	r3, [r4, #0]
 80062a0:	f023 0320 	bic.w	r3, r3, #32
 80062a4:	6023      	str	r3, [r4, #0]
 80062a6:	2310      	movs	r3, #16
 80062a8:	e7b0      	b.n	800620c <_printf_i+0xfc>
 80062aa:	6823      	ldr	r3, [r4, #0]
 80062ac:	f043 0320 	orr.w	r3, r3, #32
 80062b0:	6023      	str	r3, [r4, #0]
 80062b2:	2378      	movs	r3, #120	; 0x78
 80062b4:	4828      	ldr	r0, [pc, #160]	; (8006358 <_printf_i+0x248>)
 80062b6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80062ba:	e7e3      	b.n	8006284 <_printf_i+0x174>
 80062bc:	065e      	lsls	r6, r3, #25
 80062be:	bf48      	it	mi
 80062c0:	b2ad      	uxthmi	r5, r5
 80062c2:	e7e6      	b.n	8006292 <_printf_i+0x182>
 80062c4:	4616      	mov	r6, r2
 80062c6:	e7bb      	b.n	8006240 <_printf_i+0x130>
 80062c8:	680b      	ldr	r3, [r1, #0]
 80062ca:	6826      	ldr	r6, [r4, #0]
 80062cc:	6960      	ldr	r0, [r4, #20]
 80062ce:	1d1d      	adds	r5, r3, #4
 80062d0:	600d      	str	r5, [r1, #0]
 80062d2:	0635      	lsls	r5, r6, #24
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	d501      	bpl.n	80062dc <_printf_i+0x1cc>
 80062d8:	6018      	str	r0, [r3, #0]
 80062da:	e002      	b.n	80062e2 <_printf_i+0x1d2>
 80062dc:	0671      	lsls	r1, r6, #25
 80062de:	d5fb      	bpl.n	80062d8 <_printf_i+0x1c8>
 80062e0:	8018      	strh	r0, [r3, #0]
 80062e2:	2300      	movs	r3, #0
 80062e4:	6123      	str	r3, [r4, #16]
 80062e6:	4616      	mov	r6, r2
 80062e8:	e7ba      	b.n	8006260 <_printf_i+0x150>
 80062ea:	680b      	ldr	r3, [r1, #0]
 80062ec:	1d1a      	adds	r2, r3, #4
 80062ee:	600a      	str	r2, [r1, #0]
 80062f0:	681e      	ldr	r6, [r3, #0]
 80062f2:	6862      	ldr	r2, [r4, #4]
 80062f4:	2100      	movs	r1, #0
 80062f6:	4630      	mov	r0, r6
 80062f8:	f7f9 ff72 	bl	80001e0 <memchr>
 80062fc:	b108      	cbz	r0, 8006302 <_printf_i+0x1f2>
 80062fe:	1b80      	subs	r0, r0, r6
 8006300:	6060      	str	r0, [r4, #4]
 8006302:	6863      	ldr	r3, [r4, #4]
 8006304:	6123      	str	r3, [r4, #16]
 8006306:	2300      	movs	r3, #0
 8006308:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800630c:	e7a8      	b.n	8006260 <_printf_i+0x150>
 800630e:	6923      	ldr	r3, [r4, #16]
 8006310:	4632      	mov	r2, r6
 8006312:	4649      	mov	r1, r9
 8006314:	4640      	mov	r0, r8
 8006316:	47d0      	blx	sl
 8006318:	3001      	adds	r0, #1
 800631a:	d0ab      	beq.n	8006274 <_printf_i+0x164>
 800631c:	6823      	ldr	r3, [r4, #0]
 800631e:	079b      	lsls	r3, r3, #30
 8006320:	d413      	bmi.n	800634a <_printf_i+0x23a>
 8006322:	68e0      	ldr	r0, [r4, #12]
 8006324:	9b03      	ldr	r3, [sp, #12]
 8006326:	4298      	cmp	r0, r3
 8006328:	bfb8      	it	lt
 800632a:	4618      	movlt	r0, r3
 800632c:	e7a4      	b.n	8006278 <_printf_i+0x168>
 800632e:	2301      	movs	r3, #1
 8006330:	4632      	mov	r2, r6
 8006332:	4649      	mov	r1, r9
 8006334:	4640      	mov	r0, r8
 8006336:	47d0      	blx	sl
 8006338:	3001      	adds	r0, #1
 800633a:	d09b      	beq.n	8006274 <_printf_i+0x164>
 800633c:	3501      	adds	r5, #1
 800633e:	68e3      	ldr	r3, [r4, #12]
 8006340:	9903      	ldr	r1, [sp, #12]
 8006342:	1a5b      	subs	r3, r3, r1
 8006344:	42ab      	cmp	r3, r5
 8006346:	dcf2      	bgt.n	800632e <_printf_i+0x21e>
 8006348:	e7eb      	b.n	8006322 <_printf_i+0x212>
 800634a:	2500      	movs	r5, #0
 800634c:	f104 0619 	add.w	r6, r4, #25
 8006350:	e7f5      	b.n	800633e <_printf_i+0x22e>
 8006352:	bf00      	nop
 8006354:	08007b0d 	.word	0x08007b0d
 8006358:	08007b1e 	.word	0x08007b1e

0800635c <memcpy>:
 800635c:	440a      	add	r2, r1
 800635e:	4291      	cmp	r1, r2
 8006360:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006364:	d100      	bne.n	8006368 <memcpy+0xc>
 8006366:	4770      	bx	lr
 8006368:	b510      	push	{r4, lr}
 800636a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800636e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006372:	4291      	cmp	r1, r2
 8006374:	d1f9      	bne.n	800636a <memcpy+0xe>
 8006376:	bd10      	pop	{r4, pc}

08006378 <memmove>:
 8006378:	4288      	cmp	r0, r1
 800637a:	b510      	push	{r4, lr}
 800637c:	eb01 0402 	add.w	r4, r1, r2
 8006380:	d902      	bls.n	8006388 <memmove+0x10>
 8006382:	4284      	cmp	r4, r0
 8006384:	4623      	mov	r3, r4
 8006386:	d807      	bhi.n	8006398 <memmove+0x20>
 8006388:	1e43      	subs	r3, r0, #1
 800638a:	42a1      	cmp	r1, r4
 800638c:	d008      	beq.n	80063a0 <memmove+0x28>
 800638e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006392:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006396:	e7f8      	b.n	800638a <memmove+0x12>
 8006398:	4402      	add	r2, r0
 800639a:	4601      	mov	r1, r0
 800639c:	428a      	cmp	r2, r1
 800639e:	d100      	bne.n	80063a2 <memmove+0x2a>
 80063a0:	bd10      	pop	{r4, pc}
 80063a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80063a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80063aa:	e7f7      	b.n	800639c <memmove+0x24>

080063ac <_free_r>:
 80063ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80063ae:	2900      	cmp	r1, #0
 80063b0:	d048      	beq.n	8006444 <_free_r+0x98>
 80063b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80063b6:	9001      	str	r0, [sp, #4]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	f1a1 0404 	sub.w	r4, r1, #4
 80063be:	bfb8      	it	lt
 80063c0:	18e4      	addlt	r4, r4, r3
 80063c2:	f000 f8d3 	bl	800656c <__malloc_lock>
 80063c6:	4a20      	ldr	r2, [pc, #128]	; (8006448 <_free_r+0x9c>)
 80063c8:	9801      	ldr	r0, [sp, #4]
 80063ca:	6813      	ldr	r3, [r2, #0]
 80063cc:	4615      	mov	r5, r2
 80063ce:	b933      	cbnz	r3, 80063de <_free_r+0x32>
 80063d0:	6063      	str	r3, [r4, #4]
 80063d2:	6014      	str	r4, [r2, #0]
 80063d4:	b003      	add	sp, #12
 80063d6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80063da:	f000 b8cd 	b.w	8006578 <__malloc_unlock>
 80063de:	42a3      	cmp	r3, r4
 80063e0:	d90b      	bls.n	80063fa <_free_r+0x4e>
 80063e2:	6821      	ldr	r1, [r4, #0]
 80063e4:	1862      	adds	r2, r4, r1
 80063e6:	4293      	cmp	r3, r2
 80063e8:	bf04      	itt	eq
 80063ea:	681a      	ldreq	r2, [r3, #0]
 80063ec:	685b      	ldreq	r3, [r3, #4]
 80063ee:	6063      	str	r3, [r4, #4]
 80063f0:	bf04      	itt	eq
 80063f2:	1852      	addeq	r2, r2, r1
 80063f4:	6022      	streq	r2, [r4, #0]
 80063f6:	602c      	str	r4, [r5, #0]
 80063f8:	e7ec      	b.n	80063d4 <_free_r+0x28>
 80063fa:	461a      	mov	r2, r3
 80063fc:	685b      	ldr	r3, [r3, #4]
 80063fe:	b10b      	cbz	r3, 8006404 <_free_r+0x58>
 8006400:	42a3      	cmp	r3, r4
 8006402:	d9fa      	bls.n	80063fa <_free_r+0x4e>
 8006404:	6811      	ldr	r1, [r2, #0]
 8006406:	1855      	adds	r5, r2, r1
 8006408:	42a5      	cmp	r5, r4
 800640a:	d10b      	bne.n	8006424 <_free_r+0x78>
 800640c:	6824      	ldr	r4, [r4, #0]
 800640e:	4421      	add	r1, r4
 8006410:	1854      	adds	r4, r2, r1
 8006412:	42a3      	cmp	r3, r4
 8006414:	6011      	str	r1, [r2, #0]
 8006416:	d1dd      	bne.n	80063d4 <_free_r+0x28>
 8006418:	681c      	ldr	r4, [r3, #0]
 800641a:	685b      	ldr	r3, [r3, #4]
 800641c:	6053      	str	r3, [r2, #4]
 800641e:	4421      	add	r1, r4
 8006420:	6011      	str	r1, [r2, #0]
 8006422:	e7d7      	b.n	80063d4 <_free_r+0x28>
 8006424:	d902      	bls.n	800642c <_free_r+0x80>
 8006426:	230c      	movs	r3, #12
 8006428:	6003      	str	r3, [r0, #0]
 800642a:	e7d3      	b.n	80063d4 <_free_r+0x28>
 800642c:	6825      	ldr	r5, [r4, #0]
 800642e:	1961      	adds	r1, r4, r5
 8006430:	428b      	cmp	r3, r1
 8006432:	bf04      	itt	eq
 8006434:	6819      	ldreq	r1, [r3, #0]
 8006436:	685b      	ldreq	r3, [r3, #4]
 8006438:	6063      	str	r3, [r4, #4]
 800643a:	bf04      	itt	eq
 800643c:	1949      	addeq	r1, r1, r5
 800643e:	6021      	streq	r1, [r4, #0]
 8006440:	6054      	str	r4, [r2, #4]
 8006442:	e7c7      	b.n	80063d4 <_free_r+0x28>
 8006444:	b003      	add	sp, #12
 8006446:	bd30      	pop	{r4, r5, pc}
 8006448:	200004c4 	.word	0x200004c4

0800644c <_malloc_r>:
 800644c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800644e:	1ccd      	adds	r5, r1, #3
 8006450:	f025 0503 	bic.w	r5, r5, #3
 8006454:	3508      	adds	r5, #8
 8006456:	2d0c      	cmp	r5, #12
 8006458:	bf38      	it	cc
 800645a:	250c      	movcc	r5, #12
 800645c:	2d00      	cmp	r5, #0
 800645e:	4606      	mov	r6, r0
 8006460:	db01      	blt.n	8006466 <_malloc_r+0x1a>
 8006462:	42a9      	cmp	r1, r5
 8006464:	d903      	bls.n	800646e <_malloc_r+0x22>
 8006466:	230c      	movs	r3, #12
 8006468:	6033      	str	r3, [r6, #0]
 800646a:	2000      	movs	r0, #0
 800646c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800646e:	f000 f87d 	bl	800656c <__malloc_lock>
 8006472:	4921      	ldr	r1, [pc, #132]	; (80064f8 <_malloc_r+0xac>)
 8006474:	680a      	ldr	r2, [r1, #0]
 8006476:	4614      	mov	r4, r2
 8006478:	b99c      	cbnz	r4, 80064a2 <_malloc_r+0x56>
 800647a:	4f20      	ldr	r7, [pc, #128]	; (80064fc <_malloc_r+0xb0>)
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	b923      	cbnz	r3, 800648a <_malloc_r+0x3e>
 8006480:	4621      	mov	r1, r4
 8006482:	4630      	mov	r0, r6
 8006484:	f000 f862 	bl	800654c <_sbrk_r>
 8006488:	6038      	str	r0, [r7, #0]
 800648a:	4629      	mov	r1, r5
 800648c:	4630      	mov	r0, r6
 800648e:	f000 f85d 	bl	800654c <_sbrk_r>
 8006492:	1c43      	adds	r3, r0, #1
 8006494:	d123      	bne.n	80064de <_malloc_r+0x92>
 8006496:	230c      	movs	r3, #12
 8006498:	6033      	str	r3, [r6, #0]
 800649a:	4630      	mov	r0, r6
 800649c:	f000 f86c 	bl	8006578 <__malloc_unlock>
 80064a0:	e7e3      	b.n	800646a <_malloc_r+0x1e>
 80064a2:	6823      	ldr	r3, [r4, #0]
 80064a4:	1b5b      	subs	r3, r3, r5
 80064a6:	d417      	bmi.n	80064d8 <_malloc_r+0x8c>
 80064a8:	2b0b      	cmp	r3, #11
 80064aa:	d903      	bls.n	80064b4 <_malloc_r+0x68>
 80064ac:	6023      	str	r3, [r4, #0]
 80064ae:	441c      	add	r4, r3
 80064b0:	6025      	str	r5, [r4, #0]
 80064b2:	e004      	b.n	80064be <_malloc_r+0x72>
 80064b4:	6863      	ldr	r3, [r4, #4]
 80064b6:	42a2      	cmp	r2, r4
 80064b8:	bf0c      	ite	eq
 80064ba:	600b      	streq	r3, [r1, #0]
 80064bc:	6053      	strne	r3, [r2, #4]
 80064be:	4630      	mov	r0, r6
 80064c0:	f000 f85a 	bl	8006578 <__malloc_unlock>
 80064c4:	f104 000b 	add.w	r0, r4, #11
 80064c8:	1d23      	adds	r3, r4, #4
 80064ca:	f020 0007 	bic.w	r0, r0, #7
 80064ce:	1ac2      	subs	r2, r0, r3
 80064d0:	d0cc      	beq.n	800646c <_malloc_r+0x20>
 80064d2:	1a1b      	subs	r3, r3, r0
 80064d4:	50a3      	str	r3, [r4, r2]
 80064d6:	e7c9      	b.n	800646c <_malloc_r+0x20>
 80064d8:	4622      	mov	r2, r4
 80064da:	6864      	ldr	r4, [r4, #4]
 80064dc:	e7cc      	b.n	8006478 <_malloc_r+0x2c>
 80064de:	1cc4      	adds	r4, r0, #3
 80064e0:	f024 0403 	bic.w	r4, r4, #3
 80064e4:	42a0      	cmp	r0, r4
 80064e6:	d0e3      	beq.n	80064b0 <_malloc_r+0x64>
 80064e8:	1a21      	subs	r1, r4, r0
 80064ea:	4630      	mov	r0, r6
 80064ec:	f000 f82e 	bl	800654c <_sbrk_r>
 80064f0:	3001      	adds	r0, #1
 80064f2:	d1dd      	bne.n	80064b0 <_malloc_r+0x64>
 80064f4:	e7cf      	b.n	8006496 <_malloc_r+0x4a>
 80064f6:	bf00      	nop
 80064f8:	200004c4 	.word	0x200004c4
 80064fc:	200004c8 	.word	0x200004c8

08006500 <_realloc_r>:
 8006500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006502:	4607      	mov	r7, r0
 8006504:	4614      	mov	r4, r2
 8006506:	460e      	mov	r6, r1
 8006508:	b921      	cbnz	r1, 8006514 <_realloc_r+0x14>
 800650a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800650e:	4611      	mov	r1, r2
 8006510:	f7ff bf9c 	b.w	800644c <_malloc_r>
 8006514:	b922      	cbnz	r2, 8006520 <_realloc_r+0x20>
 8006516:	f7ff ff49 	bl	80063ac <_free_r>
 800651a:	4625      	mov	r5, r4
 800651c:	4628      	mov	r0, r5
 800651e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006520:	f000 f830 	bl	8006584 <_malloc_usable_size_r>
 8006524:	42a0      	cmp	r0, r4
 8006526:	d20f      	bcs.n	8006548 <_realloc_r+0x48>
 8006528:	4621      	mov	r1, r4
 800652a:	4638      	mov	r0, r7
 800652c:	f7ff ff8e 	bl	800644c <_malloc_r>
 8006530:	4605      	mov	r5, r0
 8006532:	2800      	cmp	r0, #0
 8006534:	d0f2      	beq.n	800651c <_realloc_r+0x1c>
 8006536:	4631      	mov	r1, r6
 8006538:	4622      	mov	r2, r4
 800653a:	f7ff ff0f 	bl	800635c <memcpy>
 800653e:	4631      	mov	r1, r6
 8006540:	4638      	mov	r0, r7
 8006542:	f7ff ff33 	bl	80063ac <_free_r>
 8006546:	e7e9      	b.n	800651c <_realloc_r+0x1c>
 8006548:	4635      	mov	r5, r6
 800654a:	e7e7      	b.n	800651c <_realloc_r+0x1c>

0800654c <_sbrk_r>:
 800654c:	b538      	push	{r3, r4, r5, lr}
 800654e:	4d06      	ldr	r5, [pc, #24]	; (8006568 <_sbrk_r+0x1c>)
 8006550:	2300      	movs	r3, #0
 8006552:	4604      	mov	r4, r0
 8006554:	4608      	mov	r0, r1
 8006556:	602b      	str	r3, [r5, #0]
 8006558:	f7fa fe78 	bl	800124c <_sbrk>
 800655c:	1c43      	adds	r3, r0, #1
 800655e:	d102      	bne.n	8006566 <_sbrk_r+0x1a>
 8006560:	682b      	ldr	r3, [r5, #0]
 8006562:	b103      	cbz	r3, 8006566 <_sbrk_r+0x1a>
 8006564:	6023      	str	r3, [r4, #0]
 8006566:	bd38      	pop	{r3, r4, r5, pc}
 8006568:	200006e8 	.word	0x200006e8

0800656c <__malloc_lock>:
 800656c:	4801      	ldr	r0, [pc, #4]	; (8006574 <__malloc_lock+0x8>)
 800656e:	f000 b811 	b.w	8006594 <__retarget_lock_acquire_recursive>
 8006572:	bf00      	nop
 8006574:	200006f0 	.word	0x200006f0

08006578 <__malloc_unlock>:
 8006578:	4801      	ldr	r0, [pc, #4]	; (8006580 <__malloc_unlock+0x8>)
 800657a:	f000 b80c 	b.w	8006596 <__retarget_lock_release_recursive>
 800657e:	bf00      	nop
 8006580:	200006f0 	.word	0x200006f0

08006584 <_malloc_usable_size_r>:
 8006584:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006588:	1f18      	subs	r0, r3, #4
 800658a:	2b00      	cmp	r3, #0
 800658c:	bfbc      	itt	lt
 800658e:	580b      	ldrlt	r3, [r1, r0]
 8006590:	18c0      	addlt	r0, r0, r3
 8006592:	4770      	bx	lr

08006594 <__retarget_lock_acquire_recursive>:
 8006594:	4770      	bx	lr

08006596 <__retarget_lock_release_recursive>:
 8006596:	4770      	bx	lr

08006598 <_init>:
 8006598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800659a:	bf00      	nop
 800659c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800659e:	bc08      	pop	{r3}
 80065a0:	469e      	mov	lr, r3
 80065a2:	4770      	bx	lr

080065a4 <_fini>:
 80065a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065a6:	bf00      	nop
 80065a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065aa:	bc08      	pop	{r3}
 80065ac:	469e      	mov	lr, r3
 80065ae:	4770      	bx	lr
