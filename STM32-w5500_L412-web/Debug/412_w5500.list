
412_w5500.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000097c0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002a3c  08009950  08009950  00019950  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c38c  0800c38c  00020100  2**0
                  CONTENTS
  4 .ARM          00000008  0800c38c  0800c38c  0001c38c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c394  0800c394  00020100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c394  0800c394  0001c394  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c398  0800c398  0001c398  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000100  20000000  0800c39c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000bf4  20000100  0800c49c  00020100  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000cf4  0800c49c  00020cf4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY
 12 .debug_info   000182ee  00000000  00000000  00020130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000038ca  00000000  00000000  0003841e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012f8  00000000  00000000  0003bce8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011a0  00000000  00000000  0003cfe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ad73  00000000  00000000  0003e180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000164f7  00000000  00000000  00058ef3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000aae25  00000000  00000000  0006f3ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0011a20f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b24  00000000  00000000  0011a264  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000100 	.word	0x20000100
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009938 	.word	0x08009938

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000104 	.word	0x20000104
 80001cc:	08009938 	.word	0x08009938

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002b4:	f000 b96e 	b.w	8000594 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468c      	mov	ip, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	f040 8083 	bne.w	80003e6 <__udivmoddi4+0x116>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d947      	bls.n	8000376 <__udivmoddi4+0xa6>
 80002e6:	fab2 f282 	clz	r2, r2
 80002ea:	b142      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ec:	f1c2 0020 	rsb	r0, r2, #32
 80002f0:	fa24 f000 	lsr.w	r0, r4, r0
 80002f4:	4091      	lsls	r1, r2
 80002f6:	4097      	lsls	r7, r2
 80002f8:	ea40 0c01 	orr.w	ip, r0, r1
 80002fc:	4094      	lsls	r4, r2
 80002fe:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fbbc f6f8 	udiv	r6, ip, r8
 8000308:	fa1f fe87 	uxth.w	lr, r7
 800030c:	fb08 c116 	mls	r1, r8, r6, ip
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb06 f10e 	mul.w	r1, r6, lr
 8000318:	4299      	cmp	r1, r3
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x60>
 800031c:	18fb      	adds	r3, r7, r3
 800031e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000322:	f080 8119 	bcs.w	8000558 <__udivmoddi4+0x288>
 8000326:	4299      	cmp	r1, r3
 8000328:	f240 8116 	bls.w	8000558 <__udivmoddi4+0x288>
 800032c:	3e02      	subs	r6, #2
 800032e:	443b      	add	r3, r7
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0f8 	udiv	r0, r3, r8
 8000338:	fb08 3310 	mls	r3, r8, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 fe0e 	mul.w	lr, r0, lr
 8000344:	45a6      	cmp	lr, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x8c>
 8000348:	193c      	adds	r4, r7, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800034e:	f080 8105 	bcs.w	800055c <__udivmoddi4+0x28c>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f240 8102 	bls.w	800055c <__udivmoddi4+0x28c>
 8000358:	3802      	subs	r0, #2
 800035a:	443c      	add	r4, r7
 800035c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000360:	eba4 040e 	sub.w	r4, r4, lr
 8000364:	2600      	movs	r6, #0
 8000366:	b11d      	cbz	r5, 8000370 <__udivmoddi4+0xa0>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c5 4300 	strd	r4, r3, [r5]
 8000370:	4631      	mov	r1, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	b902      	cbnz	r2, 800037a <__udivmoddi4+0xaa>
 8000378:	deff      	udf	#255	; 0xff
 800037a:	fab2 f282 	clz	r2, r2
 800037e:	2a00      	cmp	r2, #0
 8000380:	d150      	bne.n	8000424 <__udivmoddi4+0x154>
 8000382:	1bcb      	subs	r3, r1, r7
 8000384:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000388:	fa1f f887 	uxth.w	r8, r7
 800038c:	2601      	movs	r6, #1
 800038e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000392:	0c21      	lsrs	r1, r4, #16
 8000394:	fb0e 331c 	mls	r3, lr, ip, r3
 8000398:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800039c:	fb08 f30c 	mul.w	r3, r8, ip
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0xe4>
 80003a4:	1879      	adds	r1, r7, r1
 80003a6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0xe2>
 80003ac:	428b      	cmp	r3, r1
 80003ae:	f200 80e9 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003b2:	4684      	mov	ip, r0
 80003b4:	1ac9      	subs	r1, r1, r3
 80003b6:	b2a3      	uxth	r3, r4
 80003b8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003bc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003c0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003c4:	fb08 f800 	mul.w	r8, r8, r0
 80003c8:	45a0      	cmp	r8, r4
 80003ca:	d907      	bls.n	80003dc <__udivmoddi4+0x10c>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x10a>
 80003d4:	45a0      	cmp	r8, r4
 80003d6:	f200 80d9 	bhi.w	800058c <__udivmoddi4+0x2bc>
 80003da:	4618      	mov	r0, r3
 80003dc:	eba4 0408 	sub.w	r4, r4, r8
 80003e0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003e4:	e7bf      	b.n	8000366 <__udivmoddi4+0x96>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d909      	bls.n	80003fe <__udivmoddi4+0x12e>
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	f000 80b1 	beq.w	8000552 <__udivmoddi4+0x282>
 80003f0:	2600      	movs	r6, #0
 80003f2:	e9c5 0100 	strd	r0, r1, [r5]
 80003f6:	4630      	mov	r0, r6
 80003f8:	4631      	mov	r1, r6
 80003fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fe:	fab3 f683 	clz	r6, r3
 8000402:	2e00      	cmp	r6, #0
 8000404:	d14a      	bne.n	800049c <__udivmoddi4+0x1cc>
 8000406:	428b      	cmp	r3, r1
 8000408:	d302      	bcc.n	8000410 <__udivmoddi4+0x140>
 800040a:	4282      	cmp	r2, r0
 800040c:	f200 80b8 	bhi.w	8000580 <__udivmoddi4+0x2b0>
 8000410:	1a84      	subs	r4, r0, r2
 8000412:	eb61 0103 	sbc.w	r1, r1, r3
 8000416:	2001      	movs	r0, #1
 8000418:	468c      	mov	ip, r1
 800041a:	2d00      	cmp	r5, #0
 800041c:	d0a8      	beq.n	8000370 <__udivmoddi4+0xa0>
 800041e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000422:	e7a5      	b.n	8000370 <__udivmoddi4+0xa0>
 8000424:	f1c2 0320 	rsb	r3, r2, #32
 8000428:	fa20 f603 	lsr.w	r6, r0, r3
 800042c:	4097      	lsls	r7, r2
 800042e:	fa01 f002 	lsl.w	r0, r1, r2
 8000432:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000436:	40d9      	lsrs	r1, r3
 8000438:	4330      	orrs	r0, r6
 800043a:	0c03      	lsrs	r3, r0, #16
 800043c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000440:	fa1f f887 	uxth.w	r8, r7
 8000444:	fb0e 1116 	mls	r1, lr, r6, r1
 8000448:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044c:	fb06 f108 	mul.w	r1, r6, r8
 8000450:	4299      	cmp	r1, r3
 8000452:	fa04 f402 	lsl.w	r4, r4, r2
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x19c>
 8000458:	18fb      	adds	r3, r7, r3
 800045a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800045e:	f080 808d 	bcs.w	800057c <__udivmoddi4+0x2ac>
 8000462:	4299      	cmp	r1, r3
 8000464:	f240 808a 	bls.w	800057c <__udivmoddi4+0x2ac>
 8000468:	3e02      	subs	r6, #2
 800046a:	443b      	add	r3, r7
 800046c:	1a5b      	subs	r3, r3, r1
 800046e:	b281      	uxth	r1, r0
 8000470:	fbb3 f0fe 	udiv	r0, r3, lr
 8000474:	fb0e 3310 	mls	r3, lr, r0, r3
 8000478:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047c:	fb00 f308 	mul.w	r3, r0, r8
 8000480:	428b      	cmp	r3, r1
 8000482:	d907      	bls.n	8000494 <__udivmoddi4+0x1c4>
 8000484:	1879      	adds	r1, r7, r1
 8000486:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800048a:	d273      	bcs.n	8000574 <__udivmoddi4+0x2a4>
 800048c:	428b      	cmp	r3, r1
 800048e:	d971      	bls.n	8000574 <__udivmoddi4+0x2a4>
 8000490:	3802      	subs	r0, #2
 8000492:	4439      	add	r1, r7
 8000494:	1acb      	subs	r3, r1, r3
 8000496:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800049a:	e778      	b.n	800038e <__udivmoddi4+0xbe>
 800049c:	f1c6 0c20 	rsb	ip, r6, #32
 80004a0:	fa03 f406 	lsl.w	r4, r3, r6
 80004a4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004a8:	431c      	orrs	r4, r3
 80004aa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ae:	fa01 f306 	lsl.w	r3, r1, r6
 80004b2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004b6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ba:	431f      	orrs	r7, r3
 80004bc:	0c3b      	lsrs	r3, r7, #16
 80004be:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c2:	fa1f f884 	uxth.w	r8, r4
 80004c6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ca:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ce:	fb09 fa08 	mul.w	sl, r9, r8
 80004d2:	458a      	cmp	sl, r1
 80004d4:	fa02 f206 	lsl.w	r2, r2, r6
 80004d8:	fa00 f306 	lsl.w	r3, r0, r6
 80004dc:	d908      	bls.n	80004f0 <__udivmoddi4+0x220>
 80004de:	1861      	adds	r1, r4, r1
 80004e0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004e4:	d248      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 80004e6:	458a      	cmp	sl, r1
 80004e8:	d946      	bls.n	8000578 <__udivmoddi4+0x2a8>
 80004ea:	f1a9 0902 	sub.w	r9, r9, #2
 80004ee:	4421      	add	r1, r4
 80004f0:	eba1 010a 	sub.w	r1, r1, sl
 80004f4:	b2bf      	uxth	r7, r7
 80004f6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004fa:	fb0e 1110 	mls	r1, lr, r0, r1
 80004fe:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000502:	fb00 f808 	mul.w	r8, r0, r8
 8000506:	45b8      	cmp	r8, r7
 8000508:	d907      	bls.n	800051a <__udivmoddi4+0x24a>
 800050a:	19e7      	adds	r7, r4, r7
 800050c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000510:	d22e      	bcs.n	8000570 <__udivmoddi4+0x2a0>
 8000512:	45b8      	cmp	r8, r7
 8000514:	d92c      	bls.n	8000570 <__udivmoddi4+0x2a0>
 8000516:	3802      	subs	r0, #2
 8000518:	4427      	add	r7, r4
 800051a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800051e:	eba7 0708 	sub.w	r7, r7, r8
 8000522:	fba0 8902 	umull	r8, r9, r0, r2
 8000526:	454f      	cmp	r7, r9
 8000528:	46c6      	mov	lr, r8
 800052a:	4649      	mov	r1, r9
 800052c:	d31a      	bcc.n	8000564 <__udivmoddi4+0x294>
 800052e:	d017      	beq.n	8000560 <__udivmoddi4+0x290>
 8000530:	b15d      	cbz	r5, 800054a <__udivmoddi4+0x27a>
 8000532:	ebb3 020e 	subs.w	r2, r3, lr
 8000536:	eb67 0701 	sbc.w	r7, r7, r1
 800053a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800053e:	40f2      	lsrs	r2, r6
 8000540:	ea4c 0202 	orr.w	r2, ip, r2
 8000544:	40f7      	lsrs	r7, r6
 8000546:	e9c5 2700 	strd	r2, r7, [r5]
 800054a:	2600      	movs	r6, #0
 800054c:	4631      	mov	r1, r6
 800054e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e70b      	b.n	8000370 <__udivmoddi4+0xa0>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e9      	b.n	8000330 <__udivmoddi4+0x60>
 800055c:	4618      	mov	r0, r3
 800055e:	e6fd      	b.n	800035c <__udivmoddi4+0x8c>
 8000560:	4543      	cmp	r3, r8
 8000562:	d2e5      	bcs.n	8000530 <__udivmoddi4+0x260>
 8000564:	ebb8 0e02 	subs.w	lr, r8, r2
 8000568:	eb69 0104 	sbc.w	r1, r9, r4
 800056c:	3801      	subs	r0, #1
 800056e:	e7df      	b.n	8000530 <__udivmoddi4+0x260>
 8000570:	4608      	mov	r0, r1
 8000572:	e7d2      	b.n	800051a <__udivmoddi4+0x24a>
 8000574:	4660      	mov	r0, ip
 8000576:	e78d      	b.n	8000494 <__udivmoddi4+0x1c4>
 8000578:	4681      	mov	r9, r0
 800057a:	e7b9      	b.n	80004f0 <__udivmoddi4+0x220>
 800057c:	4666      	mov	r6, ip
 800057e:	e775      	b.n	800046c <__udivmoddi4+0x19c>
 8000580:	4630      	mov	r0, r6
 8000582:	e74a      	b.n	800041a <__udivmoddi4+0x14a>
 8000584:	f1ac 0c02 	sub.w	ip, ip, #2
 8000588:	4439      	add	r1, r7
 800058a:	e713      	b.n	80003b4 <__udivmoddi4+0xe4>
 800058c:	3802      	subs	r0, #2
 800058e:	443c      	add	r4, r7
 8000590:	e724      	b.n	80003dc <__udivmoddi4+0x10c>
 8000592:	bf00      	nop

08000594 <__aeabi_idiv0>:
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop

08000598 <make_http_response_head>:
void make_http_response_head(
	char * buf, 	/**< pointer to response header to be made */
	char type, 	/**< response type */
	uint32_t len	/**< size of response header */
	)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b088      	sub	sp, #32
 800059c:	af00      	add	r7, sp, #0
 800059e:	60f8      	str	r0, [r7, #12]
 80005a0:	460b      	mov	r3, r1
 80005a2:	607a      	str	r2, [r7, #4]
 80005a4:	72fb      	strb	r3, [r7, #11]
	char * head;
	char tmp[10];
			
	/*  file type*/
	if 	(type == PTYPE_HTML) 		head = RES_HTMLHEAD_OK;
 80005a6:	7afb      	ldrb	r3, [r7, #11]
 80005a8:	2b01      	cmp	r3, #1
 80005aa:	d102      	bne.n	80005b2 <make_http_response_head+0x1a>
 80005ac:	4b42      	ldr	r3, [pc, #264]	; (80006b8 <make_http_response_head+0x120>)
 80005ae:	61fb      	str	r3, [r7, #28]
 80005b0:	e061      	b.n	8000676 <make_http_response_head+0xde>
	else if (type == PTYPE_GIF)		head = RES_GIFHEAD_OK;
 80005b2:	7afb      	ldrb	r3, [r7, #11]
 80005b4:	2b02      	cmp	r3, #2
 80005b6:	d102      	bne.n	80005be <make_http_response_head+0x26>
 80005b8:	4b40      	ldr	r3, [pc, #256]	; (80006bc <make_http_response_head+0x124>)
 80005ba:	61fb      	str	r3, [r7, #28]
 80005bc:	e05b      	b.n	8000676 <make_http_response_head+0xde>
	else if (type == PTYPE_TEXT)	head = RES_TEXTHEAD_OK;
 80005be:	7afb      	ldrb	r3, [r7, #11]
 80005c0:	2b03      	cmp	r3, #3
 80005c2:	d102      	bne.n	80005ca <make_http_response_head+0x32>
 80005c4:	4b3e      	ldr	r3, [pc, #248]	; (80006c0 <make_http_response_head+0x128>)
 80005c6:	61fb      	str	r3, [r7, #28]
 80005c8:	e055      	b.n	8000676 <make_http_response_head+0xde>
	else if (type == PTYPE_JPEG)	head = RES_JPEGHEAD_OK;
 80005ca:	7afb      	ldrb	r3, [r7, #11]
 80005cc:	2b04      	cmp	r3, #4
 80005ce:	d102      	bne.n	80005d6 <make_http_response_head+0x3e>
 80005d0:	4b3c      	ldr	r3, [pc, #240]	; (80006c4 <make_http_response_head+0x12c>)
 80005d2:	61fb      	str	r3, [r7, #28]
 80005d4:	e04f      	b.n	8000676 <make_http_response_head+0xde>
	else if (type == PTYPE_FLASH)	head = RES_FLASHHEAD_OK;
 80005d6:	7afb      	ldrb	r3, [r7, #11]
 80005d8:	2b05      	cmp	r3, #5
 80005da:	d102      	bne.n	80005e2 <make_http_response_head+0x4a>
 80005dc:	4b3a      	ldr	r3, [pc, #232]	; (80006c8 <make_http_response_head+0x130>)
 80005de:	61fb      	str	r3, [r7, #28]
 80005e0:	e049      	b.n	8000676 <make_http_response_head+0xde>
	else if (type == PTYPE_XML) 	head =  RES_XMLHEAD_OK;
 80005e2:	7afb      	ldrb	r3, [r7, #11]
 80005e4:	2b09      	cmp	r3, #9
 80005e6:	d102      	bne.n	80005ee <make_http_response_head+0x56>
 80005e8:	4b38      	ldr	r3, [pc, #224]	; (80006cc <make_http_response_head+0x134>)
 80005ea:	61fb      	str	r3, [r7, #28]
 80005ec:	e043      	b.n	8000676 <make_http_response_head+0xde>
	else if (type == PTYPE_CSS) 	head = RES_CSSHEAD_OK;
 80005ee:	7afb      	ldrb	r3, [r7, #11]
 80005f0:	2b0a      	cmp	r3, #10
 80005f2:	d102      	bne.n	80005fa <make_http_response_head+0x62>
 80005f4:	4b36      	ldr	r3, [pc, #216]	; (80006d0 <make_http_response_head+0x138>)
 80005f6:	61fb      	str	r3, [r7, #28]
 80005f8:	e03d      	b.n	8000676 <make_http_response_head+0xde>
	else if (type == PTYPE_JSON)	head = RES_JSONHEAD_OK;
 80005fa:	7afb      	ldrb	r3, [r7, #11]
 80005fc:	2b0c      	cmp	r3, #12
 80005fe:	d102      	bne.n	8000606 <make_http_response_head+0x6e>
 8000600:	4b34      	ldr	r3, [pc, #208]	; (80006d4 <make_http_response_head+0x13c>)
 8000602:	61fb      	str	r3, [r7, #28]
 8000604:	e037      	b.n	8000676 <make_http_response_head+0xde>
	else if (type == PTYPE_JS)		head = RES_JSHEAD_OK;
 8000606:	7afb      	ldrb	r3, [r7, #11]
 8000608:	2b0b      	cmp	r3, #11
 800060a:	d102      	bne.n	8000612 <make_http_response_head+0x7a>
 800060c:	4b32      	ldr	r3, [pc, #200]	; (80006d8 <make_http_response_head+0x140>)
 800060e:	61fb      	str	r3, [r7, #28]
 8000610:	e031      	b.n	8000676 <make_http_response_head+0xde>
	else if (type == PTYPE_CGI)		head = RES_CGIHEAD_OK;
 8000612:	7afb      	ldrb	r3, [r7, #11]
 8000614:	2b08      	cmp	r3, #8
 8000616:	d102      	bne.n	800061e <make_http_response_head+0x86>
 8000618:	4b30      	ldr	r3, [pc, #192]	; (80006dc <make_http_response_head+0x144>)
 800061a:	61fb      	str	r3, [r7, #28]
 800061c:	e02b      	b.n	8000676 <make_http_response_head+0xde>
	else if (type == PTYPE_PNG)		head = RES_PNGHEAD_OK;
 800061e:	7afb      	ldrb	r3, [r7, #11]
 8000620:	2b0d      	cmp	r3, #13
 8000622:	d102      	bne.n	800062a <make_http_response_head+0x92>
 8000624:	4b2e      	ldr	r3, [pc, #184]	; (80006e0 <make_http_response_head+0x148>)
 8000626:	61fb      	str	r3, [r7, #28]
 8000628:	e025      	b.n	8000676 <make_http_response_head+0xde>
	else if (type == PTYPE_ICO)		head = RES_ICOHEAD_OK;
 800062a:	7afb      	ldrb	r3, [r7, #11]
 800062c:	2b0e      	cmp	r3, #14
 800062e:	d102      	bne.n	8000636 <make_http_response_head+0x9e>
 8000630:	4b2c      	ldr	r3, [pc, #176]	; (80006e4 <make_http_response_head+0x14c>)
 8000632:	61fb      	str	r3, [r7, #28]
 8000634:	e01f      	b.n	8000676 <make_http_response_head+0xde>
	else if (type == PTYPE_TTF)		head = RES_TTFHEAD_OK;
 8000636:	7afb      	ldrb	r3, [r7, #11]
 8000638:	2b14      	cmp	r3, #20
 800063a:	d102      	bne.n	8000642 <make_http_response_head+0xaa>
 800063c:	4b2a      	ldr	r3, [pc, #168]	; (80006e8 <make_http_response_head+0x150>)
 800063e:	61fb      	str	r3, [r7, #28]
 8000640:	e019      	b.n	8000676 <make_http_response_head+0xde>
	else if (type == PTYPE_OTF)		head = RES_OTFHEAD_OK;
 8000642:	7afb      	ldrb	r3, [r7, #11]
 8000644:	2b15      	cmp	r3, #21
 8000646:	d102      	bne.n	800064e <make_http_response_head+0xb6>
 8000648:	4b28      	ldr	r3, [pc, #160]	; (80006ec <make_http_response_head+0x154>)
 800064a:	61fb      	str	r3, [r7, #28]
 800064c:	e013      	b.n	8000676 <make_http_response_head+0xde>
	else if (type == PTYPE_WOFF)	head = RES_WOFFHEAD_OK;
 800064e:	7afb      	ldrb	r3, [r7, #11]
 8000650:	2b16      	cmp	r3, #22
 8000652:	d102      	bne.n	800065a <make_http_response_head+0xc2>
 8000654:	4b26      	ldr	r3, [pc, #152]	; (80006f0 <make_http_response_head+0x158>)
 8000656:	61fb      	str	r3, [r7, #28]
 8000658:	e00d      	b.n	8000676 <make_http_response_head+0xde>
	else if (type == PTYPE_EOT)		head = RES_EOTHEAD_OK;
 800065a:	7afb      	ldrb	r3, [r7, #11]
 800065c:	2b17      	cmp	r3, #23
 800065e:	d102      	bne.n	8000666 <make_http_response_head+0xce>
 8000660:	4b24      	ldr	r3, [pc, #144]	; (80006f4 <make_http_response_head+0x15c>)
 8000662:	61fb      	str	r3, [r7, #28]
 8000664:	e007      	b.n	8000676 <make_http_response_head+0xde>
	else if (type == PTYPE_SVG)		head = RES_SVGHEAD_OK;
 8000666:	7afb      	ldrb	r3, [r7, #11]
 8000668:	2b18      	cmp	r3, #24
 800066a:	d102      	bne.n	8000672 <make_http_response_head+0xda>
 800066c:	4b22      	ldr	r3, [pc, #136]	; (80006f8 <make_http_response_head+0x160>)
 800066e:	61fb      	str	r3, [r7, #28]
 8000670:	e001      	b.n	8000676 <make_http_response_head+0xde>
	{
		head = NULL;
		printf("\r\n\r\n-MAKE HEAD UNKNOWN-\r\n");
	}
#else
	else head = NULL;
 8000672:	2300      	movs	r3, #0
 8000674:	61fb      	str	r3, [r7, #28]
#endif	

	sprintf(tmp, "%ld", len);
 8000676:	f107 0310 	add.w	r3, r7, #16
 800067a:	687a      	ldr	r2, [r7, #4]
 800067c:	491f      	ldr	r1, [pc, #124]	; (80006fc <make_http_response_head+0x164>)
 800067e:	4618      	mov	r0, r3
 8000680:	f007 ffbe 	bl	8008600 <siprintf>
	strcpy(buf, head);
 8000684:	69f9      	ldr	r1, [r7, #28]
 8000686:	68f8      	ldr	r0, [r7, #12]
 8000688:	f007 ffe9 	bl	800865e <strcpy>
	strcat(buf, tmp);
 800068c:	f107 0310 	add.w	r3, r7, #16
 8000690:	4619      	mov	r1, r3
 8000692:	68f8      	ldr	r0, [r7, #12]
 8000694:	f007 ffd4 	bl	8008640 <strcat>
	strcat(buf, "\r\n\r\n");
 8000698:	68f8      	ldr	r0, [r7, #12]
 800069a:	f7ff fda3 	bl	80001e4 <strlen>
 800069e:	4603      	mov	r3, r0
 80006a0:	461a      	mov	r2, r3
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	4413      	add	r3, r2
 80006a6:	4a16      	ldr	r2, [pc, #88]	; (8000700 <make_http_response_head+0x168>)
 80006a8:	6810      	ldr	r0, [r2, #0]
 80006aa:	6018      	str	r0, [r3, #0]
 80006ac:	7912      	ldrb	r2, [r2, #4]
 80006ae:	711a      	strb	r2, [r3, #4]
}
 80006b0:	bf00      	nop
 80006b2:	3720      	adds	r7, #32
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	08009950 	.word	0x08009950
 80006bc:	080099a4 	.word	0x080099a4
 80006c0:	080099e0 	.word	0x080099e0
 80006c4:	08009a1c 	.word	0x08009a1c
 80006c8:	08009a58 	.word	0x08009a58
 80006cc:	08009aa8 	.word	0x08009aa8
 80006d0:	08009afc 	.word	0x08009afc
 80006d4:	08009b38 	.word	0x08009b38
 80006d8:	08009b7c 	.word	0x08009b7c
 80006dc:	08009bc4 	.word	0x08009bc4
 80006e0:	08009c00 	.word	0x08009c00
 80006e4:	08009c3c 	.word	0x08009c3c
 80006e8:	08009c7c 	.word	0x08009c7c
 80006ec:	08009ccc 	.word	0x08009ccc
 80006f0:	08009d1c 	.word	0x08009d1c
 80006f4:	08009d64 	.word	0x08009d64
 80006f8:	08009db4 	.word	0x08009db4
 80006fc:	08009df4 	.word	0x08009df4
 8000700:	08009df8 	.word	0x08009df8

08000704 <find_http_uri_type>:
 */ 
void find_http_uri_type(
	uint8_t * type, 	/**< type to be returned */
	uint8_t * buff		/**< file name */
	) 
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b084      	sub	sp, #16
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
 800070c:	6039      	str	r1, [r7, #0]
	/* Decide type according to extension*/

	char * buf;
	buf = (char *)buff;
 800070e:	683b      	ldr	r3, [r7, #0]
 8000710:	60fb      	str	r3, [r7, #12]

	if 	(strstr(buf, ".htm")	|| strstr(buf, ".html"))	*type = PTYPE_HTML;
 8000712:	499f      	ldr	r1, [pc, #636]	; (8000990 <find_http_uri_type+0x28c>)
 8000714:	68f8      	ldr	r0, [r7, #12]
 8000716:	f007 ffbd 	bl	8008694 <strstr>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d106      	bne.n	800072e <find_http_uri_type+0x2a>
 8000720:	499c      	ldr	r1, [pc, #624]	; (8000994 <find_http_uri_type+0x290>)
 8000722:	68f8      	ldr	r0, [r7, #12]
 8000724:	f007 ffb6 	bl	8008694 <strstr>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d003      	beq.n	8000736 <find_http_uri_type+0x32>
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	2201      	movs	r2, #1
 8000732:	701a      	strb	r2, [r3, #0]
 8000734:	e127      	b.n	8000986 <find_http_uri_type+0x282>
	else if (strstr(buf, ".gif"))							*type = PTYPE_GIF;
 8000736:	4998      	ldr	r1, [pc, #608]	; (8000998 <find_http_uri_type+0x294>)
 8000738:	68f8      	ldr	r0, [r7, #12]
 800073a:	f007 ffab 	bl	8008694 <strstr>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d003      	beq.n	800074c <find_http_uri_type+0x48>
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	2202      	movs	r2, #2
 8000748:	701a      	strb	r2, [r3, #0]
	else if (strstr(buf, ".otf") 	|| strstr(buf,".OTF"))	*type = PTYPE_OTF;
	else if (strstr(buf, ".woff") 	|| strstr(buf,".WOFF"))	*type = PTYPE_WOFF;
	else if (strstr(buf, ".eot") 	|| strstr(buf,".EOT"))	*type = PTYPE_EOT;
	else if (strstr(buf, ".svg") 	|| strstr(buf,".SVG"))	*type = PTYPE_SVG;
	else 													*type = PTYPE_ERR;
}
 800074a:	e11c      	b.n	8000986 <find_http_uri_type+0x282>
	else if (strstr(buf, ".text") 	|| strstr(buf,".txt"))	*type = PTYPE_TEXT;
 800074c:	4993      	ldr	r1, [pc, #588]	; (800099c <find_http_uri_type+0x298>)
 800074e:	68f8      	ldr	r0, [r7, #12]
 8000750:	f007 ffa0 	bl	8008694 <strstr>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d106      	bne.n	8000768 <find_http_uri_type+0x64>
 800075a:	4991      	ldr	r1, [pc, #580]	; (80009a0 <find_http_uri_type+0x29c>)
 800075c:	68f8      	ldr	r0, [r7, #12]
 800075e:	f007 ff99 	bl	8008694 <strstr>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d003      	beq.n	8000770 <find_http_uri_type+0x6c>
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	2203      	movs	r2, #3
 800076c:	701a      	strb	r2, [r3, #0]
 800076e:	e10a      	b.n	8000986 <find_http_uri_type+0x282>
	else if (strstr(buf, ".jpeg") 	|| strstr(buf,".jpg"))	*type = PTYPE_JPEG;
 8000770:	498c      	ldr	r1, [pc, #560]	; (80009a4 <find_http_uri_type+0x2a0>)
 8000772:	68f8      	ldr	r0, [r7, #12]
 8000774:	f007 ff8e 	bl	8008694 <strstr>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d106      	bne.n	800078c <find_http_uri_type+0x88>
 800077e:	498a      	ldr	r1, [pc, #552]	; (80009a8 <find_http_uri_type+0x2a4>)
 8000780:	68f8      	ldr	r0, [r7, #12]
 8000782:	f007 ff87 	bl	8008694 <strstr>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d003      	beq.n	8000794 <find_http_uri_type+0x90>
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	2204      	movs	r2, #4
 8000790:	701a      	strb	r2, [r3, #0]
 8000792:	e0f8      	b.n	8000986 <find_http_uri_type+0x282>
	else if (strstr(buf, ".swf")) 							*type = PTYPE_FLASH;
 8000794:	4985      	ldr	r1, [pc, #532]	; (80009ac <find_http_uri_type+0x2a8>)
 8000796:	68f8      	ldr	r0, [r7, #12]
 8000798:	f007 ff7c 	bl	8008694 <strstr>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d003      	beq.n	80007aa <find_http_uri_type+0xa6>
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	2205      	movs	r2, #5
 80007a6:	701a      	strb	r2, [r3, #0]
}
 80007a8:	e0ed      	b.n	8000986 <find_http_uri_type+0x282>
	else if (strstr(buf, ".cgi") 	|| strstr(buf,".CGI"))	*type = PTYPE_CGI;
 80007aa:	4981      	ldr	r1, [pc, #516]	; (80009b0 <find_http_uri_type+0x2ac>)
 80007ac:	68f8      	ldr	r0, [r7, #12]
 80007ae:	f007 ff71 	bl	8008694 <strstr>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d106      	bne.n	80007c6 <find_http_uri_type+0xc2>
 80007b8:	497e      	ldr	r1, [pc, #504]	; (80009b4 <find_http_uri_type+0x2b0>)
 80007ba:	68f8      	ldr	r0, [r7, #12]
 80007bc:	f007 ff6a 	bl	8008694 <strstr>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d003      	beq.n	80007ce <find_http_uri_type+0xca>
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	2208      	movs	r2, #8
 80007ca:	701a      	strb	r2, [r3, #0]
 80007cc:	e0db      	b.n	8000986 <find_http_uri_type+0x282>
	else if (strstr(buf, ".json") 	|| strstr(buf,".JSON"))	*type = PTYPE_JSON;
 80007ce:	497a      	ldr	r1, [pc, #488]	; (80009b8 <find_http_uri_type+0x2b4>)
 80007d0:	68f8      	ldr	r0, [r7, #12]
 80007d2:	f007 ff5f 	bl	8008694 <strstr>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d106      	bne.n	80007ea <find_http_uri_type+0xe6>
 80007dc:	4977      	ldr	r1, [pc, #476]	; (80009bc <find_http_uri_type+0x2b8>)
 80007de:	68f8      	ldr	r0, [r7, #12]
 80007e0:	f007 ff58 	bl	8008694 <strstr>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d003      	beq.n	80007f2 <find_http_uri_type+0xee>
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	220c      	movs	r2, #12
 80007ee:	701a      	strb	r2, [r3, #0]
 80007f0:	e0c9      	b.n	8000986 <find_http_uri_type+0x282>
	else if (strstr(buf, ".js") 	|| strstr(buf,".JS"))	*type = PTYPE_JS;
 80007f2:	4973      	ldr	r1, [pc, #460]	; (80009c0 <find_http_uri_type+0x2bc>)
 80007f4:	68f8      	ldr	r0, [r7, #12]
 80007f6:	f007 ff4d 	bl	8008694 <strstr>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d106      	bne.n	800080e <find_http_uri_type+0x10a>
 8000800:	4970      	ldr	r1, [pc, #448]	; (80009c4 <find_http_uri_type+0x2c0>)
 8000802:	68f8      	ldr	r0, [r7, #12]
 8000804:	f007 ff46 	bl	8008694 <strstr>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d003      	beq.n	8000816 <find_http_uri_type+0x112>
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	220b      	movs	r2, #11
 8000812:	701a      	strb	r2, [r3, #0]
 8000814:	e0b7      	b.n	8000986 <find_http_uri_type+0x282>
	else if (strstr(buf, ".CGI") 	|| strstr(buf,".cgi"))	*type = PTYPE_CGI;
 8000816:	4967      	ldr	r1, [pc, #412]	; (80009b4 <find_http_uri_type+0x2b0>)
 8000818:	68f8      	ldr	r0, [r7, #12]
 800081a:	f007 ff3b 	bl	8008694 <strstr>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d106      	bne.n	8000832 <find_http_uri_type+0x12e>
 8000824:	4962      	ldr	r1, [pc, #392]	; (80009b0 <find_http_uri_type+0x2ac>)
 8000826:	68f8      	ldr	r0, [r7, #12]
 8000828:	f007 ff34 	bl	8008694 <strstr>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d003      	beq.n	800083a <find_http_uri_type+0x136>
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	2208      	movs	r2, #8
 8000836:	701a      	strb	r2, [r3, #0]
 8000838:	e0a5      	b.n	8000986 <find_http_uri_type+0x282>
	else if (strstr(buf, ".xml") 	|| strstr(buf,".XML"))	*type = PTYPE_XML;
 800083a:	4963      	ldr	r1, [pc, #396]	; (80009c8 <find_http_uri_type+0x2c4>)
 800083c:	68f8      	ldr	r0, [r7, #12]
 800083e:	f007 ff29 	bl	8008694 <strstr>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d106      	bne.n	8000856 <find_http_uri_type+0x152>
 8000848:	4960      	ldr	r1, [pc, #384]	; (80009cc <find_http_uri_type+0x2c8>)
 800084a:	68f8      	ldr	r0, [r7, #12]
 800084c:	f007 ff22 	bl	8008694 <strstr>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d003      	beq.n	800085e <find_http_uri_type+0x15a>
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	2209      	movs	r2, #9
 800085a:	701a      	strb	r2, [r3, #0]
 800085c:	e093      	b.n	8000986 <find_http_uri_type+0x282>
	else if (strstr(buf, ".css") 	|| strstr(buf,".CSS"))	*type = PTYPE_CSS;
 800085e:	495c      	ldr	r1, [pc, #368]	; (80009d0 <find_http_uri_type+0x2cc>)
 8000860:	68f8      	ldr	r0, [r7, #12]
 8000862:	f007 ff17 	bl	8008694 <strstr>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d106      	bne.n	800087a <find_http_uri_type+0x176>
 800086c:	4959      	ldr	r1, [pc, #356]	; (80009d4 <find_http_uri_type+0x2d0>)
 800086e:	68f8      	ldr	r0, [r7, #12]
 8000870:	f007 ff10 	bl	8008694 <strstr>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d003      	beq.n	8000882 <find_http_uri_type+0x17e>
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	220a      	movs	r2, #10
 800087e:	701a      	strb	r2, [r3, #0]
 8000880:	e081      	b.n	8000986 <find_http_uri_type+0x282>
	else if (strstr(buf, ".png") 	|| strstr(buf,".PNG"))	*type = PTYPE_PNG;
 8000882:	4955      	ldr	r1, [pc, #340]	; (80009d8 <find_http_uri_type+0x2d4>)
 8000884:	68f8      	ldr	r0, [r7, #12]
 8000886:	f007 ff05 	bl	8008694 <strstr>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d106      	bne.n	800089e <find_http_uri_type+0x19a>
 8000890:	4952      	ldr	r1, [pc, #328]	; (80009dc <find_http_uri_type+0x2d8>)
 8000892:	68f8      	ldr	r0, [r7, #12]
 8000894:	f007 fefe 	bl	8008694 <strstr>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d003      	beq.n	80008a6 <find_http_uri_type+0x1a2>
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	220d      	movs	r2, #13
 80008a2:	701a      	strb	r2, [r3, #0]
 80008a4:	e06f      	b.n	8000986 <find_http_uri_type+0x282>
	else if (strstr(buf, ".ico") 	|| strstr(buf,".ICO"))	*type = PTYPE_ICO;
 80008a6:	494e      	ldr	r1, [pc, #312]	; (80009e0 <find_http_uri_type+0x2dc>)
 80008a8:	68f8      	ldr	r0, [r7, #12]
 80008aa:	f007 fef3 	bl	8008694 <strstr>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d106      	bne.n	80008c2 <find_http_uri_type+0x1be>
 80008b4:	494b      	ldr	r1, [pc, #300]	; (80009e4 <find_http_uri_type+0x2e0>)
 80008b6:	68f8      	ldr	r0, [r7, #12]
 80008b8:	f007 feec 	bl	8008694 <strstr>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d003      	beq.n	80008ca <find_http_uri_type+0x1c6>
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	220e      	movs	r2, #14
 80008c6:	701a      	strb	r2, [r3, #0]
 80008c8:	e05d      	b.n	8000986 <find_http_uri_type+0x282>
	else if (strstr(buf, ".ttf") 	|| strstr(buf,".TTF"))	*type = PTYPE_TTF;
 80008ca:	4947      	ldr	r1, [pc, #284]	; (80009e8 <find_http_uri_type+0x2e4>)
 80008cc:	68f8      	ldr	r0, [r7, #12]
 80008ce:	f007 fee1 	bl	8008694 <strstr>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d106      	bne.n	80008e6 <find_http_uri_type+0x1e2>
 80008d8:	4944      	ldr	r1, [pc, #272]	; (80009ec <find_http_uri_type+0x2e8>)
 80008da:	68f8      	ldr	r0, [r7, #12]
 80008dc:	f007 feda 	bl	8008694 <strstr>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d003      	beq.n	80008ee <find_http_uri_type+0x1ea>
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	2214      	movs	r2, #20
 80008ea:	701a      	strb	r2, [r3, #0]
 80008ec:	e04b      	b.n	8000986 <find_http_uri_type+0x282>
	else if (strstr(buf, ".otf") 	|| strstr(buf,".OTF"))	*type = PTYPE_OTF;
 80008ee:	4940      	ldr	r1, [pc, #256]	; (80009f0 <find_http_uri_type+0x2ec>)
 80008f0:	68f8      	ldr	r0, [r7, #12]
 80008f2:	f007 fecf 	bl	8008694 <strstr>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d106      	bne.n	800090a <find_http_uri_type+0x206>
 80008fc:	493d      	ldr	r1, [pc, #244]	; (80009f4 <find_http_uri_type+0x2f0>)
 80008fe:	68f8      	ldr	r0, [r7, #12]
 8000900:	f007 fec8 	bl	8008694 <strstr>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d003      	beq.n	8000912 <find_http_uri_type+0x20e>
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	2215      	movs	r2, #21
 800090e:	701a      	strb	r2, [r3, #0]
 8000910:	e039      	b.n	8000986 <find_http_uri_type+0x282>
	else if (strstr(buf, ".woff") 	|| strstr(buf,".WOFF"))	*type = PTYPE_WOFF;
 8000912:	4939      	ldr	r1, [pc, #228]	; (80009f8 <find_http_uri_type+0x2f4>)
 8000914:	68f8      	ldr	r0, [r7, #12]
 8000916:	f007 febd 	bl	8008694 <strstr>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d106      	bne.n	800092e <find_http_uri_type+0x22a>
 8000920:	4936      	ldr	r1, [pc, #216]	; (80009fc <find_http_uri_type+0x2f8>)
 8000922:	68f8      	ldr	r0, [r7, #12]
 8000924:	f007 feb6 	bl	8008694 <strstr>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d003      	beq.n	8000936 <find_http_uri_type+0x232>
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	2216      	movs	r2, #22
 8000932:	701a      	strb	r2, [r3, #0]
 8000934:	e027      	b.n	8000986 <find_http_uri_type+0x282>
	else if (strstr(buf, ".eot") 	|| strstr(buf,".EOT"))	*type = PTYPE_EOT;
 8000936:	4932      	ldr	r1, [pc, #200]	; (8000a00 <find_http_uri_type+0x2fc>)
 8000938:	68f8      	ldr	r0, [r7, #12]
 800093a:	f007 feab 	bl	8008694 <strstr>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d106      	bne.n	8000952 <find_http_uri_type+0x24e>
 8000944:	492f      	ldr	r1, [pc, #188]	; (8000a04 <find_http_uri_type+0x300>)
 8000946:	68f8      	ldr	r0, [r7, #12]
 8000948:	f007 fea4 	bl	8008694 <strstr>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d003      	beq.n	800095a <find_http_uri_type+0x256>
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	2217      	movs	r2, #23
 8000956:	701a      	strb	r2, [r3, #0]
 8000958:	e015      	b.n	8000986 <find_http_uri_type+0x282>
	else if (strstr(buf, ".svg") 	|| strstr(buf,".SVG"))	*type = PTYPE_SVG;
 800095a:	492b      	ldr	r1, [pc, #172]	; (8000a08 <find_http_uri_type+0x304>)
 800095c:	68f8      	ldr	r0, [r7, #12]
 800095e:	f007 fe99 	bl	8008694 <strstr>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d106      	bne.n	8000976 <find_http_uri_type+0x272>
 8000968:	4928      	ldr	r1, [pc, #160]	; (8000a0c <find_http_uri_type+0x308>)
 800096a:	68f8      	ldr	r0, [r7, #12]
 800096c:	f007 fe92 	bl	8008694 <strstr>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d003      	beq.n	800097e <find_http_uri_type+0x27a>
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	2218      	movs	r2, #24
 800097a:	701a      	strb	r2, [r3, #0]
 800097c:	e003      	b.n	8000986 <find_http_uri_type+0x282>
	else 													*type = PTYPE_ERR;
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	2200      	movs	r2, #0
 8000982:	701a      	strb	r2, [r3, #0]
}
 8000984:	e7ff      	b.n	8000986 <find_http_uri_type+0x282>
 8000986:	bf00      	nop
 8000988:	3710      	adds	r7, #16
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	08009e00 	.word	0x08009e00
 8000994:	08009e08 	.word	0x08009e08
 8000998:	08009e10 	.word	0x08009e10
 800099c:	08009e18 	.word	0x08009e18
 80009a0:	08009e20 	.word	0x08009e20
 80009a4:	08009e28 	.word	0x08009e28
 80009a8:	08009e30 	.word	0x08009e30
 80009ac:	08009e38 	.word	0x08009e38
 80009b0:	08009e40 	.word	0x08009e40
 80009b4:	08009e48 	.word	0x08009e48
 80009b8:	08009e50 	.word	0x08009e50
 80009bc:	08009e58 	.word	0x08009e58
 80009c0:	08009e60 	.word	0x08009e60
 80009c4:	08009e64 	.word	0x08009e64
 80009c8:	08009e68 	.word	0x08009e68
 80009cc:	08009e70 	.word	0x08009e70
 80009d0:	08009e78 	.word	0x08009e78
 80009d4:	08009e80 	.word	0x08009e80
 80009d8:	08009e88 	.word	0x08009e88
 80009dc:	08009e90 	.word	0x08009e90
 80009e0:	08009e98 	.word	0x08009e98
 80009e4:	08009ea0 	.word	0x08009ea0
 80009e8:	08009ea8 	.word	0x08009ea8
 80009ec:	08009eb0 	.word	0x08009eb0
 80009f0:	08009eb8 	.word	0x08009eb8
 80009f4:	08009ec0 	.word	0x08009ec0
 80009f8:	08009ec8 	.word	0x08009ec8
 80009fc:	08009ed0 	.word	0x08009ed0
 8000a00:	08009ed8 	.word	0x08009ed8
 8000a04:	08009ee0 	.word	0x08009ee0
 8000a08:	08009ee8 	.word	0x08009ee8
 8000a0c:	08009ef0 	.word	0x08009ef0

08000a10 <parse_http_request>:
 */ 
void parse_http_request(
	st_http_request * request, 	/**< request to be returned */
	uint8_t * buf				/**< pointer to be parsed */
	)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b084      	sub	sp, #16
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
 8000a18:	6039      	str	r1, [r7, #0]
  char * nexttok;
  nexttok = strtok((char*)buf," ");
 8000a1a:	4932      	ldr	r1, [pc, #200]	; (8000ae4 <parse_http_request+0xd4>)
 8000a1c:	6838      	ldr	r0, [r7, #0]
 8000a1e:	f007 fe51 	bl	80086c4 <strtok>
 8000a22:	60f8      	str	r0, [r7, #12]
  if(!nexttok)
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d103      	bne.n	8000a32 <parse_http_request+0x22>
  {
    request->METHOD = METHOD_ERR;
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	701a      	strb	r2, [r3, #0]
    return;
 8000a30:	e054      	b.n	8000adc <parse_http_request+0xcc>
  }
  if(!strcmp(nexttok, "GET") || !strcmp(nexttok,"get"))
 8000a32:	492d      	ldr	r1, [pc, #180]	; (8000ae8 <parse_http_request+0xd8>)
 8000a34:	68f8      	ldr	r0, [r7, #12]
 8000a36:	f7ff fbcb 	bl	80001d0 <strcmp>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d006      	beq.n	8000a4e <parse_http_request+0x3e>
 8000a40:	492a      	ldr	r1, [pc, #168]	; (8000aec <parse_http_request+0xdc>)
 8000a42:	68f8      	ldr	r0, [r7, #12]
 8000a44:	f7ff fbc4 	bl	80001d0 <strcmp>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d108      	bne.n	8000a60 <parse_http_request+0x50>
  {
    request->METHOD = METHOD_GET;
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	2201      	movs	r2, #1
 8000a52:	701a      	strb	r2, [r3, #0]
    nexttok = strtok(NULL," ");
 8000a54:	4923      	ldr	r1, [pc, #140]	; (8000ae4 <parse_http_request+0xd4>)
 8000a56:	2000      	movs	r0, #0
 8000a58:	f007 fe34 	bl	80086c4 <strtok>
 8000a5c:	60f8      	str	r0, [r7, #12]
 8000a5e:	e030      	b.n	8000ac2 <parse_http_request+0xb2>

  }
  else if (!strcmp(nexttok, "HEAD") || !strcmp(nexttok,"head"))
 8000a60:	4923      	ldr	r1, [pc, #140]	; (8000af0 <parse_http_request+0xe0>)
 8000a62:	68f8      	ldr	r0, [r7, #12]
 8000a64:	f7ff fbb4 	bl	80001d0 <strcmp>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d006      	beq.n	8000a7c <parse_http_request+0x6c>
 8000a6e:	4921      	ldr	r1, [pc, #132]	; (8000af4 <parse_http_request+0xe4>)
 8000a70:	68f8      	ldr	r0, [r7, #12]
 8000a72:	f7ff fbad 	bl	80001d0 <strcmp>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d108      	bne.n	8000a8e <parse_http_request+0x7e>
  {
    request->METHOD = METHOD_HEAD;
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	2202      	movs	r2, #2
 8000a80:	701a      	strb	r2, [r3, #0]
    nexttok = strtok(NULL," ");
 8000a82:	4918      	ldr	r1, [pc, #96]	; (8000ae4 <parse_http_request+0xd4>)
 8000a84:	2000      	movs	r0, #0
 8000a86:	f007 fe1d 	bl	80086c4 <strtok>
 8000a8a:	60f8      	str	r0, [r7, #12]
 8000a8c:	e019      	b.n	8000ac2 <parse_http_request+0xb2>

  }
  else if (!strcmp(nexttok, "POST") || !strcmp(nexttok,"post"))
 8000a8e:	491a      	ldr	r1, [pc, #104]	; (8000af8 <parse_http_request+0xe8>)
 8000a90:	68f8      	ldr	r0, [r7, #12]
 8000a92:	f7ff fb9d 	bl	80001d0 <strcmp>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d006      	beq.n	8000aaa <parse_http_request+0x9a>
 8000a9c:	4917      	ldr	r1, [pc, #92]	; (8000afc <parse_http_request+0xec>)
 8000a9e:	68f8      	ldr	r0, [r7, #12]
 8000aa0:	f7ff fb96 	bl	80001d0 <strcmp>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d108      	bne.n	8000abc <parse_http_request+0xac>
  {
    nexttok = strtok(NULL,"\0");
 8000aaa:	4915      	ldr	r1, [pc, #84]	; (8000b00 <parse_http_request+0xf0>)
 8000aac:	2000      	movs	r0, #0
 8000aae:	f007 fe09 	bl	80086c4 <strtok>
 8000ab2:	60f8      	str	r0, [r7, #12]
    request->METHOD = METHOD_POST;
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	2203      	movs	r2, #3
 8000ab8:	701a      	strb	r2, [r3, #0]
 8000aba:	e002      	b.n	8000ac2 <parse_http_request+0xb2>
  }
  else
  {
    request->METHOD = METHOD_ERR;
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	2200      	movs	r2, #0
 8000ac0:	701a      	strb	r2, [r3, #0]
  }

  if(!nexttok)
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d103      	bne.n	8000ad0 <parse_http_request+0xc0>
  {
    request->METHOD = METHOD_ERR;
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	2200      	movs	r2, #0
 8000acc:	701a      	strb	r2, [r3, #0]
    return;
 8000ace:	e005      	b.n	8000adc <parse_http_request+0xcc>
  }
  strcpy((char *)request->URI, nexttok);
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	3302      	adds	r3, #2
 8000ad4:	68f9      	ldr	r1, [r7, #12]
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f007 fdc1 	bl	800865e <strcpy>
}
 8000adc:	3710      	adds	r7, #16
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	08009ef8 	.word	0x08009ef8
 8000ae8:	08009efc 	.word	0x08009efc
 8000aec:	08009f00 	.word	0x08009f00
 8000af0:	08009f04 	.word	0x08009f04
 8000af4:	08009f0c 	.word	0x08009f0c
 8000af8:	08009f14 	.word	0x08009f14
 8000afc:	08009f1c 	.word	0x08009f1c
 8000b00:	08009f24 	.word	0x08009f24

08000b04 <get_http_uri_name>:
	return uri_name;
}
#else

uint8_t get_http_uri_name(uint8_t * uri, uint8_t * uri_buf)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b084      	sub	sp, #16
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
 8000b0c:	6039      	str	r1, [r7, #0]
	uint8_t * uri_ptr;
	if(!uri) return 0;
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d101      	bne.n	8000b18 <get_http_uri_name+0x14>
 8000b14:	2300      	movs	r3, #0
 8000b16:	e017      	b.n	8000b48 <get_http_uri_name+0x44>

	strcpy((char *)uri_buf, (char *)uri);
 8000b18:	6879      	ldr	r1, [r7, #4]
 8000b1a:	6838      	ldr	r0, [r7, #0]
 8000b1c:	f007 fd9f 	bl	800865e <strcpy>

	uri_ptr = (uint8_t *)strtok((char *)uri_buf, " ?");
 8000b20:	490b      	ldr	r1, [pc, #44]	; (8000b50 <get_http_uri_name+0x4c>)
 8000b22:	6838      	ldr	r0, [r7, #0]
 8000b24:	f007 fdce 	bl	80086c4 <strtok>
 8000b28:	60f8      	str	r0, [r7, #12]

	if(strcmp((char *)uri_ptr,"/")) uri_ptr++;
 8000b2a:	490a      	ldr	r1, [pc, #40]	; (8000b54 <get_http_uri_name+0x50>)
 8000b2c:	68f8      	ldr	r0, [r7, #12]
 8000b2e:	f7ff fb4f 	bl	80001d0 <strcmp>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d002      	beq.n	8000b3e <get_http_uri_name+0x3a>
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	3301      	adds	r3, #1
 8000b3c:	60fb      	str	r3, [r7, #12]
	strcpy((char *)uri_buf, (char *)uri_ptr);
 8000b3e:	68f9      	ldr	r1, [r7, #12]
 8000b40:	6838      	ldr	r0, [r7, #0]
 8000b42:	f007 fd8c 	bl	800865e <strcpy>

#ifdef _HTTPPARSER_DEBUG_
	printf("  uri_name = %s\r\n", uri_buf);
#endif

	return 1;
 8000b46:	2301      	movs	r3, #1
}
 8000b48:	4618      	mov	r0, r3
 8000b4a:	3710      	adds	r7, #16
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	08009f40 	.word	0x08009f40
 8000b54:	08009f44 	.word	0x08009f44

08000b58 <mid>:
 * @param s2 The end string to be researched
 * @param sub The string between s1 and s2
 * @return The length value atfer working
 */
void mid(char* src, char* s1, char* s2, char* sub)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b088      	sub	sp, #32
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	60f8      	str	r0, [r7, #12]
 8000b60:	60b9      	str	r1, [r7, #8]
 8000b62:	607a      	str	r2, [r7, #4]
 8000b64:	603b      	str	r3, [r7, #0]
	char* sub1;
	char* sub2;
	uint16_t n;

	sub1=strstr((char*)src,(char*)s1);
 8000b66:	68b9      	ldr	r1, [r7, #8]
 8000b68:	68f8      	ldr	r0, [r7, #12]
 8000b6a:	f007 fd93 	bl	8008694 <strstr>
 8000b6e:	61f8      	str	r0, [r7, #28]
	sub1+=strlen((char*)s1);
 8000b70:	68b8      	ldr	r0, [r7, #8]
 8000b72:	f7ff fb37 	bl	80001e4 <strlen>
 8000b76:	4602      	mov	r2, r0
 8000b78:	69fb      	ldr	r3, [r7, #28]
 8000b7a:	4413      	add	r3, r2
 8000b7c:	61fb      	str	r3, [r7, #28]
	sub2=strstr((char*)sub1,(char*)s2);
 8000b7e:	6879      	ldr	r1, [r7, #4]
 8000b80:	69f8      	ldr	r0, [r7, #28]
 8000b82:	f007 fd87 	bl	8008694 <strstr>
 8000b86:	61b8      	str	r0, [r7, #24]

	n=sub2-sub1;
 8000b88:	69ba      	ldr	r2, [r7, #24]
 8000b8a:	69fb      	ldr	r3, [r7, #28]
 8000b8c:	1ad3      	subs	r3, r2, r3
 8000b8e:	82fb      	strh	r3, [r7, #22]
	strncpy((char*)sub,(char*)sub1,n);
 8000b90:	8afb      	ldrh	r3, [r7, #22]
 8000b92:	461a      	mov	r2, r3
 8000b94:	69f9      	ldr	r1, [r7, #28]
 8000b96:	6838      	ldr	r0, [r7, #0]
 8000b98:	f007 fd69 	bl	800866e <strncpy>
	sub[n]='\0';
 8000b9c:	8afb      	ldrh	r3, [r7, #22]
 8000b9e:	683a      	ldr	r2, [r7, #0]
 8000ba0:	4413      	add	r3, r2
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	701a      	strb	r2, [r3, #0]
}
 8000ba6:	bf00      	nop
 8000ba8:	3720      	adds	r7, #32
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}

08000bae <default_mcu_reset>:

/*****************************************************************************
 * Public functions
 ****************************************************************************/
// Callback functions definition: MCU Reset / WDT Reset
void default_mcu_reset(void) {;}
 8000bae:	b480      	push	{r7}
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	bf00      	nop
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr

08000bbc <default_wdt_reset>:
void default_wdt_reset(void) {;}
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
 8000bc0:	bf00      	nop
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr
	...

08000bcc <httpServer_Sockinit>:
void (*HTTPServer_ReStart)(void) = default_mcu_reset;
void (*HTTPServer_WDT_Reset)(void) = default_wdt_reset;

void httpServer_Sockinit(uint8_t cnt, uint8_t * socklist)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b085      	sub	sp, #20
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	6039      	str	r1, [r7, #0]
 8000bd6:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	for(i = 0; i < cnt; i++)
 8000bd8:	2300      	movs	r3, #0
 8000bda:	73fb      	strb	r3, [r7, #15]
 8000bdc:	e009      	b.n	8000bf2 <httpServer_Sockinit+0x26>
	{
		// Mapping the H/W socket numbers to the sequential index numbers
		HTTPSock_Num[i] = socklist[i];
 8000bde:	7bfb      	ldrb	r3, [r7, #15]
 8000be0:	683a      	ldr	r2, [r7, #0]
 8000be2:	441a      	add	r2, r3
 8000be4:	7bfb      	ldrb	r3, [r7, #15]
 8000be6:	7811      	ldrb	r1, [r2, #0]
 8000be8:	4a07      	ldr	r2, [pc, #28]	; (8000c08 <httpServer_Sockinit+0x3c>)
 8000bea:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i < cnt; i++)
 8000bec:	7bfb      	ldrb	r3, [r7, #15]
 8000bee:	3301      	adds	r3, #1
 8000bf0:	73fb      	strb	r3, [r7, #15]
 8000bf2:	7bfa      	ldrb	r2, [r7, #15]
 8000bf4:	79fb      	ldrb	r3, [r7, #7]
 8000bf6:	429a      	cmp	r2, r3
 8000bf8:	d3f1      	bcc.n	8000bde <httpServer_Sockinit+0x12>
	}
}
 8000bfa:	bf00      	nop
 8000bfc:	bf00      	nop
 8000bfe:	3714      	adds	r7, #20
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr
 8000c08:	2000011c 	.word	0x2000011c

08000c0c <getHTTPSocketNum>:

static uint8_t getHTTPSocketNum(uint8_t seqnum)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b083      	sub	sp, #12
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	4603      	mov	r3, r0
 8000c14:	71fb      	strb	r3, [r7, #7]
	// Return the 'H/W socket number' corresponding to the index number
	return HTTPSock_Num[seqnum];
 8000c16:	79fb      	ldrb	r3, [r7, #7]
 8000c18:	4a03      	ldr	r2, [pc, #12]	; (8000c28 <getHTTPSocketNum+0x1c>)
 8000c1a:	5cd3      	ldrb	r3, [r2, r3]
}
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	370c      	adds	r7, #12
 8000c20:	46bd      	mov	sp, r7
 8000c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c26:	4770      	bx	lr
 8000c28:	2000011c 	.word	0x2000011c

08000c2c <getHTTPSequenceNum>:

static int8_t getHTTPSequenceNum(uint8_t socket)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b085      	sub	sp, #20
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	4603      	mov	r3, r0
 8000c34:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	for(i = 0; i < _WIZCHIP_SOCK_NUM_; i++)
 8000c36:	2300      	movs	r3, #0
 8000c38:	73fb      	strb	r3, [r7, #15]
 8000c3a:	e00b      	b.n	8000c54 <getHTTPSequenceNum+0x28>
		if(HTTPSock_Num[i] == socket) return i;
 8000c3c:	7bfb      	ldrb	r3, [r7, #15]
 8000c3e:	4a0b      	ldr	r2, [pc, #44]	; (8000c6c <getHTTPSequenceNum+0x40>)
 8000c40:	5cd3      	ldrb	r3, [r2, r3]
 8000c42:	79fa      	ldrb	r2, [r7, #7]
 8000c44:	429a      	cmp	r2, r3
 8000c46:	d102      	bne.n	8000c4e <getHTTPSequenceNum+0x22>
 8000c48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c4c:	e007      	b.n	8000c5e <getHTTPSequenceNum+0x32>
	for(i = 0; i < _WIZCHIP_SOCK_NUM_; i++)
 8000c4e:	7bfb      	ldrb	r3, [r7, #15]
 8000c50:	3301      	adds	r3, #1
 8000c52:	73fb      	strb	r3, [r7, #15]
 8000c54:	7bfb      	ldrb	r3, [r7, #15]
 8000c56:	2b07      	cmp	r3, #7
 8000c58:	d9f0      	bls.n	8000c3c <getHTTPSequenceNum+0x10>

	return -1;
 8000c5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	3714      	adds	r7, #20
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	2000011c 	.word	0x2000011c

08000c70 <httpServer_init>:

void httpServer_init(uint8_t * tx_buf, uint8_t * rx_buf, uint8_t cnt, uint8_t * socklist)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b084      	sub	sp, #16
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	60f8      	str	r0, [r7, #12]
 8000c78:	60b9      	str	r1, [r7, #8]
 8000c7a:	603b      	str	r3, [r7, #0]
 8000c7c:	4613      	mov	r3, r2
 8000c7e:	71fb      	strb	r3, [r7, #7]
	// User's shared buffer
	pHTTP_TX = tx_buf;
 8000c80:	4a07      	ldr	r2, [pc, #28]	; (8000ca0 <httpServer_init+0x30>)
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	6013      	str	r3, [r2, #0]
	pHTTP_RX = rx_buf;
 8000c86:	4a07      	ldr	r2, [pc, #28]	; (8000ca4 <httpServer_init+0x34>)
 8000c88:	68bb      	ldr	r3, [r7, #8]
 8000c8a:	6013      	str	r3, [r2, #0]

	// H/W Socket number mapping
	httpServer_Sockinit(cnt, socklist);
 8000c8c:	79fb      	ldrb	r3, [r7, #7]
 8000c8e:	6839      	ldr	r1, [r7, #0]
 8000c90:	4618      	mov	r0, r3
 8000c92:	f7ff ff9b 	bl	8000bcc <httpServer_Sockinit>
}
 8000c96:	bf00      	nop
 8000c98:	3710      	adds	r7, #16
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	20000a28 	.word	0x20000a28
 8000ca4:	20000a2c 	.word	0x20000a2c

08000ca8 <reg_httpServer_cbfunc>:


/* Register the call back functions for HTTP Server */
void reg_httpServer_cbfunc(void(*mcu_reset)(void), void(*wdt_reset)(void))
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b083      	sub	sp, #12
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
 8000cb0:	6039      	str	r1, [r7, #0]
	// Callback: HW Reset and WDT reset function for each MCU platforms
	if(mcu_reset) HTTPServer_ReStart = mcu_reset;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d002      	beq.n	8000cbe <reg_httpServer_cbfunc+0x16>
 8000cb8:	4a07      	ldr	r2, [pc, #28]	; (8000cd8 <reg_httpServer_cbfunc+0x30>)
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	6013      	str	r3, [r2, #0]
	if(wdt_reset) HTTPServer_WDT_Reset = wdt_reset;
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d002      	beq.n	8000cca <reg_httpServer_cbfunc+0x22>
 8000cc4:	4a05      	ldr	r2, [pc, #20]	; (8000cdc <reg_httpServer_cbfunc+0x34>)
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	6013      	str	r3, [r2, #0]
}
 8000cca:	bf00      	nop
 8000ccc:	370c      	adds	r7, #12
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop
 8000cd8:	20000010 	.word	0x20000010
 8000cdc:	20000014 	.word	0x20000014

08000ce0 <httpServer_run>:


void httpServer_run(uint8_t seqnum)
{
 8000ce0:	b590      	push	{r4, r7, lr}
 8000ce2:	b089      	sub	sp, #36	; 0x24
 8000ce4:	af02      	add	r7, sp, #8
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	71fb      	strb	r3, [r7, #7]
	uint8_t s;	// socket number
	uint16_t len;
	uint32_t gettime = 0;
 8000cea:	2300      	movs	r3, #0
 8000cec:	613b      	str	r3, [r7, #16]

#ifdef _HTTPSERVER_DEBUG_
	uint8_t destip[4] = {0, };
 8000cee:	2300      	movs	r3, #0
 8000cf0:	60bb      	str	r3, [r7, #8]
	uint16_t destport = 0;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	81fb      	strh	r3, [r7, #14]
#endif

	http_request = (st_http_request *)pHTTP_RX;		// Structure of HTTP Request
 8000cf6:	4bc5      	ldr	r3, [pc, #788]	; (800100c <httpServer_run+0x32c>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	4ac5      	ldr	r2, [pc, #788]	; (8001010 <httpServer_run+0x330>)
 8000cfc:	6013      	str	r3, [r2, #0]
	parsed_http_request = (st_http_request *)pHTTP_TX;
 8000cfe:	4bc5      	ldr	r3, [pc, #788]	; (8001014 <httpServer_run+0x334>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	4ac5      	ldr	r2, [pc, #788]	; (8001018 <httpServer_run+0x338>)
 8000d04:	6013      	str	r3, [r2, #0]

	// Get the H/W socket number
	s = getHTTPSocketNum(seqnum);
 8000d06:	79fb      	ldrb	r3, [r7, #7]
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f7ff ff7f 	bl	8000c0c <getHTTPSocketNum>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	737b      	strb	r3, [r7, #13]

	/* HTTP Service Start */
	switch(getSn_SR(s))
 8000d12:	7b7b      	ldrb	r3, [r7, #13]
 8000d14:	009b      	lsls	r3, r3, #2
 8000d16:	3301      	adds	r3, #1
 8000d18:	00db      	lsls	r3, r3, #3
 8000d1a:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f003 f85e 	bl	8003de0 <WIZCHIP_READ>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b1c      	cmp	r3, #28
 8000d28:	f200 81af 	bhi.w	800108a <httpServer_run+0x3aa>
 8000d2c:	a201      	add	r2, pc, #4	; (adr r2, 8000d34 <httpServer_run+0x54>)
 8000d2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d32:	bf00      	nop
 8000d34:	08001055 	.word	0x08001055
 8000d38:	0800108b 	.word	0x0800108b
 8000d3c:	0800108b 	.word	0x0800108b
 8000d40:	0800108b 	.word	0x0800108b
 8000d44:	0800108b 	.word	0x0800108b
 8000d48:	0800108b 	.word	0x0800108b
 8000d4c:	0800108b 	.word	0x0800108b
 8000d50:	0800108b 	.word	0x0800108b
 8000d54:	0800108b 	.word	0x0800108b
 8000d58:	0800108b 	.word	0x0800108b
 8000d5c:	0800108b 	.word	0x0800108b
 8000d60:	0800108b 	.word	0x0800108b
 8000d64:	0800108b 	.word	0x0800108b
 8000d68:	0800108b 	.word	0x0800108b
 8000d6c:	0800108b 	.word	0x0800108b
 8000d70:	0800108b 	.word	0x0800108b
 8000d74:	0800108b 	.word	0x0800108b
 8000d78:	0800108b 	.word	0x0800108b
 8000d7c:	0800108b 	.word	0x0800108b
 8000d80:	08001081 	.word	0x08001081
 8000d84:	0800108b 	.word	0x0800108b
 8000d88:	0800108b 	.word	0x0800108b
 8000d8c:	0800108b 	.word	0x0800108b
 8000d90:	08000da9 	.word	0x08000da9
 8000d94:	0800108b 	.word	0x0800108b
 8000d98:	0800108b 	.word	0x0800108b
 8000d9c:	0800108b 	.word	0x0800108b
 8000da0:	0800108b 	.word	0x0800108b
 8000da4:	08001041 	.word	0x08001041
	{
		case SOCK_ESTABLISHED:
			// Interrupt clear
			if(getSn_IR(s) & Sn_IR_CON)
 8000da8:	7b7b      	ldrb	r3, [r7, #13]
 8000daa:	009b      	lsls	r3, r3, #2
 8000dac:	3301      	adds	r3, #1
 8000dae:	00db      	lsls	r3, r3, #3
 8000db0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000db4:	4618      	mov	r0, r3
 8000db6:	f003 f813 	bl	8003de0 <WIZCHIP_READ>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	f003 0301 	and.w	r3, r3, #1
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d009      	beq.n	8000dd8 <httpServer_run+0xf8>
			{
				setSn_IR(s, Sn_IR_CON);
 8000dc4:	7b7b      	ldrb	r3, [r7, #13]
 8000dc6:	009b      	lsls	r3, r3, #2
 8000dc8:	3301      	adds	r3, #1
 8000dca:	00db      	lsls	r3, r3, #3
 8000dcc:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000dd0:	2101      	movs	r1, #1
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f003 f850 	bl	8003e78 <WIZCHIP_WRITE>
			}

			// HTTP Process states
			switch(HTTPSock_Status[seqnum].sock_status)
 8000dd8:	79fb      	ldrb	r3, [r7, #7]
 8000dda:	4a90      	ldr	r2, [pc, #576]	; (800101c <httpServer_run+0x33c>)
 8000ddc:	2194      	movs	r1, #148	; 0x94
 8000dde:	fb01 f303 	mul.w	r3, r1, r3
 8000de2:	4413      	add	r3, r2
 8000de4:	781b      	ldrb	r3, [r3, #0]
 8000de6:	2b04      	cmp	r3, #4
 8000de8:	f000 80dd 	beq.w	8000fa6 <httpServer_run+0x2c6>
 8000dec:	2b04      	cmp	r3, #4
 8000dee:	f300 8107 	bgt.w	8001000 <httpServer_run+0x320>
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d003      	beq.n	8000dfe <httpServer_run+0x11e>
 8000df6:	2b03      	cmp	r3, #3
 8000df8:	f000 80b4 	beq.w	8000f64 <httpServer_run+0x284>
#endif
					http_disconnect(s);
					break;

				default :
					break;
 8000dfc:	e100      	b.n	8001000 <httpServer_run+0x320>
					if ((len = getSn_RX_RSR(s)) > 0)
 8000dfe:	7b7b      	ldrb	r3, [r7, #13]
 8000e00:	4618      	mov	r0, r3
 8000e02:	f003 f992 	bl	800412a <getSn_RX_RSR>
 8000e06:	4603      	mov	r3, r0
 8000e08:	82fb      	strh	r3, [r7, #22]
 8000e0a:	8afb      	ldrh	r3, [r7, #22]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	f000 80f9 	beq.w	8001004 <httpServer_run+0x324>
						if (len > DATA_BUF_SIZE) len = DATA_BUF_SIZE;
 8000e12:	8afb      	ldrh	r3, [r7, #22]
 8000e14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000e18:	d902      	bls.n	8000e20 <httpServer_run+0x140>
 8000e1a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000e1e:	82fb      	strh	r3, [r7, #22]
						len = recv(s, (uint8_t *)http_request, len);
 8000e20:	4b7b      	ldr	r3, [pc, #492]	; (8001010 <httpServer_run+0x330>)
 8000e22:	6819      	ldr	r1, [r3, #0]
 8000e24:	8afa      	ldrh	r2, [r7, #22]
 8000e26:	7b7b      	ldrb	r3, [r7, #13]
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f001 ff35 	bl	8002c98 <recv>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	82fb      	strh	r3, [r7, #22]
						*(((uint8_t *)http_request) + len) = '\0';
 8000e32:	4b77      	ldr	r3, [pc, #476]	; (8001010 <httpServer_run+0x330>)
 8000e34:	681a      	ldr	r2, [r3, #0]
 8000e36:	8afb      	ldrh	r3, [r7, #22]
 8000e38:	4413      	add	r3, r2
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	701a      	strb	r2, [r3, #0]
						parse_http_request(parsed_http_request, (uint8_t *)http_request);
 8000e3e:	4b76      	ldr	r3, [pc, #472]	; (8001018 <httpServer_run+0x338>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	4a73      	ldr	r2, [pc, #460]	; (8001010 <httpServer_run+0x330>)
 8000e44:	6812      	ldr	r2, [r2, #0]
 8000e46:	4611      	mov	r1, r2
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f7ff fde1 	bl	8000a10 <parse_http_request>
						getSn_DIPR(s, destip);
 8000e4e:	7b7b      	ldrb	r3, [r7, #13]
 8000e50:	009b      	lsls	r3, r3, #2
 8000e52:	3301      	adds	r3, #1
 8000e54:	00db      	lsls	r3, r3, #3
 8000e56:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f107 0308 	add.w	r3, r7, #8
 8000e60:	2204      	movs	r2, #4
 8000e62:	4619      	mov	r1, r3
 8000e64:	f003 f856 	bl	8003f14 <WIZCHIP_READ_BUF>
						destport = getSn_DPORT(s);
 8000e68:	7b7b      	ldrb	r3, [r7, #13]
 8000e6a:	009b      	lsls	r3, r3, #2
 8000e6c:	3301      	adds	r3, #1
 8000e6e:	00db      	lsls	r3, r3, #3
 8000e70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000e74:	4618      	mov	r0, r3
 8000e76:	f002 ffb3 	bl	8003de0 <WIZCHIP_READ>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	b29b      	uxth	r3, r3
 8000e7e:	021b      	lsls	r3, r3, #8
 8000e80:	b29c      	uxth	r4, r3
 8000e82:	7b7b      	ldrb	r3, [r7, #13]
 8000e84:	009b      	lsls	r3, r3, #2
 8000e86:	3301      	adds	r3, #1
 8000e88:	00db      	lsls	r3, r3, #3
 8000e8a:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f002 ffa6 	bl	8003de0 <WIZCHIP_READ>
 8000e94:	4603      	mov	r3, r0
 8000e96:	b29b      	uxth	r3, r3
 8000e98:	4423      	add	r3, r4
 8000e9a:	81fb      	strh	r3, [r7, #14]
						printf("\r\n");
 8000e9c:	4860      	ldr	r0, [pc, #384]	; (8001020 <httpServer_run+0x340>)
 8000e9e:	f007 fb97 	bl	80085d0 <puts>
						printf("> HTTPSocket[%d] : HTTP Request received ", s);
 8000ea2:	7b7b      	ldrb	r3, [r7, #13]
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	485f      	ldr	r0, [pc, #380]	; (8001024 <httpServer_run+0x344>)
 8000ea8:	f007 fb0c 	bl	80084c4 <iprintf>
						printf("from %d.%d.%d.%d : %d\r\n", destip[0], destip[1], destip[2], destip[3], destport);
 8000eac:	7a3b      	ldrb	r3, [r7, #8]
 8000eae:	4619      	mov	r1, r3
 8000eb0:	7a7b      	ldrb	r3, [r7, #9]
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	7abb      	ldrb	r3, [r7, #10]
 8000eb6:	461c      	mov	r4, r3
 8000eb8:	7afb      	ldrb	r3, [r7, #11]
 8000eba:	461a      	mov	r2, r3
 8000ebc:	89fb      	ldrh	r3, [r7, #14]
 8000ebe:	9301      	str	r3, [sp, #4]
 8000ec0:	9200      	str	r2, [sp, #0]
 8000ec2:	4623      	mov	r3, r4
 8000ec4:	4602      	mov	r2, r0
 8000ec6:	4858      	ldr	r0, [pc, #352]	; (8001028 <httpServer_run+0x348>)
 8000ec8:	f007 fafc 	bl	80084c4 <iprintf>
						printf("> HTTPSocket[%d] : [State] STATE_HTTP_REQ_DONE\r\n", s);
 8000ecc:	7b7b      	ldrb	r3, [r7, #13]
 8000ece:	4619      	mov	r1, r3
 8000ed0:	4856      	ldr	r0, [pc, #344]	; (800102c <httpServer_run+0x34c>)
 8000ed2:	f007 faf7 	bl	80084c4 <iprintf>
						http_process_handler(s, parsed_http_request);
 8000ed6:	4b50      	ldr	r3, [pc, #320]	; (8001018 <httpServer_run+0x338>)
 8000ed8:	681a      	ldr	r2, [r3, #0]
 8000eda:	7b7b      	ldrb	r3, [r7, #13]
 8000edc:	4611      	mov	r1, r2
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f000 fafe 	bl	80014e0 <http_process_handler>
						gettime = get_httpServer_timecount();
 8000ee4:	f000 fd16 	bl	8001914 <get_httpServer_timecount>
 8000ee8:	6138      	str	r0, [r7, #16]
						while(getSn_TX_FSR(s) != (getSn_TXBUF_SIZE(s)*1024))
 8000eea:	e00c      	b.n	8000f06 <httpServer_run+0x226>
							if((get_httpServer_timecount() - gettime) > 3)
 8000eec:	f000 fd12 	bl	8001914 <get_httpServer_timecount>
 8000ef0:	4602      	mov	r2, r0
 8000ef2:	693b      	ldr	r3, [r7, #16]
 8000ef4:	1ad3      	subs	r3, r2, r3
 8000ef6:	2b03      	cmp	r3, #3
 8000ef8:	d905      	bls.n	8000f06 <httpServer_run+0x226>
								printf("> HTTPSocket[%d] : [State] STATE_HTTP_REQ_DONE: TX Buffer clear timeout\r\n", s);
 8000efa:	7b7b      	ldrb	r3, [r7, #13]
 8000efc:	4619      	mov	r1, r3
 8000efe:	484c      	ldr	r0, [pc, #304]	; (8001030 <httpServer_run+0x350>)
 8000f00:	f007 fae0 	bl	80084c4 <iprintf>
								break;
 8000f04:	e012      	b.n	8000f2c <httpServer_run+0x24c>
						while(getSn_TX_FSR(s) != (getSn_TXBUF_SIZE(s)*1024))
 8000f06:	7b7b      	ldrb	r3, [r7, #13]
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f003 f8c3 	bl	8004094 <getSn_TX_FSR>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	461c      	mov	r4, r3
 8000f12:	7b7b      	ldrb	r3, [r7, #13]
 8000f14:	009b      	lsls	r3, r3, #2
 8000f16:	3301      	adds	r3, #1
 8000f18:	00db      	lsls	r3, r3, #3
 8000f1a:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f002 ff5e 	bl	8003de0 <WIZCHIP_READ>
 8000f24:	4603      	mov	r3, r0
 8000f26:	029b      	lsls	r3, r3, #10
 8000f28:	429c      	cmp	r4, r3
 8000f2a:	d1df      	bne.n	8000eec <httpServer_run+0x20c>
						if(HTTPSock_Status[seqnum].file_len > 0) HTTPSock_Status[seqnum].sock_status = STATE_HTTP_RES_INPROC;
 8000f2c:	79fb      	ldrb	r3, [r7, #7]
 8000f2e:	4a3b      	ldr	r2, [pc, #236]	; (800101c <httpServer_run+0x33c>)
 8000f30:	2194      	movs	r1, #148	; 0x94
 8000f32:	fb01 f303 	mul.w	r3, r1, r3
 8000f36:	4413      	add	r3, r2
 8000f38:	3388      	adds	r3, #136	; 0x88
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d008      	beq.n	8000f52 <httpServer_run+0x272>
 8000f40:	79fb      	ldrb	r3, [r7, #7]
 8000f42:	4a36      	ldr	r2, [pc, #216]	; (800101c <httpServer_run+0x33c>)
 8000f44:	2194      	movs	r1, #148	; 0x94
 8000f46:	fb01 f303 	mul.w	r3, r1, r3
 8000f4a:	4413      	add	r3, r2
 8000f4c:	2203      	movs	r2, #3
 8000f4e:	701a      	strb	r2, [r3, #0]
					break;
 8000f50:	e058      	b.n	8001004 <httpServer_run+0x324>
						else HTTPSock_Status[seqnum].sock_status = STATE_HTTP_RES_DONE; // Send the 'HTTP response' end
 8000f52:	79fb      	ldrb	r3, [r7, #7]
 8000f54:	4a31      	ldr	r2, [pc, #196]	; (800101c <httpServer_run+0x33c>)
 8000f56:	2194      	movs	r1, #148	; 0x94
 8000f58:	fb01 f303 	mul.w	r3, r1, r3
 8000f5c:	4413      	add	r3, r2
 8000f5e:	2204      	movs	r2, #4
 8000f60:	701a      	strb	r2, [r3, #0]
					break;
 8000f62:	e04f      	b.n	8001004 <httpServer_run+0x324>
					printf("> HTTPSocket[%d] : [State] STATE_HTTP_RES_INPROC\r\n", s);
 8000f64:	7b7b      	ldrb	r3, [r7, #13]
 8000f66:	4619      	mov	r1, r3
 8000f68:	4832      	ldr	r0, [pc, #200]	; (8001034 <httpServer_run+0x354>)
 8000f6a:	f007 faab 	bl	80084c4 <iprintf>
					send_http_response_body(s, 0, http_response, 0, 0);
 8000f6e:	4b32      	ldr	r3, [pc, #200]	; (8001038 <httpServer_run+0x358>)
 8000f70:	681a      	ldr	r2, [r3, #0]
 8000f72:	7b78      	ldrb	r0, [r7, #13]
 8000f74:	2300      	movs	r3, #0
 8000f76:	9300      	str	r3, [sp, #0]
 8000f78:	2300      	movs	r3, #0
 8000f7a:	2100      	movs	r1, #0
 8000f7c:	f000 f916 	bl	80011ac <send_http_response_body>
					if(HTTPSock_Status[seqnum].file_len == 0) HTTPSock_Status[seqnum].sock_status = STATE_HTTP_RES_DONE;
 8000f80:	79fb      	ldrb	r3, [r7, #7]
 8000f82:	4a26      	ldr	r2, [pc, #152]	; (800101c <httpServer_run+0x33c>)
 8000f84:	2194      	movs	r1, #148	; 0x94
 8000f86:	fb01 f303 	mul.w	r3, r1, r3
 8000f8a:	4413      	add	r3, r2
 8000f8c:	3388      	adds	r3, #136	; 0x88
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d139      	bne.n	8001008 <httpServer_run+0x328>
 8000f94:	79fb      	ldrb	r3, [r7, #7]
 8000f96:	4a21      	ldr	r2, [pc, #132]	; (800101c <httpServer_run+0x33c>)
 8000f98:	2194      	movs	r1, #148	; 0x94
 8000f9a:	fb01 f303 	mul.w	r3, r1, r3
 8000f9e:	4413      	add	r3, r2
 8000fa0:	2204      	movs	r2, #4
 8000fa2:	701a      	strb	r2, [r3, #0]
					break;
 8000fa4:	e030      	b.n	8001008 <httpServer_run+0x328>
					printf("> HTTPSocket[%d] : [State] STATE_HTTP_RES_DONE\r\n", s);
 8000fa6:	7b7b      	ldrb	r3, [r7, #13]
 8000fa8:	4619      	mov	r1, r3
 8000faa:	4824      	ldr	r0, [pc, #144]	; (800103c <httpServer_run+0x35c>)
 8000fac:	f007 fa8a 	bl	80084c4 <iprintf>
					HTTPSock_Status[seqnum].file_len = 0;
 8000fb0:	79fb      	ldrb	r3, [r7, #7]
 8000fb2:	4a1a      	ldr	r2, [pc, #104]	; (800101c <httpServer_run+0x33c>)
 8000fb4:	2194      	movs	r1, #148	; 0x94
 8000fb6:	fb01 f303 	mul.w	r3, r1, r3
 8000fba:	4413      	add	r3, r2
 8000fbc:	3388      	adds	r3, #136	; 0x88
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	601a      	str	r2, [r3, #0]
					HTTPSock_Status[seqnum].file_offset = 0;
 8000fc2:	79fb      	ldrb	r3, [r7, #7]
 8000fc4:	4a15      	ldr	r2, [pc, #84]	; (800101c <httpServer_run+0x33c>)
 8000fc6:	2194      	movs	r1, #148	; 0x94
 8000fc8:	fb01 f303 	mul.w	r3, r1, r3
 8000fcc:	4413      	add	r3, r2
 8000fce:	338c      	adds	r3, #140	; 0x8c
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	601a      	str	r2, [r3, #0]
					HTTPSock_Status[seqnum].file_start = 0;
 8000fd4:	79fb      	ldrb	r3, [r7, #7]
 8000fd6:	4a11      	ldr	r2, [pc, #68]	; (800101c <httpServer_run+0x33c>)
 8000fd8:	2194      	movs	r1, #148	; 0x94
 8000fda:	fb01 f303 	mul.w	r3, r1, r3
 8000fde:	4413      	add	r3, r2
 8000fe0:	3384      	adds	r3, #132	; 0x84
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	601a      	str	r2, [r3, #0]
					HTTPSock_Status[seqnum].sock_status = STATE_HTTP_IDLE;
 8000fe6:	79fb      	ldrb	r3, [r7, #7]
 8000fe8:	4a0c      	ldr	r2, [pc, #48]	; (800101c <httpServer_run+0x33c>)
 8000fea:	2194      	movs	r1, #148	; 0x94
 8000fec:	fb01 f303 	mul.w	r3, r1, r3
 8000ff0:	4413      	add	r3, r2
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	701a      	strb	r2, [r3, #0]
					http_disconnect(s);
 8000ff6:	7b7b      	ldrb	r3, [r7, #13]
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f000 fa4f 	bl	800149c <http_disconnect>
					break;
 8000ffe:	e004      	b.n	800100a <httpServer_run+0x32a>
					break;
 8001000:	bf00      	nop
 8001002:	e045      	b.n	8001090 <httpServer_run+0x3b0>
					break;
 8001004:	bf00      	nop
 8001006:	e043      	b.n	8001090 <httpServer_run+0x3b0>
					break;
 8001008:	bf00      	nop
			}
			break;
 800100a:	e041      	b.n	8001090 <httpServer_run+0x3b0>
 800100c:	20000a2c 	.word	0x20000a2c
 8001010:	20000124 	.word	0x20000124
 8001014:	20000a28 	.word	0x20000a28
 8001018:	20000128 	.word	0x20000128
 800101c:	20000138 	.word	0x20000138
 8001020:	08009f4c 	.word	0x08009f4c
 8001024:	08009f50 	.word	0x08009f50
 8001028:	08009f7c 	.word	0x08009f7c
 800102c:	08009f94 	.word	0x08009f94
 8001030:	08009fc8 	.word	0x08009fc8
 8001034:	0800a014 	.word	0x0800a014
 8001038:	2000012c 	.word	0x2000012c
 800103c:	0800a048 	.word	0x0800a048

		case SOCK_CLOSE_WAIT:
#ifdef _HTTPSERVER_DEBUG_
		printf("> HTTPSocket[%d] : ClOSE_WAIT\r\n", s);	// if a peer requests to close the current connection
 8001040:	7b7b      	ldrb	r3, [r7, #13]
 8001042:	4619      	mov	r1, r3
 8001044:	4814      	ldr	r0, [pc, #80]	; (8001098 <httpServer_run+0x3b8>)
 8001046:	f007 fa3d 	bl	80084c4 <iprintf>
#endif
			disconnect(s);
 800104a:	7b7b      	ldrb	r3, [r7, #13]
 800104c:	4618      	mov	r0, r3
 800104e:	f001 fcb3 	bl	80029b8 <disconnect>
			break;
 8001052:	e01d      	b.n	8001090 <httpServer_run+0x3b0>

		case SOCK_CLOSED:
#ifdef _HTTPSERVER_DEBUG_
			printf("> HTTPSocket[%d] : CLOSED\r\n", s);
 8001054:	7b7b      	ldrb	r3, [r7, #13]
 8001056:	4619      	mov	r1, r3
 8001058:	4810      	ldr	r0, [pc, #64]	; (800109c <httpServer_run+0x3bc>)
 800105a:	f007 fa33 	bl	80084c4 <iprintf>
#endif
			if(socket(s, Sn_MR_TCP, HTTP_SERVER_PORT, 0x00) == s)    /* Reinitialize the socket */
 800105e:	7b78      	ldrb	r0, [r7, #13]
 8001060:	2300      	movs	r3, #0
 8001062:	2250      	movs	r2, #80	; 0x50
 8001064:	2101      	movs	r1, #1
 8001066:	f001 fac9 	bl	80025fc <socket>
 800106a:	4603      	mov	r3, r0
 800106c:	461a      	mov	r2, r3
 800106e:	7b7b      	ldrb	r3, [r7, #13]
 8001070:	429a      	cmp	r2, r3
 8001072:	d10c      	bne.n	800108e <httpServer_run+0x3ae>
			{
#ifdef _HTTPSERVER_DEBUG_
				printf("> HTTPSocket[%d] : OPEN\r\n", s);
 8001074:	7b7b      	ldrb	r3, [r7, #13]
 8001076:	4619      	mov	r1, r3
 8001078:	4809      	ldr	r0, [pc, #36]	; (80010a0 <httpServer_run+0x3c0>)
 800107a:	f007 fa23 	bl	80084c4 <iprintf>
#endif
			}
			break;
 800107e:	e006      	b.n	800108e <httpServer_run+0x3ae>

		case SOCK_INIT:
			listen(s);
 8001080:	7b7b      	ldrb	r3, [r7, #13]
 8001082:	4618      	mov	r0, r3
 8001084:	f001 fc3e 	bl	8002904 <listen>
			break;
 8001088:	e002      	b.n	8001090 <httpServer_run+0x3b0>

		case SOCK_LISTEN:
			break;

		default :
			break;
 800108a:	bf00      	nop
 800108c:	e000      	b.n	8001090 <httpServer_run+0x3b0>
			break;
 800108e:	bf00      	nop
	} // end of switch

#ifdef _USE_WATCHDOG_
	HTTPServer_WDT_Reset();
#endif
}
 8001090:	bf00      	nop
 8001092:	371c      	adds	r7, #28
 8001094:	46bd      	mov	sp, r7
 8001096:	bd90      	pop	{r4, r7, pc}
 8001098:	0800a07c 	.word	0x0800a07c
 800109c:	0800a09c 	.word	0x0800a09c
 80010a0:	0800a0b8 	.word	0x0800a0b8

080010a4 <send_http_response_header>:

////////////////////////////////////////////
// Private Functions
////////////////////////////////////////////
static void send_http_response_header(uint8_t s, uint8_t content_type, uint32_t body_len, uint16_t http_status)
{
 80010a4:	b590      	push	{r4, r7, lr}
 80010a6:	b083      	sub	sp, #12
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	603a      	str	r2, [r7, #0]
 80010ac:	461a      	mov	r2, r3
 80010ae:	4603      	mov	r3, r0
 80010b0:	71fb      	strb	r3, [r7, #7]
 80010b2:	460b      	mov	r3, r1
 80010b4:	71bb      	strb	r3, [r7, #6]
 80010b6:	4613      	mov	r3, r2
 80010b8:	80bb      	strh	r3, [r7, #4]
	switch(http_status)
 80010ba:	88bb      	ldrh	r3, [r7, #4]
 80010bc:	f5b3 7fca 	cmp.w	r3, #404	; 0x194
 80010c0:	d032      	beq.n	8001128 <send_http_response_header+0x84>
 80010c2:	f5b3 7fca 	cmp.w	r3, #404	; 0x194
 80010c6:	dc3e      	bgt.n	8001146 <send_http_response_header+0xa2>
 80010c8:	2bc8      	cmp	r3, #200	; 0xc8
 80010ca:	d003      	beq.n	80010d4 <send_http_response_header+0x30>
 80010cc:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80010d0:	d01b      	beq.n	800110a <send_http_response_header+0x66>
			printf("> HTTPSocket[%d] : HTTP Response Header - STATUS_NOT_FOUND\r\n", s);
#endif
			memcpy(http_response, ERROR_HTML_PAGE, sizeof(ERROR_HTML_PAGE));
			break;
		default:
			break;
 80010d2:	e038      	b.n	8001146 <send_http_response_header+0xa2>
			if((content_type != PTYPE_CGI) && (content_type != PTYPE_XML)) // CGI/XML type request does not respond HTTP header
 80010d4:	79bb      	ldrb	r3, [r7, #6]
 80010d6:	2b08      	cmp	r3, #8
 80010d8:	d00f      	beq.n	80010fa <send_http_response_header+0x56>
 80010da:	79bb      	ldrb	r3, [r7, #6]
 80010dc:	2b09      	cmp	r3, #9
 80010de:	d00c      	beq.n	80010fa <send_http_response_header+0x56>
			printf("> HTTPSocket[%d] : HTTP Response Header - STATUS_OK\r\n", s);
 80010e0:	79fb      	ldrb	r3, [r7, #7]
 80010e2:	4619      	mov	r1, r3
 80010e4:	4829      	ldr	r0, [pc, #164]	; (800118c <send_http_response_header+0xe8>)
 80010e6:	f007 f9ed 	bl	80084c4 <iprintf>
				make_http_response_head((char*)http_response, content_type, body_len);
 80010ea:	4b29      	ldr	r3, [pc, #164]	; (8001190 <send_http_response_header+0xec>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	79b9      	ldrb	r1, [r7, #6]
 80010f0:	683a      	ldr	r2, [r7, #0]
 80010f2:	4618      	mov	r0, r3
 80010f4:	f7ff fa50 	bl	8000598 <make_http_response_head>
			break;
 80010f8:	e026      	b.n	8001148 <send_http_response_header+0xa4>
			printf("> HTTPSocket[%d] : HTTP Response Header - NONE / CGI or XML\r\n", s);
 80010fa:	79fb      	ldrb	r3, [r7, #7]
 80010fc:	4619      	mov	r1, r3
 80010fe:	4825      	ldr	r0, [pc, #148]	; (8001194 <send_http_response_header+0xf0>)
 8001100:	f007 f9e0 	bl	80084c4 <iprintf>
				http_status = 0;
 8001104:	2300      	movs	r3, #0
 8001106:	80bb      	strh	r3, [r7, #4]
			break;
 8001108:	e01e      	b.n	8001148 <send_http_response_header+0xa4>
			printf("> HTTPSocket[%d] : HTTP Response Header - STATUS_BAD_REQ\r\n", s);
 800110a:	79fb      	ldrb	r3, [r7, #7]
 800110c:	4619      	mov	r1, r3
 800110e:	4822      	ldr	r0, [pc, #136]	; (8001198 <send_http_response_header+0xf4>)
 8001110:	f007 f9d8 	bl	80084c4 <iprintf>
			memcpy(http_response, ERROR_REQUEST_PAGE, sizeof(ERROR_REQUEST_PAGE));
 8001114:	4b1e      	ldr	r3, [pc, #120]	; (8001190 <send_http_response_header+0xec>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a20      	ldr	r2, [pc, #128]	; (800119c <send_http_response_header+0xf8>)
 800111a:	4618      	mov	r0, r3
 800111c:	4611      	mov	r1, r2
 800111e:	2376      	movs	r3, #118	; 0x76
 8001120:	461a      	mov	r2, r3
 8001122:	f007 f90f 	bl	8008344 <memcpy>
			break;
 8001126:	e00f      	b.n	8001148 <send_http_response_header+0xa4>
			printf("> HTTPSocket[%d] : HTTP Response Header - STATUS_NOT_FOUND\r\n", s);
 8001128:	79fb      	ldrb	r3, [r7, #7]
 800112a:	4619      	mov	r1, r3
 800112c:	481c      	ldr	r0, [pc, #112]	; (80011a0 <send_http_response_header+0xfc>)
 800112e:	f007 f9c9 	bl	80084c4 <iprintf>
			memcpy(http_response, ERROR_HTML_PAGE, sizeof(ERROR_HTML_PAGE));
 8001132:	4b17      	ldr	r3, [pc, #92]	; (8001190 <send_http_response_header+0xec>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4a1b      	ldr	r2, [pc, #108]	; (80011a4 <send_http_response_header+0x100>)
 8001138:	4618      	mov	r0, r3
 800113a:	4611      	mov	r1, r2
 800113c:	2399      	movs	r3, #153	; 0x99
 800113e:	461a      	mov	r2, r3
 8001140:	f007 f900 	bl	8008344 <memcpy>
			break;
 8001144:	e000      	b.n	8001148 <send_http_response_header+0xa4>
			break;
 8001146:	bf00      	nop
	}

	// Send the HTTP Response 'header'
	if(http_status)
 8001148:	88bb      	ldrh	r3, [r7, #4]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d01a      	beq.n	8001184 <send_http_response_header+0xe0>
	{
#ifdef _HTTPSERVER_DEBUG_
		printf("> HTTPSocket[%d] : [Send] HTTP Response Header [ %d ]byte\r\n", s, (uint16_t)strlen((char *)http_response));
 800114e:	79fc      	ldrb	r4, [r7, #7]
 8001150:	4b0f      	ldr	r3, [pc, #60]	; (8001190 <send_http_response_header+0xec>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4618      	mov	r0, r3
 8001156:	f7ff f845 	bl	80001e4 <strlen>
 800115a:	4603      	mov	r3, r0
 800115c:	b29b      	uxth	r3, r3
 800115e:	461a      	mov	r2, r3
 8001160:	4621      	mov	r1, r4
 8001162:	4811      	ldr	r0, [pc, #68]	; (80011a8 <send_http_response_header+0x104>)
 8001164:	f007 f9ae 	bl	80084c4 <iprintf>
#endif
		send(s, http_response, strlen((char *)http_response));
 8001168:	4b09      	ldr	r3, [pc, #36]	; (8001190 <send_http_response_header+0xec>)
 800116a:	681c      	ldr	r4, [r3, #0]
 800116c:	4b08      	ldr	r3, [pc, #32]	; (8001190 <send_http_response_header+0xec>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4618      	mov	r0, r3
 8001172:	f7ff f837 	bl	80001e4 <strlen>
 8001176:	4603      	mov	r3, r0
 8001178:	b29a      	uxth	r2, r3
 800117a:	79fb      	ldrb	r3, [r7, #7]
 800117c:	4621      	mov	r1, r4
 800117e:	4618      	mov	r0, r3
 8001180:	f001 fc90 	bl	8002aa4 <send>
	}
}
 8001184:	bf00      	nop
 8001186:	370c      	adds	r7, #12
 8001188:	46bd      	mov	sp, r7
 800118a:	bd90      	pop	{r4, r7, pc}
 800118c:	0800a0d4 	.word	0x0800a0d4
 8001190:	2000012c 	.word	0x2000012c
 8001194:	0800a10c 	.word	0x0800a10c
 8001198:	0800a14c 	.word	0x0800a14c
 800119c:	0800c180 	.word	0x0800c180
 80011a0:	0800a188 	.word	0x0800a188
 80011a4:	0800c0e4 	.word	0x0800c0e4
 80011a8:	0800a1c8 	.word	0x0800a1c8

080011ac <send_http_response_body>:

static void send_http_response_body(uint8_t s, uint8_t * uri_name, uint8_t * buf, uint32_t start_addr, uint32_t file_len)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b086      	sub	sp, #24
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	60b9      	str	r1, [r7, #8]
 80011b4:	607a      	str	r2, [r7, #4]
 80011b6:	603b      	str	r3, [r7, #0]
 80011b8:	4603      	mov	r3, r0
 80011ba:	73fb      	strb	r3, [r7, #15]
	int8_t get_seqnum;
	uint32_t send_len;

	uint8_t flag_datasend_end = 0;
 80011bc:	2300      	movs	r3, #0
 80011be:	74fb      	strb	r3, [r7, #19]
#endif
#ifdef _USE_FLASH_
	uint32_t addr = 0;
#endif

	if((get_seqnum = getHTTPSequenceNum(s)) == -1) return; // exception handling; invalid number
 80011c0:	7bfb      	ldrb	r3, [r7, #15]
 80011c2:	4618      	mov	r0, r3
 80011c4:	f7ff fd32 	bl	8000c2c <getHTTPSequenceNum>
 80011c8:	4603      	mov	r3, r0
 80011ca:	74bb      	strb	r3, [r7, #18]
 80011cc:	f997 3012 	ldrsb.w	r3, [r7, #18]
 80011d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80011d4:	f000 811b 	beq.w	800140e <send_http_response_body+0x262>

	// Send the HTTP Response 'body'; requested file
	if(!HTTPSock_Status[get_seqnum].file_len) // ### Send HTTP response body: First part ###
 80011d8:	f997 3012 	ldrsb.w	r3, [r7, #18]
 80011dc:	4a8e      	ldr	r2, [pc, #568]	; (8001418 <send_http_response_body+0x26c>)
 80011de:	2194      	movs	r1, #148	; 0x94
 80011e0:	fb01 f303 	mul.w	r3, r1, r3
 80011e4:	4413      	add	r3, r2
 80011e6:	3388      	adds	r3, #136	; 0x88
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d150      	bne.n	8001290 <send_http_response_body+0xe4>
	{
		if (file_len > DATA_BUF_SIZE - 1)
 80011ee:	6a3b      	ldr	r3, [r7, #32]
 80011f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80011f4:	d343      	bcc.n	800127e <send_http_response_body+0xd2>
		{
			HTTPSock_Status[get_seqnum].file_start = start_addr;
 80011f6:	f997 3012 	ldrsb.w	r3, [r7, #18]
 80011fa:	4a87      	ldr	r2, [pc, #540]	; (8001418 <send_http_response_body+0x26c>)
 80011fc:	2194      	movs	r1, #148	; 0x94
 80011fe:	fb01 f303 	mul.w	r3, r1, r3
 8001202:	4413      	add	r3, r2
 8001204:	3384      	adds	r3, #132	; 0x84
 8001206:	683a      	ldr	r2, [r7, #0]
 8001208:	601a      	str	r2, [r3, #0]
			HTTPSock_Status[get_seqnum].file_len = file_len;
 800120a:	f997 3012 	ldrsb.w	r3, [r7, #18]
 800120e:	4a82      	ldr	r2, [pc, #520]	; (8001418 <send_http_response_body+0x26c>)
 8001210:	2194      	movs	r1, #148	; 0x94
 8001212:	fb01 f303 	mul.w	r3, r1, r3
 8001216:	4413      	add	r3, r2
 8001218:	3388      	adds	r3, #136	; 0x88
 800121a:	6a3a      	ldr	r2, [r7, #32]
 800121c:	601a      	str	r2, [r3, #0]
			send_len = DATA_BUF_SIZE - 1;
 800121e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001222:	617b      	str	r3, [r7, #20]

/////////////////////////////////////////////////////////////////////////////////////////////////
// ## 20141219 Eric added, for 'File object structure' (fs) allocation reduced (8 -> 1)
			memset(HTTPSock_Status[get_seqnum].file_name, 0x00, MAX_CONTENT_NAME_LEN);
 8001224:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8001228:	2294      	movs	r2, #148	; 0x94
 800122a:	fb02 f303 	mul.w	r3, r2, r3
 800122e:	4a7a      	ldr	r2, [pc, #488]	; (8001418 <send_http_response_body+0x26c>)
 8001230:	4413      	add	r3, r2
 8001232:	3301      	adds	r3, #1
 8001234:	2280      	movs	r2, #128	; 0x80
 8001236:	2100      	movs	r1, #0
 8001238:	4618      	mov	r0, r3
 800123a:	f007 f891 	bl	8008360 <memset>
			strcpy((char *)HTTPSock_Status[get_seqnum].file_name, (char *)uri_name);
 800123e:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8001242:	2294      	movs	r2, #148	; 0x94
 8001244:	fb02 f303 	mul.w	r3, r2, r3
 8001248:	4a73      	ldr	r2, [pc, #460]	; (8001418 <send_http_response_body+0x26c>)
 800124a:	4413      	add	r3, r2
 800124c:	3301      	adds	r3, #1
 800124e:	68b9      	ldr	r1, [r7, #8]
 8001250:	4618      	mov	r0, r3
 8001252:	f007 fa04 	bl	800865e <strcpy>
#ifdef _HTTPSERVER_DEBUG_
			printf("> HTTPSocket[%d] : HTTP Response body - file name [ %s ]\r\n", s, HTTPSock_Status[get_seqnum].file_name);
 8001256:	7bf9      	ldrb	r1, [r7, #15]
 8001258:	f997 3012 	ldrsb.w	r3, [r7, #18]
 800125c:	2294      	movs	r2, #148	; 0x94
 800125e:	fb02 f303 	mul.w	r3, r2, r3
 8001262:	4a6d      	ldr	r2, [pc, #436]	; (8001418 <send_http_response_body+0x26c>)
 8001264:	4413      	add	r3, r2
 8001266:	3301      	adds	r3, #1
 8001268:	461a      	mov	r2, r3
 800126a:	486c      	ldr	r0, [pc, #432]	; (800141c <send_http_response_body+0x270>)
 800126c:	f007 f92a 	bl	80084c4 <iprintf>
#endif
/////////////////////////////////////////////////////////////////////////////////////////////////

#ifdef _HTTPSERVER_DEBUG_
			printf("> HTTPSocket[%d] : HTTP Response body - file len [ %ld ]byte\r\n", s, file_len);
 8001270:	7bfb      	ldrb	r3, [r7, #15]
 8001272:	6a3a      	ldr	r2, [r7, #32]
 8001274:	4619      	mov	r1, r3
 8001276:	486a      	ldr	r0, [pc, #424]	; (8001420 <send_http_response_body+0x274>)
 8001278:	f007 f924 	bl	80084c4 <iprintf>
 800127c:	e03a      	b.n	80012f4 <send_http_response_body+0x148>
#endif
		}
		else
		{
			// Send process end
			send_len = file_len;
 800127e:	6a3b      	ldr	r3, [r7, #32]
 8001280:	617b      	str	r3, [r7, #20]

#ifdef _HTTPSERVER_DEBUG_
			printf("> HTTPSocket[%d] : HTTP Response end - file len [ %ld ]byte\r\n", s, send_len);
 8001282:	7bfb      	ldrb	r3, [r7, #15]
 8001284:	697a      	ldr	r2, [r7, #20]
 8001286:	4619      	mov	r1, r3
 8001288:	4866      	ldr	r0, [pc, #408]	; (8001424 <send_http_response_body+0x278>)
 800128a:	f007 f91b 	bl	80084c4 <iprintf>
 800128e:	e031      	b.n	80012f4 <send_http_response_body+0x148>
		if(HTTPSock_Status[get_seqnum]->storage_type == DATAFLASH)
		{
			addr = HTTPSock_Status[get_seqnum].file_start + HTTPSock_Status[get_seqnum].file_offset;
		}
#endif
		send_len = HTTPSock_Status[get_seqnum].file_len - HTTPSock_Status[get_seqnum].file_offset;
 8001290:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8001294:	4a60      	ldr	r2, [pc, #384]	; (8001418 <send_http_response_body+0x26c>)
 8001296:	2194      	movs	r1, #148	; 0x94
 8001298:	fb01 f303 	mul.w	r3, r1, r3
 800129c:	4413      	add	r3, r2
 800129e:	3388      	adds	r3, #136	; 0x88
 80012a0:	681a      	ldr	r2, [r3, #0]
 80012a2:	f997 3012 	ldrsb.w	r3, [r7, #18]
 80012a6:	495c      	ldr	r1, [pc, #368]	; (8001418 <send_http_response_body+0x26c>)
 80012a8:	2094      	movs	r0, #148	; 0x94
 80012aa:	fb00 f303 	mul.w	r3, r0, r3
 80012ae:	440b      	add	r3, r1
 80012b0:	338c      	adds	r3, #140	; 0x8c
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	1ad3      	subs	r3, r2, r3
 80012b6:	617b      	str	r3, [r7, #20]

		if(send_len > DATA_BUF_SIZE - 1)
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80012be:	d303      	bcc.n	80012c8 <send_http_response_body+0x11c>
		{
			send_len = DATA_BUF_SIZE - 1;
 80012c0:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80012c4:	617b      	str	r3, [r7, #20]
 80012c6:	e00f      	b.n	80012e8 <send_http_response_body+0x13c>
			//HTTPSock_Status[get_seqnum]->file_offset += send_len;
		}
		else
		{
#ifdef _HTTPSERVER_DEBUG_
			printf("> HTTPSocket[%d] : HTTP Response end - file len [ %ld ]byte\r\n", s, HTTPSock_Status[get_seqnum].file_len);
 80012c8:	7bf9      	ldrb	r1, [r7, #15]
 80012ca:	f997 3012 	ldrsb.w	r3, [r7, #18]
 80012ce:	4a52      	ldr	r2, [pc, #328]	; (8001418 <send_http_response_body+0x26c>)
 80012d0:	2094      	movs	r0, #148	; 0x94
 80012d2:	fb00 f303 	mul.w	r3, r0, r3
 80012d6:	4413      	add	r3, r2
 80012d8:	3388      	adds	r3, #136	; 0x88
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	461a      	mov	r2, r3
 80012de:	4851      	ldr	r0, [pc, #324]	; (8001424 <send_http_response_body+0x278>)
 80012e0:	f007 f8f0 	bl	80084c4 <iprintf>
#endif
			// Send process end
			flag_datasend_end = 1;
 80012e4:	2301      	movs	r3, #1
 80012e6:	74fb      	strb	r3, [r7, #19]
		}
#ifdef _HTTPSERVER_DEBUG_
			printf("> HTTPSocket[%d] : HTTP Response body - send len [ %ld ]byte\r\n", s, send_len);
 80012e8:	7bfb      	ldrb	r3, [r7, #15]
 80012ea:	697a      	ldr	r2, [r7, #20]
 80012ec:	4619      	mov	r1, r3
 80012ee:	484e      	ldr	r0, [pc, #312]	; (8001428 <send_http_response_body+0x27c>)
 80012f0:	f007 f8e8 	bl	80084c4 <iprintf>
	//HTTPSock_Status[get_seqnum]->storage_type == CODEFLASH
	//HTTPSock_Status[get_seqnum]->storage_type == SDCARD
	//HTTPSock_Status[get_seqnum]->storage_type == DATAFLASH
/*****************************************************/

	if(HTTPSock_Status[get_seqnum].storage_type == CODEFLASH)
 80012f4:	f997 3012 	ldrsb.w	r3, [r7, #18]
 80012f8:	4a47      	ldr	r2, [pc, #284]	; (8001418 <send_http_response_body+0x26c>)
 80012fa:	2194      	movs	r1, #148	; 0x94
 80012fc:	fb01 f303 	mul.w	r3, r1, r3
 8001300:	4413      	add	r3, r2
 8001302:	3390      	adds	r3, #144	; 0x90
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	2b01      	cmp	r3, #1
 8001308:	d125      	bne.n	8001356 <send_http_response_body+0x1aa>
	{
		if(HTTPSock_Status[get_seqnum].file_len) start_addr = HTTPSock_Status[get_seqnum].file_start;
 800130a:	f997 3012 	ldrsb.w	r3, [r7, #18]
 800130e:	4a42      	ldr	r2, [pc, #264]	; (8001418 <send_http_response_body+0x26c>)
 8001310:	2194      	movs	r1, #148	; 0x94
 8001312:	fb01 f303 	mul.w	r3, r1, r3
 8001316:	4413      	add	r3, r2
 8001318:	3388      	adds	r3, #136	; 0x88
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d009      	beq.n	8001334 <send_http_response_body+0x188>
 8001320:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8001324:	4a3c      	ldr	r2, [pc, #240]	; (8001418 <send_http_response_body+0x26c>)
 8001326:	2194      	movs	r1, #148	; 0x94
 8001328:	fb01 f303 	mul.w	r3, r1, r3
 800132c:	4413      	add	r3, r2
 800132e:	3384      	adds	r3, #132	; 0x84
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	603b      	str	r3, [r7, #0]
		read_userReg_webContent(start_addr, &buf[0], HTTPSock_Status[get_seqnum].file_offset, send_len);
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	b298      	uxth	r0, r3
 8001338:	f997 3012 	ldrsb.w	r3, [r7, #18]
 800133c:	4a36      	ldr	r2, [pc, #216]	; (8001418 <send_http_response_body+0x26c>)
 800133e:	2194      	movs	r1, #148	; 0x94
 8001340:	fb01 f303 	mul.w	r3, r1, r3
 8001344:	4413      	add	r3, r2
 8001346:	338c      	adds	r3, #140	; 0x8c
 8001348:	681a      	ldr	r2, [r3, #0]
 800134a:	697b      	ldr	r3, [r7, #20]
 800134c:	b29b      	uxth	r3, r3
 800134e:	6879      	ldr	r1, [r7, #4]
 8001350:	f000 fb8a 	bl	8001a68 <read_userReg_webContent>
 8001354:	e001      	b.n	800135a <send_http_response_body+0x1ae>
		*(buf+send_len+1) = 0; // Insert '/0' for indicates the 'End of String' (null terminated)
	}
#endif
	else
	{
		send_len = 0;
 8001356:	2300      	movs	r3, #0
 8001358:	617b      	str	r3, [r7, #20]
	}
	// Requested content send to HTTP client
#ifdef _HTTPSERVER_DEBUG_
	printf("> HTTPSocket[%d] : [Send] HTTP Response body [ %ld ]byte\r\n", s, send_len);
 800135a:	7bfb      	ldrb	r3, [r7, #15]
 800135c:	697a      	ldr	r2, [r7, #20]
 800135e:	4619      	mov	r1, r3
 8001360:	4832      	ldr	r0, [pc, #200]	; (800142c <send_http_response_body+0x280>)
 8001362:	f007 f8af 	bl	80084c4 <iprintf>
#endif

	if(send_len) send(s, buf, send_len);
 8001366:	697b      	ldr	r3, [r7, #20]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d007      	beq.n	800137c <send_http_response_body+0x1d0>
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	b29a      	uxth	r2, r3
 8001370:	7bfb      	ldrb	r3, [r7, #15]
 8001372:	6879      	ldr	r1, [r7, #4]
 8001374:	4618      	mov	r0, r3
 8001376:	f001 fb95 	bl	8002aa4 <send>
 800137a:	e001      	b.n	8001380 <send_http_response_body+0x1d4>
	else flag_datasend_end = 1;
 800137c:	2301      	movs	r3, #1
 800137e:	74fb      	strb	r3, [r7, #19]

	if(flag_datasend_end)
 8001380:	7cfb      	ldrb	r3, [r7, #19]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d020      	beq.n	80013c8 <send_http_response_body+0x21c>
	{
		HTTPSock_Status[get_seqnum].file_start = 0;
 8001386:	f997 3012 	ldrsb.w	r3, [r7, #18]
 800138a:	4a23      	ldr	r2, [pc, #140]	; (8001418 <send_http_response_body+0x26c>)
 800138c:	2194      	movs	r1, #148	; 0x94
 800138e:	fb01 f303 	mul.w	r3, r1, r3
 8001392:	4413      	add	r3, r2
 8001394:	3384      	adds	r3, #132	; 0x84
 8001396:	2200      	movs	r2, #0
 8001398:	601a      	str	r2, [r3, #0]
		HTTPSock_Status[get_seqnum].file_len = 0;
 800139a:	f997 3012 	ldrsb.w	r3, [r7, #18]
 800139e:	4a1e      	ldr	r2, [pc, #120]	; (8001418 <send_http_response_body+0x26c>)
 80013a0:	2194      	movs	r1, #148	; 0x94
 80013a2:	fb01 f303 	mul.w	r3, r1, r3
 80013a6:	4413      	add	r3, r2
 80013a8:	3388      	adds	r3, #136	; 0x88
 80013aa:	2200      	movs	r2, #0
 80013ac:	601a      	str	r2, [r3, #0]
		HTTPSock_Status[get_seqnum].file_offset = 0;
 80013ae:	f997 3012 	ldrsb.w	r3, [r7, #18]
 80013b2:	4a19      	ldr	r2, [pc, #100]	; (8001418 <send_http_response_body+0x26c>)
 80013b4:	2194      	movs	r1, #148	; 0x94
 80013b6:	fb01 f303 	mul.w	r3, r1, r3
 80013ba:	4413      	add	r3, r2
 80013bc:	338c      	adds	r3, #140	; 0x8c
 80013be:	2200      	movs	r2, #0
 80013c0:	601a      	str	r2, [r3, #0]
		flag_datasend_end = 0;
 80013c2:	2300      	movs	r3, #0
 80013c4:	74fb      	strb	r3, [r7, #19]
 80013c6:	e023      	b.n	8001410 <send_http_response_body+0x264>
	}
	else
	{
		HTTPSock_Status[get_seqnum].file_offset += send_len;
 80013c8:	f997 3012 	ldrsb.w	r3, [r7, #18]
 80013cc:	4a12      	ldr	r2, [pc, #72]	; (8001418 <send_http_response_body+0x26c>)
 80013ce:	2194      	movs	r1, #148	; 0x94
 80013d0:	fb01 f303 	mul.w	r3, r1, r3
 80013d4:	4413      	add	r3, r2
 80013d6:	338c      	adds	r3, #140	; 0x8c
 80013d8:	6819      	ldr	r1, [r3, #0]
 80013da:	f997 3012 	ldrsb.w	r3, [r7, #18]
 80013de:	697a      	ldr	r2, [r7, #20]
 80013e0:	440a      	add	r2, r1
 80013e2:	490d      	ldr	r1, [pc, #52]	; (8001418 <send_http_response_body+0x26c>)
 80013e4:	2094      	movs	r0, #148	; 0x94
 80013e6:	fb00 f303 	mul.w	r3, r0, r3
 80013ea:	440b      	add	r3, r1
 80013ec:	338c      	adds	r3, #140	; 0x8c
 80013ee:	601a      	str	r2, [r3, #0]
#ifdef _HTTPSERVER_DEBUG_
		printf("> HTTPSocket[%d] : HTTP Response body - offset [ %ld ]\r\n", s, HTTPSock_Status[get_seqnum].file_offset);
 80013f0:	7bf9      	ldrb	r1, [r7, #15]
 80013f2:	f997 3012 	ldrsb.w	r3, [r7, #18]
 80013f6:	4a08      	ldr	r2, [pc, #32]	; (8001418 <send_http_response_body+0x26c>)
 80013f8:	2094      	movs	r0, #148	; 0x94
 80013fa:	fb00 f303 	mul.w	r3, r0, r3
 80013fe:	4413      	add	r3, r2
 8001400:	338c      	adds	r3, #140	; 0x8c
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	461a      	mov	r2, r3
 8001406:	480a      	ldr	r0, [pc, #40]	; (8001430 <send_http_response_body+0x284>)
 8001408:	f007 f85c 	bl	80084c4 <iprintf>
 800140c:	e000      	b.n	8001410 <send_http_response_body+0x264>
	if((get_seqnum = getHTTPSequenceNum(s)) == -1) return; // exception handling; invalid number
 800140e:	bf00      	nop
// ## 20141219 Eric added, for 'File object structure' (fs) allocation reduced (8 -> 1)
#ifdef _USE_SDCARD_
	f_close(&fs);
#endif
// ## 20141219 added end
}
 8001410:	3718      	adds	r7, #24
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	20000138 	.word	0x20000138
 800141c:	0800a204 	.word	0x0800a204
 8001420:	0800a240 	.word	0x0800a240
 8001424:	0800a280 	.word	0x0800a280
 8001428:	0800a2c0 	.word	0x0800a2c0
 800142c:	0800a300 	.word	0x0800a300
 8001430:	0800a33c 	.word	0x0800a33c

08001434 <send_http_response_cgi>:

static void send_http_response_cgi(uint8_t s, uint8_t * buf, uint8_t * http_body, uint16_t file_len)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b088      	sub	sp, #32
 8001438:	af02      	add	r7, sp, #8
 800143a:	60b9      	str	r1, [r7, #8]
 800143c:	607a      	str	r2, [r7, #4]
 800143e:	461a      	mov	r2, r3
 8001440:	4603      	mov	r3, r0
 8001442:	73fb      	strb	r3, [r7, #15]
 8001444:	4613      	mov	r3, r2
 8001446:	81bb      	strh	r3, [r7, #12]
	uint16_t send_len = 0;
 8001448:	2300      	movs	r3, #0
 800144a:	82fb      	strh	r3, [r7, #22]

#ifdef _HTTPSERVER_DEBUG_
	printf("> HTTPSocket[%d] : HTTP Response Header + Body - CGI\r\n", s);
 800144c:	7bfb      	ldrb	r3, [r7, #15]
 800144e:	4619      	mov	r1, r3
 8001450:	480e      	ldr	r0, [pc, #56]	; (800148c <send_http_response_cgi+0x58>)
 8001452:	f007 f837 	bl	80084c4 <iprintf>
#endif
	send_len = sprintf((char *)buf, "%s%d\r\n\r\n%s", RES_CGIHEAD_OK, file_len, http_body);
 8001456:	89ba      	ldrh	r2, [r7, #12]
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	9300      	str	r3, [sp, #0]
 800145c:	4613      	mov	r3, r2
 800145e:	4a0c      	ldr	r2, [pc, #48]	; (8001490 <send_http_response_cgi+0x5c>)
 8001460:	490c      	ldr	r1, [pc, #48]	; (8001494 <send_http_response_cgi+0x60>)
 8001462:	68b8      	ldr	r0, [r7, #8]
 8001464:	f007 f8cc 	bl	8008600 <siprintf>
 8001468:	4603      	mov	r3, r0
 800146a:	82fb      	strh	r3, [r7, #22]
#ifdef _HTTPSERVER_DEBUG_
	printf("> HTTPSocket[%d] : HTTP Response Header + Body - send len [ %d ]byte\r\n", s, send_len);
 800146c:	7bfb      	ldrb	r3, [r7, #15]
 800146e:	8afa      	ldrh	r2, [r7, #22]
 8001470:	4619      	mov	r1, r3
 8001472:	4809      	ldr	r0, [pc, #36]	; (8001498 <send_http_response_cgi+0x64>)
 8001474:	f007 f826 	bl	80084c4 <iprintf>
#endif

	send(s, buf, send_len);
 8001478:	8afa      	ldrh	r2, [r7, #22]
 800147a:	7bfb      	ldrb	r3, [r7, #15]
 800147c:	68b9      	ldr	r1, [r7, #8]
 800147e:	4618      	mov	r0, r3
 8001480:	f001 fb10 	bl	8002aa4 <send>
}
 8001484:	bf00      	nop
 8001486:	3718      	adds	r7, #24
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	0800a378 	.word	0x0800a378
 8001490:	0800a3b0 	.word	0x0800a3b0
 8001494:	0800a3ec 	.word	0x0800a3ec
 8001498:	0800a3f8 	.word	0x0800a3f8

0800149c <http_disconnect>:


static int8_t http_disconnect(uint8_t sn)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	4603      	mov	r3, r0
 80014a4:	71fb      	strb	r3, [r7, #7]
	setSn_CR(sn,Sn_CR_DISCON);
 80014a6:	79fb      	ldrb	r3, [r7, #7]
 80014a8:	009b      	lsls	r3, r3, #2
 80014aa:	3301      	adds	r3, #1
 80014ac:	00db      	lsls	r3, r3, #3
 80014ae:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80014b2:	2108      	movs	r1, #8
 80014b4:	4618      	mov	r0, r3
 80014b6:	f002 fcdf 	bl	8003e78 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 80014ba:	bf00      	nop
 80014bc:	79fb      	ldrb	r3, [r7, #7]
 80014be:	009b      	lsls	r3, r3, #2
 80014c0:	3301      	adds	r3, #1
 80014c2:	00db      	lsls	r3, r3, #3
 80014c4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80014c8:	4618      	mov	r0, r3
 80014ca:	f002 fc89 	bl	8003de0 <WIZCHIP_READ>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d1f3      	bne.n	80014bc <http_disconnect+0x20>

	return SOCK_OK;
 80014d4:	2301      	movs	r3, #1
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	3708      	adds	r7, #8
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
	...

080014e0 <http_process_handler>:


static void http_process_handler(uint8_t s, st_http_request * p_http_request)
{
 80014e0:	b5b0      	push	{r4, r5, r7, lr}
 80014e2:	f5ad 7d0a 	sub.w	sp, sp, #552	; 0x228
 80014e6:	af02      	add	r7, sp, #8
 80014e8:	4602      	mov	r2, r0
 80014ea:	463b      	mov	r3, r7
 80014ec:	6019      	str	r1, [r3, #0]
 80014ee:	1dfb      	adds	r3, r7, #7
 80014f0:	701a      	strb	r2, [r3, #0]
	uint8_t * uri_name;
	uint32_t content_addr = 0;
 80014f2:	2300      	movs	r3, #0
 80014f4:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
	uint16_t content_num = 0;
 80014f8:	2300      	movs	r3, #0
 80014fa:	f8a7 3212 	strh.w	r3, [r7, #530]	; 0x212
	uint32_t file_len = 0;
 80014fe:	2300      	movs	r3, #0
 8001500:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c

	uint8_t uri_buf[MAX_URI_SIZE]={0x00, };
 8001504:	f107 030c 	add.w	r3, r7, #12
 8001508:	2200      	movs	r2, #0
 800150a:	601a      	str	r2, [r3, #0]
 800150c:	3304      	adds	r3, #4
 800150e:	f44f 72fe 	mov.w	r2, #508	; 0x1fc
 8001512:	2100      	movs	r1, #0
 8001514:	4618      	mov	r0, r3
 8001516:	f006 ff23 	bl	8008360 <memset>

	uint16_t http_status;
	int8_t get_seqnum;
	uint8_t content_found;

	if((get_seqnum = getHTTPSequenceNum(s)) == -1) return; // exception handling; invalid number
 800151a:	1dfb      	adds	r3, r7, #7
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	4618      	mov	r0, r3
 8001520:	f7ff fb84 	bl	8000c2c <getHTTPSequenceNum>
 8001524:	4603      	mov	r3, r0
 8001526:	f887 3218 	strb.w	r3, [r7, #536]	; 0x218
 800152a:	f997 3218 	ldrsb.w	r3, [r7, #536]	; 0x218
 800152e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001532:	f000 81e8 	beq.w	8001906 <http_process_handler+0x426>

	http_status = 0;
 8001536:	2300      	movs	r3, #0
 8001538:	f8a7 321a 	strh.w	r3, [r7, #538]	; 0x21a
	http_response = pHTTP_RX;
 800153c:	4bc9      	ldr	r3, [pc, #804]	; (8001864 <http_process_handler+0x384>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4ac9      	ldr	r2, [pc, #804]	; (8001868 <http_process_handler+0x388>)
 8001542:	6013      	str	r3, [r2, #0]
	file_len = 0;
 8001544:	2300      	movs	r3, #0
 8001546:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c

	//method Analyze
	switch (p_http_request->METHOD)
 800154a:	463b      	mov	r3, r7
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	2b03      	cmp	r3, #3
 8001552:	f000 811e 	beq.w	8001792 <http_process_handler+0x2b2>
 8001556:	2b03      	cmp	r3, #3
 8001558:	f300 81c7 	bgt.w	80018ea <http_process_handler+0x40a>
 800155c:	2b00      	cmp	r3, #0
 800155e:	d007      	beq.n	8001570 <http_process_handler+0x90>
 8001560:	2b00      	cmp	r3, #0
 8001562:	f2c0 81c2 	blt.w	80018ea <http_process_handler+0x40a>
 8001566:	3b01      	subs	r3, #1
 8001568:	2b01      	cmp	r3, #1
 800156a:	f200 81be 	bhi.w	80018ea <http_process_handler+0x40a>
 800156e:	e00d      	b.n	800158c <http_process_handler+0xac>
	{
		case METHOD_ERR :
			http_status = STATUS_BAD_REQ;
 8001570:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001574:	f8a7 321a 	strh.w	r3, [r7, #538]	; 0x21a
			send_http_response_header(s, 0, 0, http_status);
 8001578:	f8b7 221a 	ldrh.w	r2, [r7, #538]	; 0x21a
 800157c:	1dfb      	adds	r3, r7, #7
 800157e:	7818      	ldrb	r0, [r3, #0]
 8001580:	4613      	mov	r3, r2
 8001582:	2200      	movs	r2, #0
 8001584:	2100      	movs	r1, #0
 8001586:	f7ff fd8d 	bl	80010a4 <send_http_response_header>
			break;
 800158a:	e1bf      	b.n	800190c <http_process_handler+0x42c>

		case METHOD_HEAD :
		case METHOD_GET :
			get_http_uri_name(p_http_request->URI, uri_buf);
 800158c:	463b      	mov	r3, r7
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	3302      	adds	r3, #2
 8001592:	f107 020c 	add.w	r2, r7, #12
 8001596:	4611      	mov	r1, r2
 8001598:	4618      	mov	r0, r3
 800159a:	f7ff fab3 	bl	8000b04 <get_http_uri_name>
			uri_name = uri_buf;
 800159e:	f107 030c 	add.w	r3, r7, #12
 80015a2:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214

			if (!strcmp((char *)uri_name, "/")) strcpy((char *)uri_name, INITIAL_WEBPAGE);	// If URI is "/", respond by index.html
 80015a6:	49b1      	ldr	r1, [pc, #708]	; (800186c <http_process_handler+0x38c>)
 80015a8:	f8d7 0214 	ldr.w	r0, [r7, #532]	; 0x214
 80015ac:	f7fe fe10 	bl	80001d0 <strcmp>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d10b      	bne.n	80015ce <http_process_handler+0xee>
 80015b6:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80015ba:	49ad      	ldr	r1, [pc, #692]	; (8001870 <http_process_handler+0x390>)
 80015bc:	461a      	mov	r2, r3
 80015be:	460b      	mov	r3, r1
 80015c0:	cb03      	ldmia	r3!, {r0, r1}
 80015c2:	6010      	str	r0, [r2, #0]
 80015c4:	6051      	str	r1, [r2, #4]
 80015c6:	8819      	ldrh	r1, [r3, #0]
 80015c8:	789b      	ldrb	r3, [r3, #2]
 80015ca:	8111      	strh	r1, [r2, #8]
 80015cc:	7293      	strb	r3, [r2, #10]
			if (!strcmp((char *)uri_name, "m")) strcpy((char *)uri_name, M_INITIAL_WEBPAGE);
 80015ce:	49a9      	ldr	r1, [pc, #676]	; (8001874 <http_process_handler+0x394>)
 80015d0:	f8d7 0214 	ldr.w	r0, [r7, #532]	; 0x214
 80015d4:	f7fe fdfc 	bl	80001d0 <strcmp>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d10a      	bne.n	80015f4 <http_process_handler+0x114>
 80015de:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80015e2:	4aa5      	ldr	r2, [pc, #660]	; (8001878 <http_process_handler+0x398>)
 80015e4:	461c      	mov	r4, r3
 80015e6:	4613      	mov	r3, r2
 80015e8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80015ea:	6020      	str	r0, [r4, #0]
 80015ec:	6061      	str	r1, [r4, #4]
 80015ee:	60a2      	str	r2, [r4, #8]
 80015f0:	781b      	ldrb	r3, [r3, #0]
 80015f2:	7323      	strb	r3, [r4, #12]
			if (!strcmp((char *)uri_name, "mobile")) strcpy((char *)uri_name, MOBILE_INITIAL_WEBPAGE);
 80015f4:	49a1      	ldr	r1, [pc, #644]	; (800187c <http_process_handler+0x39c>)
 80015f6:	f8d7 0214 	ldr.w	r0, [r7, #532]	; 0x214
 80015fa:	f7fe fde9 	bl	80001d0 <strcmp>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d10b      	bne.n	800161c <http_process_handler+0x13c>
 8001604:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8001608:	4a9d      	ldr	r2, [pc, #628]	; (8001880 <http_process_handler+0x3a0>)
 800160a:	461d      	mov	r5, r3
 800160c:	4614      	mov	r4, r2
 800160e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001610:	6028      	str	r0, [r5, #0]
 8001612:	6069      	str	r1, [r5, #4]
 8001614:	60aa      	str	r2, [r5, #8]
 8001616:	60eb      	str	r3, [r5, #12]
 8001618:	8823      	ldrh	r3, [r4, #0]
 800161a:	822b      	strh	r3, [r5, #16]
			find_http_uri_type(&p_http_request->TYPE, uri_name);	// Checking requested file types (HTML, TEXT, GIF, JPEG and Etc. are included)
 800161c:	463b      	mov	r3, r7
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	3301      	adds	r3, #1
 8001622:	f8d7 1214 	ldr.w	r1, [r7, #532]	; 0x214
 8001626:	4618      	mov	r0, r3
 8001628:	f7ff f86c 	bl	8000704 <find_http_uri_type>

#ifdef _HTTPSERVER_DEBUG_
			printf("\r\n> HTTPSocket[%d] : HTTP Method GET\r\n", s);
 800162c:	1dfb      	adds	r3, r7, #7
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	4619      	mov	r1, r3
 8001632:	4894      	ldr	r0, [pc, #592]	; (8001884 <http_process_handler+0x3a4>)
 8001634:	f006 ff46 	bl	80084c4 <iprintf>
			printf("> HTTPSocket[%d] : Request Type = %d\r\n", s, p_http_request->TYPE);
 8001638:	1dfb      	adds	r3, r7, #7
 800163a:	7819      	ldrb	r1, [r3, #0]
 800163c:	463b      	mov	r3, r7
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	785b      	ldrb	r3, [r3, #1]
 8001642:	461a      	mov	r2, r3
 8001644:	4890      	ldr	r0, [pc, #576]	; (8001888 <http_process_handler+0x3a8>)
 8001646:	f006 ff3d 	bl	80084c4 <iprintf>
			printf("> HTTPSocket[%d] : Request URI = %s\r\n", s, uri_name);
 800164a:	1dfb      	adds	r3, r7, #7
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 8001652:	4619      	mov	r1, r3
 8001654:	488d      	ldr	r0, [pc, #564]	; (800188c <http_process_handler+0x3ac>)
 8001656:	f006 ff35 	bl	80084c4 <iprintf>
#endif

			if(p_http_request->TYPE == PTYPE_CGI)
 800165a:	463b      	mov	r3, r7
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	785b      	ldrb	r3, [r3, #1]
 8001660:	2b08      	cmp	r3, #8
 8001662:	d12b      	bne.n	80016bc <http_process_handler+0x1dc>
			{
				content_found = http_get_cgi_handler(uri_name, pHTTP_TX, &file_len);
 8001664:	4b8a      	ldr	r3, [pc, #552]	; (8001890 <http_process_handler+0x3b0>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f507 7203 	add.w	r2, r7, #524	; 0x20c
 800166c:	4619      	mov	r1, r3
 800166e:	f8d7 0214 	ldr.w	r0, [r7, #532]	; 0x214
 8001672:	f000 fa37 	bl	8001ae4 <http_get_cgi_handler>
 8001676:	4603      	mov	r3, r0
 8001678:	f887 3219 	strb.w	r3, [r7, #537]	; 0x219
				if(content_found && (file_len <= (DATA_BUF_SIZE-(strlen(RES_CGIHEAD_OK)+8))))
 800167c:	f897 3219 	ldrb.w	r3, [r7, #537]	; 0x219
 8001680:	2b00      	cmp	r3, #0
 8001682:	d012      	beq.n	80016aa <http_process_handler+0x1ca>
 8001684:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8001688:	f240 72be 	movw	r2, #1982	; 0x7be
 800168c:	4293      	cmp	r3, r2
 800168e:	d80c      	bhi.n	80016aa <http_process_handler+0x1ca>
				{
					send_http_response_cgi(s, http_response, pHTTP_TX, (uint16_t)file_len);
 8001690:	4b75      	ldr	r3, [pc, #468]	; (8001868 <http_process_handler+0x388>)
 8001692:	6819      	ldr	r1, [r3, #0]
 8001694:	4b7e      	ldr	r3, [pc, #504]	; (8001890 <http_process_handler+0x3b0>)
 8001696:	681a      	ldr	r2, [r3, #0]
 8001698:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800169c:	b29c      	uxth	r4, r3
 800169e:	1dfb      	adds	r3, r7, #7
 80016a0:	7818      	ldrb	r0, [r3, #0]
 80016a2:	4623      	mov	r3, r4
 80016a4:	f7ff fec6 	bl	8001434 <send_http_response_cgi>
				if(http_status == STATUS_OK)
				{
					send_http_response_body(s, uri_name, http_response, content_addr, file_len);
				}
			}
			break;
 80016a8:	e12f      	b.n	800190a <http_process_handler+0x42a>
					send_http_response_header(s, PTYPE_CGI, 0, STATUS_NOT_FOUND);
 80016aa:	1dfb      	adds	r3, r7, #7
 80016ac:	7818      	ldrb	r0, [r3, #0]
 80016ae:	f44f 73ca 	mov.w	r3, #404	; 0x194
 80016b2:	2200      	movs	r2, #0
 80016b4:	2108      	movs	r1, #8
 80016b6:	f7ff fcf5 	bl	80010a4 <send_http_response_header>
			break;
 80016ba:	e126      	b.n	800190a <http_process_handler+0x42a>
				if(find_userReg_webContent(uri_buf, &content_num, &file_len))
 80016bc:	f507 7203 	add.w	r2, r7, #524	; 0x20c
 80016c0:	f207 2112 	addw	r1, r7, #530	; 0x212
 80016c4:	f107 030c 	add.w	r3, r7, #12
 80016c8:	4618      	mov	r0, r3
 80016ca:	f000 f991 	bl	80019f0 <find_userReg_webContent>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d011      	beq.n	80016f8 <http_process_handler+0x218>
					content_found = 1; // Web content found in code flash memory
 80016d4:	2301      	movs	r3, #1
 80016d6:	f887 3219 	strb.w	r3, [r7, #537]	; 0x219
					content_addr = (uint32_t)content_num;
 80016da:	f8b7 3212 	ldrh.w	r3, [r7, #530]	; 0x212
 80016de:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
					HTTPSock_Status[get_seqnum].storage_type = CODEFLASH;
 80016e2:	f997 3218 	ldrsb.w	r3, [r7, #536]	; 0x218
 80016e6:	4a6b      	ldr	r2, [pc, #428]	; (8001894 <http_process_handler+0x3b4>)
 80016e8:	2194      	movs	r1, #148	; 0x94
 80016ea:	fb01 f303 	mul.w	r3, r1, r3
 80016ee:	4413      	add	r3, r2
 80016f0:	3390      	adds	r3, #144	; 0x90
 80016f2:	2201      	movs	r2, #1
 80016f4:	701a      	strb	r2, [r3, #0]
 80016f6:	e002      	b.n	80016fe <http_process_handler+0x21e>
					content_found = 0; // fail to find content
 80016f8:	2300      	movs	r3, #0
 80016fa:	f887 3219 	strb.w	r3, [r7, #537]	; 0x219
				if(!content_found)
 80016fe:	f897 3219 	ldrb.w	r3, [r7, #537]	; 0x219
 8001702:	2b00      	cmp	r3, #0
 8001704:	d10a      	bne.n	800171c <http_process_handler+0x23c>
					printf("> HTTPSocket[%d] : Unknown Page Request\r\n", s);
 8001706:	1dfb      	adds	r3, r7, #7
 8001708:	781b      	ldrb	r3, [r3, #0]
 800170a:	4619      	mov	r1, r3
 800170c:	4862      	ldr	r0, [pc, #392]	; (8001898 <http_process_handler+0x3b8>)
 800170e:	f006 fed9 	bl	80084c4 <iprintf>
					http_status = STATUS_NOT_FOUND;
 8001712:	f44f 73ca 	mov.w	r3, #404	; 0x194
 8001716:	f8a7 321a 	strh.w	r3, [r7, #538]	; 0x21a
 800171a:	e00e      	b.n	800173a <http_process_handler+0x25a>
					printf("> HTTPSocket[%d] : Find Content [%s] ok - Start [%ld] len [ %ld ]byte\r\n", s, uri_name, content_addr, file_len);
 800171c:	1dfb      	adds	r3, r7, #7
 800171e:	7819      	ldrb	r1, [r3, #0]
 8001720:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8001724:	9300      	str	r3, [sp, #0]
 8001726:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 800172a:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 800172e:	485b      	ldr	r0, [pc, #364]	; (800189c <http_process_handler+0x3bc>)
 8001730:	f006 fec8 	bl	80084c4 <iprintf>
					http_status = STATUS_OK;
 8001734:	23c8      	movs	r3, #200	; 0xc8
 8001736:	f8a7 321a 	strh.w	r3, [r7, #538]	; 0x21a
				if(http_status)
 800173a:	f8b7 321a 	ldrh.w	r3, [r7, #538]	; 0x21a
 800173e:	2b00      	cmp	r3, #0
 8001740:	d013      	beq.n	800176a <http_process_handler+0x28a>
					printf("> HTTPSocket[%d] : Requested content len = [ %ld ]byte\r\n", s, file_len);
 8001742:	1dfb      	adds	r3, r7, #7
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 800174a:	4619      	mov	r1, r3
 800174c:	4854      	ldr	r0, [pc, #336]	; (80018a0 <http_process_handler+0x3c0>)
 800174e:	f006 feb9 	bl	80084c4 <iprintf>
					send_http_response_header(s, p_http_request->TYPE, file_len, http_status);
 8001752:	463b      	mov	r3, r7
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	7859      	ldrb	r1, [r3, #1]
 8001758:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 800175c:	f8b7 421a 	ldrh.w	r4, [r7, #538]	; 0x21a
 8001760:	1dfb      	adds	r3, r7, #7
 8001762:	7818      	ldrb	r0, [r3, #0]
 8001764:	4623      	mov	r3, r4
 8001766:	f7ff fc9d 	bl	80010a4 <send_http_response_header>
				if(http_status == STATUS_OK)
 800176a:	f8b7 321a 	ldrh.w	r3, [r7, #538]	; 0x21a
 800176e:	2bc8      	cmp	r3, #200	; 0xc8
 8001770:	f040 80cb 	bne.w	800190a <http_process_handler+0x42a>
					send_http_response_body(s, uri_name, http_response, content_addr, file_len);
 8001774:	4b3c      	ldr	r3, [pc, #240]	; (8001868 <http_process_handler+0x388>)
 8001776:	6819      	ldr	r1, [r3, #0]
 8001778:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800177c:	1dfa      	adds	r2, r7, #7
 800177e:	7810      	ldrb	r0, [r2, #0]
 8001780:	9300      	str	r3, [sp, #0]
 8001782:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8001786:	460a      	mov	r2, r1
 8001788:	f8d7 1214 	ldr.w	r1, [r7, #532]	; 0x214
 800178c:	f7ff fd0e 	bl	80011ac <send_http_response_body>
			break;
 8001790:	e0bb      	b.n	800190a <http_process_handler+0x42a>

		case METHOD_POST :
			mid((char *)p_http_request->URI, "/", " HTTP", (char *)uri_buf);
 8001792:	463b      	mov	r3, r7
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	1c98      	adds	r0, r3, #2
 8001798:	f107 030c 	add.w	r3, r7, #12
 800179c:	4a41      	ldr	r2, [pc, #260]	; (80018a4 <http_process_handler+0x3c4>)
 800179e:	4933      	ldr	r1, [pc, #204]	; (800186c <http_process_handler+0x38c>)
 80017a0:	f7ff f9da 	bl	8000b58 <mid>
			uri_name = uri_buf;
 80017a4:	f107 030c 	add.w	r3, r7, #12
 80017a8:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
			find_http_uri_type(&p_http_request->TYPE, uri_name);	// Check file type (HTML, TEXT, GIF, JPEG are included)
 80017ac:	463b      	mov	r3, r7
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	3301      	adds	r3, #1
 80017b2:	f8d7 1214 	ldr.w	r1, [r7, #532]	; 0x214
 80017b6:	4618      	mov	r0, r3
 80017b8:	f7fe ffa4 	bl	8000704 <find_http_uri_type>

#ifdef _HTTPSERVER_DEBUG_
			printf("\r\n> HTTPSocket[%d] : HTTP Method POST\r\n", s);
 80017bc:	1dfb      	adds	r3, r7, #7
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	4619      	mov	r1, r3
 80017c2:	4839      	ldr	r0, [pc, #228]	; (80018a8 <http_process_handler+0x3c8>)
 80017c4:	f006 fe7e 	bl	80084c4 <iprintf>
			printf("> HTTPSocket[%d] : Request URI = %s ", s, uri_name);
 80017c8:	1dfb      	adds	r3, r7, #7
 80017ca:	781b      	ldrb	r3, [r3, #0]
 80017cc:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 80017d0:	4619      	mov	r1, r3
 80017d2:	4836      	ldr	r0, [pc, #216]	; (80018ac <http_process_handler+0x3cc>)
 80017d4:	f006 fe76 	bl	80084c4 <iprintf>
			printf("Type = %d\r\n", p_http_request->TYPE);
 80017d8:	463b      	mov	r3, r7
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	785b      	ldrb	r3, [r3, #1]
 80017de:	4619      	mov	r1, r3
 80017e0:	4833      	ldr	r0, [pc, #204]	; (80018b0 <http_process_handler+0x3d0>)
 80017e2:	f006 fe6f 	bl	80084c4 <iprintf>
#endif

			if(p_http_request->TYPE == PTYPE_CGI)	// HTTP POST Method; CGI Process
 80017e6:	463b      	mov	r3, r7
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	785b      	ldrb	r3, [r3, #1]
 80017ec:	2b08      	cmp	r3, #8
 80017ee:	d172      	bne.n	80018d6 <http_process_handler+0x3f6>
			{
				content_found = http_post_cgi_handler(uri_name, p_http_request, http_response, &file_len);
 80017f0:	4b1d      	ldr	r3, [pc, #116]	; (8001868 <http_process_handler+0x388>)
 80017f2:	681a      	ldr	r2, [r3, #0]
 80017f4:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 80017f8:	4639      	mov	r1, r7
 80017fa:	6809      	ldr	r1, [r1, #0]
 80017fc:	f8d7 0214 	ldr.w	r0, [r7, #532]	; 0x214
 8001800:	f000 f99c 	bl	8001b3c <http_post_cgi_handler>
 8001804:	4603      	mov	r3, r0
 8001806:	f887 3219 	strb.w	r3, [r7, #537]	; 0x219
#ifdef _HTTPSERVER_DEBUG_
				printf("> HTTPSocket[%d] : [CGI: %s] / Response len [ %ld ]byte\r\n", s, content_found?"Content found":"Content not found", file_len);
 800180a:	1dfb      	adds	r3, r7, #7
 800180c:	7819      	ldrb	r1, [r3, #0]
 800180e:	f897 3219 	ldrb.w	r3, [r7, #537]	; 0x219
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <http_process_handler+0x33a>
 8001816:	4a27      	ldr	r2, [pc, #156]	; (80018b4 <http_process_handler+0x3d4>)
 8001818:	e000      	b.n	800181c <http_process_handler+0x33c>
 800181a:	4a27      	ldr	r2, [pc, #156]	; (80018b8 <http_process_handler+0x3d8>)
 800181c:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8001820:	4826      	ldr	r0, [pc, #152]	; (80018bc <http_process_handler+0x3dc>)
 8001822:	f006 fe4f 	bl	80084c4 <iprintf>
#endif
				if(content_found && (file_len <= (DATA_BUF_SIZE-(strlen(RES_CGIHEAD_OK)+8))))
 8001826:	f897 3219 	ldrb.w	r3, [r7, #537]	; 0x219
 800182a:	2b00      	cmp	r3, #0
 800182c:	d04a      	beq.n	80018c4 <http_process_handler+0x3e4>
 800182e:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8001832:	f240 72be 	movw	r2, #1982	; 0x7be
 8001836:	4293      	cmp	r3, r2
 8001838:	d844      	bhi.n	80018c4 <http_process_handler+0x3e4>
				{
					send_http_response_cgi(s, pHTTP_TX, http_response, (uint16_t)file_len);
 800183a:	4b15      	ldr	r3, [pc, #84]	; (8001890 <http_process_handler+0x3b0>)
 800183c:	6819      	ldr	r1, [r3, #0]
 800183e:	4b0a      	ldr	r3, [pc, #40]	; (8001868 <http_process_handler+0x388>)
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8001846:	b29c      	uxth	r4, r3
 8001848:	1dfb      	adds	r3, r7, #7
 800184a:	7818      	ldrb	r0, [r3, #0]
 800184c:	4623      	mov	r3, r4
 800184e:	f7ff fdf1 	bl	8001434 <send_http_response_cgi>

					// Reset the H/W for apply to the change configuration information
					if(content_found == HTTP_RESET) HTTPServer_ReStart();
 8001852:	f897 3219 	ldrb.w	r3, [r7, #537]	; 0x219
 8001856:	2b02      	cmp	r3, #2
 8001858:	d146      	bne.n	80018e8 <http_process_handler+0x408>
 800185a:	4b19      	ldr	r3, [pc, #100]	; (80018c0 <http_process_handler+0x3e0>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4798      	blx	r3
 8001860:	e042      	b.n	80018e8 <http_process_handler+0x408>
 8001862:	bf00      	nop
 8001864:	20000a2c 	.word	0x20000a2c
 8001868:	2000012c 	.word	0x2000012c
 800186c:	0800a440 	.word	0x0800a440
 8001870:	0800a444 	.word	0x0800a444
 8001874:	0800a450 	.word	0x0800a450
 8001878:	0800a454 	.word	0x0800a454
 800187c:	0800a464 	.word	0x0800a464
 8001880:	0800a46c 	.word	0x0800a46c
 8001884:	0800a480 	.word	0x0800a480
 8001888:	0800a4a8 	.word	0x0800a4a8
 800188c:	0800a4d0 	.word	0x0800a4d0
 8001890:	20000a28 	.word	0x20000a28
 8001894:	20000138 	.word	0x20000138
 8001898:	0800a4f8 	.word	0x0800a4f8
 800189c:	0800a524 	.word	0x0800a524
 80018a0:	0800a56c 	.word	0x0800a56c
 80018a4:	0800a5a8 	.word	0x0800a5a8
 80018a8:	0800a5b0 	.word	0x0800a5b0
 80018ac:	0800a5d8 	.word	0x0800a5d8
 80018b0:	0800a600 	.word	0x0800a600
 80018b4:	0800a60c 	.word	0x0800a60c
 80018b8:	0800a61c 	.word	0x0800a61c
 80018bc:	0800a630 	.word	0x0800a630
 80018c0:	20000010 	.word	0x20000010
				}
				else
				{
					send_http_response_header(s, PTYPE_CGI, 0, STATUS_NOT_FOUND);
 80018c4:	1dfb      	adds	r3, r7, #7
 80018c6:	7818      	ldrb	r0, [r3, #0]
 80018c8:	f44f 73ca 	mov.w	r3, #404	; 0x194
 80018cc:	2200      	movs	r2, #0
 80018ce:	2108      	movs	r1, #8
 80018d0:	f7ff fbe8 	bl	80010a4 <send_http_response_header>
			}
			else	// HTTP POST Method; Content not found
			{
				send_http_response_header(s, 0, 0, STATUS_NOT_FOUND);
			}
			break;
 80018d4:	e01a      	b.n	800190c <http_process_handler+0x42c>
				send_http_response_header(s, 0, 0, STATUS_NOT_FOUND);
 80018d6:	1dfb      	adds	r3, r7, #7
 80018d8:	7818      	ldrb	r0, [r3, #0]
 80018da:	f44f 73ca 	mov.w	r3, #404	; 0x194
 80018de:	2200      	movs	r2, #0
 80018e0:	2100      	movs	r1, #0
 80018e2:	f7ff fbdf 	bl	80010a4 <send_http_response_header>
			break;
 80018e6:	e011      	b.n	800190c <http_process_handler+0x42c>
 80018e8:	e010      	b.n	800190c <http_process_handler+0x42c>

		default :
			http_status = STATUS_BAD_REQ;
 80018ea:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80018ee:	f8a7 321a 	strh.w	r3, [r7, #538]	; 0x21a
			send_http_response_header(s, 0, 0, http_status);
 80018f2:	f8b7 221a 	ldrh.w	r2, [r7, #538]	; 0x21a
 80018f6:	1dfb      	adds	r3, r7, #7
 80018f8:	7818      	ldrb	r0, [r3, #0]
 80018fa:	4613      	mov	r3, r2
 80018fc:	2200      	movs	r2, #0
 80018fe:	2100      	movs	r1, #0
 8001900:	f7ff fbd0 	bl	80010a4 <send_http_response_header>
			break;
 8001904:	e002      	b.n	800190c <http_process_handler+0x42c>
	if((get_seqnum = getHTTPSequenceNum(s)) == -1) return; // exception handling; invalid number
 8001906:	bf00      	nop
 8001908:	e000      	b.n	800190c <http_process_handler+0x42c>
			break;
 800190a:	bf00      	nop
	}
}
 800190c:	f507 7708 	add.w	r7, r7, #544	; 0x220
 8001910:	46bd      	mov	sp, r7
 8001912:	bdb0      	pop	{r4, r5, r7, pc}

08001914 <get_httpServer_timecount>:
{
	httpServer_tick_1s++;
}

uint32_t get_httpServer_timecount(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
	return httpServer_tick_1s;
 8001918:	4b03      	ldr	r3, [pc, #12]	; (8001928 <get_httpServer_timecount+0x14>)
 800191a:	681b      	ldr	r3, [r3, #0]
}
 800191c:	4618      	mov	r0, r3
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr
 8001926:	bf00      	nop
 8001928:	20000134 	.word	0x20000134

0800192c <reg_httpServer_webContent>:

void reg_httpServer_webContent(uint8_t * content_name, uint8_t * content)
{
 800192c:	b590      	push	{r4, r7, lr}
 800192e:	b085      	sub	sp, #20
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
 8001934:	6039      	str	r1, [r7, #0]
	uint16_t name_len;
	uint32_t content_len;

	if(content_name == NULL || content == NULL)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d04e      	beq.n	80019da <reg_httpServer_webContent+0xae>
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d04b      	beq.n	80019da <reg_httpServer_webContent+0xae>
	{
		return;
	}
	else if(total_content_cnt >= MAX_CONTENT_CALLBACK)
 8001942:	4b29      	ldr	r3, [pc, #164]	; (80019e8 <reg_httpServer_webContent+0xbc>)
 8001944:	881b      	ldrh	r3, [r3, #0]
 8001946:	2b13      	cmp	r3, #19
 8001948:	d849      	bhi.n	80019de <reg_httpServer_webContent+0xb2>
	{
		return;
	}

	name_len = strlen((char *)content_name);
 800194a:	6878      	ldr	r0, [r7, #4]
 800194c:	f7fe fc4a 	bl	80001e4 <strlen>
 8001950:	4603      	mov	r3, r0
 8001952:	81fb      	strh	r3, [r7, #14]
	content_len = strlen((char *)content);
 8001954:	6838      	ldr	r0, [r7, #0]
 8001956:	f7fe fc45 	bl	80001e4 <strlen>
 800195a:	60b8      	str	r0, [r7, #8]

	web_content[total_content_cnt].content_name = malloc(name_len+1);
 800195c:	89fb      	ldrh	r3, [r7, #14]
 800195e:	3301      	adds	r3, #1
 8001960:	461a      	mov	r2, r3
 8001962:	4b21      	ldr	r3, [pc, #132]	; (80019e8 <reg_httpServer_webContent+0xbc>)
 8001964:	881b      	ldrh	r3, [r3, #0]
 8001966:	461c      	mov	r4, r3
 8001968:	4610      	mov	r0, r2
 800196a:	f006 fce3 	bl	8008334 <malloc>
 800196e:	4603      	mov	r3, r0
 8001970:	4619      	mov	r1, r3
 8001972:	4a1e      	ldr	r2, [pc, #120]	; (80019ec <reg_httpServer_webContent+0xc0>)
 8001974:	4623      	mov	r3, r4
 8001976:	005b      	lsls	r3, r3, #1
 8001978:	4423      	add	r3, r4
 800197a:	009b      	lsls	r3, r3, #2
 800197c:	4413      	add	r3, r2
 800197e:	6019      	str	r1, [r3, #0]
	strcpy((char *)web_content[total_content_cnt].content_name, (const char *)content_name);
 8001980:	4b19      	ldr	r3, [pc, #100]	; (80019e8 <reg_httpServer_webContent+0xbc>)
 8001982:	881b      	ldrh	r3, [r3, #0]
 8001984:	4619      	mov	r1, r3
 8001986:	4a19      	ldr	r2, [pc, #100]	; (80019ec <reg_httpServer_webContent+0xc0>)
 8001988:	460b      	mov	r3, r1
 800198a:	005b      	lsls	r3, r3, #1
 800198c:	440b      	add	r3, r1
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	4413      	add	r3, r2
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	6879      	ldr	r1, [r7, #4]
 8001996:	4618      	mov	r0, r3
 8001998:	f006 fe61 	bl	800865e <strcpy>
	web_content[total_content_cnt].content_len = content_len;
 800199c:	4b12      	ldr	r3, [pc, #72]	; (80019e8 <reg_httpServer_webContent+0xbc>)
 800199e:	881b      	ldrh	r3, [r3, #0]
 80019a0:	4619      	mov	r1, r3
 80019a2:	4a12      	ldr	r2, [pc, #72]	; (80019ec <reg_httpServer_webContent+0xc0>)
 80019a4:	460b      	mov	r3, r1
 80019a6:	005b      	lsls	r3, r3, #1
 80019a8:	440b      	add	r3, r1
 80019aa:	009b      	lsls	r3, r3, #2
 80019ac:	4413      	add	r3, r2
 80019ae:	3304      	adds	r3, #4
 80019b0:	68ba      	ldr	r2, [r7, #8]
 80019b2:	601a      	str	r2, [r3, #0]
	web_content[total_content_cnt].content = content;
 80019b4:	4b0c      	ldr	r3, [pc, #48]	; (80019e8 <reg_httpServer_webContent+0xbc>)
 80019b6:	881b      	ldrh	r3, [r3, #0]
 80019b8:	4619      	mov	r1, r3
 80019ba:	4a0c      	ldr	r2, [pc, #48]	; (80019ec <reg_httpServer_webContent+0xc0>)
 80019bc:	460b      	mov	r3, r1
 80019be:	005b      	lsls	r3, r3, #1
 80019c0:	440b      	add	r3, r1
 80019c2:	009b      	lsls	r3, r3, #2
 80019c4:	4413      	add	r3, r2
 80019c6:	3308      	adds	r3, #8
 80019c8:	683a      	ldr	r2, [r7, #0]
 80019ca:	601a      	str	r2, [r3, #0]

	total_content_cnt++;
 80019cc:	4b06      	ldr	r3, [pc, #24]	; (80019e8 <reg_httpServer_webContent+0xbc>)
 80019ce:	881b      	ldrh	r3, [r3, #0]
 80019d0:	3301      	adds	r3, #1
 80019d2:	b29a      	uxth	r2, r3
 80019d4:	4b04      	ldr	r3, [pc, #16]	; (80019e8 <reg_httpServer_webContent+0xbc>)
 80019d6:	801a      	strh	r2, [r3, #0]
 80019d8:	e002      	b.n	80019e0 <reg_httpServer_webContent+0xb4>
		return;
 80019da:	bf00      	nop
 80019dc:	e000      	b.n	80019e0 <reg_httpServer_webContent+0xb4>
		return;
 80019de:	bf00      	nop
}
 80019e0:	3714      	adds	r7, #20
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd90      	pop	{r4, r7, pc}
 80019e6:	bf00      	nop
 80019e8:	20000130 	.word	0x20000130
 80019ec:	20000a30 	.word	0x20000a30

080019f0 <find_userReg_webContent>:

	return ret;
}

uint8_t find_userReg_webContent(uint8_t * content_name, uint16_t * content_num, uint32_t * file_len)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b086      	sub	sp, #24
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	60f8      	str	r0, [r7, #12]
 80019f8:	60b9      	str	r1, [r7, #8]
 80019fa:	607a      	str	r2, [r7, #4]
	uint16_t i;
	uint8_t ret = 0; // '0' means 'File Not Found'
 80019fc:	2300      	movs	r3, #0
 80019fe:	757b      	strb	r3, [r7, #21]

	for(i = 0; i < total_content_cnt; i++)
 8001a00:	2300      	movs	r3, #0
 8001a02:	82fb      	strh	r3, [r7, #22]
 8001a04:	e022      	b.n	8001a4c <find_userReg_webContent+0x5c>
	{
		if(!strcmp((char *)content_name, (char *)web_content[i].content_name))
 8001a06:	8afa      	ldrh	r2, [r7, #22]
 8001a08:	4915      	ldr	r1, [pc, #84]	; (8001a60 <find_userReg_webContent+0x70>)
 8001a0a:	4613      	mov	r3, r2
 8001a0c:	005b      	lsls	r3, r3, #1
 8001a0e:	4413      	add	r3, r2
 8001a10:	009b      	lsls	r3, r3, #2
 8001a12:	440b      	add	r3, r1
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4619      	mov	r1, r3
 8001a18:	68f8      	ldr	r0, [r7, #12]
 8001a1a:	f7fe fbd9 	bl	80001d0 <strcmp>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d110      	bne.n	8001a46 <find_userReg_webContent+0x56>
		{
			*file_len = web_content[i].content_len;
 8001a24:	8afa      	ldrh	r2, [r7, #22]
 8001a26:	490e      	ldr	r1, [pc, #56]	; (8001a60 <find_userReg_webContent+0x70>)
 8001a28:	4613      	mov	r3, r2
 8001a2a:	005b      	lsls	r3, r3, #1
 8001a2c:	4413      	add	r3, r2
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	440b      	add	r3, r1
 8001a32:	3304      	adds	r3, #4
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	601a      	str	r2, [r3, #0]
			*content_num = i;
 8001a3a:	68bb      	ldr	r3, [r7, #8]
 8001a3c:	8afa      	ldrh	r2, [r7, #22]
 8001a3e:	801a      	strh	r2, [r3, #0]
			ret = 1; // If the requested content found, ret set to '1' (Found)
 8001a40:	2301      	movs	r3, #1
 8001a42:	757b      	strb	r3, [r7, #21]
			break;
 8001a44:	e007      	b.n	8001a56 <find_userReg_webContent+0x66>
	for(i = 0; i < total_content_cnt; i++)
 8001a46:	8afb      	ldrh	r3, [r7, #22]
 8001a48:	3301      	adds	r3, #1
 8001a4a:	82fb      	strh	r3, [r7, #22]
 8001a4c:	4b05      	ldr	r3, [pc, #20]	; (8001a64 <find_userReg_webContent+0x74>)
 8001a4e:	881b      	ldrh	r3, [r3, #0]
 8001a50:	8afa      	ldrh	r2, [r7, #22]
 8001a52:	429a      	cmp	r2, r3
 8001a54:	d3d7      	bcc.n	8001a06 <find_userReg_webContent+0x16>
		}
	}
	return ret;
 8001a56:	7d7b      	ldrb	r3, [r7, #21]
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	3718      	adds	r7, #24
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	20000a30 	.word	0x20000a30
 8001a64:	20000130 	.word	0x20000130

08001a68 <read_userReg_webContent>:


uint16_t read_userReg_webContent(uint16_t content_num, uint8_t * buf, uint32_t offset, uint16_t size)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b086      	sub	sp, #24
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	60b9      	str	r1, [r7, #8]
 8001a70:	607a      	str	r2, [r7, #4]
 8001a72:	461a      	mov	r2, r3
 8001a74:	4603      	mov	r3, r0
 8001a76:	81fb      	strh	r3, [r7, #14]
 8001a78:	4613      	mov	r3, r2
 8001a7a:	81bb      	strh	r3, [r7, #12]
	uint16_t ret = 0;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	827b      	strh	r3, [r7, #18]
	uint8_t * ptr;

	if(content_num > total_content_cnt) return 0;
 8001a80:	4b16      	ldr	r3, [pc, #88]	; (8001adc <read_userReg_webContent+0x74>)
 8001a82:	881b      	ldrh	r3, [r3, #0]
 8001a84:	89fa      	ldrh	r2, [r7, #14]
 8001a86:	429a      	cmp	r2, r3
 8001a88:	d901      	bls.n	8001a8e <read_userReg_webContent+0x26>
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	e021      	b.n	8001ad2 <read_userReg_webContent+0x6a>

	ptr = web_content[content_num].content;
 8001a8e:	89fa      	ldrh	r2, [r7, #14]
 8001a90:	4913      	ldr	r1, [pc, #76]	; (8001ae0 <read_userReg_webContent+0x78>)
 8001a92:	4613      	mov	r3, r2
 8001a94:	005b      	lsls	r3, r3, #1
 8001a96:	4413      	add	r3, r2
 8001a98:	009b      	lsls	r3, r3, #2
 8001a9a:	440b      	add	r3, r1
 8001a9c:	3308      	adds	r3, #8
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	617b      	str	r3, [r7, #20]
	if(offset) ptr += offset;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d003      	beq.n	8001ab0 <read_userReg_webContent+0x48>
 8001aa8:	697a      	ldr	r2, [r7, #20]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	4413      	add	r3, r2
 8001aae:	617b      	str	r3, [r7, #20]

	strncpy((char *)buf, (char *)ptr, size);
 8001ab0:	89bb      	ldrh	r3, [r7, #12]
 8001ab2:	461a      	mov	r2, r3
 8001ab4:	6979      	ldr	r1, [r7, #20]
 8001ab6:	68b8      	ldr	r0, [r7, #8]
 8001ab8:	f006 fdd9 	bl	800866e <strncpy>
	*(buf+size) = 0; // Insert '/0' for indicates the 'End of String' (null terminated)
 8001abc:	89bb      	ldrh	r3, [r7, #12]
 8001abe:	68ba      	ldr	r2, [r7, #8]
 8001ac0:	4413      	add	r3, r2
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	701a      	strb	r2, [r3, #0]

	ret = strlen((void *)buf);
 8001ac6:	68b8      	ldr	r0, [r7, #8]
 8001ac8:	f7fe fb8c 	bl	80001e4 <strlen>
 8001acc:	4603      	mov	r3, r0
 8001ace:	827b      	strh	r3, [r7, #18]
	return ret;
 8001ad0:	8a7b      	ldrh	r3, [r7, #18]
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3718      	adds	r7, #24
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	20000130 	.word	0x20000130
 8001ae0:	20000a30 	.word	0x20000a30

08001ae4 <http_get_cgi_handler>:
#include <string.h>
#include <stdlib.h>
#include "httpUtil.h"

uint8_t http_get_cgi_handler(uint8_t * uri_name, uint8_t * buf, uint32_t * file_len)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b086      	sub	sp, #24
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	60f8      	str	r0, [r7, #12]
 8001aec:	60b9      	str	r1, [r7, #8]
 8001aee:	607a      	str	r2, [r7, #4]
	uint8_t ret = HTTP_OK;
 8001af0:	2301      	movs	r3, #1
 8001af2:	75fb      	strb	r3, [r7, #23]
	uint16_t len = 0;
 8001af4:	2300      	movs	r3, #0
 8001af6:	82bb      	strh	r3, [r7, #20]

	if(predefined_get_cgi_processor(uri_name, buf, &len))
 8001af8:	f107 0314 	add.w	r3, r7, #20
 8001afc:	461a      	mov	r2, r3
 8001afe:	68b9      	ldr	r1, [r7, #8]
 8001b00:	68f8      	ldr	r0, [r7, #12]
 8001b02:	f000 f8f1 	bl	8001ce8 <predefined_get_cgi_processor>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d108      	bne.n	8001b1e <http_get_cgi_handler+0x3a>
	{
		;
	}
	else if(strcmp((const char *)uri_name, "example.cgi") == 0)
 8001b0c:	490a      	ldr	r1, [pc, #40]	; (8001b38 <http_get_cgi_handler+0x54>)
 8001b0e:	68f8      	ldr	r0, [r7, #12]
 8001b10:	f7fe fb5e 	bl	80001d0 <strcmp>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d001      	beq.n	8001b1e <http_get_cgi_handler+0x3a>
		;
	}
	else
	{
		// CGI file not found
		ret = HTTP_FAILED;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	75fb      	strb	r3, [r7, #23]
	}

	if(ret)	*file_len = len;
 8001b1e:	7dfb      	ldrb	r3, [r7, #23]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d003      	beq.n	8001b2c <http_get_cgi_handler+0x48>
 8001b24:	8abb      	ldrh	r3, [r7, #20]
 8001b26:	461a      	mov	r2, r3
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	601a      	str	r2, [r3, #0]
	return ret;
 8001b2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	3718      	adds	r7, #24
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	0800a71c 	.word	0x0800a71c

08001b3c <http_post_cgi_handler>:

uint8_t http_post_cgi_handler(uint8_t * uri_name, st_http_request * p_http_request, uint8_t * buf, uint32_t * file_len)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b086      	sub	sp, #24
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	60f8      	str	r0, [r7, #12]
 8001b44:	60b9      	str	r1, [r7, #8]
 8001b46:	607a      	str	r2, [r7, #4]
 8001b48:	603b      	str	r3, [r7, #0]
	uint8_t ret = HTTP_OK;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	75fb      	strb	r3, [r7, #23]
	uint16_t len = 0;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	82bb      	strh	r3, [r7, #20]
	uint8_t val = 0;
 8001b52:	2300      	movs	r3, #0
 8001b54:	75bb      	strb	r3, [r7, #22]

	if(predefined_set_cgi_processor(uri_name, p_http_request->URI, buf, &len))
 8001b56:	68bb      	ldr	r3, [r7, #8]
 8001b58:	1c99      	adds	r1, r3, #2
 8001b5a:	f107 0314 	add.w	r3, r7, #20
 8001b5e:	687a      	ldr	r2, [r7, #4]
 8001b60:	68f8      	ldr	r0, [r7, #12]
 8001b62:	f000 f94f 	bl	8001e04 <predefined_set_cgi_processor>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d114      	bne.n	8001b96 <http_post_cgi_handler+0x5a>
	{
		;
	}
	else if(strcmp((const char *)uri_name, "example.cgi") == 0)
 8001b6c:	4910      	ldr	r1, [pc, #64]	; (8001bb0 <http_post_cgi_handler+0x74>)
 8001b6e:	68f8      	ldr	r0, [r7, #12]
 8001b70:	f7fe fb2e 	bl	80001d0 <strcmp>
 8001b74:	4603      	mov	r3, r0
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d10b      	bne.n	8001b92 <http_post_cgi_handler+0x56>
	{
		// To do
		val = 1;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	75bb      	strb	r3, [r7, #22]
		len = sprintf((char *)buf, "%d", val);
 8001b7e:	7dbb      	ldrb	r3, [r7, #22]
 8001b80:	461a      	mov	r2, r3
 8001b82:	490c      	ldr	r1, [pc, #48]	; (8001bb4 <http_post_cgi_handler+0x78>)
 8001b84:	6878      	ldr	r0, [r7, #4]
 8001b86:	f006 fd3b 	bl	8008600 <siprintf>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	b29b      	uxth	r3, r3
 8001b8e:	82bb      	strh	r3, [r7, #20]
 8001b90:	e001      	b.n	8001b96 <http_post_cgi_handler+0x5a>
	}
	else
	{
		// CGI file not found
		ret = HTTP_FAILED;
 8001b92:	2300      	movs	r3, #0
 8001b94:	75fb      	strb	r3, [r7, #23]
	}

	if(ret)	*file_len = len;
 8001b96:	7dfb      	ldrb	r3, [r7, #23]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d003      	beq.n	8001ba4 <http_post_cgi_handler+0x68>
 8001b9c:	8abb      	ldrh	r3, [r7, #20]
 8001b9e:	461a      	mov	r2, r3
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	601a      	str	r2, [r3, #0]
	return ret;
 8001ba4:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	3718      	adds	r7, #24
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	0800a71c 	.word	0x0800a71c
 8001bb4:	0800a728 	.word	0x0800a728

08001bb8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001bbc:	f3bf 8f4f 	dsb	sy
}
 8001bc0:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001bc2:	4b06      	ldr	r3, [pc, #24]	; (8001bdc <__NVIC_SystemReset+0x24>)
 8001bc4:	68db      	ldr	r3, [r3, #12]
 8001bc6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001bca:	4904      	ldr	r1, [pc, #16]	; (8001bdc <__NVIC_SystemReset+0x24>)
 8001bcc:	4b04      	ldr	r3, [pc, #16]	; (8001be0 <__NVIC_SystemReset+0x28>)
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001bd2:	f3bf 8f4f 	dsb	sy
}
 8001bd6:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001bd8:	bf00      	nop
 8001bda:	e7fd      	b.n	8001bd8 <__NVIC_SystemReset+0x20>
 8001bdc:	e000ed00 	.word	0xe000ed00
 8001be0:	05fa0004 	.word	0x05fa0004

08001be4 <UART_Printf>:


//***********************************************************************************************
//           usart tx
//***********************************************************************************************
void UART_Printf(const char* fmt, ...) {
 8001be4:	b40f      	push	{r0, r1, r2, r3}
 8001be6:	b580      	push	{r7, lr}
 8001be8:	b0c2      	sub	sp, #264	; 0x108
 8001bea:	af00      	add	r7, sp, #0
    char buff[256];
    va_list args;
    va_start(args, fmt);
 8001bec:	f507 728a 	add.w	r2, r7, #276	; 0x114
 8001bf0:	1d3b      	adds	r3, r7, #4
 8001bf2:	601a      	str	r2, [r3, #0]
    vsnprintf(buff, sizeof(buff), fmt, args);
 8001bf4:	1d3b      	adds	r3, r7, #4
 8001bf6:	f107 0008 	add.w	r0, r7, #8
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8001c00:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c04:	f006 fde6 	bl	80087d4 <vsniprintf>
    HAL_UART_Transmit(&huart1, (uint8_t*)buff, strlen(buff),
 8001c08:	f107 0308 	add.w	r3, r7, #8
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f7fe fae9 	bl	80001e4 <strlen>
 8001c12:	4603      	mov	r3, r0
 8001c14:	b29a      	uxth	r2, r3
 8001c16:	f107 0108 	add.w	r1, r7, #8
 8001c1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c1e:	4805      	ldr	r0, [pc, #20]	; (8001c34 <UART_Printf+0x50>)
 8001c20:	f005 fd74 	bl	800770c <HAL_UART_Transmit>
                      HAL_MAX_DELAY);
    va_end(args);
}
 8001c24:	bf00      	nop
 8001c26:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001c30:	b004      	add	sp, #16
 8001c32:	4770      	bx	lr
 8001c34:	20000bbc 	.word	0x20000bbc

08001c38 <W5500_Select>:

//***********************************************************************************************
//           spi sel
//***********************************************************************************************
void W5500_Select(void) {
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	2120      	movs	r1, #32
 8001c40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c44:	f003 f8e8 	bl	8004e18 <HAL_GPIO_WritePin>
}
 8001c48:	bf00      	nop
 8001c4a:	bd80      	pop	{r7, pc}

08001c4c <W5500_Unselect>:

void W5500_Unselect(void) {
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8001c50:	2201      	movs	r2, #1
 8001c52:	2120      	movs	r1, #32
 8001c54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c58:	f003 f8de 	bl	8004e18 <HAL_GPIO_WritePin>
}
 8001c5c:	bf00      	nop
 8001c5e:	bd80      	pop	{r7, pc}

08001c60 <W5500_ReadBuff>:

void W5500_ReadBuff(uint8_t* buff, uint16_t len) {
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
 8001c68:	460b      	mov	r3, r1
 8001c6a:	807b      	strh	r3, [r7, #2]
    HAL_SPI_Receive(&hspi1, buff, len, HAL_MAX_DELAY);
 8001c6c:	887a      	ldrh	r2, [r7, #2]
 8001c6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c72:	6879      	ldr	r1, [r7, #4]
 8001c74:	4803      	ldr	r0, [pc, #12]	; (8001c84 <W5500_ReadBuff+0x24>)
 8001c76:	f005 f800 	bl	8006c7a <HAL_SPI_Receive>
}
 8001c7a:	bf00      	nop
 8001c7c:	3708      	adds	r7, #8
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	20000c44 	.word	0x20000c44

08001c88 <W5500_WriteBuff>:

void W5500_WriteBuff(uint8_t* buff, uint16_t len) {
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b082      	sub	sp, #8
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
 8001c90:	460b      	mov	r3, r1
 8001c92:	807b      	strh	r3, [r7, #2]
    HAL_SPI_Transmit(&hspi1, buff, len, HAL_MAX_DELAY);
 8001c94:	887a      	ldrh	r2, [r7, #2]
 8001c96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c9a:	6879      	ldr	r1, [r7, #4]
 8001c9c:	4803      	ldr	r0, [pc, #12]	; (8001cac <W5500_WriteBuff+0x24>)
 8001c9e:	f004 fe7e 	bl	800699e <HAL_SPI_Transmit>
}
 8001ca2:	bf00      	nop
 8001ca4:	3708      	adds	r7, #8
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	20000c44 	.word	0x20000c44

08001cb0 <W5500_ReadByte>:

uint8_t W5500_ReadByte(void) {
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b082      	sub	sp, #8
 8001cb4:	af00      	add	r7, sp, #0
    uint8_t byte;
    W5500_ReadBuff(&byte, sizeof(byte));
 8001cb6:	1dfb      	adds	r3, r7, #7
 8001cb8:	2101      	movs	r1, #1
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f7ff ffd0 	bl	8001c60 <W5500_ReadBuff>
    return byte;
 8001cc0:	79fb      	ldrb	r3, [r7, #7]
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3708      	adds	r7, #8
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}

08001cca <W5500_WriteByte>:

void W5500_WriteByte(uint8_t byte) {
 8001cca:	b580      	push	{r7, lr}
 8001ccc:	b082      	sub	sp, #8
 8001cce:	af00      	add	r7, sp, #0
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	71fb      	strb	r3, [r7, #7]
    W5500_WriteBuff(&byte, sizeof(byte));
 8001cd4:	1dfb      	adds	r3, r7, #7
 8001cd6:	2101      	movs	r1, #1
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f7ff ffd5 	bl	8001c88 <W5500_WriteBuff>
}
 8001cde:	bf00      	nop
 8001ce0:	3708      	adds	r7, #8
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
	...

08001ce8 <predefined_get_cgi_processor>:
void Callback_IPConflict(void) {
    UART_Printf("Callback: IP conflict!\r\n");
}


uint8_t predefined_get_cgi_processor(uint8_t * uri_name, uint8_t * buf, uint16_t * len){
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b084      	sub	sp, #16
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	60f8      	str	r0, [r7, #12]
 8001cf0:	60b9      	str	r1, [r7, #8]
 8001cf2:	607a      	str	r2, [r7, #4]
	if(strcmp((const char *)uri_name, "led1.cgi") == 0){
 8001cf4:	493b      	ldr	r1, [pc, #236]	; (8001de4 <predefined_get_cgi_processor+0xfc>)
 8001cf6:	68f8      	ldr	r0, [r7, #12]
 8001cf8:	f7fe fa6a 	bl	80001d0 <strcmp>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d131      	bne.n	8001d66 <predefined_get_cgi_processor+0x7e>
	    HAL_GPIO_TogglePin (GPIOB, GPIO_PIN_3);
 8001d02:	2108      	movs	r1, #8
 8001d04:	4838      	ldr	r0, [pc, #224]	; (8001de8 <predefined_get_cgi_processor+0x100>)
 8001d06:	f003 f89f 	bl	8004e48 <HAL_GPIO_TogglePin>

	    if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3)) {
 8001d0a:	2108      	movs	r1, #8
 8001d0c:	4836      	ldr	r0, [pc, #216]	; (8001de8 <predefined_get_cgi_processor+0x100>)
 8001d0e:	f003 f86b 	bl	8004de8 <HAL_GPIO_ReadPin>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d013      	beq.n	8001d40 <predefined_get_cgi_processor+0x58>
	    	*len = sprintf((char *)buf, led1_on);
 8001d18:	4934      	ldr	r1, [pc, #208]	; (8001dec <predefined_get_cgi_processor+0x104>)
 8001d1a:	68b8      	ldr	r0, [r7, #8]
 8001d1c:	f006 fc70 	bl	8008600 <siprintf>
 8001d20:	4603      	mov	r3, r0
 8001d22:	b29a      	uxth	r2, r3
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	801a      	strh	r2, [r3, #0]
	    	  SSD1306_GotoXY (3, 40);
 8001d28:	2128      	movs	r1, #40	; 0x28
 8001d2a:	2003      	movs	r0, #3
 8001d2c:	f001 fd06 	bl	800373c <SSD1306_GotoXY>
	    	  SSD1306_Puts ("  ligado   ", &Font_11x18, 1);
 8001d30:	2201      	movs	r2, #1
 8001d32:	492f      	ldr	r1, [pc, #188]	; (8001df0 <predefined_get_cgi_processor+0x108>)
 8001d34:	482f      	ldr	r0, [pc, #188]	; (8001df4 <predefined_get_cgi_processor+0x10c>)
 8001d36:	f001 fd97 	bl	8003868 <SSD1306_Puts>
	    	  SSD1306_UpdateScreen();
 8001d3a:	f001 fc4b 	bl	80035d4 <SSD1306_UpdateScreen>
 8001d3e:	e012      	b.n	8001d66 <predefined_get_cgi_processor+0x7e>
	    } else {
	    	*len = sprintf((char *)buf, led1_off);
 8001d40:	492d      	ldr	r1, [pc, #180]	; (8001df8 <predefined_get_cgi_processor+0x110>)
 8001d42:	68b8      	ldr	r0, [r7, #8]
 8001d44:	f006 fc5c 	bl	8008600 <siprintf>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	b29a      	uxth	r2, r3
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	801a      	strh	r2, [r3, #0]
	    	  SSD1306_GotoXY (3, 40);
 8001d50:	2128      	movs	r1, #40	; 0x28
 8001d52:	2003      	movs	r0, #3
 8001d54:	f001 fcf2 	bl	800373c <SSD1306_GotoXY>
	    	  SSD1306_Puts (" desligado", &Font_11x18, 1);
 8001d58:	2201      	movs	r2, #1
 8001d5a:	4925      	ldr	r1, [pc, #148]	; (8001df0 <predefined_get_cgi_processor+0x108>)
 8001d5c:	4827      	ldr	r0, [pc, #156]	; (8001dfc <predefined_get_cgi_processor+0x114>)
 8001d5e:	f001 fd83 	bl	8003868 <SSD1306_Puts>
	    	  SSD1306_UpdateScreen();
 8001d62:	f001 fc37 	bl	80035d4 <SSD1306_UpdateScreen>
	    }

	}

	if(strcmp((const char *)uri_name, "led2.cgi") == 0){
 8001d66:	4926      	ldr	r1, [pc, #152]	; (8001e00 <predefined_get_cgi_processor+0x118>)
 8001d68:	68f8      	ldr	r0, [r7, #12]
 8001d6a:	f7fe fa31 	bl	80001d0 <strcmp>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d131      	bne.n	8001dd8 <predefined_get_cgi_processor+0xf0>
	    HAL_GPIO_TogglePin (GPIOB, GPIO_PIN_4);
 8001d74:	2110      	movs	r1, #16
 8001d76:	481c      	ldr	r0, [pc, #112]	; (8001de8 <predefined_get_cgi_processor+0x100>)
 8001d78:	f003 f866 	bl	8004e48 <HAL_GPIO_TogglePin>

	    if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4)) {
 8001d7c:	2110      	movs	r1, #16
 8001d7e:	481a      	ldr	r0, [pc, #104]	; (8001de8 <predefined_get_cgi_processor+0x100>)
 8001d80:	f003 f832 	bl	8004de8 <HAL_GPIO_ReadPin>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d013      	beq.n	8001db2 <predefined_get_cgi_processor+0xca>
	    	*len = sprintf((char *)buf, led2_on);
 8001d8a:	4918      	ldr	r1, [pc, #96]	; (8001dec <predefined_get_cgi_processor+0x104>)
 8001d8c:	68b8      	ldr	r0, [r7, #8]
 8001d8e:	f006 fc37 	bl	8008600 <siprintf>
 8001d92:	4603      	mov	r3, r0
 8001d94:	b29a      	uxth	r2, r3
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	801a      	strh	r2, [r3, #0]
	    	  SSD1306_GotoXY (3, 40);
 8001d9a:	2128      	movs	r1, #40	; 0x28
 8001d9c:	2003      	movs	r0, #3
 8001d9e:	f001 fccd 	bl	800373c <SSD1306_GotoXY>
	    	  SSD1306_Puts ("  ligado   ", &Font_11x18, 1);
 8001da2:	2201      	movs	r2, #1
 8001da4:	4912      	ldr	r1, [pc, #72]	; (8001df0 <predefined_get_cgi_processor+0x108>)
 8001da6:	4813      	ldr	r0, [pc, #76]	; (8001df4 <predefined_get_cgi_processor+0x10c>)
 8001da8:	f001 fd5e 	bl	8003868 <SSD1306_Puts>
	    	  SSD1306_UpdateScreen();
 8001dac:	f001 fc12 	bl	80035d4 <SSD1306_UpdateScreen>
 8001db0:	e012      	b.n	8001dd8 <predefined_get_cgi_processor+0xf0>
	    } else {
	    	*len = sprintf((char *)buf, led2_off);
 8001db2:	4911      	ldr	r1, [pc, #68]	; (8001df8 <predefined_get_cgi_processor+0x110>)
 8001db4:	68b8      	ldr	r0, [r7, #8]
 8001db6:	f006 fc23 	bl	8008600 <siprintf>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	b29a      	uxth	r2, r3
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	801a      	strh	r2, [r3, #0]
	    	  SSD1306_GotoXY (3, 40);
 8001dc2:	2128      	movs	r1, #40	; 0x28
 8001dc4:	2003      	movs	r0, #3
 8001dc6:	f001 fcb9 	bl	800373c <SSD1306_GotoXY>
	    	  SSD1306_Puts (" desligado", &Font_11x18, 1);
 8001dca:	2201      	movs	r2, #1
 8001dcc:	4908      	ldr	r1, [pc, #32]	; (8001df0 <predefined_get_cgi_processor+0x108>)
 8001dce:	480b      	ldr	r0, [pc, #44]	; (8001dfc <predefined_get_cgi_processor+0x114>)
 8001dd0:	f001 fd4a 	bl	8003868 <SSD1306_Puts>
	    	  SSD1306_UpdateScreen();
 8001dd4:	f001 fbfe 	bl	80035d4 <SSD1306_UpdateScreen>
	    }

	}
	return 1;
 8001dd8:	2301      	movs	r3, #1
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3710      	adds	r7, #16
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	0800a778 	.word	0x0800a778
 8001de8:	48000400 	.word	0x48000400
 8001dec:	0800a784 	.word	0x0800a784
 8001df0:	20000008 	.word	0x20000008
 8001df4:	0800a79c 	.word	0x0800a79c
 8001df8:	0800a7a8 	.word	0x0800a7a8
 8001dfc:	0800a7c4 	.word	0x0800a7c4
 8001e00:	0800a7d0 	.word	0x0800a7d0

08001e04 <predefined_set_cgi_processor>:

uint8_t predefined_set_cgi_processor(uint8_t * uri_name, uint8_t * uri, uint8_t * buf, uint16_t * len){
 8001e04:	b480      	push	{r7}
 8001e06:	b085      	sub	sp, #20
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	60f8      	str	r0, [r7, #12]
 8001e0c:	60b9      	str	r1, [r7, #8]
 8001e0e:	607a      	str	r2, [r7, #4]
 8001e10:	603b      	str	r3, [r7, #0]
	return 0;
 8001e12:	2300      	movs	r3, #0
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	3714      	adds	r7, #20
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr

08001e20 <init_udp>:

//***********************************************************************************************
//           init udp
//***********************************************************************************************
void init_udp() {
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b088      	sub	sp, #32
 8001e24:	af00      	add	r7, sp, #0
    UART_Printf("\r\ninit() called!\r\n");
 8001e26:	484e      	ldr	r0, [pc, #312]	; (8001f60 <init_udp+0x140>)
 8001e28:	f7ff fedc 	bl	8001be4 <UART_Printf>

    UART_Printf("Registering W5500 callbacks...\r\n");
 8001e2c:	484d      	ldr	r0, [pc, #308]	; (8001f64 <init_udp+0x144>)
 8001e2e:	f7ff fed9 	bl	8001be4 <UART_Printf>
    reg_wizchip_cs_cbfunc(W5500_Select, W5500_Unselect);
 8001e32:	494d      	ldr	r1, [pc, #308]	; (8001f68 <init_udp+0x148>)
 8001e34:	484d      	ldr	r0, [pc, #308]	; (8001f6c <init_udp+0x14c>)
 8001e36:	f002 fb27 	bl	8004488 <reg_wizchip_cs_cbfunc>
    reg_wizchip_spi_cbfunc(W5500_ReadByte, W5500_WriteByte);
 8001e3a:	494d      	ldr	r1, [pc, #308]	; (8001f70 <init_udp+0x150>)
 8001e3c:	484d      	ldr	r0, [pc, #308]	; (8001f74 <init_udp+0x154>)
 8001e3e:	f002 fb49 	bl	80044d4 <reg_wizchip_spi_cbfunc>
    reg_wizchip_spiburst_cbfunc(W5500_ReadBuff, W5500_WriteBuff);
 8001e42:	494d      	ldr	r1, [pc, #308]	; (8001f78 <init_udp+0x158>)
 8001e44:	484d      	ldr	r0, [pc, #308]	; (8001f7c <init_udp+0x15c>)
 8001e46:	f002 fb71 	bl	800452c <reg_wizchip_spiburst_cbfunc>

    UART_Printf("Calling wizchip_init()...\r\n");
 8001e4a:	484d      	ldr	r0, [pc, #308]	; (8001f80 <init_udp+0x160>)
 8001e4c:	f7ff feca 	bl	8001be4 <UART_Printf>
    uint8_t rx_tx_buff_sizes[] = {2, 2, 2, 2, 2, 2, 2, 2};
 8001e50:	4a4c      	ldr	r2, [pc, #304]	; (8001f84 <init_udp+0x164>)
 8001e52:	f107 0318 	add.w	r3, r7, #24
 8001e56:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001e5a:	e883 0003 	stmia.w	r3, {r0, r1}
    wizchip_init(rx_tx_buff_sizes, rx_tx_buff_sizes);
 8001e5e:	f107 0218 	add.w	r2, r7, #24
 8001e62:	f107 0318 	add.w	r3, r7, #24
 8001e66:	4611      	mov	r1, r2
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f002 fbd7 	bl	800461c <wizchip_init>

    UART_Printf("Calling Static_ip_init()...\r\n");
 8001e6e:	4846      	ldr	r0, [pc, #280]	; (8001f88 <init_udp+0x168>)
 8001e70:	f7ff feb8 	bl	8001be4 <UART_Printf>
    wiz_NetInfo net_info = {
 8001e74:	463b      	mov	r3, r7
 8001e76:	2200      	movs	r2, #0
 8001e78:	601a      	str	r2, [r3, #0]
 8001e7a:	605a      	str	r2, [r3, #4]
 8001e7c:	609a      	str	r2, [r3, #8]
 8001e7e:	60da      	str	r2, [r3, #12]
 8001e80:	611a      	str	r2, [r3, #16]
 8001e82:	f8c3 2013 	str.w	r2, [r3, #19]
 8001e86:	4a41      	ldr	r2, [pc, #260]	; (8001f8c <init_udp+0x16c>)
 8001e88:	463b      	mov	r3, r7
 8001e8a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001e8e:	6018      	str	r0, [r3, #0]
 8001e90:	3304      	adds	r3, #4
 8001e92:	8019      	strh	r1, [r3, #0]
 8001e94:	4a3e      	ldr	r2, [pc, #248]	; (8001f90 <init_udp+0x170>)
 8001e96:	1dbb      	adds	r3, r7, #6
 8001e98:	6810      	ldr	r0, [r2, #0]
 8001e9a:	6018      	str	r0, [r3, #0]
 8001e9c:	4a3d      	ldr	r2, [pc, #244]	; (8001f94 <init_udp+0x174>)
 8001e9e:	f107 030a 	add.w	r3, r7, #10
 8001ea2:	6810      	ldr	r0, [r2, #0]
 8001ea4:	6018      	str	r0, [r3, #0]
 8001ea6:	4a3c      	ldr	r2, [pc, #240]	; (8001f98 <init_udp+0x178>)
 8001ea8:	f107 030e 	add.w	r3, r7, #14
 8001eac:	6810      	ldr	r0, [r2, #0]
 8001eae:	6018      	str	r0, [r3, #0]
 8001eb0:	4a3a      	ldr	r2, [pc, #232]	; (8001f9c <init_udp+0x17c>)
 8001eb2:	f107 0312 	add.w	r3, r7, #18
 8001eb6:	6810      	ldr	r0, [r2, #0]
 8001eb8:	6018      	str	r0, [r3, #0]
        .gw = {192,168,0,1},
		.dns = {8,8,8,8}

    };

    setSHAR(net_info.mac);
 8001eba:	463b      	mov	r3, r7
 8001ebc:	2206      	movs	r2, #6
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8001ec4:	f002 f886 	bl	8003fd4 <WIZCHIP_WRITE_BUF>
    setSIPR(net_info.ip);
 8001ec8:	463b      	mov	r3, r7
 8001eca:	3306      	adds	r3, #6
 8001ecc:	2204      	movs	r2, #4
 8001ece:	4619      	mov	r1, r3
 8001ed0:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8001ed4:	f002 f87e 	bl	8003fd4 <WIZCHIP_WRITE_BUF>
    setSUBR(net_info.sn);
 8001ed8:	463b      	mov	r3, r7
 8001eda:	330a      	adds	r3, #10
 8001edc:	2204      	movs	r2, #4
 8001ede:	4619      	mov	r1, r3
 8001ee0:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8001ee4:	f002 f876 	bl	8003fd4 <WIZCHIP_WRITE_BUF>
    setGAR(net_info.gw);
 8001ee8:	463b      	mov	r3, r7
 8001eea:	330e      	adds	r3, #14
 8001eec:	2204      	movs	r2, #4
 8001eee:	4619      	mov	r1, r3
 8001ef0:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001ef4:	f002 f86e 	bl	8003fd4 <WIZCHIP_WRITE_BUF>
    setSn_PORT(1,port);
 8001ef8:	4b29      	ldr	r3, [pc, #164]	; (8001fa0 <init_udp+0x180>)
 8001efa:	881b      	ldrh	r3, [r3, #0]
 8001efc:	0a1b      	lsrs	r3, r3, #8
 8001efe:	b29b      	uxth	r3, r3
 8001f00:	b2db      	uxtb	r3, r3
 8001f02:	4619      	mov	r1, r3
 8001f04:	f44f 6085 	mov.w	r0, #1064	; 0x428
 8001f08:	f001 ffb6 	bl	8003e78 <WIZCHIP_WRITE>
 8001f0c:	4b24      	ldr	r3, [pc, #144]	; (8001fa0 <init_udp+0x180>)
 8001f0e:	881b      	ldrh	r3, [r3, #0]
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	4619      	mov	r1, r3
 8001f14:	f44f 60a5 	mov.w	r0, #1320	; 0x528
 8001f18:	f001 ffae 	bl	8003e78 <WIZCHIP_WRITE>
    socket(1, Sn_MR_UDP, port, 1);
 8001f1c:	4b20      	ldr	r3, [pc, #128]	; (8001fa0 <init_udp+0x180>)
 8001f1e:	881a      	ldrh	r2, [r3, #0]
 8001f20:	2301      	movs	r3, #1
 8001f22:	2102      	movs	r1, #2
 8001f24:	2001      	movs	r0, #1
 8001f26:	f000 fb69 	bl	80025fc <socket>

    SSD1306_Clear();
 8001f2a:	f001 fcc2 	bl	80038b2 <SSD1306_Clear>
    SSD1306_GotoXY (0,1);
 8001f2e:	2101      	movs	r1, #1
 8001f30:	2000      	movs	r0, #0
 8001f32:	f001 fc03 	bl	800373c <SSD1306_GotoXY>
    SSD1306_Puts ("  Modo UDP", &Font_11x18, 1);
 8001f36:	2201      	movs	r2, #1
 8001f38:	491a      	ldr	r1, [pc, #104]	; (8001fa4 <init_udp+0x184>)
 8001f3a:	481b      	ldr	r0, [pc, #108]	; (8001fa8 <init_udp+0x188>)
 8001f3c:	f001 fc94 	bl	8003868 <SSD1306_Puts>
    SSD1306_GotoXY (3, 20);
 8001f40:	2114      	movs	r1, #20
 8001f42:	2003      	movs	r0, #3
 8001f44:	f001 fbfa 	bl	800373c <SSD1306_GotoXY>
    SSD1306_Puts ("ip 192.168.0.81", &Font_7x10, 1);
 8001f48:	2201      	movs	r2, #1
 8001f4a:	4918      	ldr	r1, [pc, #96]	; (8001fac <init_udp+0x18c>)
 8001f4c:	4818      	ldr	r0, [pc, #96]	; (8001fb0 <init_udp+0x190>)
 8001f4e:	f001 fc8b 	bl	8003868 <SSD1306_Puts>
    SSD1306_UpdateScreen();
 8001f52:	f001 fb3f 	bl	80035d4 <SSD1306_UpdateScreen>

}
 8001f56:	bf00      	nop
 8001f58:	3720      	adds	r7, #32
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	0800a7dc 	.word	0x0800a7dc
 8001f64:	0800a7f0 	.word	0x0800a7f0
 8001f68:	08001c4d 	.word	0x08001c4d
 8001f6c:	08001c39 	.word	0x08001c39
 8001f70:	08001ccb 	.word	0x08001ccb
 8001f74:	08001cb1 	.word	0x08001cb1
 8001f78:	08001c89 	.word	0x08001c89
 8001f7c:	08001c61 	.word	0x08001c61
 8001f80:	0800a814 	.word	0x0800a814
 8001f84:	0800a86c 	.word	0x0800a86c
 8001f88:	0800a830 	.word	0x0800a830
 8001f8c:	0800a874 	.word	0x0800a874
 8001f90:	0800a87c 	.word	0x0800a87c
 8001f94:	0800a880 	.word	0x0800a880
 8001f98:	0800a884 	.word	0x0800a884
 8001f9c:	0800a888 	.word	0x0800a888
 8001fa0:	20000062 	.word	0x20000062
 8001fa4:	20000008 	.word	0x20000008
 8001fa8:	0800a850 	.word	0x0800a850
 8001fac:	20000000 	.word	0x20000000
 8001fb0:	0800a85c 	.word	0x0800a85c

08001fb4 <init_web>:

//***********************************************************************************************
//          init web
//***********************************************************************************************
void init_web(void){
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	f5ad 5d00 	sub.w	sp, sp, #8192	; 0x2000
 8001fba:	b08a      	sub	sp, #40	; 0x28
 8001fbc:	af00      	add	r7, sp, #0
uint8_t bufSize[] = {2, 2, 2, 2};
 8001fbe:	f04f 3302 	mov.w	r3, #33686018	; 0x2020202
 8001fc2:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8001fc6:	f102 0224 	add.w	r2, r2, #36	; 0x24
 8001fca:	6013      	str	r3, [r2, #0]
reg_wizchip_cs_cbfunc(W5500_Select, W5500_Unselect);
 8001fcc:	4941      	ldr	r1, [pc, #260]	; (80020d4 <init_web+0x120>)
 8001fce:	4842      	ldr	r0, [pc, #264]	; (80020d8 <init_web+0x124>)
 8001fd0:	f002 fa5a 	bl	8004488 <reg_wizchip_cs_cbfunc>
reg_wizchip_spi_cbfunc(W5500_ReadByte, W5500_WriteByte);
 8001fd4:	4941      	ldr	r1, [pc, #260]	; (80020dc <init_web+0x128>)
 8001fd6:	4842      	ldr	r0, [pc, #264]	; (80020e0 <init_web+0x12c>)
 8001fd8:	f002 fa7c 	bl	80044d4 <reg_wizchip_spi_cbfunc>
wizchip_init(bufSize, bufSize);
 8001fdc:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8001fe0:	f102 0224 	add.w	r2, r2, #36	; 0x24
 8001fe4:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8001fe8:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8001fec:	4611      	mov	r1, r2
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f002 fb14 	bl	800461c <wizchip_init>
wiz_NetInfo netInfo = { .mac 	= {0x00, 0x08, 0xdc, 0xab, 0xcd, 0xef},
 8001ff4:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8001ff8:	f103 030c 	add.w	r3, r3, #12
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	601a      	str	r2, [r3, #0]
 8002000:	605a      	str	r2, [r3, #4]
 8002002:	609a      	str	r2, [r3, #8]
 8002004:	60da      	str	r2, [r3, #12]
 8002006:	611a      	str	r2, [r3, #16]
 8002008:	f8c3 2013 	str.w	r2, [r3, #19]
 800200c:	4a35      	ldr	r2, [pc, #212]	; (80020e4 <init_web+0x130>)
 800200e:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8002012:	f103 030c 	add.w	r3, r3, #12
 8002016:	e892 0003 	ldmia.w	r2, {r0, r1}
 800201a:	6018      	str	r0, [r3, #0]
 800201c:	3304      	adds	r3, #4
 800201e:	8019      	strh	r1, [r3, #0]
 8002020:	4a31      	ldr	r2, [pc, #196]	; (80020e8 <init_web+0x134>)
 8002022:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8002026:	f103 0312 	add.w	r3, r3, #18
 800202a:	6810      	ldr	r0, [r2, #0]
 800202c:	6018      	str	r0, [r3, #0]
 800202e:	4a2f      	ldr	r2, [pc, #188]	; (80020ec <init_web+0x138>)
 8002030:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8002034:	f103 0316 	add.w	r3, r3, #22
 8002038:	6810      	ldr	r0, [r2, #0]
 800203a:	6018      	str	r0, [r3, #0]
 800203c:	4a2c      	ldr	r2, [pc, #176]	; (80020f0 <init_web+0x13c>)
 800203e:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8002042:	f103 031a 	add.w	r3, r3, #26
 8002046:	6810      	ldr	r0, [r2, #0]
 8002048:	6018      	str	r0, [r3, #0]
                         .ip 	= {192, 168, 0, 82},
                         .sn 	= {255, 255, 255, 0},
                         .gw 	= {192, 168, 0, 1}};
 wizchip_setnetinfo(&netInfo);
 800204a:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800204e:	f103 030c 	add.w	r3, r3, #12
 8002052:	4618      	mov	r0, r3
 8002054:	f002 fb6e 	bl	8004734 <wizchip_setnetinfo>
 uint8_t socknumlist[] = {2, 3, 4, 5, 6, 7};
 8002058:	4a26      	ldr	r2, [pc, #152]	; (80020f4 <init_web+0x140>)
 800205a:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800205e:	f103 0304 	add.w	r3, r3, #4
 8002062:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002066:	6018      	str	r0, [r3, #0]
 8002068:	3304      	adds	r3, #4
 800206a:	8019      	strh	r1, [r3, #0]
   #define DATA_BUF_SIZE 4096
   #define MAX_HTTPSOCK 6
   uint8_t RX_BUF[DATA_BUF_SIZE];
   uint8_t TX_BUF[DATA_BUF_SIZE];
   httpServer_init(TX_BUF, RX_BUF, MAX_HTTPSOCK, socknumlist);
 800206c:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8002070:	f103 0304 	add.w	r3, r3, #4
 8002074:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 8002078:	f101 0108 	add.w	r1, r1, #8
 800207c:	3904      	subs	r1, #4
 800207e:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8002082:	3824      	subs	r0, #36	; 0x24
 8002084:	2206      	movs	r2, #6
 8002086:	f7fe fdf3 	bl	8000c70 <httpServer_init>
   reg_httpServer_cbfunc(NVIC_SystemReset, NULL);
 800208a:	2100      	movs	r1, #0
 800208c:	481a      	ldr	r0, [pc, #104]	; (80020f8 <init_web+0x144>)
 800208e:	f7fe fe0b 	bl	8000ca8 <reg_httpServer_cbfunc>
   reg_httpServer_webContent((uint8_t *)"index.html", (uint8_t *)index_page);
 8002092:	491a      	ldr	r1, [pc, #104]	; (80020fc <init_web+0x148>)
 8002094:	481a      	ldr	r0, [pc, #104]	; (8002100 <init_web+0x14c>)
 8002096:	f7ff fc49 	bl	800192c <reg_httpServer_webContent>

   SSD1306_Clear();
 800209a:	f001 fc0a 	bl	80038b2 <SSD1306_Clear>
   SSD1306_GotoXY (0,1);
 800209e:	2101      	movs	r1, #1
 80020a0:	2000      	movs	r0, #0
 80020a2:	f001 fb4b 	bl	800373c <SSD1306_GotoXY>
   SSD1306_Puts ("  Modo Web", &Font_11x18, 1);
 80020a6:	2201      	movs	r2, #1
 80020a8:	4916      	ldr	r1, [pc, #88]	; (8002104 <init_web+0x150>)
 80020aa:	4817      	ldr	r0, [pc, #92]	; (8002108 <init_web+0x154>)
 80020ac:	f001 fbdc 	bl	8003868 <SSD1306_Puts>
   SSD1306_GotoXY (3, 20);
 80020b0:	2114      	movs	r1, #20
 80020b2:	2003      	movs	r0, #3
 80020b4:	f001 fb42 	bl	800373c <SSD1306_GotoXY>
   SSD1306_Puts ("ip 192.168.0.82", &Font_7x10, 1);
 80020b8:	2201      	movs	r2, #1
 80020ba:	4914      	ldr	r1, [pc, #80]	; (800210c <init_web+0x158>)
 80020bc:	4814      	ldr	r0, [pc, #80]	; (8002110 <init_web+0x15c>)
 80020be:	f001 fbd3 	bl	8003868 <SSD1306_Puts>
   SSD1306_UpdateScreen();
 80020c2:	f001 fa87 	bl	80035d4 <SSD1306_UpdateScreen>

}
 80020c6:	bf00      	nop
 80020c8:	f507 5700 	add.w	r7, r7, #8192	; 0x2000
 80020cc:	3728      	adds	r7, #40	; 0x28
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	08001c4d 	.word	0x08001c4d
 80020d8:	08001c39 	.word	0x08001c39
 80020dc:	08001ccb 	.word	0x08001ccb
 80020e0:	08001cb1 	.word	0x08001cb1
 80020e4:	0800abf0 	.word	0x0800abf0
 80020e8:	0800abf8 	.word	0x0800abf8
 80020ec:	0800a880 	.word	0x0800a880
 80020f0:	0800a884 	.word	0x0800a884
 80020f4:	0800abfc 	.word	0x0800abfc
 80020f8:	08001bb9 	.word	0x08001bb9
 80020fc:	0800a88c 	.word	0x0800a88c
 8002100:	0800abc8 	.word	0x0800abc8
 8002104:	20000008 	.word	0x20000008
 8002108:	0800abd4 	.word	0x0800abd4
 800210c:	20000000 	.word	0x20000000
 8002110:	0800abe0 	.word	0x0800abe0

08002114 <envia_udp>:

//***********************************************************************************************
//         evia udp
//***********************************************************************************************
void envia_udp(void)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b082      	sub	sp, #8
 8002118:	af02      	add	r7, sp, #8

    sendto(1,msg,sizeof(msg),ip_s,port_s);
 800211a:	4b06      	ldr	r3, [pc, #24]	; (8002134 <envia_udp+0x20>)
 800211c:	881b      	ldrh	r3, [r3, #0]
 800211e:	9300      	str	r3, [sp, #0]
 8002120:	4b05      	ldr	r3, [pc, #20]	; (8002138 <envia_udp+0x24>)
 8002122:	220d      	movs	r2, #13
 8002124:	4905      	ldr	r1, [pc, #20]	; (800213c <envia_udp+0x28>)
 8002126:	2001      	movs	r0, #1
 8002128:	f000 fe6c 	bl	8002e04 <sendto>
	//close(1);

}
 800212c:	bf00      	nop
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	20000060 	.word	0x20000060
 8002138:	2000005c 	.word	0x2000005c
 800213c:	2000004c 	.word	0x2000004c

08002140 <recebe_udp>:
//***********************************************************************************************
//          recebe udp
//***********************************************************************************************
void recebe_udp(void)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b082      	sub	sp, #8
 8002144:	af02      	add	r7, sp, #8

	recvfrom(1,msg4,7,ip_s,port);
 8002146:	4b07      	ldr	r3, [pc, #28]	; (8002164 <recebe_udp+0x24>)
 8002148:	881b      	ldrh	r3, [r3, #0]
 800214a:	9300      	str	r3, [sp, #0]
 800214c:	4b06      	ldr	r3, [pc, #24]	; (8002168 <recebe_udp+0x28>)
 800214e:	2207      	movs	r2, #7
 8002150:	4906      	ldr	r1, [pc, #24]	; (800216c <recebe_udp+0x2c>)
 8002152:	2001      	movs	r0, #1
 8002154:	f000 ff8c 	bl	8003070 <recvfrom>
	UART_Printf(msg4);
 8002158:	4804      	ldr	r0, [pc, #16]	; (800216c <recebe_udp+0x2c>)
 800215a:	f7ff fd43 	bl	8001be4 <UART_Printf>

}
 800215e:	bf00      	nop
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}
 8002164:	20000062 	.word	0x20000062
 8002168:	2000005c 	.word	0x2000005c
 800216c:	20000018 	.word	0x20000018

08002170 <main>:
//************************************************************************************************
//        main
//************************************************************************************************

int main(void)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b084      	sub	sp, #16
 8002174:	af02      	add	r7, sp, #8
  HAL_Init();
 8002176:	f002 fb46 	bl	8004806 <HAL_Init>
  SystemClock_Config();
 800217a:	f000 f8b3 	bl	80022e4 <SystemClock_Config>
  MX_I2C1_Init();
 800217e:	f000 f91b 	bl	80023b8 <MX_I2C1_Init>
  MX_GPIO_Init();
 8002182:	f000 f9c7 	bl	8002514 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8002186:	f000 f995 	bl	80024b4 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 800218a:	f000 f955 	bl	8002438 <MX_SPI1_Init>
  HAL_UART_Receive_IT(&huart1, (uint8_t *)UART1_rxBuffer, 40);
 800218e:	2228      	movs	r2, #40	; 0x28
 8002190:	494a      	ldr	r1, [pc, #296]	; (80022bc <main+0x14c>)
 8002192:	484b      	ldr	r0, [pc, #300]	; (80022c0 <main+0x150>)
 8002194:	f005 fb4e 	bl	8007834 <HAL_UART_Receive_IT>

  SSD1306_Init();
 8002198:	f001 f958 	bl	800344c <SSD1306_Init>
  SSD1306_GotoXY (0,1);
 800219c:	2101      	movs	r1, #1
 800219e:	2000      	movs	r0, #0
 80021a0:	f001 facc 	bl	800373c <SSD1306_GotoXY>
  SSD1306_Puts ("    Teste", &Font_11x18, 1);
 80021a4:	2201      	movs	r2, #1
 80021a6:	4947      	ldr	r1, [pc, #284]	; (80022c4 <main+0x154>)
 80021a8:	4847      	ldr	r0, [pc, #284]	; (80022c8 <main+0x158>)
 80021aa:	f001 fb5d 	bl	8003868 <SSD1306_Puts>
  SSD1306_GotoXY (3, 30);
 80021ae:	211e      	movs	r1, #30
 80021b0:	2003      	movs	r0, #3
 80021b2:	f001 fac3 	bl	800373c <SSD1306_GotoXY>
  SSD1306_Puts (" UDP /  WEB", &Font_11x18, 1);
 80021b6:	2201      	movs	r2, #1
 80021b8:	4942      	ldr	r1, [pc, #264]	; (80022c4 <main+0x154>)
 80021ba:	4844      	ldr	r0, [pc, #272]	; (80022cc <main+0x15c>)
 80021bc:	f001 fb54 	bl	8003868 <SSD1306_Puts>
  SSD1306_UpdateScreen();
 80021c0:	f001 fa08 	bl	80035d4 <SSD1306_UpdateScreen>
  HAL_Delay (1500);
 80021c4:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80021c8:	f002 fb92 	bl	80048f0 <HAL_Delay>
  //SSD1306_Clear();


  if(!jp){init_web();HAL_Delay(100);}else{init_udp();}
 80021cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80021d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021d4:	f002 fe08 	bl	8004de8 <HAL_GPIO_ReadPin>
 80021d8:	4603      	mov	r3, r0
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d105      	bne.n	80021ea <main+0x7a>
 80021de:	f7ff fee9 	bl	8001fb4 <init_web>
 80021e2:	2064      	movs	r0, #100	; 0x64
 80021e4:	f002 fb84 	bl	80048f0 <HAL_Delay>
 80021e8:	e001      	b.n	80021ee <main+0x7e>
 80021ea:	f7ff fe19 	bl	8001e20 <init_udp>
//        Loop
//************************************************************************************************
  while (1)
  {

	  for(uint16_t i = 0; i < MAX_HTTPSOCK; i++)httpServer_run(i);
 80021ee:	2300      	movs	r3, #0
 80021f0:	80fb      	strh	r3, [r7, #6]
 80021f2:	e007      	b.n	8002204 <main+0x94>
 80021f4:	88fb      	ldrh	r3, [r7, #6]
 80021f6:	b2db      	uxtb	r3, r3
 80021f8:	4618      	mov	r0, r3
 80021fa:	f7fe fd71 	bl	8000ce0 <httpServer_run>
 80021fe:	88fb      	ldrh	r3, [r7, #6]
 8002200:	3301      	adds	r3, #1
 8002202:	80fb      	strh	r3, [r7, #6]
 8002204:	88fb      	ldrh	r3, [r7, #6]
 8002206:	2b05      	cmp	r3, #5
 8002208:	d9f4      	bls.n	80021f4 <main+0x84>

			if(getSn_IR(1) & Sn_IR_RECV)
 800220a:	f44f 700a 	mov.w	r0, #552	; 0x228
 800220e:	f001 fde7 	bl	8003de0 <WIZCHIP_READ>
 8002212:	4603      	mov	r3, r0
 8002214:	f003 0304 	and.w	r3, r3, #4
 8002218:	2b00      	cmp	r3, #0
 800221a:	d004      	beq.n	8002226 <main+0xb6>
		      {
		  	  setSn_IR(1, Sn_IR_RECV);
 800221c:	2104      	movs	r1, #4
 800221e:	f44f 700a 	mov.w	r0, #552	; 0x228
 8002222:	f001 fe29 	bl	8003e78 <WIZCHIP_WRITE>
			  }
			if((len=getSn_RX_RSR(1))>0)
 8002226:	2001      	movs	r0, #1
 8002228:	f001 ff7f 	bl	800412a <getSn_RX_RSR>
 800222c:	4603      	mov	r3, r0
 800222e:	461a      	mov	r2, r3
 8002230:	4b27      	ldr	r3, [pc, #156]	; (80022d0 <main+0x160>)
 8002232:	801a      	strh	r2, [r3, #0]
 8002234:	4b26      	ldr	r3, [pc, #152]	; (80022d0 <main+0x160>)
 8002236:	881b      	ldrh	r3, [r3, #0]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d01e      	beq.n	800227a <main+0x10a>
			  {
			 memset(msg4,1,len+1);
 800223c:	4b24      	ldr	r3, [pc, #144]	; (80022d0 <main+0x160>)
 800223e:	881b      	ldrh	r3, [r3, #0]
 8002240:	3301      	adds	r3, #1
 8002242:	461a      	mov	r2, r3
 8002244:	2101      	movs	r1, #1
 8002246:	4823      	ldr	r0, [pc, #140]	; (80022d4 <main+0x164>)
 8002248:	f006 f88a 	bl	8008360 <memset>
			 len = recvfrom(1,msg4, len, ip_s,&port);
 800224c:	4b20      	ldr	r3, [pc, #128]	; (80022d0 <main+0x160>)
 800224e:	881a      	ldrh	r2, [r3, #0]
 8002250:	4b21      	ldr	r3, [pc, #132]	; (80022d8 <main+0x168>)
 8002252:	9300      	str	r3, [sp, #0]
 8002254:	4b21      	ldr	r3, [pc, #132]	; (80022dc <main+0x16c>)
 8002256:	491f      	ldr	r1, [pc, #124]	; (80022d4 <main+0x164>)
 8002258:	2001      	movs	r0, #1
 800225a:	f000 ff09 	bl	8003070 <recvfrom>
 800225e:	4603      	mov	r3, r0
 8002260:	b29a      	uxth	r2, r3
 8002262:	4b1b      	ldr	r3, [pc, #108]	; (80022d0 <main+0x160>)
 8002264:	801a      	strh	r2, [r3, #0]
			 sendto(1,msg4,len, ip_s, port_s);
 8002266:	4b1a      	ldr	r3, [pc, #104]	; (80022d0 <main+0x160>)
 8002268:	881a      	ldrh	r2, [r3, #0]
 800226a:	4b1d      	ldr	r3, [pc, #116]	; (80022e0 <main+0x170>)
 800226c:	881b      	ldrh	r3, [r3, #0]
 800226e:	9300      	str	r3, [sp, #0]
 8002270:	4b1a      	ldr	r3, [pc, #104]	; (80022dc <main+0x16c>)
 8002272:	4918      	ldr	r1, [pc, #96]	; (80022d4 <main+0x164>)
 8002274:	2001      	movs	r0, #1
 8002276:	f000 fdc5 	bl	8002e04 <sendto>
			 }
			//UART_Printf(msg4);

	  if(!b1){envia_udp();HAL_Delay(1000);}
 800227a:	2140      	movs	r1, #64	; 0x40
 800227c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002280:	f002 fdb2 	bl	8004de8 <HAL_GPIO_ReadPin>
 8002284:	4603      	mov	r3, r0
 8002286:	2b00      	cmp	r3, #0
 8002288:	d105      	bne.n	8002296 <main+0x126>
 800228a:	f7ff ff43 	bl	8002114 <envia_udp>
 800228e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002292:	f002 fb2d 	bl	80048f0 <HAL_Delay>
	  if(!b2){recebe_udp();HAL_Delay(1000);}
 8002296:	2180      	movs	r1, #128	; 0x80
 8002298:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800229c:	f002 fda4 	bl	8004de8 <HAL_GPIO_ReadPin>
 80022a0:	4603      	mov	r3, r0
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d105      	bne.n	80022b2 <main+0x142>
 80022a6:	f7ff ff4b 	bl	8002140 <recebe_udp>
 80022aa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80022ae:	f002 fb1f 	bl	80048f0 <HAL_Delay>

	  //ledvd_on;
      //HAL_Delay(500);
      //ledvd_off;
      HAL_Delay(500);
 80022b2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80022b6:	f002 fb1b 	bl	80048f0 <HAL_Delay>
	  for(uint16_t i = 0; i < MAX_HTTPSOCK; i++)httpServer_run(i);
 80022ba:	e798      	b.n	80021ee <main+0x7e>
 80022bc:	200005d8 	.word	0x200005d8
 80022c0:	20000bbc 	.word	0x20000bbc
 80022c4:	20000008 	.word	0x20000008
 80022c8:	0800ac04 	.word	0x0800ac04
 80022cc:	0800ac10 	.word	0x0800ac10
 80022d0:	20000caa 	.word	0x20000caa
 80022d4:	20000018 	.word	0x20000018
 80022d8:	20000062 	.word	0x20000062
 80022dc:	2000005c 	.word	0x2000005c
 80022e0:	20000060 	.word	0x20000060

080022e4 <SystemClock_Config>:




void SystemClock_Config(void)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b0a4      	sub	sp, #144	; 0x90
 80022e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80022ea:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80022ee:	2244      	movs	r2, #68	; 0x44
 80022f0:	2100      	movs	r1, #0
 80022f2:	4618      	mov	r0, r3
 80022f4:	f006 f834 	bl	8008360 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80022f8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80022fc:	2200      	movs	r2, #0
 80022fe:	601a      	str	r2, [r3, #0]
 8002300:	605a      	str	r2, [r3, #4]
 8002302:	609a      	str	r2, [r3, #8]
 8002304:	60da      	str	r2, [r3, #12]
 8002306:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002308:	1d3b      	adds	r3, r7, #4
 800230a:	2234      	movs	r2, #52	; 0x34
 800230c:	2100      	movs	r1, #0
 800230e:	4618      	mov	r0, r3
 8002310:	f006 f826 	bl	8008360 <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002314:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002318:	f003 fa56 	bl	80057c8 <HAL_PWREx_ControlVoltageScaling>
 800231c:	4603      	mov	r3, r0
 800231e:	2b00      	cmp	r3, #0
 8002320:	d001      	beq.n	8002326 <SystemClock_Config+0x42>
  {
    Error_Handler();
 8002322:	f000 f965 	bl	80025f0 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002326:	2302      	movs	r3, #2
 8002328:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800232a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800232e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002330:	2340      	movs	r3, #64	; 0x40
 8002332:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002334:	2302      	movs	r3, #2
 8002336:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002338:	2302      	movs	r3, #2
 800233a:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800233c:	2301      	movs	r3, #1
 800233e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLN = 8;
 8002342:	2308      	movs	r3, #8
 8002344:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002348:	2302      	movs	r3, #2
 800234a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800234e:	2302      	movs	r3, #2
 8002350:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002354:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002358:	4618      	mov	r0, r3
 800235a:	f003 fa8b 	bl	8005874 <HAL_RCC_OscConfig>
 800235e:	4603      	mov	r3, r0
 8002360:	2b00      	cmp	r3, #0
 8002362:	d001      	beq.n	8002368 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8002364:	f000 f944 	bl	80025f0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002368:	230f      	movs	r3, #15
 800236a:	63bb      	str	r3, [r7, #56]	; 0x38
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800236c:	2303      	movs	r3, #3
 800236e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002370:	2300      	movs	r3, #0
 8002372:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002374:	2300      	movs	r3, #0
 8002376:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002378:	2300      	movs	r3, #0
 800237a:	64bb      	str	r3, [r7, #72]	; 0x48

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800237c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002380:	2103      	movs	r1, #3
 8002382:	4618      	mov	r0, r3
 8002384:	f003 fedc 	bl	8006140 <HAL_RCC_ClockConfig>
 8002388:	4603      	mov	r3, r0
 800238a:	2b00      	cmp	r3, #0
 800238c:	d001      	beq.n	8002392 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800238e:	f000 f92f 	bl	80025f0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8002392:	2341      	movs	r3, #65	; 0x41
 8002394:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002396:	2300      	movs	r3, #0
 8002398:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800239a:	2300      	movs	r3, #0
 800239c:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800239e:	1d3b      	adds	r3, r7, #4
 80023a0:	4618      	mov	r0, r3
 80023a2:	f004 f8d3 	bl	800654c <HAL_RCCEx_PeriphCLKConfig>
 80023a6:	4603      	mov	r3, r0
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d001      	beq.n	80023b0 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 80023ac:	f000 f920 	bl	80025f0 <Error_Handler>
  }
}
 80023b0:	bf00      	nop
 80023b2:	3790      	adds	r7, #144	; 0x90
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}

080023b8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80023bc:	4b1b      	ldr	r3, [pc, #108]	; (800242c <MX_I2C1_Init+0x74>)
 80023be:	4a1c      	ldr	r2, [pc, #112]	; (8002430 <MX_I2C1_Init+0x78>)
 80023c0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00602173;
 80023c2:	4b1a      	ldr	r3, [pc, #104]	; (800242c <MX_I2C1_Init+0x74>)
 80023c4:	4a1b      	ldr	r2, [pc, #108]	; (8002434 <MX_I2C1_Init+0x7c>)
 80023c6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80023c8:	4b18      	ldr	r3, [pc, #96]	; (800242c <MX_I2C1_Init+0x74>)
 80023ca:	2200      	movs	r2, #0
 80023cc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80023ce:	4b17      	ldr	r3, [pc, #92]	; (800242c <MX_I2C1_Init+0x74>)
 80023d0:	2201      	movs	r2, #1
 80023d2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80023d4:	4b15      	ldr	r3, [pc, #84]	; (800242c <MX_I2C1_Init+0x74>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80023da:	4b14      	ldr	r3, [pc, #80]	; (800242c <MX_I2C1_Init+0x74>)
 80023dc:	2200      	movs	r2, #0
 80023de:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80023e0:	4b12      	ldr	r3, [pc, #72]	; (800242c <MX_I2C1_Init+0x74>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80023e6:	4b11      	ldr	r3, [pc, #68]	; (800242c <MX_I2C1_Init+0x74>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80023ec:	4b0f      	ldr	r3, [pc, #60]	; (800242c <MX_I2C1_Init+0x74>)
 80023ee:	2200      	movs	r2, #0
 80023f0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80023f2:	480e      	ldr	r0, [pc, #56]	; (800242c <MX_I2C1_Init+0x74>)
 80023f4:	f002 fd42 	bl	8004e7c <HAL_I2C_Init>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d001      	beq.n	8002402 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80023fe:	f000 f8f7 	bl	80025f0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002402:	2100      	movs	r1, #0
 8002404:	4809      	ldr	r0, [pc, #36]	; (800242c <MX_I2C1_Init+0x74>)
 8002406:	f003 f939 	bl	800567c <HAL_I2CEx_ConfigAnalogFilter>
 800240a:	4603      	mov	r3, r0
 800240c:	2b00      	cmp	r3, #0
 800240e:	d001      	beq.n	8002414 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002410:	f000 f8ee 	bl	80025f0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002414:	2100      	movs	r1, #0
 8002416:	4805      	ldr	r0, [pc, #20]	; (800242c <MX_I2C1_Init+0x74>)
 8002418:	f003 f97b 	bl	8005712 <HAL_I2CEx_ConfigDigitalFilter>
 800241c:	4603      	mov	r3, r0
 800241e:	2b00      	cmp	r3, #0
 8002420:	d001      	beq.n	8002426 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002422:	f000 f8e5 	bl	80025f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002426:	bf00      	nop
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	20000b60 	.word	0x20000b60
 8002430:	40005400 	.word	0x40005400
 8002434:	00602173 	.word	0x00602173

08002438 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800243c:	4b1b      	ldr	r3, [pc, #108]	; (80024ac <MX_SPI1_Init+0x74>)
 800243e:	4a1c      	ldr	r2, [pc, #112]	; (80024b0 <MX_SPI1_Init+0x78>)
 8002440:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002442:	4b1a      	ldr	r3, [pc, #104]	; (80024ac <MX_SPI1_Init+0x74>)
 8002444:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002448:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800244a:	4b18      	ldr	r3, [pc, #96]	; (80024ac <MX_SPI1_Init+0x74>)
 800244c:	2200      	movs	r2, #0
 800244e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002450:	4b16      	ldr	r3, [pc, #88]	; (80024ac <MX_SPI1_Init+0x74>)
 8002452:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002456:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002458:	4b14      	ldr	r3, [pc, #80]	; (80024ac <MX_SPI1_Init+0x74>)
 800245a:	2200      	movs	r2, #0
 800245c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800245e:	4b13      	ldr	r3, [pc, #76]	; (80024ac <MX_SPI1_Init+0x74>)
 8002460:	2200      	movs	r2, #0
 8002462:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002464:	4b11      	ldr	r3, [pc, #68]	; (80024ac <MX_SPI1_Init+0x74>)
 8002466:	f44f 7200 	mov.w	r2, #512	; 0x200
 800246a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800246c:	4b0f      	ldr	r3, [pc, #60]	; (80024ac <MX_SPI1_Init+0x74>)
 800246e:	2200      	movs	r2, #0
 8002470:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002472:	4b0e      	ldr	r3, [pc, #56]	; (80024ac <MX_SPI1_Init+0x74>)
 8002474:	2200      	movs	r2, #0
 8002476:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002478:	4b0c      	ldr	r3, [pc, #48]	; (80024ac <MX_SPI1_Init+0x74>)
 800247a:	2200      	movs	r2, #0
 800247c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800247e:	4b0b      	ldr	r3, [pc, #44]	; (80024ac <MX_SPI1_Init+0x74>)
 8002480:	2200      	movs	r2, #0
 8002482:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002484:	4b09      	ldr	r3, [pc, #36]	; (80024ac <MX_SPI1_Init+0x74>)
 8002486:	2207      	movs	r2, #7
 8002488:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800248a:	4b08      	ldr	r3, [pc, #32]	; (80024ac <MX_SPI1_Init+0x74>)
 800248c:	2200      	movs	r2, #0
 800248e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002490:	4b06      	ldr	r3, [pc, #24]	; (80024ac <MX_SPI1_Init+0x74>)
 8002492:	2208      	movs	r2, #8
 8002494:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002496:	4805      	ldr	r0, [pc, #20]	; (80024ac <MX_SPI1_Init+0x74>)
 8002498:	f004 f9de 	bl	8006858 <HAL_SPI_Init>
 800249c:	4603      	mov	r3, r0
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d001      	beq.n	80024a6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80024a2:	f000 f8a5 	bl	80025f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80024a6:	bf00      	nop
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	20000c44 	.word	0x20000c44
 80024b0:	40013000 	.word	0x40013000

080024b4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80024b8:	4b14      	ldr	r3, [pc, #80]	; (800250c <MX_USART1_UART_Init+0x58>)
 80024ba:	4a15      	ldr	r2, [pc, #84]	; (8002510 <MX_USART1_UART_Init+0x5c>)
 80024bc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80024be:	4b13      	ldr	r3, [pc, #76]	; (800250c <MX_USART1_UART_Init+0x58>)
 80024c0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80024c4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80024c6:	4b11      	ldr	r3, [pc, #68]	; (800250c <MX_USART1_UART_Init+0x58>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80024cc:	4b0f      	ldr	r3, [pc, #60]	; (800250c <MX_USART1_UART_Init+0x58>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80024d2:	4b0e      	ldr	r3, [pc, #56]	; (800250c <MX_USART1_UART_Init+0x58>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80024d8:	4b0c      	ldr	r3, [pc, #48]	; (800250c <MX_USART1_UART_Init+0x58>)
 80024da:	220c      	movs	r2, #12
 80024dc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024de:	4b0b      	ldr	r3, [pc, #44]	; (800250c <MX_USART1_UART_Init+0x58>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80024e4:	4b09      	ldr	r3, [pc, #36]	; (800250c <MX_USART1_UART_Init+0x58>)
 80024e6:	2200      	movs	r2, #0
 80024e8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80024ea:	4b08      	ldr	r3, [pc, #32]	; (800250c <MX_USART1_UART_Init+0x58>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80024f0:	4b06      	ldr	r3, [pc, #24]	; (800250c <MX_USART1_UART_Init+0x58>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80024f6:	4805      	ldr	r0, [pc, #20]	; (800250c <MX_USART1_UART_Init+0x58>)
 80024f8:	f005 f8ba 	bl	8007670 <HAL_UART_Init>
 80024fc:	4603      	mov	r3, r0
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d001      	beq.n	8002506 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002502:	f000 f875 	bl	80025f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002506:	bf00      	nop
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	20000bbc 	.word	0x20000bbc
 8002510:	40013800 	.word	0x40013800

08002514 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b088      	sub	sp, #32
 8002518:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800251a:	f107 030c 	add.w	r3, r7, #12
 800251e:	2200      	movs	r2, #0
 8002520:	601a      	str	r2, [r3, #0]
 8002522:	605a      	str	r2, [r3, #4]
 8002524:	609a      	str	r2, [r3, #8]
 8002526:	60da      	str	r2, [r3, #12]
 8002528:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800252a:	4b2f      	ldr	r3, [pc, #188]	; (80025e8 <MX_GPIO_Init+0xd4>)
 800252c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800252e:	4a2e      	ldr	r2, [pc, #184]	; (80025e8 <MX_GPIO_Init+0xd4>)
 8002530:	f043 0301 	orr.w	r3, r3, #1
 8002534:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002536:	4b2c      	ldr	r3, [pc, #176]	; (80025e8 <MX_GPIO_Init+0xd4>)
 8002538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800253a:	f003 0301 	and.w	r3, r3, #1
 800253e:	60bb      	str	r3, [r7, #8]
 8002540:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002542:	4b29      	ldr	r3, [pc, #164]	; (80025e8 <MX_GPIO_Init+0xd4>)
 8002544:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002546:	4a28      	ldr	r2, [pc, #160]	; (80025e8 <MX_GPIO_Init+0xd4>)
 8002548:	f043 0302 	orr.w	r3, r3, #2
 800254c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800254e:	4b26      	ldr	r3, [pc, #152]	; (80025e8 <MX_GPIO_Init+0xd4>)
 8002550:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002552:	f003 0302 	and.w	r3, r3, #2
 8002556:	607b      	str	r3, [r7, #4]
 8002558:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800255a:	2200      	movs	r2, #0
 800255c:	2120      	movs	r1, #32
 800255e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002562:	f002 fc59 	bl	8004e18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 8002566:	2200      	movs	r2, #0
 8002568:	2118      	movs	r1, #24
 800256a:	4820      	ldr	r0, [pc, #128]	; (80025ec <MX_GPIO_Init+0xd8>)
 800256c:	f002 fc54 	bl	8004e18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002570:	2320      	movs	r3, #32
 8002572:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002574:	2301      	movs	r3, #1
 8002576:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002578:	2300      	movs	r3, #0
 800257a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800257c:	2300      	movs	r3, #0
 800257e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002580:	f107 030c 	add.w	r3, r7, #12
 8002584:	4619      	mov	r1, r3
 8002586:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800258a:	f002 fabb 	bl	8004b04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800258e:	23c0      	movs	r3, #192	; 0xc0
 8002590:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002592:	2300      	movs	r3, #0
 8002594:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002596:	2301      	movs	r3, #1
 8002598:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800259a:	f107 030c 	add.w	r3, r7, #12
 800259e:	4619      	mov	r1, r3
 80025a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025a4:	f002 faae 	bl	8004b04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80025a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80025ac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025ae:	2300      	movs	r3, #0
 80025b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80025b2:	2301      	movs	r3, #1
 80025b4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025b6:	f107 030c 	add.w	r3, r7, #12
 80025ba:	4619      	mov	r1, r3
 80025bc:	480b      	ldr	r0, [pc, #44]	; (80025ec <MX_GPIO_Init+0xd8>)
 80025be:	f002 faa1 	bl	8004b04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80025c2:	2318      	movs	r3, #24
 80025c4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025c6:	2301      	movs	r3, #1
 80025c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ca:	2300      	movs	r3, #0
 80025cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025ce:	2300      	movs	r3, #0
 80025d0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025d2:	f107 030c 	add.w	r3, r7, #12
 80025d6:	4619      	mov	r1, r3
 80025d8:	4804      	ldr	r0, [pc, #16]	; (80025ec <MX_GPIO_Init+0xd8>)
 80025da:	f002 fa93 	bl	8004b04 <HAL_GPIO_Init>

}
 80025de:	bf00      	nop
 80025e0:	3720      	adds	r7, #32
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	40021000 	.word	0x40021000
 80025ec:	48000400 	.word	0x48000400

080025f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80025f0:	b480      	push	{r7}
 80025f2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80025f4:	b672      	cpsid	i
}
 80025f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80025f8:	e7fe      	b.n	80025f8 <Error_Handler+0x8>
	...

080025fc <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 80025fc:	b590      	push	{r4, r7, lr}
 80025fe:	b085      	sub	sp, #20
 8002600:	af00      	add	r7, sp, #0
 8002602:	4604      	mov	r4, r0
 8002604:	4608      	mov	r0, r1
 8002606:	4611      	mov	r1, r2
 8002608:	461a      	mov	r2, r3
 800260a:	4623      	mov	r3, r4
 800260c:	71fb      	strb	r3, [r7, #7]
 800260e:	4603      	mov	r3, r0
 8002610:	71bb      	strb	r3, [r7, #6]
 8002612:	460b      	mov	r3, r1
 8002614:	80bb      	strh	r3, [r7, #4]
 8002616:	4613      	mov	r3, r2
 8002618:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 800261a:	79fb      	ldrb	r3, [r7, #7]
 800261c:	2b08      	cmp	r3, #8
 800261e:	d902      	bls.n	8002626 <socket+0x2a>
 8002620:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002624:	e0f2      	b.n	800280c <socket+0x210>
	switch(protocol)
 8002626:	79bb      	ldrb	r3, [r7, #6]
 8002628:	2b01      	cmp	r3, #1
 800262a:	d005      	beq.n	8002638 <socket+0x3c>
 800262c:	2b00      	cmp	r3, #0
 800262e:	dd11      	ble.n	8002654 <socket+0x58>
 8002630:	3b02      	subs	r3, #2
 8002632:	2b02      	cmp	r3, #2
 8002634:	d80e      	bhi.n	8002654 <socket+0x58>
            if(taddr == 0) return SOCKERR_SOCKINIT;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 8002636:	e010      	b.n	800265a <socket+0x5e>
            getSIPR((uint8_t*)&taddr);
 8002638:	f107 030c 	add.w	r3, r7, #12
 800263c:	2204      	movs	r2, #4
 800263e:	4619      	mov	r1, r3
 8002640:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8002644:	f001 fc66 	bl	8003f14 <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d105      	bne.n	800265a <socket+0x5e>
 800264e:	f06f 0302 	mvn.w	r3, #2
 8002652:	e0db      	b.n	800280c <socket+0x210>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 8002654:	f06f 0304 	mvn.w	r3, #4
 8002658:	e0d8      	b.n	800280c <socket+0x210>
         break;
 800265a:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 800265c:	78fb      	ldrb	r3, [r7, #3]
 800265e:	f003 0304 	and.w	r3, r3, #4
 8002662:	2b00      	cmp	r3, #0
 8002664:	d002      	beq.n	800266c <socket+0x70>
 8002666:	f06f 0305 	mvn.w	r3, #5
 800266a:	e0cf      	b.n	800280c <socket+0x210>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 800266c:	78fb      	ldrb	r3, [r7, #3]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d025      	beq.n	80026be <socket+0xc2>
	{
   	switch(protocol)
 8002672:	79bb      	ldrb	r3, [r7, #6]
 8002674:	2b01      	cmp	r3, #1
 8002676:	d002      	beq.n	800267e <socket+0x82>
 8002678:	2b02      	cmp	r3, #2
 800267a:	d008      	beq.n	800268e <socket+0x92>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 800267c:	e024      	b.n	80026c8 <socket+0xcc>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 800267e:	78fb      	ldrb	r3, [r7, #3]
 8002680:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8002684:	2b00      	cmp	r3, #0
 8002686:	d11c      	bne.n	80026c2 <socket+0xc6>
 8002688:	f06f 0305 	mvn.w	r3, #5
 800268c:	e0be      	b.n	800280c <socket+0x210>
   	      if(flag & SF_IGMP_VER2)
 800268e:	78fb      	ldrb	r3, [r7, #3]
 8002690:	f003 0320 	and.w	r3, r3, #32
 8002694:	2b00      	cmp	r3, #0
 8002696:	d006      	beq.n	80026a6 <socket+0xaa>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 8002698:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800269c:	2b00      	cmp	r3, #0
 800269e:	db02      	blt.n	80026a6 <socket+0xaa>
 80026a0:	f06f 0305 	mvn.w	r3, #5
 80026a4:	e0b2      	b.n	800280c <socket+0x210>
      	      if(flag & SF_UNI_BLOCK)
 80026a6:	78fb      	ldrb	r3, [r7, #3]
 80026a8:	f003 0310 	and.w	r3, r3, #16
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d00a      	beq.n	80026c6 <socket+0xca>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 80026b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	db06      	blt.n	80026c6 <socket+0xca>
 80026b8:	f06f 0305 	mvn.w	r3, #5
 80026bc:	e0a6      	b.n	800280c <socket+0x210>
   	}
   }
 80026be:	bf00      	nop
 80026c0:	e002      	b.n	80026c8 <socket+0xcc>
   	      break;
 80026c2:	bf00      	nop
 80026c4:	e000      	b.n	80026c8 <socket+0xcc>
   	      break;
 80026c6:	bf00      	nop
	close(sn);
 80026c8:	79fb      	ldrb	r3, [r7, #7]
 80026ca:	4618      	mov	r0, r3
 80026cc:	f000 f8ac 	bl	8002828 <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 80026d0:	79fb      	ldrb	r3, [r7, #7]
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	3301      	adds	r3, #1
 80026d6:	00db      	lsls	r3, r3, #3
 80026d8:	4618      	mov	r0, r3
 80026da:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80026de:	f023 030f 	bic.w	r3, r3, #15
 80026e2:	b25a      	sxtb	r2, r3
 80026e4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80026e8:	4313      	orrs	r3, r2
 80026ea:	b25b      	sxtb	r3, r3
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	4619      	mov	r1, r3
 80026f0:	f001 fbc2 	bl	8003e78 <WIZCHIP_WRITE>
    #endif
	if(!port)
 80026f4:	88bb      	ldrh	r3, [r7, #4]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d110      	bne.n	800271c <socket+0x120>
	{
	   port = sock_any_port++;
 80026fa:	4b46      	ldr	r3, [pc, #280]	; (8002814 <socket+0x218>)
 80026fc:	881b      	ldrh	r3, [r3, #0]
 80026fe:	1c5a      	adds	r2, r3, #1
 8002700:	b291      	uxth	r1, r2
 8002702:	4a44      	ldr	r2, [pc, #272]	; (8002814 <socket+0x218>)
 8002704:	8011      	strh	r1, [r2, #0]
 8002706:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8002708:	4b42      	ldr	r3, [pc, #264]	; (8002814 <socket+0x218>)
 800270a:	881b      	ldrh	r3, [r3, #0]
 800270c:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 8002710:	4293      	cmp	r3, r2
 8002712:	d103      	bne.n	800271c <socket+0x120>
 8002714:	4b3f      	ldr	r3, [pc, #252]	; (8002814 <socket+0x218>)
 8002716:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800271a:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);
 800271c:	79fb      	ldrb	r3, [r7, #7]
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	3301      	adds	r3, #1
 8002722:	00db      	lsls	r3, r3, #3
 8002724:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002728:	461a      	mov	r2, r3
 800272a:	88bb      	ldrh	r3, [r7, #4]
 800272c:	0a1b      	lsrs	r3, r3, #8
 800272e:	b29b      	uxth	r3, r3
 8002730:	b2db      	uxtb	r3, r3
 8002732:	4619      	mov	r1, r3
 8002734:	4610      	mov	r0, r2
 8002736:	f001 fb9f 	bl	8003e78 <WIZCHIP_WRITE>
 800273a:	79fb      	ldrb	r3, [r7, #7]
 800273c:	009b      	lsls	r3, r3, #2
 800273e:	3301      	adds	r3, #1
 8002740:	00db      	lsls	r3, r3, #3
 8002742:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002746:	461a      	mov	r2, r3
 8002748:	88bb      	ldrh	r3, [r7, #4]
 800274a:	b2db      	uxtb	r3, r3
 800274c:	4619      	mov	r1, r3
 800274e:	4610      	mov	r0, r2
 8002750:	f001 fb92 	bl	8003e78 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 8002754:	79fb      	ldrb	r3, [r7, #7]
 8002756:	009b      	lsls	r3, r3, #2
 8002758:	3301      	adds	r3, #1
 800275a:	00db      	lsls	r3, r3, #3
 800275c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002760:	2101      	movs	r1, #1
 8002762:	4618      	mov	r0, r3
 8002764:	f001 fb88 	bl	8003e78 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8002768:	bf00      	nop
 800276a:	79fb      	ldrb	r3, [r7, #7]
 800276c:	009b      	lsls	r3, r3, #2
 800276e:	3301      	adds	r3, #1
 8002770:	00db      	lsls	r3, r3, #3
 8002772:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002776:	4618      	mov	r0, r3
 8002778:	f001 fb32 	bl	8003de0 <WIZCHIP_READ>
 800277c:	4603      	mov	r3, r0
 800277e:	2b00      	cmp	r3, #0
 8002780:	d1f3      	bne.n	800276a <socket+0x16e>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 8002782:	79fb      	ldrb	r3, [r7, #7]
 8002784:	2201      	movs	r2, #1
 8002786:	fa02 f303 	lsl.w	r3, r2, r3
 800278a:	b21b      	sxth	r3, r3
 800278c:	43db      	mvns	r3, r3
 800278e:	b21a      	sxth	r2, r3
 8002790:	4b21      	ldr	r3, [pc, #132]	; (8002818 <socket+0x21c>)
 8002792:	881b      	ldrh	r3, [r3, #0]
 8002794:	b21b      	sxth	r3, r3
 8002796:	4013      	ands	r3, r2
 8002798:	b21b      	sxth	r3, r3
 800279a:	b29a      	uxth	r2, r3
 800279c:	4b1e      	ldr	r3, [pc, #120]	; (8002818 <socket+0x21c>)
 800279e:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 80027a0:	78fb      	ldrb	r3, [r7, #3]
 80027a2:	f003 0201 	and.w	r2, r3, #1
 80027a6:	79fb      	ldrb	r3, [r7, #7]
 80027a8:	fa02 f303 	lsl.w	r3, r2, r3
 80027ac:	b21a      	sxth	r2, r3
 80027ae:	4b1a      	ldr	r3, [pc, #104]	; (8002818 <socket+0x21c>)
 80027b0:	881b      	ldrh	r3, [r3, #0]
 80027b2:	b21b      	sxth	r3, r3
 80027b4:	4313      	orrs	r3, r2
 80027b6:	b21b      	sxth	r3, r3
 80027b8:	b29a      	uxth	r2, r3
 80027ba:	4b17      	ldr	r3, [pc, #92]	; (8002818 <socket+0x21c>)
 80027bc:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 80027be:	79fb      	ldrb	r3, [r7, #7]
 80027c0:	2201      	movs	r2, #1
 80027c2:	fa02 f303 	lsl.w	r3, r2, r3
 80027c6:	b21b      	sxth	r3, r3
 80027c8:	43db      	mvns	r3, r3
 80027ca:	b21a      	sxth	r2, r3
 80027cc:	4b13      	ldr	r3, [pc, #76]	; (800281c <socket+0x220>)
 80027ce:	881b      	ldrh	r3, [r3, #0]
 80027d0:	b21b      	sxth	r3, r3
 80027d2:	4013      	ands	r3, r2
 80027d4:	b21b      	sxth	r3, r3
 80027d6:	b29a      	uxth	r2, r3
 80027d8:	4b10      	ldr	r3, [pc, #64]	; (800281c <socket+0x220>)
 80027da:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 80027dc:	79fb      	ldrb	r3, [r7, #7]
 80027de:	4a10      	ldr	r2, [pc, #64]	; (8002820 <socket+0x224>)
 80027e0:	2100      	movs	r1, #0
 80027e2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 80027e6:	79fb      	ldrb	r3, [r7, #7]
 80027e8:	4a0e      	ldr	r2, [pc, #56]	; (8002824 <socket+0x228>)
 80027ea:	2100      	movs	r1, #0
 80027ec:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 80027ee:	bf00      	nop
 80027f0:	79fb      	ldrb	r3, [r7, #7]
 80027f2:	009b      	lsls	r3, r3, #2
 80027f4:	3301      	adds	r3, #1
 80027f6:	00db      	lsls	r3, r3, #3
 80027f8:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80027fc:	4618      	mov	r0, r3
 80027fe:	f001 faef 	bl	8003de0 <WIZCHIP_READ>
 8002802:	4603      	mov	r3, r0
 8002804:	2b00      	cmp	r3, #0
 8002806:	d0f3      	beq.n	80027f0 <socket+0x1f4>
   return (int8_t)sn;
 8002808:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 800280c:	4618      	mov	r0, r3
 800280e:	3714      	adds	r7, #20
 8002810:	46bd      	mov	sp, r7
 8002812:	bd90      	pop	{r4, r7, pc}
 8002814:	20000064 	.word	0x20000064
 8002818:	200005de 	.word	0x200005de
 800281c:	200005e0 	.word	0x200005e0
 8002820:	200005e4 	.word	0x200005e4
 8002824:	200005f4 	.word	0x200005f4

08002828 <close>:

int8_t close(uint8_t sn)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b082      	sub	sp, #8
 800282c:	af00      	add	r7, sp, #0
 800282e:	4603      	mov	r3, r0
 8002830:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8002832:	79fb      	ldrb	r3, [r7, #7]
 8002834:	2b08      	cmp	r3, #8
 8002836:	d902      	bls.n	800283e <close+0x16>
 8002838:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800283c:	e055      	b.n	80028ea <close+0xc2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 800283e:	79fb      	ldrb	r3, [r7, #7]
 8002840:	009b      	lsls	r3, r3, #2
 8002842:	3301      	adds	r3, #1
 8002844:	00db      	lsls	r3, r3, #3
 8002846:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800284a:	2110      	movs	r1, #16
 800284c:	4618      	mov	r0, r3
 800284e:	f001 fb13 	bl	8003e78 <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 8002852:	bf00      	nop
 8002854:	79fb      	ldrb	r3, [r7, #7]
 8002856:	009b      	lsls	r3, r3, #2
 8002858:	3301      	adds	r3, #1
 800285a:	00db      	lsls	r3, r3, #3
 800285c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002860:	4618      	mov	r0, r3
 8002862:	f001 fabd 	bl	8003de0 <WIZCHIP_READ>
 8002866:	4603      	mov	r3, r0
 8002868:	2b00      	cmp	r3, #0
 800286a:	d1f3      	bne.n	8002854 <close+0x2c>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 800286c:	79fb      	ldrb	r3, [r7, #7]
 800286e:	009b      	lsls	r3, r3, #2
 8002870:	3301      	adds	r3, #1
 8002872:	00db      	lsls	r3, r3, #3
 8002874:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002878:	211f      	movs	r1, #31
 800287a:	4618      	mov	r0, r3
 800287c:	f001 fafc 	bl	8003e78 <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 8002880:	79fb      	ldrb	r3, [r7, #7]
 8002882:	2201      	movs	r2, #1
 8002884:	fa02 f303 	lsl.w	r3, r2, r3
 8002888:	b21b      	sxth	r3, r3
 800288a:	43db      	mvns	r3, r3
 800288c:	b21a      	sxth	r2, r3
 800288e:	4b19      	ldr	r3, [pc, #100]	; (80028f4 <close+0xcc>)
 8002890:	881b      	ldrh	r3, [r3, #0]
 8002892:	b21b      	sxth	r3, r3
 8002894:	4013      	ands	r3, r2
 8002896:	b21b      	sxth	r3, r3
 8002898:	b29a      	uxth	r2, r3
 800289a:	4b16      	ldr	r3, [pc, #88]	; (80028f4 <close+0xcc>)
 800289c:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 800289e:	79fb      	ldrb	r3, [r7, #7]
 80028a0:	2201      	movs	r2, #1
 80028a2:	fa02 f303 	lsl.w	r3, r2, r3
 80028a6:	b21b      	sxth	r3, r3
 80028a8:	43db      	mvns	r3, r3
 80028aa:	b21a      	sxth	r2, r3
 80028ac:	4b12      	ldr	r3, [pc, #72]	; (80028f8 <close+0xd0>)
 80028ae:	881b      	ldrh	r3, [r3, #0]
 80028b0:	b21b      	sxth	r3, r3
 80028b2:	4013      	ands	r3, r2
 80028b4:	b21b      	sxth	r3, r3
 80028b6:	b29a      	uxth	r2, r3
 80028b8:	4b0f      	ldr	r3, [pc, #60]	; (80028f8 <close+0xd0>)
 80028ba:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 80028bc:	79fb      	ldrb	r3, [r7, #7]
 80028be:	4a0f      	ldr	r2, [pc, #60]	; (80028fc <close+0xd4>)
 80028c0:	2100      	movs	r1, #0
 80028c2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 80028c6:	79fb      	ldrb	r3, [r7, #7]
 80028c8:	4a0d      	ldr	r2, [pc, #52]	; (8002900 <close+0xd8>)
 80028ca:	2100      	movs	r1, #0
 80028cc:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 80028ce:	bf00      	nop
 80028d0:	79fb      	ldrb	r3, [r7, #7]
 80028d2:	009b      	lsls	r3, r3, #2
 80028d4:	3301      	adds	r3, #1
 80028d6:	00db      	lsls	r3, r3, #3
 80028d8:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80028dc:	4618      	mov	r0, r3
 80028de:	f001 fa7f 	bl	8003de0 <WIZCHIP_READ>
 80028e2:	4603      	mov	r3, r0
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d1f3      	bne.n	80028d0 <close+0xa8>
	return SOCK_OK;
 80028e8:	2301      	movs	r3, #1
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3708      	adds	r7, #8
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	bf00      	nop
 80028f4:	200005de 	.word	0x200005de
 80028f8:	200005e0 	.word	0x200005e0
 80028fc:	200005e4 	.word	0x200005e4
 8002900:	200005f4 	.word	0x200005f4

08002904 <listen>:

int8_t listen(uint8_t sn)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b082      	sub	sp, #8
 8002908:	af00      	add	r7, sp, #0
 800290a:	4603      	mov	r3, r0
 800290c:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 800290e:	79fb      	ldrb	r3, [r7, #7]
 8002910:	2b08      	cmp	r3, #8
 8002912:	d902      	bls.n	800291a <listen+0x16>
 8002914:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002918:	e049      	b.n	80029ae <listen+0xaa>
   CHECK_SOCKMODE(Sn_MR_TCP);
 800291a:	79fb      	ldrb	r3, [r7, #7]
 800291c:	009b      	lsls	r3, r3, #2
 800291e:	3301      	adds	r3, #1
 8002920:	00db      	lsls	r3, r3, #3
 8002922:	4618      	mov	r0, r3
 8002924:	f001 fa5c 	bl	8003de0 <WIZCHIP_READ>
 8002928:	4603      	mov	r3, r0
 800292a:	f003 030f 	and.w	r3, r3, #15
 800292e:	2b01      	cmp	r3, #1
 8002930:	d002      	beq.n	8002938 <listen+0x34>
 8002932:	f06f 0304 	mvn.w	r3, #4
 8002936:	e03a      	b.n	80029ae <listen+0xaa>
	CHECK_SOCKINIT();
 8002938:	79fb      	ldrb	r3, [r7, #7]
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	3301      	adds	r3, #1
 800293e:	00db      	lsls	r3, r3, #3
 8002940:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002944:	4618      	mov	r0, r3
 8002946:	f001 fa4b 	bl	8003de0 <WIZCHIP_READ>
 800294a:	4603      	mov	r3, r0
 800294c:	2b13      	cmp	r3, #19
 800294e:	d002      	beq.n	8002956 <listen+0x52>
 8002950:	f06f 0302 	mvn.w	r3, #2
 8002954:	e02b      	b.n	80029ae <listen+0xaa>
	setSn_CR(sn,Sn_CR_LISTEN);
 8002956:	79fb      	ldrb	r3, [r7, #7]
 8002958:	009b      	lsls	r3, r3, #2
 800295a:	3301      	adds	r3, #1
 800295c:	00db      	lsls	r3, r3, #3
 800295e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002962:	2102      	movs	r1, #2
 8002964:	4618      	mov	r0, r3
 8002966:	f001 fa87 	bl	8003e78 <WIZCHIP_WRITE>
	while(getSn_CR(sn));
 800296a:	bf00      	nop
 800296c:	79fb      	ldrb	r3, [r7, #7]
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	3301      	adds	r3, #1
 8002972:	00db      	lsls	r3, r3, #3
 8002974:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002978:	4618      	mov	r0, r3
 800297a:	f001 fa31 	bl	8003de0 <WIZCHIP_READ>
 800297e:	4603      	mov	r3, r0
 8002980:	2b00      	cmp	r3, #0
 8002982:	d1f3      	bne.n	800296c <listen+0x68>
   while(getSn_SR(sn) != SOCK_LISTEN)
 8002984:	e006      	b.n	8002994 <listen+0x90>
   {
         close(sn);
 8002986:	79fb      	ldrb	r3, [r7, #7]
 8002988:	4618      	mov	r0, r3
 800298a:	f7ff ff4d 	bl	8002828 <close>
         return SOCKERR_SOCKCLOSED;
 800298e:	f06f 0303 	mvn.w	r3, #3
 8002992:	e00c      	b.n	80029ae <listen+0xaa>
   while(getSn_SR(sn) != SOCK_LISTEN)
 8002994:	79fb      	ldrb	r3, [r7, #7]
 8002996:	009b      	lsls	r3, r3, #2
 8002998:	3301      	adds	r3, #1
 800299a:	00db      	lsls	r3, r3, #3
 800299c:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80029a0:	4618      	mov	r0, r3
 80029a2:	f001 fa1d 	bl	8003de0 <WIZCHIP_READ>
 80029a6:	4603      	mov	r3, r0
 80029a8:	2b14      	cmp	r3, #20
 80029aa:	d1ec      	bne.n	8002986 <listen+0x82>
   }
   return SOCK_OK;
 80029ac:	2301      	movs	r3, #1
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3708      	adds	r7, #8
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}
	...

080029b8 <disconnect>:
   
   return SOCK_OK;
}

int8_t disconnect(uint8_t sn)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b082      	sub	sp, #8
 80029bc:	af00      	add	r7, sp, #0
 80029be:	4603      	mov	r3, r0
 80029c0:	71fb      	strb	r3, [r7, #7]
   CHECK_SOCKNUM();
 80029c2:	79fb      	ldrb	r3, [r7, #7]
 80029c4:	2b08      	cmp	r3, #8
 80029c6:	d902      	bls.n	80029ce <disconnect+0x16>
 80029c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80029cc:	e062      	b.n	8002a94 <disconnect+0xdc>
   CHECK_SOCKMODE(Sn_MR_TCP);
 80029ce:	79fb      	ldrb	r3, [r7, #7]
 80029d0:	009b      	lsls	r3, r3, #2
 80029d2:	3301      	adds	r3, #1
 80029d4:	00db      	lsls	r3, r3, #3
 80029d6:	4618      	mov	r0, r3
 80029d8:	f001 fa02 	bl	8003de0 <WIZCHIP_READ>
 80029dc:	4603      	mov	r3, r0
 80029de:	f003 030f 	and.w	r3, r3, #15
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	d002      	beq.n	80029ec <disconnect+0x34>
 80029e6:	f06f 0304 	mvn.w	r3, #4
 80029ea:	e053      	b.n	8002a94 <disconnect+0xdc>
	setSn_CR(sn,Sn_CR_DISCON);
 80029ec:	79fb      	ldrb	r3, [r7, #7]
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	3301      	adds	r3, #1
 80029f2:	00db      	lsls	r3, r3, #3
 80029f4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80029f8:	2108      	movs	r1, #8
 80029fa:	4618      	mov	r0, r3
 80029fc:	f001 fa3c 	bl	8003e78 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 8002a00:	bf00      	nop
 8002a02:	79fb      	ldrb	r3, [r7, #7]
 8002a04:	009b      	lsls	r3, r3, #2
 8002a06:	3301      	adds	r3, #1
 8002a08:	00db      	lsls	r3, r3, #3
 8002a0a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f001 f9e6 	bl	8003de0 <WIZCHIP_READ>
 8002a14:	4603      	mov	r3, r0
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d1f3      	bne.n	8002a02 <disconnect+0x4a>
	sock_is_sending &= ~(1<<sn);
 8002a1a:	79fb      	ldrb	r3, [r7, #7]
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a22:	b21b      	sxth	r3, r3
 8002a24:	43db      	mvns	r3, r3
 8002a26:	b21a      	sxth	r2, r3
 8002a28:	4b1c      	ldr	r3, [pc, #112]	; (8002a9c <disconnect+0xe4>)
 8002a2a:	881b      	ldrh	r3, [r3, #0]
 8002a2c:	b21b      	sxth	r3, r3
 8002a2e:	4013      	ands	r3, r2
 8002a30:	b21b      	sxth	r3, r3
 8002a32:	b29a      	uxth	r2, r3
 8002a34:	4b19      	ldr	r3, [pc, #100]	; (8002a9c <disconnect+0xe4>)
 8002a36:	801a      	strh	r2, [r3, #0]
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8002a38:	4b19      	ldr	r3, [pc, #100]	; (8002aa0 <disconnect+0xe8>)
 8002a3a:	881b      	ldrh	r3, [r3, #0]
 8002a3c:	461a      	mov	r2, r3
 8002a3e:	79fb      	ldrb	r3, [r7, #7]
 8002a40:	fa42 f303 	asr.w	r3, r2, r3
 8002a44:	f003 0301 	and.w	r3, r3, #1
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d016      	beq.n	8002a7a <disconnect+0xc2>
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	e021      	b.n	8002a94 <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
	{
	   if(getSn_IR(sn) & Sn_IR_TIMEOUT)
 8002a50:	79fb      	ldrb	r3, [r7, #7]
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	3301      	adds	r3, #1
 8002a56:	00db      	lsls	r3, r3, #3
 8002a58:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f001 f9bf 	bl	8003de0 <WIZCHIP_READ>
 8002a62:	4603      	mov	r3, r0
 8002a64:	f003 0308 	and.w	r3, r3, #8
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d006      	beq.n	8002a7a <disconnect+0xc2>
	   {
	      close(sn);
 8002a6c:	79fb      	ldrb	r3, [r7, #7]
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f7ff feda 	bl	8002828 <close>
	      return SOCKERR_TIMEOUT;
 8002a74:	f06f 030c 	mvn.w	r3, #12
 8002a78:	e00c      	b.n	8002a94 <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
 8002a7a:	79fb      	ldrb	r3, [r7, #7]
 8002a7c:	009b      	lsls	r3, r3, #2
 8002a7e:	3301      	adds	r3, #1
 8002a80:	00db      	lsls	r3, r3, #3
 8002a82:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002a86:	4618      	mov	r0, r3
 8002a88:	f001 f9aa 	bl	8003de0 <WIZCHIP_READ>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d1de      	bne.n	8002a50 <disconnect+0x98>
	   }
	}
	return SOCK_OK;
 8002a92:	2301      	movs	r3, #1
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	3708      	adds	r7, #8
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}
 8002a9c:	200005e0 	.word	0x200005e0
 8002aa0:	200005de 	.word	0x200005de

08002aa4 <send>:

int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b084      	sub	sp, #16
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	4603      	mov	r3, r0
 8002aac:	6039      	str	r1, [r7, #0]
 8002aae:	71fb      	strb	r3, [r7, #7]
 8002ab0:	4613      	mov	r3, r2
 8002ab2:	80bb      	strh	r3, [r7, #4]
   uint8_t tmp=0;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	73fb      	strb	r3, [r7, #15]
   uint16_t freesize=0;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	81bb      	strh	r3, [r7, #12]
   
   CHECK_SOCKNUM();
 8002abc:	79fb      	ldrb	r3, [r7, #7]
 8002abe:	2b08      	cmp	r3, #8
 8002ac0:	d902      	bls.n	8002ac8 <send+0x24>
 8002ac2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002ac6:	e0de      	b.n	8002c86 <send+0x1e2>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8002ac8:	79fb      	ldrb	r3, [r7, #7]
 8002aca:	009b      	lsls	r3, r3, #2
 8002acc:	3301      	adds	r3, #1
 8002ace:	00db      	lsls	r3, r3, #3
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f001 f985 	bl	8003de0 <WIZCHIP_READ>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	f003 030f 	and.w	r3, r3, #15
 8002adc:	2b01      	cmp	r3, #1
 8002ade:	d002      	beq.n	8002ae6 <send+0x42>
 8002ae0:	f06f 0304 	mvn.w	r3, #4
 8002ae4:	e0cf      	b.n	8002c86 <send+0x1e2>
   CHECK_SOCKDATA();
 8002ae6:	88bb      	ldrh	r3, [r7, #4]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d102      	bne.n	8002af2 <send+0x4e>
 8002aec:	f06f 030d 	mvn.w	r3, #13
 8002af0:	e0c9      	b.n	8002c86 <send+0x1e2>
   tmp = getSn_SR(sn);
 8002af2:	79fb      	ldrb	r3, [r7, #7]
 8002af4:	009b      	lsls	r3, r3, #2
 8002af6:	3301      	adds	r3, #1
 8002af8:	00db      	lsls	r3, r3, #3
 8002afa:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002afe:	4618      	mov	r0, r3
 8002b00:	f001 f96e 	bl	8003de0 <WIZCHIP_READ>
 8002b04:	4603      	mov	r3, r0
 8002b06:	73fb      	strb	r3, [r7, #15]
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 8002b08:	7bfb      	ldrb	r3, [r7, #15]
 8002b0a:	2b17      	cmp	r3, #23
 8002b0c:	d005      	beq.n	8002b1a <send+0x76>
 8002b0e:	7bfb      	ldrb	r3, [r7, #15]
 8002b10:	2b1c      	cmp	r3, #28
 8002b12:	d002      	beq.n	8002b1a <send+0x76>
 8002b14:	f06f 0306 	mvn.w	r3, #6
 8002b18:	e0b5      	b.n	8002c86 <send+0x1e2>
   if( sock_is_sending & (1<<sn) )
 8002b1a:	4b5d      	ldr	r3, [pc, #372]	; (8002c90 <send+0x1ec>)
 8002b1c:	881b      	ldrh	r3, [r3, #0]
 8002b1e:	461a      	mov	r2, r3
 8002b20:	79fb      	ldrb	r3, [r7, #7]
 8002b22:	fa42 f303 	asr.w	r3, r2, r3
 8002b26:	f003 0301 	and.w	r3, r3, #1
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d039      	beq.n	8002ba2 <send+0xfe>
   {
      tmp = getSn_IR(sn);
 8002b2e:	79fb      	ldrb	r3, [r7, #7]
 8002b30:	009b      	lsls	r3, r3, #2
 8002b32:	3301      	adds	r3, #1
 8002b34:	00db      	lsls	r3, r3, #3
 8002b36:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f001 f950 	bl	8003de0 <WIZCHIP_READ>
 8002b40:	4603      	mov	r3, r0
 8002b42:	f003 031f 	and.w	r3, r3, #31
 8002b46:	73fb      	strb	r3, [r7, #15]
      if(tmp & Sn_IR_SENDOK)
 8002b48:	7bfb      	ldrb	r3, [r7, #15]
 8002b4a:	f003 0310 	and.w	r3, r3, #16
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d019      	beq.n	8002b86 <send+0xe2>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 8002b52:	79fb      	ldrb	r3, [r7, #7]
 8002b54:	009b      	lsls	r3, r3, #2
 8002b56:	3301      	adds	r3, #1
 8002b58:	00db      	lsls	r3, r3, #3
 8002b5a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002b5e:	2110      	movs	r1, #16
 8002b60:	4618      	mov	r0, r3
 8002b62:	f001 f989 	bl	8003e78 <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
 8002b66:	79fb      	ldrb	r3, [r7, #7]
 8002b68:	2201      	movs	r2, #1
 8002b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6e:	b21b      	sxth	r3, r3
 8002b70:	43db      	mvns	r3, r3
 8002b72:	b21a      	sxth	r2, r3
 8002b74:	4b46      	ldr	r3, [pc, #280]	; (8002c90 <send+0x1ec>)
 8002b76:	881b      	ldrh	r3, [r3, #0]
 8002b78:	b21b      	sxth	r3, r3
 8002b7a:	4013      	ands	r3, r2
 8002b7c:	b21b      	sxth	r3, r3
 8002b7e:	b29a      	uxth	r2, r3
 8002b80:	4b43      	ldr	r3, [pc, #268]	; (8002c90 <send+0x1ec>)
 8002b82:	801a      	strh	r2, [r3, #0]
 8002b84:	e00d      	b.n	8002ba2 <send+0xfe>
      }
      else if(tmp & Sn_IR_TIMEOUT)
 8002b86:	7bfb      	ldrb	r3, [r7, #15]
 8002b88:	f003 0308 	and.w	r3, r3, #8
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d006      	beq.n	8002b9e <send+0xfa>
      {
         close(sn);
 8002b90:	79fb      	ldrb	r3, [r7, #7]
 8002b92:	4618      	mov	r0, r3
 8002b94:	f7ff fe48 	bl	8002828 <close>
         return SOCKERR_TIMEOUT;
 8002b98:	f06f 030c 	mvn.w	r3, #12
 8002b9c:	e073      	b.n	8002c86 <send+0x1e2>
      }
      else return SOCK_BUSY;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	e071      	b.n	8002c86 <send+0x1e2>
   }
   freesize = getSn_TxMAX(sn);
 8002ba2:	79fb      	ldrb	r3, [r7, #7]
 8002ba4:	009b      	lsls	r3, r3, #2
 8002ba6:	3301      	adds	r3, #1
 8002ba8:	00db      	lsls	r3, r3, #3
 8002baa:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f001 f916 	bl	8003de0 <WIZCHIP_READ>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	b29b      	uxth	r3, r3
 8002bb8:	029b      	lsls	r3, r3, #10
 8002bba:	81bb      	strh	r3, [r7, #12]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 8002bbc:	88ba      	ldrh	r2, [r7, #4]
 8002bbe:	89bb      	ldrh	r3, [r7, #12]
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	d901      	bls.n	8002bc8 <send+0x124>
 8002bc4:	89bb      	ldrh	r3, [r7, #12]
 8002bc6:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 8002bc8:	79fb      	ldrb	r3, [r7, #7]
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f001 fa62 	bl	8004094 <getSn_TX_FSR>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 8002bd4:	79fb      	ldrb	r3, [r7, #7]
 8002bd6:	009b      	lsls	r3, r3, #2
 8002bd8:	3301      	adds	r3, #1
 8002bda:	00db      	lsls	r3, r3, #3
 8002bdc:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002be0:	4618      	mov	r0, r3
 8002be2:	f001 f8fd 	bl	8003de0 <WIZCHIP_READ>
 8002be6:	4603      	mov	r3, r0
 8002be8:	73fb      	strb	r3, [r7, #15]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 8002bea:	7bfb      	ldrb	r3, [r7, #15]
 8002bec:	2b17      	cmp	r3, #23
 8002bee:	d009      	beq.n	8002c04 <send+0x160>
 8002bf0:	7bfb      	ldrb	r3, [r7, #15]
 8002bf2:	2b1c      	cmp	r3, #28
 8002bf4:	d006      	beq.n	8002c04 <send+0x160>
      {
         close(sn);
 8002bf6:	79fb      	ldrb	r3, [r7, #7]
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f7ff fe15 	bl	8002828 <close>
         return SOCKERR_SOCKSTATUS;
 8002bfe:	f06f 0306 	mvn.w	r3, #6
 8002c02:	e040      	b.n	8002c86 <send+0x1e2>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8002c04:	4b23      	ldr	r3, [pc, #140]	; (8002c94 <send+0x1f0>)
 8002c06:	881b      	ldrh	r3, [r3, #0]
 8002c08:	461a      	mov	r2, r3
 8002c0a:	79fb      	ldrb	r3, [r7, #7]
 8002c0c:	fa42 f303 	asr.w	r3, r2, r3
 8002c10:	f003 0301 	and.w	r3, r3, #1
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d005      	beq.n	8002c24 <send+0x180>
 8002c18:	88ba      	ldrh	r2, [r7, #4]
 8002c1a:	89bb      	ldrh	r3, [r7, #12]
 8002c1c:	429a      	cmp	r2, r3
 8002c1e:	d901      	bls.n	8002c24 <send+0x180>
 8002c20:	2300      	movs	r3, #0
 8002c22:	e030      	b.n	8002c86 <send+0x1e2>
      if(len <= freesize) break;
 8002c24:	88ba      	ldrh	r2, [r7, #4]
 8002c26:	89bb      	ldrh	r3, [r7, #12]
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d900      	bls.n	8002c2e <send+0x18a>
      freesize = getSn_TX_FSR(sn);
 8002c2c:	e7cc      	b.n	8002bc8 <send+0x124>
      if(len <= freesize) break;
 8002c2e:	bf00      	nop
   }
   wiz_send_data(sn, buf, len);
 8002c30:	88ba      	ldrh	r2, [r7, #4]
 8002c32:	79fb      	ldrb	r3, [r7, #7]
 8002c34:	6839      	ldr	r1, [r7, #0]
 8002c36:	4618      	mov	r0, r3
 8002c38:	f001 fac2 	bl	80041c0 <wiz_send_data>

   #if _WIZCHIP_ == 5300
      setSn_TX_WRSR(sn,len);
   #endif
   
   setSn_CR(sn,Sn_CR_SEND);
 8002c3c:	79fb      	ldrb	r3, [r7, #7]
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	3301      	adds	r3, #1
 8002c42:	00db      	lsls	r3, r3, #3
 8002c44:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002c48:	2120      	movs	r1, #32
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f001 f914 	bl	8003e78 <WIZCHIP_WRITE>
   /* wait to process the command... */
   while(getSn_CR(sn));
 8002c50:	bf00      	nop
 8002c52:	79fb      	ldrb	r3, [r7, #7]
 8002c54:	009b      	lsls	r3, r3, #2
 8002c56:	3301      	adds	r3, #1
 8002c58:	00db      	lsls	r3, r3, #3
 8002c5a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f001 f8be 	bl	8003de0 <WIZCHIP_READ>
 8002c64:	4603      	mov	r3, r0
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d1f3      	bne.n	8002c52 <send+0x1ae>
   sock_is_sending |= (1 << sn);
 8002c6a:	79fb      	ldrb	r3, [r7, #7]
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c72:	b21a      	sxth	r2, r3
 8002c74:	4b06      	ldr	r3, [pc, #24]	; (8002c90 <send+0x1ec>)
 8002c76:	881b      	ldrh	r3, [r3, #0]
 8002c78:	b21b      	sxth	r3, r3
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	b21b      	sxth	r3, r3
 8002c7e:	b29a      	uxth	r2, r3
 8002c80:	4b03      	ldr	r3, [pc, #12]	; (8002c90 <send+0x1ec>)
 8002c82:	801a      	strh	r2, [r3, #0]
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8002c84:	88bb      	ldrh	r3, [r7, #4]
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3710      	adds	r7, #16
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	200005e0 	.word	0x200005e0
 8002c94:	200005de 	.word	0x200005de

08002c98 <recv>:


int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8002c98:	b590      	push	{r4, r7, lr}
 8002c9a:	b085      	sub	sp, #20
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	6039      	str	r1, [r7, #0]
 8002ca2:	71fb      	strb	r3, [r7, #7]
 8002ca4:	4613      	mov	r3, r2
 8002ca6:	80bb      	strh	r3, [r7, #4]
   uint8_t  tmp = 0;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	73fb      	strb	r3, [r7, #15]
   uint16_t recvsize = 0;
 8002cac:	2300      	movs	r3, #0
 8002cae:	81bb      	strh	r3, [r7, #12]
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
 8002cb0:	79fb      	ldrb	r3, [r7, #7]
 8002cb2:	2b08      	cmp	r3, #8
 8002cb4:	d902      	bls.n	8002cbc <recv+0x24>
 8002cb6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002cba:	e09c      	b.n	8002df6 <recv+0x15e>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8002cbc:	79fb      	ldrb	r3, [r7, #7]
 8002cbe:	009b      	lsls	r3, r3, #2
 8002cc0:	3301      	adds	r3, #1
 8002cc2:	00db      	lsls	r3, r3, #3
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f001 f88b 	bl	8003de0 <WIZCHIP_READ>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	f003 030f 	and.w	r3, r3, #15
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	d002      	beq.n	8002cda <recv+0x42>
 8002cd4:	f06f 0304 	mvn.w	r3, #4
 8002cd8:	e08d      	b.n	8002df6 <recv+0x15e>
   CHECK_SOCKDATA();
 8002cda:	88bb      	ldrh	r3, [r7, #4]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d102      	bne.n	8002ce6 <recv+0x4e>
 8002ce0:	f06f 030d 	mvn.w	r3, #13
 8002ce4:	e087      	b.n	8002df6 <recv+0x15e>
   
   recvsize = getSn_RxMAX(sn);
 8002ce6:	79fb      	ldrb	r3, [r7, #7]
 8002ce8:	009b      	lsls	r3, r3, #2
 8002cea:	3301      	adds	r3, #1
 8002cec:	00db      	lsls	r3, r3, #3
 8002cee:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f001 f874 	bl	8003de0 <WIZCHIP_READ>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	b29b      	uxth	r3, r3
 8002cfc:	029b      	lsls	r3, r3, #10
 8002cfe:	81bb      	strh	r3, [r7, #12]
   if(recvsize < len) len = recvsize;
 8002d00:	89ba      	ldrh	r2, [r7, #12]
 8002d02:	88bb      	ldrh	r3, [r7, #4]
 8002d04:	429a      	cmp	r2, r3
 8002d06:	d201      	bcs.n	8002d0c <recv+0x74>
 8002d08:	89bb      	ldrh	r3, [r7, #12]
 8002d0a:	80bb      	strh	r3, [r7, #4]
   {
#endif
//
      while(1)
      {
         recvsize = getSn_RX_RSR(sn);
 8002d0c:	79fb      	ldrb	r3, [r7, #7]
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f001 fa0b 	bl	800412a <getSn_RX_RSR>
 8002d14:	4603      	mov	r3, r0
 8002d16:	81bb      	strh	r3, [r7, #12]
         tmp = getSn_SR(sn);
 8002d18:	79fb      	ldrb	r3, [r7, #7]
 8002d1a:	009b      	lsls	r3, r3, #2
 8002d1c:	3301      	adds	r3, #1
 8002d1e:	00db      	lsls	r3, r3, #3
 8002d20:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002d24:	4618      	mov	r0, r3
 8002d26:	f001 f85b 	bl	8003de0 <WIZCHIP_READ>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	73fb      	strb	r3, [r7, #15]
         if (tmp != SOCK_ESTABLISHED)
 8002d2e:	7bfb      	ldrb	r3, [r7, #15]
 8002d30:	2b17      	cmp	r3, #23
 8002d32:	d026      	beq.n	8002d82 <recv+0xea>
         {
            if(tmp == SOCK_CLOSE_WAIT)
 8002d34:	7bfb      	ldrb	r3, [r7, #15]
 8002d36:	2b1c      	cmp	r3, #28
 8002d38:	d11c      	bne.n	8002d74 <recv+0xdc>
            {
               if(recvsize != 0) break;
 8002d3a:	89bb      	ldrh	r3, [r7, #12]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d133      	bne.n	8002da8 <recv+0x110>
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 8002d40:	79fb      	ldrb	r3, [r7, #7]
 8002d42:	4618      	mov	r0, r3
 8002d44:	f001 f9a6 	bl	8004094 <getSn_TX_FSR>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	461c      	mov	r4, r3
 8002d4c:	79fb      	ldrb	r3, [r7, #7]
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	3301      	adds	r3, #1
 8002d52:	00db      	lsls	r3, r3, #3
 8002d54:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f001 f841 	bl	8003de0 <WIZCHIP_READ>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	029b      	lsls	r3, r3, #10
 8002d62:	429c      	cmp	r4, r3
 8002d64:	d10d      	bne.n	8002d82 <recv+0xea>
               {
                  close(sn);
 8002d66:	79fb      	ldrb	r3, [r7, #7]
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f7ff fd5d 	bl	8002828 <close>
                  return SOCKERR_SOCKSTATUS;
 8002d6e:	f06f 0306 	mvn.w	r3, #6
 8002d72:	e040      	b.n	8002df6 <recv+0x15e>
               }
            }
            else
            {
               close(sn);
 8002d74:	79fb      	ldrb	r3, [r7, #7]
 8002d76:	4618      	mov	r0, r3
 8002d78:	f7ff fd56 	bl	8002828 <close>
               return SOCKERR_SOCKSTATUS;
 8002d7c:	f06f 0306 	mvn.w	r3, #6
 8002d80:	e039      	b.n	8002df6 <recv+0x15e>
            }
         }
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
 8002d82:	4b1f      	ldr	r3, [pc, #124]	; (8002e00 <recv+0x168>)
 8002d84:	881b      	ldrh	r3, [r3, #0]
 8002d86:	461a      	mov	r2, r3
 8002d88:	79fb      	ldrb	r3, [r7, #7]
 8002d8a:	fa42 f303 	asr.w	r3, r2, r3
 8002d8e:	f003 0301 	and.w	r3, r3, #1
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d004      	beq.n	8002da0 <recv+0x108>
 8002d96:	89bb      	ldrh	r3, [r7, #12]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d101      	bne.n	8002da0 <recv+0x108>
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	e02a      	b.n	8002df6 <recv+0x15e>
         if(recvsize != 0) break;
 8002da0:	89bb      	ldrh	r3, [r7, #12]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d102      	bne.n	8002dac <recv+0x114>
         recvsize = getSn_RX_RSR(sn);
 8002da6:	e7b1      	b.n	8002d0c <recv+0x74>
               if(recvsize != 0) break;
 8002da8:	bf00      	nop
 8002daa:	e000      	b.n	8002dae <recv+0x116>
         if(recvsize != 0) break;
 8002dac:	bf00      	nop
   }
   else sock_pack_info[sn] = PACK_COMPLETED;
   if(getSn_MR(sn) & Sn_MR_ALIGN) sock_remained_size[sn] = 0;
   //len = recvsize;
#else   
   if(recvsize < len) len = recvsize;   
 8002dae:	89ba      	ldrh	r2, [r7, #12]
 8002db0:	88bb      	ldrh	r3, [r7, #4]
 8002db2:	429a      	cmp	r2, r3
 8002db4:	d201      	bcs.n	8002dba <recv+0x122>
 8002db6:	89bb      	ldrh	r3, [r7, #12]
 8002db8:	80bb      	strh	r3, [r7, #4]
   wiz_recv_data(sn, buf, len);
 8002dba:	88ba      	ldrh	r2, [r7, #4]
 8002dbc:	79fb      	ldrb	r3, [r7, #7]
 8002dbe:	6839      	ldr	r1, [r7, #0]
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f001 fa59 	bl	8004278 <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV);
 8002dc6:	79fb      	ldrb	r3, [r7, #7]
 8002dc8:	009b      	lsls	r3, r3, #2
 8002dca:	3301      	adds	r3, #1
 8002dcc:	00db      	lsls	r3, r3, #3
 8002dce:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002dd2:	2140      	movs	r1, #64	; 0x40
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f001 f84f 	bl	8003e78 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8002dda:	bf00      	nop
 8002ddc:	79fb      	ldrb	r3, [r7, #7]
 8002dde:	009b      	lsls	r3, r3, #2
 8002de0:	3301      	adds	r3, #1
 8002de2:	00db      	lsls	r3, r3, #3
 8002de4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002de8:	4618      	mov	r0, r3
 8002dea:	f000 fff9 	bl	8003de0 <WIZCHIP_READ>
 8002dee:	4603      	mov	r3, r0
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d1f3      	bne.n	8002ddc <recv+0x144>
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8002df4:	88bb      	ldrh	r3, [r7, #4]
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3714      	adds	r7, #20
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd90      	pop	{r4, r7, pc}
 8002dfe:	bf00      	nop
 8002e00:	200005de 	.word	0x200005de

08002e04 <sendto>:

int32_t sendto(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t port)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b086      	sub	sp, #24
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	60b9      	str	r1, [r7, #8]
 8002e0c:	607b      	str	r3, [r7, #4]
 8002e0e:	4603      	mov	r3, r0
 8002e10:	73fb      	strb	r3, [r7, #15]
 8002e12:	4613      	mov	r3, r2
 8002e14:	81bb      	strh	r3, [r7, #12]
   uint8_t tmp = 0;
 8002e16:	2300      	movs	r3, #0
 8002e18:	75fb      	strb	r3, [r7, #23]
   uint16_t freesize = 0;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	82bb      	strh	r3, [r7, #20]
   uint32_t taddr;

   CHECK_SOCKNUM();
 8002e1e:	7bfb      	ldrb	r3, [r7, #15]
 8002e20:	2b08      	cmp	r3, #8
 8002e22:	d902      	bls.n	8002e2a <sendto+0x26>
 8002e24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002e28:	e11b      	b.n	8003062 <sendto+0x25e>
   switch(getSn_MR(sn) & 0x0F)
 8002e2a:	7bfb      	ldrb	r3, [r7, #15]
 8002e2c:	009b      	lsls	r3, r3, #2
 8002e2e:	3301      	adds	r3, #1
 8002e30:	00db      	lsls	r3, r3, #3
 8002e32:	4618      	mov	r0, r3
 8002e34:	f000 ffd4 	bl	8003de0 <WIZCHIP_READ>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	f003 030f 	and.w	r3, r3, #15
 8002e3e:	3b02      	subs	r3, #2
 8002e40:	2b02      	cmp	r3, #2
 8002e42:	d902      	bls.n	8002e4a <sendto+0x46>
//   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_IPRAW:
         break;
//   #endif
      default:
         return SOCKERR_SOCKMODE;
 8002e44:	f06f 0304 	mvn.w	r3, #4
 8002e48:	e10b      	b.n	8003062 <sendto+0x25e>
         break;
 8002e4a:	bf00      	nop
   }
   CHECK_SOCKDATA();
 8002e4c:	89bb      	ldrh	r3, [r7, #12]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d102      	bne.n	8002e58 <sendto+0x54>
 8002e52:	f06f 030d 	mvn.w	r3, #13
 8002e56:	e104      	b.n	8003062 <sendto+0x25e>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   //{
      //uint32_t taddr;
      taddr = ((uint32_t)addr[0]) & 0x000000FF;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	781b      	ldrb	r3, [r3, #0]
 8002e5c:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	021b      	lsls	r3, r3, #8
 8002e62:	687a      	ldr	r2, [r7, #4]
 8002e64:	3201      	adds	r2, #1
 8002e66:	7812      	ldrb	r2, [r2, #0]
 8002e68:	4413      	add	r3, r2
 8002e6a:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	021b      	lsls	r3, r3, #8
 8002e70:	687a      	ldr	r2, [r7, #4]
 8002e72:	3202      	adds	r2, #2
 8002e74:	7812      	ldrb	r2, [r2, #0]
 8002e76:	4413      	add	r3, r2
 8002e78:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	021b      	lsls	r3, r3, #8
 8002e7e:	687a      	ldr	r2, [r7, #4]
 8002e80:	3203      	adds	r2, #3
 8002e82:	7812      	ldrb	r2, [r2, #0]
 8002e84:	4413      	add	r3, r2
 8002e86:	613b      	str	r3, [r7, #16]
   //}
   //
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   if((taddr == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_IPINVALID;
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d10e      	bne.n	8002eac <sendto+0xa8>
 8002e8e:	7bfb      	ldrb	r3, [r7, #15]
 8002e90:	009b      	lsls	r3, r3, #2
 8002e92:	3301      	adds	r3, #1
 8002e94:	00db      	lsls	r3, r3, #3
 8002e96:	4618      	mov	r0, r3
 8002e98:	f000 ffa2 	bl	8003de0 <WIZCHIP_READ>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	f003 0304 	and.w	r3, r3, #4
 8002ea2:	2b04      	cmp	r3, #4
 8002ea4:	d002      	beq.n	8002eac <sendto+0xa8>
 8002ea6:	f06f 030b 	mvn.w	r3, #11
 8002eaa:	e0da      	b.n	8003062 <sendto+0x25e>
   if((port  == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_PORTZERO;
 8002eac:	8c3b      	ldrh	r3, [r7, #32]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d10e      	bne.n	8002ed0 <sendto+0xcc>
 8002eb2:	7bfb      	ldrb	r3, [r7, #15]
 8002eb4:	009b      	lsls	r3, r3, #2
 8002eb6:	3301      	adds	r3, #1
 8002eb8:	00db      	lsls	r3, r3, #3
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f000 ff90 	bl	8003de0 <WIZCHIP_READ>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	f003 0304 	and.w	r3, r3, #4
 8002ec6:	2b04      	cmp	r3, #4
 8002ec8:	d002      	beq.n	8002ed0 <sendto+0xcc>
 8002eca:	f06f 030a 	mvn.w	r3, #10
 8002ece:	e0c8      	b.n	8003062 <sendto+0x25e>
   tmp = getSn_SR(sn);
 8002ed0:	7bfb      	ldrb	r3, [r7, #15]
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	3301      	adds	r3, #1
 8002ed6:	00db      	lsls	r3, r3, #3
 8002ed8:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002edc:	4618      	mov	r0, r3
 8002ede:	f000 ff7f 	bl	8003de0 <WIZCHIP_READ>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	75fb      	strb	r3, [r7, #23]
//#if ( _WIZCHIP_ < 5200 )
   if((tmp != SOCK_MACRAW) && (tmp != SOCK_UDP) && (tmp != SOCK_IPRAW)) return SOCKERR_SOCKSTATUS;
 8002ee6:	7dfb      	ldrb	r3, [r7, #23]
 8002ee8:	2b42      	cmp	r3, #66	; 0x42
 8002eea:	d008      	beq.n	8002efe <sendto+0xfa>
 8002eec:	7dfb      	ldrb	r3, [r7, #23]
 8002eee:	2b22      	cmp	r3, #34	; 0x22
 8002ef0:	d005      	beq.n	8002efe <sendto+0xfa>
 8002ef2:	7dfb      	ldrb	r3, [r7, #23]
 8002ef4:	2b32      	cmp	r3, #50	; 0x32
 8002ef6:	d002      	beq.n	8002efe <sendto+0xfa>
 8002ef8:	f06f 0306 	mvn.w	r3, #6
 8002efc:	e0b1      	b.n	8003062 <sendto+0x25e>
//#else
//   if(tmp != SOCK_MACRAW && tmp != SOCK_UDP) return SOCKERR_SOCKSTATUS;
//#endif
      
   setSn_DIPR(sn,addr);
 8002efe:	7bfb      	ldrb	r3, [r7, #15]
 8002f00:	009b      	lsls	r3, r3, #2
 8002f02:	3301      	adds	r3, #1
 8002f04:	00db      	lsls	r3, r3, #3
 8002f06:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8002f0a:	2204      	movs	r2, #4
 8002f0c:	6879      	ldr	r1, [r7, #4]
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f001 f860 	bl	8003fd4 <WIZCHIP_WRITE_BUF>
   setSn_DPORT(sn,port);      
 8002f14:	7bfb      	ldrb	r3, [r7, #15]
 8002f16:	009b      	lsls	r3, r3, #2
 8002f18:	3301      	adds	r3, #1
 8002f1a:	00db      	lsls	r3, r3, #3
 8002f1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f20:	461a      	mov	r2, r3
 8002f22:	8c3b      	ldrh	r3, [r7, #32]
 8002f24:	0a1b      	lsrs	r3, r3, #8
 8002f26:	b29b      	uxth	r3, r3
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	4619      	mov	r1, r3
 8002f2c:	4610      	mov	r0, r2
 8002f2e:	f000 ffa3 	bl	8003e78 <WIZCHIP_WRITE>
 8002f32:	7bfb      	ldrb	r3, [r7, #15]
 8002f34:	009b      	lsls	r3, r3, #2
 8002f36:	3301      	adds	r3, #1
 8002f38:	00db      	lsls	r3, r3, #3
 8002f3a:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8002f3e:	461a      	mov	r2, r3
 8002f40:	8c3b      	ldrh	r3, [r7, #32]
 8002f42:	b2db      	uxtb	r3, r3
 8002f44:	4619      	mov	r1, r3
 8002f46:	4610      	mov	r0, r2
 8002f48:	f000 ff96 	bl	8003e78 <WIZCHIP_WRITE>
   freesize = getSn_TxMAX(sn);
 8002f4c:	7bfb      	ldrb	r3, [r7, #15]
 8002f4e:	009b      	lsls	r3, r3, #2
 8002f50:	3301      	adds	r3, #1
 8002f52:	00db      	lsls	r3, r3, #3
 8002f54:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f000 ff41 	bl	8003de0 <WIZCHIP_READ>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	b29b      	uxth	r3, r3
 8002f62:	029b      	lsls	r3, r3, #10
 8002f64:	82bb      	strh	r3, [r7, #20]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 8002f66:	89ba      	ldrh	r2, [r7, #12]
 8002f68:	8abb      	ldrh	r3, [r7, #20]
 8002f6a:	429a      	cmp	r2, r3
 8002f6c:	d901      	bls.n	8002f72 <sendto+0x16e>
 8002f6e:	8abb      	ldrh	r3, [r7, #20]
 8002f70:	81bb      	strh	r3, [r7, #12]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 8002f72:	7bfb      	ldrb	r3, [r7, #15]
 8002f74:	4618      	mov	r0, r3
 8002f76:	f001 f88d 	bl	8004094 <getSn_TX_FSR>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	82bb      	strh	r3, [r7, #20]
      if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 8002f7e:	7bfb      	ldrb	r3, [r7, #15]
 8002f80:	009b      	lsls	r3, r3, #2
 8002f82:	3301      	adds	r3, #1
 8002f84:	00db      	lsls	r3, r3, #3
 8002f86:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f000 ff28 	bl	8003de0 <WIZCHIP_READ>
 8002f90:	4603      	mov	r3, r0
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d102      	bne.n	8002f9c <sendto+0x198>
 8002f96:	f06f 0303 	mvn.w	r3, #3
 8002f9a:	e062      	b.n	8003062 <sendto+0x25e>
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8002f9c:	4b33      	ldr	r3, [pc, #204]	; (800306c <sendto+0x268>)
 8002f9e:	881b      	ldrh	r3, [r3, #0]
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	7bfb      	ldrb	r3, [r7, #15]
 8002fa4:	fa42 f303 	asr.w	r3, r2, r3
 8002fa8:	f003 0301 	and.w	r3, r3, #1
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d005      	beq.n	8002fbc <sendto+0x1b8>
 8002fb0:	89ba      	ldrh	r2, [r7, #12]
 8002fb2:	8abb      	ldrh	r3, [r7, #20]
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d901      	bls.n	8002fbc <sendto+0x1b8>
 8002fb8:	2300      	movs	r3, #0
 8002fba:	e052      	b.n	8003062 <sendto+0x25e>
      if(len <= freesize) break;
 8002fbc:	89ba      	ldrh	r2, [r7, #12]
 8002fbe:	8abb      	ldrh	r3, [r7, #20]
 8002fc0:	429a      	cmp	r2, r3
 8002fc2:	d900      	bls.n	8002fc6 <sendto+0x1c2>
      freesize = getSn_TX_FSR(sn);
 8002fc4:	e7d5      	b.n	8002f72 <sendto+0x16e>
      if(len <= freesize) break;
 8002fc6:	bf00      	nop
   };
	wiz_send_data(sn, buf, len);
 8002fc8:	89ba      	ldrh	r2, [r7, #12]
 8002fca:	7bfb      	ldrb	r3, [r7, #15]
 8002fcc:	68b9      	ldr	r1, [r7, #8]
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f001 f8f6 	bl	80041c0 <wiz_send_data>
//A20150601 : For W5300
#if _WIZCHIP_ == 5300
   setSn_TX_WRSR(sn, len);
#endif
//   
	setSn_CR(sn,Sn_CR_SEND);
 8002fd4:	7bfb      	ldrb	r3, [r7, #15]
 8002fd6:	009b      	lsls	r3, r3, #2
 8002fd8:	3301      	adds	r3, #1
 8002fda:	00db      	lsls	r3, r3, #3
 8002fdc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002fe0:	2120      	movs	r1, #32
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f000 ff48 	bl	8003e78 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 8002fe8:	bf00      	nop
 8002fea:	7bfb      	ldrb	r3, [r7, #15]
 8002fec:	009b      	lsls	r3, r3, #2
 8002fee:	3301      	adds	r3, #1
 8002ff0:	00db      	lsls	r3, r3, #3
 8002ff2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f000 fef2 	bl	8003de0 <WIZCHIP_READ>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d1f3      	bne.n	8002fea <sendto+0x1e6>
   while(1)
   {
      tmp = getSn_IR(sn);
 8003002:	7bfb      	ldrb	r3, [r7, #15]
 8003004:	009b      	lsls	r3, r3, #2
 8003006:	3301      	adds	r3, #1
 8003008:	00db      	lsls	r3, r3, #3
 800300a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800300e:	4618      	mov	r0, r3
 8003010:	f000 fee6 	bl	8003de0 <WIZCHIP_READ>
 8003014:	4603      	mov	r3, r0
 8003016:	f003 031f 	and.w	r3, r3, #31
 800301a:	75fb      	strb	r3, [r7, #23]
      if(tmp & Sn_IR_SENDOK)
 800301c:	7dfb      	ldrb	r3, [r7, #23]
 800301e:	f003 0310 	and.w	r3, r3, #16
 8003022:	2b00      	cmp	r3, #0
 8003024:	d00c      	beq.n	8003040 <sendto+0x23c>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 8003026:	7bfb      	ldrb	r3, [r7, #15]
 8003028:	009b      	lsls	r3, r3, #2
 800302a:	3301      	adds	r3, #1
 800302c:	00db      	lsls	r3, r3, #3
 800302e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003032:	2110      	movs	r1, #16
 8003034:	4618      	mov	r0, r3
 8003036:	f000 ff1f 	bl	8003e78 <WIZCHIP_WRITE>
         break;
 800303a:	bf00      	nop
   #if _WIZCHIP_ < 5500   //M20150401 : for WIZCHIP Errata #4, #5 (ARP errata)
      if(taddr) setSUBR((uint8_t*)&taddr);
   #endif
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 800303c:	89bb      	ldrh	r3, [r7, #12]
 800303e:	e010      	b.n	8003062 <sendto+0x25e>
      else if(tmp & Sn_IR_TIMEOUT)
 8003040:	7dfb      	ldrb	r3, [r7, #23]
 8003042:	f003 0308 	and.w	r3, r3, #8
 8003046:	2b00      	cmp	r3, #0
 8003048:	d0db      	beq.n	8003002 <sendto+0x1fe>
         setSn_IR(sn, Sn_IR_TIMEOUT);
 800304a:	7bfb      	ldrb	r3, [r7, #15]
 800304c:	009b      	lsls	r3, r3, #2
 800304e:	3301      	adds	r3, #1
 8003050:	00db      	lsls	r3, r3, #3
 8003052:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003056:	2108      	movs	r1, #8
 8003058:	4618      	mov	r0, r3
 800305a:	f000 ff0d 	bl	8003e78 <WIZCHIP_WRITE>
         return SOCKERR_TIMEOUT;
 800305e:	f06f 030c 	mvn.w	r3, #12
}
 8003062:	4618      	mov	r0, r3
 8003064:	3718      	adds	r7, #24
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}
 800306a:	bf00      	nop
 800306c:	200005de 	.word	0x200005de

08003070 <recvfrom>:



int32_t recvfrom(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t *port)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b088      	sub	sp, #32
 8003074:	af00      	add	r7, sp, #0
 8003076:	60b9      	str	r1, [r7, #8]
 8003078:	607b      	str	r3, [r7, #4]
 800307a:	4603      	mov	r3, r0
 800307c:	73fb      	strb	r3, [r7, #15]
 800307e:	4613      	mov	r3, r2
 8003080:	81bb      	strh	r3, [r7, #12]
#else   
   uint8_t  mr;
#endif
//   
   uint8_t  head[8];
	uint16_t pack_len=0;
 8003082:	2300      	movs	r3, #0
 8003084:	83fb      	strh	r3, [r7, #30]

   CHECK_SOCKNUM();
 8003086:	7bfb      	ldrb	r3, [r7, #15]
 8003088:	2b08      	cmp	r3, #8
 800308a:	d902      	bls.n	8003092 <recvfrom+0x22>
 800308c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003090:	e1d4      	b.n	800343c <recvfrom+0x3cc>
//A20150601
#if _WIZCHIP_ == 5300
   mr1 = getMR();
#endif   

   switch((mr=getSn_MR(sn)) & 0x0F)
 8003092:	7bfb      	ldrb	r3, [r7, #15]
 8003094:	009b      	lsls	r3, r3, #2
 8003096:	3301      	adds	r3, #1
 8003098:	00db      	lsls	r3, r3, #3
 800309a:	4618      	mov	r0, r3
 800309c:	f000 fea0 	bl	8003de0 <WIZCHIP_READ>
 80030a0:	4603      	mov	r3, r0
 80030a2:	777b      	strb	r3, [r7, #29]
 80030a4:	7f7b      	ldrb	r3, [r7, #29]
 80030a6:	f003 030f 	and.w	r3, r3, #15
 80030aa:	3b02      	subs	r3, #2
 80030ac:	2b02      	cmp	r3, #2
 80030ae:	d902      	bls.n	80030b6 <recvfrom+0x46>
   #if ( _WIZCHIP_ < 5200 )         
      case Sn_MR_PPPoE:
         break;
   #endif
      default:
         return SOCKERR_SOCKMODE;
 80030b0:	f06f 0304 	mvn.w	r3, #4
 80030b4:	e1c2      	b.n	800343c <recvfrom+0x3cc>
         break;
 80030b6:	bf00      	nop
   }
   CHECK_SOCKDATA();
 80030b8:	89bb      	ldrh	r3, [r7, #12]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d102      	bne.n	80030c4 <recvfrom+0x54>
 80030be:	f06f 030d 	mvn.w	r3, #13
 80030c2:	e1bb      	b.n	800343c <recvfrom+0x3cc>
   if(sock_remained_size[sn] == 0)
 80030c4:	7bfb      	ldrb	r3, [r7, #15]
 80030c6:	4a88      	ldr	r2, [pc, #544]	; (80032e8 <recvfrom+0x278>)
 80030c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d128      	bne.n	8003122 <recvfrom+0xb2>
   {
      while(1)
      {
         pack_len = getSn_RX_RSR(sn);
 80030d0:	7bfb      	ldrb	r3, [r7, #15]
 80030d2:	4618      	mov	r0, r3
 80030d4:	f001 f829 	bl	800412a <getSn_RX_RSR>
 80030d8:	4603      	mov	r3, r0
 80030da:	83fb      	strh	r3, [r7, #30]
         if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 80030dc:	7bfb      	ldrb	r3, [r7, #15]
 80030de:	009b      	lsls	r3, r3, #2
 80030e0:	3301      	adds	r3, #1
 80030e2:	00db      	lsls	r3, r3, #3
 80030e4:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80030e8:	4618      	mov	r0, r3
 80030ea:	f000 fe79 	bl	8003de0 <WIZCHIP_READ>
 80030ee:	4603      	mov	r3, r0
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d102      	bne.n	80030fa <recvfrom+0x8a>
 80030f4:	f06f 0303 	mvn.w	r3, #3
 80030f8:	e1a0      	b.n	800343c <recvfrom+0x3cc>
         if( (sock_io_mode & (1<<sn)) && (pack_len == 0) ) return SOCK_BUSY;
 80030fa:	4b7c      	ldr	r3, [pc, #496]	; (80032ec <recvfrom+0x27c>)
 80030fc:	881b      	ldrh	r3, [r3, #0]
 80030fe:	461a      	mov	r2, r3
 8003100:	7bfb      	ldrb	r3, [r7, #15]
 8003102:	fa42 f303 	asr.w	r3, r2, r3
 8003106:	f003 0301 	and.w	r3, r3, #1
 800310a:	2b00      	cmp	r3, #0
 800310c:	d004      	beq.n	8003118 <recvfrom+0xa8>
 800310e:	8bfb      	ldrh	r3, [r7, #30]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d101      	bne.n	8003118 <recvfrom+0xa8>
 8003114:	2300      	movs	r3, #0
 8003116:	e191      	b.n	800343c <recvfrom+0x3cc>
         if(pack_len != 0) break;
 8003118:	8bfb      	ldrh	r3, [r7, #30]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d100      	bne.n	8003120 <recvfrom+0xb0>
         pack_len = getSn_RX_RSR(sn);
 800311e:	e7d7      	b.n	80030d0 <recvfrom+0x60>
         if(pack_len != 0) break;
 8003120:	bf00      	nop
      };
   }
//D20150601 : Move it to bottom
// sock_pack_info[sn] = PACK_COMPLETED;
	switch (mr & 0x07)
 8003122:	7f7b      	ldrb	r3, [r7, #29]
 8003124:	f003 0307 	and.w	r3, r3, #7
 8003128:	2b04      	cmp	r3, #4
 800312a:	d079      	beq.n	8003220 <recvfrom+0x1b0>
 800312c:	2b04      	cmp	r3, #4
 800312e:	f300 8142 	bgt.w	80033b6 <recvfrom+0x346>
 8003132:	2b02      	cmp	r3, #2
 8003134:	d003      	beq.n	800313e <recvfrom+0xce>
 8003136:	2b03      	cmp	r3, #3
 8003138:	f000 80dc 	beq.w	80032f4 <recvfrom+0x284>
 800313c:	e13b      	b.n	80033b6 <recvfrom+0x346>
	{
	   case Sn_MR_UDP :
	      if(sock_remained_size[sn] == 0)
 800313e:	7bfb      	ldrb	r3, [r7, #15]
 8003140:	4a69      	ldr	r2, [pc, #420]	; (80032e8 <recvfrom+0x278>)
 8003142:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d152      	bne.n	80031f0 <recvfrom+0x180>
	      {
   			wiz_recv_data(sn, head, 8);
 800314a:	f107 0114 	add.w	r1, r7, #20
 800314e:	7bfb      	ldrb	r3, [r7, #15]
 8003150:	2208      	movs	r2, #8
 8003152:	4618      	mov	r0, r3
 8003154:	f001 f890 	bl	8004278 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 8003158:	7bfb      	ldrb	r3, [r7, #15]
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	3301      	adds	r3, #1
 800315e:	00db      	lsls	r3, r3, #3
 8003160:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003164:	2140      	movs	r1, #64	; 0x40
 8003166:	4618      	mov	r0, r3
 8003168:	f000 fe86 	bl	8003e78 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 800316c:	bf00      	nop
 800316e:	7bfb      	ldrb	r3, [r7, #15]
 8003170:	009b      	lsls	r3, r3, #2
 8003172:	3301      	adds	r3, #1
 8003174:	00db      	lsls	r3, r3, #3
 8003176:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800317a:	4618      	mov	r0, r3
 800317c:	f000 fe30 	bl	8003de0 <WIZCHIP_READ>
 8003180:	4603      	mov	r3, r0
 8003182:	2b00      	cmp	r3, #0
 8003184:	d1f3      	bne.n	800316e <recvfrom+0xfe>
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[6];
   		   }
            else
            {
         #endif
               addr[0] = head[0];
 8003186:	7d3a      	ldrb	r2, [r7, #20]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	701a      	strb	r2, [r3, #0]
      			addr[1] = head[1];
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	3301      	adds	r3, #1
 8003190:	7d7a      	ldrb	r2, [r7, #21]
 8003192:	701a      	strb	r2, [r3, #0]
      			addr[2] = head[2];
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	3302      	adds	r3, #2
 8003198:	7dba      	ldrb	r2, [r7, #22]
 800319a:	701a      	strb	r2, [r3, #0]
      			addr[3] = head[3];
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	3303      	adds	r3, #3
 80031a0:	7dfa      	ldrb	r2, [r7, #23]
 80031a2:	701a      	strb	r2, [r3, #0]
      			*port = head[4];
 80031a4:	7e3b      	ldrb	r3, [r7, #24]
 80031a6:	b29a      	uxth	r2, r3
 80031a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031aa:	801a      	strh	r2, [r3, #0]
      			*port = (*port << 8) + head[5];
 80031ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031ae:	881b      	ldrh	r3, [r3, #0]
 80031b0:	021b      	lsls	r3, r3, #8
 80031b2:	b29a      	uxth	r2, r3
 80031b4:	7e7b      	ldrb	r3, [r7, #25]
 80031b6:	b29b      	uxth	r3, r3
 80031b8:	4413      	add	r3, r2
 80031ba:	b29a      	uxth	r2, r3
 80031bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031be:	801a      	strh	r2, [r3, #0]
      			sock_remained_size[sn] = head[6];
 80031c0:	7eba      	ldrb	r2, [r7, #26]
 80031c2:	7bfb      	ldrb	r3, [r7, #15]
 80031c4:	b291      	uxth	r1, r2
 80031c6:	4a48      	ldr	r2, [pc, #288]	; (80032e8 <recvfrom+0x278>)
 80031c8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[7];
 80031cc:	7bfb      	ldrb	r3, [r7, #15]
 80031ce:	4a46      	ldr	r2, [pc, #280]	; (80032e8 <recvfrom+0x278>)
 80031d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80031d4:	021b      	lsls	r3, r3, #8
 80031d6:	b299      	uxth	r1, r3
 80031d8:	7efb      	ldrb	r3, [r7, #27]
 80031da:	b29a      	uxth	r2, r3
 80031dc:	7bfb      	ldrb	r3, [r7, #15]
 80031de:	440a      	add	r2, r1
 80031e0:	b291      	uxth	r1, r2
 80031e2:	4a41      	ldr	r2, [pc, #260]	; (80032e8 <recvfrom+0x278>)
 80031e4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
         #if _WIZCHIP_ == 5300
            }
         #endif
   			sock_pack_info[sn] = PACK_FIRST;
 80031e8:	7bfb      	ldrb	r3, [r7, #15]
 80031ea:	4a41      	ldr	r2, [pc, #260]	; (80032f0 <recvfrom+0x280>)
 80031ec:	2180      	movs	r1, #128	; 0x80
 80031ee:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 80031f0:	7bfb      	ldrb	r3, [r7, #15]
 80031f2:	4a3d      	ldr	r2, [pc, #244]	; (80032e8 <recvfrom+0x278>)
 80031f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80031f8:	89ba      	ldrh	r2, [r7, #12]
 80031fa:	429a      	cmp	r2, r3
 80031fc:	d202      	bcs.n	8003204 <recvfrom+0x194>
 80031fe:	89bb      	ldrh	r3, [r7, #12]
 8003200:	83fb      	strh	r3, [r7, #30]
 8003202:	e004      	b.n	800320e <recvfrom+0x19e>
			else pack_len = sock_remained_size[sn];
 8003204:	7bfb      	ldrb	r3, [r7, #15]
 8003206:	4a38      	ldr	r2, [pc, #224]	; (80032e8 <recvfrom+0x278>)
 8003208:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800320c:	83fb      	strh	r3, [r7, #30]
			//A20150601 : For W5300
			len = pack_len;
 800320e:	8bfb      	ldrh	r3, [r7, #30]
 8003210:	81bb      	strh	r3, [r7, #12]
			   }
			#endif
			//
			// Need to packet length check (default 1472)
			//
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 8003212:	8bfa      	ldrh	r2, [r7, #30]
 8003214:	7bfb      	ldrb	r3, [r7, #15]
 8003216:	68b9      	ldr	r1, [r7, #8]
 8003218:	4618      	mov	r0, r3
 800321a:	f001 f82d 	bl	8004278 <wiz_recv_data>
			break;
 800321e:	e0d6      	b.n	80033ce <recvfrom+0x35e>
	   case Sn_MR_MACRAW :
	      if(sock_remained_size[sn] == 0)
 8003220:	7bfb      	ldrb	r3, [r7, #15]
 8003222:	4a31      	ldr	r2, [pc, #196]	; (80032e8 <recvfrom+0x278>)
 8003224:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d146      	bne.n	80032ba <recvfrom+0x24a>
	      {
   			wiz_recv_data(sn, head, 2);
 800322c:	f107 0114 	add.w	r1, r7, #20
 8003230:	7bfb      	ldrb	r3, [r7, #15]
 8003232:	2202      	movs	r2, #2
 8003234:	4618      	mov	r0, r3
 8003236:	f001 f81f 	bl	8004278 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 800323a:	7bfb      	ldrb	r3, [r7, #15]
 800323c:	009b      	lsls	r3, r3, #2
 800323e:	3301      	adds	r3, #1
 8003240:	00db      	lsls	r3, r3, #3
 8003242:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003246:	2140      	movs	r1, #64	; 0x40
 8003248:	4618      	mov	r0, r3
 800324a:	f000 fe15 	bl	8003e78 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 800324e:	bf00      	nop
 8003250:	7bfb      	ldrb	r3, [r7, #15]
 8003252:	009b      	lsls	r3, r3, #2
 8003254:	3301      	adds	r3, #1
 8003256:	00db      	lsls	r3, r3, #3
 8003258:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800325c:	4618      	mov	r0, r3
 800325e:	f000 fdbf 	bl	8003de0 <WIZCHIP_READ>
 8003262:	4603      	mov	r3, r0
 8003264:	2b00      	cmp	r3, #0
 8003266:	d1f3      	bne.n	8003250 <recvfrom+0x1e0>
   			// read peer's IP address, port number & packet length
    			sock_remained_size[sn] = head[0];
 8003268:	7d3a      	ldrb	r2, [r7, #20]
 800326a:	7bfb      	ldrb	r3, [r7, #15]
 800326c:	b291      	uxth	r1, r2
 800326e:	4a1e      	ldr	r2, [pc, #120]	; (80032e8 <recvfrom+0x278>)
 8003270:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_remained_size[sn] = (sock_remained_size[sn] <<8) + head[1] -2;
 8003274:	7bfb      	ldrb	r3, [r7, #15]
 8003276:	4a1c      	ldr	r2, [pc, #112]	; (80032e8 <recvfrom+0x278>)
 8003278:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800327c:	021b      	lsls	r3, r3, #8
 800327e:	b29a      	uxth	r2, r3
 8003280:	7d7b      	ldrb	r3, [r7, #21]
 8003282:	b29b      	uxth	r3, r3
 8003284:	4413      	add	r3, r2
 8003286:	b29a      	uxth	r2, r3
 8003288:	7bfb      	ldrb	r3, [r7, #15]
 800328a:	3a02      	subs	r2, #2
 800328c:	b291      	uxth	r1, r2
 800328e:	4a16      	ldr	r2, [pc, #88]	; (80032e8 <recvfrom+0x278>)
 8003290:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			if(sock_remained_size[sn] & 0x01)
   				sock_remained_size[sn] = sock_remained_size[sn] + 1 - 4;
   			else
   				sock_remained_size[sn] -= 4;
			#endif
   			if(sock_remained_size[sn] > 1514) 
 8003294:	7bfb      	ldrb	r3, [r7, #15]
 8003296:	4a14      	ldr	r2, [pc, #80]	; (80032e8 <recvfrom+0x278>)
 8003298:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800329c:	f240 52ea 	movw	r2, #1514	; 0x5ea
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d906      	bls.n	80032b2 <recvfrom+0x242>
   			{
   			   close(sn);
 80032a4:	7bfb      	ldrb	r3, [r7, #15]
 80032a6:	4618      	mov	r0, r3
 80032a8:	f7ff fabe 	bl	8002828 <close>
   			   return SOCKFATAL_PACKLEN;
 80032ac:	f46f 737a 	mvn.w	r3, #1000	; 0x3e8
 80032b0:	e0c4      	b.n	800343c <recvfrom+0x3cc>
   			}
   			sock_pack_info[sn] = PACK_FIRST;
 80032b2:	7bfb      	ldrb	r3, [r7, #15]
 80032b4:	4a0e      	ldr	r2, [pc, #56]	; (80032f0 <recvfrom+0x280>)
 80032b6:	2180      	movs	r1, #128	; 0x80
 80032b8:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 80032ba:	7bfb      	ldrb	r3, [r7, #15]
 80032bc:	4a0a      	ldr	r2, [pc, #40]	; (80032e8 <recvfrom+0x278>)
 80032be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80032c2:	89ba      	ldrh	r2, [r7, #12]
 80032c4:	429a      	cmp	r2, r3
 80032c6:	d202      	bcs.n	80032ce <recvfrom+0x25e>
 80032c8:	89bb      	ldrh	r3, [r7, #12]
 80032ca:	83fb      	strh	r3, [r7, #30]
 80032cc:	e004      	b.n	80032d8 <recvfrom+0x268>
			else pack_len = sock_remained_size[sn];
 80032ce:	7bfb      	ldrb	r3, [r7, #15]
 80032d0:	4a05      	ldr	r2, [pc, #20]	; (80032e8 <recvfrom+0x278>)
 80032d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80032d6:	83fb      	strh	r3, [r7, #30]
			wiz_recv_data(sn,buf,pack_len);
 80032d8:	8bfa      	ldrh	r2, [r7, #30]
 80032da:	7bfb      	ldrb	r3, [r7, #15]
 80032dc:	68b9      	ldr	r1, [r7, #8]
 80032de:	4618      	mov	r0, r3
 80032e0:	f000 ffca 	bl	8004278 <wiz_recv_data>
		   break;
 80032e4:	e073      	b.n	80033ce <recvfrom+0x35e>
 80032e6:	bf00      	nop
 80032e8:	200005e4 	.word	0x200005e4
 80032ec:	200005de 	.word	0x200005de
 80032f0:	200005f4 	.word	0x200005f4
   //#if ( _WIZCHIP_ < 5200 )
		case Sn_MR_IPRAW:
		   if(sock_remained_size[sn] == 0)
 80032f4:	7bfb      	ldrb	r3, [r7, #15]
 80032f6:	4a53      	ldr	r2, [pc, #332]	; (8003444 <recvfrom+0x3d4>)
 80032f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d144      	bne.n	800338a <recvfrom+0x31a>
		   {
   			wiz_recv_data(sn, head, 6);
 8003300:	f107 0114 	add.w	r1, r7, #20
 8003304:	7bfb      	ldrb	r3, [r7, #15]
 8003306:	2206      	movs	r2, #6
 8003308:	4618      	mov	r0, r3
 800330a:	f000 ffb5 	bl	8004278 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 800330e:	7bfb      	ldrb	r3, [r7, #15]
 8003310:	009b      	lsls	r3, r3, #2
 8003312:	3301      	adds	r3, #1
 8003314:	00db      	lsls	r3, r3, #3
 8003316:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800331a:	2140      	movs	r1, #64	; 0x40
 800331c:	4618      	mov	r0, r3
 800331e:	f000 fdab 	bl	8003e78 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 8003322:	bf00      	nop
 8003324:	7bfb      	ldrb	r3, [r7, #15]
 8003326:	009b      	lsls	r3, r3, #2
 8003328:	3301      	adds	r3, #1
 800332a:	00db      	lsls	r3, r3, #3
 800332c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003330:	4618      	mov	r0, r3
 8003332:	f000 fd55 	bl	8003de0 <WIZCHIP_READ>
 8003336:	4603      	mov	r3, r0
 8003338:	2b00      	cmp	r3, #0
 800333a:	d1f3      	bne.n	8003324 <recvfrom+0x2b4>
   			addr[0] = head[0];
 800333c:	7d3a      	ldrb	r2, [r7, #20]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	701a      	strb	r2, [r3, #0]
   			addr[1] = head[1];
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	3301      	adds	r3, #1
 8003346:	7d7a      	ldrb	r2, [r7, #21]
 8003348:	701a      	strb	r2, [r3, #0]
   			addr[2] = head[2];
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	3302      	adds	r3, #2
 800334e:	7dba      	ldrb	r2, [r7, #22]
 8003350:	701a      	strb	r2, [r3, #0]
   			addr[3] = head[3];
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	3303      	adds	r3, #3
 8003356:	7dfa      	ldrb	r2, [r7, #23]
 8003358:	701a      	strb	r2, [r3, #0]
   			sock_remained_size[sn] = head[4];
 800335a:	7e3a      	ldrb	r2, [r7, #24]
 800335c:	7bfb      	ldrb	r3, [r7, #15]
 800335e:	b291      	uxth	r1, r2
 8003360:	4a38      	ldr	r2, [pc, #224]	; (8003444 <recvfrom+0x3d4>)
 8003362:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			//M20150401 : For Typing Error
   			//sock_remaiend_size[sn] = (sock_remained_size[sn] << 8) + head[5];
   			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[5];
 8003366:	7bfb      	ldrb	r3, [r7, #15]
 8003368:	4a36      	ldr	r2, [pc, #216]	; (8003444 <recvfrom+0x3d4>)
 800336a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800336e:	021b      	lsls	r3, r3, #8
 8003370:	b299      	uxth	r1, r3
 8003372:	7e7b      	ldrb	r3, [r7, #25]
 8003374:	b29a      	uxth	r2, r3
 8003376:	7bfb      	ldrb	r3, [r7, #15]
 8003378:	440a      	add	r2, r1
 800337a:	b291      	uxth	r1, r2
 800337c:	4a31      	ldr	r2, [pc, #196]	; (8003444 <recvfrom+0x3d4>)
 800337e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_pack_info[sn] = PACK_FIRST;
 8003382:	7bfb      	ldrb	r3, [r7, #15]
 8003384:	4a30      	ldr	r2, [pc, #192]	; (8003448 <recvfrom+0x3d8>)
 8003386:	2180      	movs	r1, #128	; 0x80
 8003388:	54d1      	strb	r1, [r2, r3]
         }
			//
			// Need to packet length check
			//
			if(len < sock_remained_size[sn]) pack_len = len;
 800338a:	7bfb      	ldrb	r3, [r7, #15]
 800338c:	4a2d      	ldr	r2, [pc, #180]	; (8003444 <recvfrom+0x3d4>)
 800338e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003392:	89ba      	ldrh	r2, [r7, #12]
 8003394:	429a      	cmp	r2, r3
 8003396:	d202      	bcs.n	800339e <recvfrom+0x32e>
 8003398:	89bb      	ldrh	r3, [r7, #12]
 800339a:	83fb      	strh	r3, [r7, #30]
 800339c:	e004      	b.n	80033a8 <recvfrom+0x338>
			else pack_len = sock_remained_size[sn];
 800339e:	7bfb      	ldrb	r3, [r7, #15]
 80033a0:	4a28      	ldr	r2, [pc, #160]	; (8003444 <recvfrom+0x3d4>)
 80033a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80033a6:	83fb      	strh	r3, [r7, #30]
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 80033a8:	8bfa      	ldrh	r2, [r7, #30]
 80033aa:	7bfb      	ldrb	r3, [r7, #15]
 80033ac:	68b9      	ldr	r1, [r7, #8]
 80033ae:	4618      	mov	r0, r3
 80033b0:	f000 ff62 	bl	8004278 <wiz_recv_data>
			break;
 80033b4:	e00b      	b.n	80033ce <recvfrom+0x35e>
   //#endif
      default:
         wiz_recv_ignore(sn, pack_len); // data copy.
 80033b6:	8bfa      	ldrh	r2, [r7, #30]
 80033b8:	7bfb      	ldrb	r3, [r7, #15]
 80033ba:	4611      	mov	r1, r2
 80033bc:	4618      	mov	r0, r3
 80033be:	f000 ffb7 	bl	8004330 <wiz_recv_ignore>
         sock_remained_size[sn] = pack_len;
 80033c2:	7bfb      	ldrb	r3, [r7, #15]
 80033c4:	491f      	ldr	r1, [pc, #124]	; (8003444 <recvfrom+0x3d4>)
 80033c6:	8bfa      	ldrh	r2, [r7, #30]
 80033c8:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
         break;
 80033cc:	bf00      	nop
   }
	setSn_CR(sn,Sn_CR_RECV);
 80033ce:	7bfb      	ldrb	r3, [r7, #15]
 80033d0:	009b      	lsls	r3, r3, #2
 80033d2:	3301      	adds	r3, #1
 80033d4:	00db      	lsls	r3, r3, #3
 80033d6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80033da:	2140      	movs	r1, #64	; 0x40
 80033dc:	4618      	mov	r0, r3
 80033de:	f000 fd4b 	bl	8003e78 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn)) ;
 80033e2:	bf00      	nop
 80033e4:	7bfb      	ldrb	r3, [r7, #15]
 80033e6:	009b      	lsls	r3, r3, #2
 80033e8:	3301      	adds	r3, #1
 80033ea:	00db      	lsls	r3, r3, #3
 80033ec:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80033f0:	4618      	mov	r0, r3
 80033f2:	f000 fcf5 	bl	8003de0 <WIZCHIP_READ>
 80033f6:	4603      	mov	r3, r0
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d1f3      	bne.n	80033e4 <recvfrom+0x374>
	sock_remained_size[sn] -= pack_len;
 80033fc:	7bfb      	ldrb	r3, [r7, #15]
 80033fe:	4a11      	ldr	r2, [pc, #68]	; (8003444 <recvfrom+0x3d4>)
 8003400:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8003404:	7bfb      	ldrb	r3, [r7, #15]
 8003406:	8bfa      	ldrh	r2, [r7, #30]
 8003408:	1a8a      	subs	r2, r1, r2
 800340a:	b291      	uxth	r1, r2
 800340c:	4a0d      	ldr	r2, [pc, #52]	; (8003444 <recvfrom+0x3d4>)
 800340e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	//M20150601 : 
	//if(sock_remained_size[sn] != 0) sock_pack_info[sn] |= 0x01;
	if(sock_remained_size[sn] != 0)
 8003412:	7bfb      	ldrb	r3, [r7, #15]
 8003414:	4a0b      	ldr	r2, [pc, #44]	; (8003444 <recvfrom+0x3d4>)
 8003416:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d009      	beq.n	8003432 <recvfrom+0x3c2>
	{
	   sock_pack_info[sn] |= PACK_REMAINED;
 800341e:	7bfb      	ldrb	r3, [r7, #15]
 8003420:	4a09      	ldr	r2, [pc, #36]	; (8003448 <recvfrom+0x3d8>)
 8003422:	5cd2      	ldrb	r2, [r2, r3]
 8003424:	7bfb      	ldrb	r3, [r7, #15]
 8003426:	f042 0201 	orr.w	r2, r2, #1
 800342a:	b2d1      	uxtb	r1, r2
 800342c:	4a06      	ldr	r2, [pc, #24]	; (8003448 <recvfrom+0x3d8>)
 800342e:	54d1      	strb	r1, [r2, r3]
 8003430:	e003      	b.n	800343a <recvfrom+0x3ca>
   #if _WIZCHIP_ == 5300	   
	   if(pack_len & 0x01) sock_pack_info[sn] |= PACK_FIFOBYTE;
   #endif	      
	}
	else sock_pack_info[sn] = PACK_COMPLETED;
 8003432:	7bfb      	ldrb	r3, [r7, #15]
 8003434:	4a04      	ldr	r2, [pc, #16]	; (8003448 <recvfrom+0x3d8>)
 8003436:	2100      	movs	r1, #0
 8003438:	54d1      	strb	r1, [r2, r3]
   pack_len = len;
#endif
   //
   //M20150409 : Explicit Type Casting
   //return pack_len;
   return (int32_t)pack_len;
 800343a:	8bfb      	ldrh	r3, [r7, #30]
}
 800343c:	4618      	mov	r0, r3
 800343e:	3720      	adds	r7, #32
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}
 8003444:	200005e4 	.word	0x200005e4
 8003448:	200005f4 	.word	0x200005f4

0800344c <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 800344c:	b580      	push	{r7, lr}
 800344e:	b082      	sub	sp, #8
 8003450:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8003452:	f000 fa37 	bl	80038c4 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8003456:	f644 6320 	movw	r3, #20000	; 0x4e20
 800345a:	2201      	movs	r2, #1
 800345c:	2178      	movs	r1, #120	; 0x78
 800345e:	485b      	ldr	r0, [pc, #364]	; (80035cc <SSD1306_Init+0x180>)
 8003460:	f001 fe90 	bl	8005184 <HAL_I2C_IsDeviceReady>
 8003464:	4603      	mov	r3, r0
 8003466:	2b00      	cmp	r3, #0
 8003468:	d001      	beq.n	800346e <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 800346a:	2300      	movs	r3, #0
 800346c:	e0a9      	b.n	80035c2 <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 800346e:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8003472:	607b      	str	r3, [r7, #4]
	while(p>0)
 8003474:	e002      	b.n	800347c <SSD1306_Init+0x30>
		p--;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	3b01      	subs	r3, #1
 800347a:	607b      	str	r3, [r7, #4]
	while(p>0)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d1f9      	bne.n	8003476 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8003482:	22ae      	movs	r2, #174	; 0xae
 8003484:	2100      	movs	r1, #0
 8003486:	2078      	movs	r0, #120	; 0x78
 8003488:	f000 fa7a 	bl	8003980 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 800348c:	2220      	movs	r2, #32
 800348e:	2100      	movs	r1, #0
 8003490:	2078      	movs	r0, #120	; 0x78
 8003492:	f000 fa75 	bl	8003980 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8003496:	2210      	movs	r2, #16
 8003498:	2100      	movs	r1, #0
 800349a:	2078      	movs	r0, #120	; 0x78
 800349c:	f000 fa70 	bl	8003980 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80034a0:	22b0      	movs	r2, #176	; 0xb0
 80034a2:	2100      	movs	r1, #0
 80034a4:	2078      	movs	r0, #120	; 0x78
 80034a6:	f000 fa6b 	bl	8003980 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80034aa:	22c8      	movs	r2, #200	; 0xc8
 80034ac:	2100      	movs	r1, #0
 80034ae:	2078      	movs	r0, #120	; 0x78
 80034b0:	f000 fa66 	bl	8003980 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 80034b4:	2200      	movs	r2, #0
 80034b6:	2100      	movs	r1, #0
 80034b8:	2078      	movs	r0, #120	; 0x78
 80034ba:	f000 fa61 	bl	8003980 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80034be:	2210      	movs	r2, #16
 80034c0:	2100      	movs	r1, #0
 80034c2:	2078      	movs	r0, #120	; 0x78
 80034c4:	f000 fa5c 	bl	8003980 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 80034c8:	2240      	movs	r2, #64	; 0x40
 80034ca:	2100      	movs	r1, #0
 80034cc:	2078      	movs	r0, #120	; 0x78
 80034ce:	f000 fa57 	bl	8003980 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80034d2:	2281      	movs	r2, #129	; 0x81
 80034d4:	2100      	movs	r1, #0
 80034d6:	2078      	movs	r0, #120	; 0x78
 80034d8:	f000 fa52 	bl	8003980 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80034dc:	22ff      	movs	r2, #255	; 0xff
 80034de:	2100      	movs	r1, #0
 80034e0:	2078      	movs	r0, #120	; 0x78
 80034e2:	f000 fa4d 	bl	8003980 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80034e6:	22a1      	movs	r2, #161	; 0xa1
 80034e8:	2100      	movs	r1, #0
 80034ea:	2078      	movs	r0, #120	; 0x78
 80034ec:	f000 fa48 	bl	8003980 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80034f0:	22a6      	movs	r2, #166	; 0xa6
 80034f2:	2100      	movs	r1, #0
 80034f4:	2078      	movs	r0, #120	; 0x78
 80034f6:	f000 fa43 	bl	8003980 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 80034fa:	22a8      	movs	r2, #168	; 0xa8
 80034fc:	2100      	movs	r1, #0
 80034fe:	2078      	movs	r0, #120	; 0x78
 8003500:	f000 fa3e 	bl	8003980 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8003504:	223f      	movs	r2, #63	; 0x3f
 8003506:	2100      	movs	r1, #0
 8003508:	2078      	movs	r0, #120	; 0x78
 800350a:	f000 fa39 	bl	8003980 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800350e:	22a4      	movs	r2, #164	; 0xa4
 8003510:	2100      	movs	r1, #0
 8003512:	2078      	movs	r0, #120	; 0x78
 8003514:	f000 fa34 	bl	8003980 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8003518:	22d3      	movs	r2, #211	; 0xd3
 800351a:	2100      	movs	r1, #0
 800351c:	2078      	movs	r0, #120	; 0x78
 800351e:	f000 fa2f 	bl	8003980 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8003522:	2200      	movs	r2, #0
 8003524:	2100      	movs	r1, #0
 8003526:	2078      	movs	r0, #120	; 0x78
 8003528:	f000 fa2a 	bl	8003980 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 800352c:	22d5      	movs	r2, #213	; 0xd5
 800352e:	2100      	movs	r1, #0
 8003530:	2078      	movs	r0, #120	; 0x78
 8003532:	f000 fa25 	bl	8003980 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8003536:	22f0      	movs	r2, #240	; 0xf0
 8003538:	2100      	movs	r1, #0
 800353a:	2078      	movs	r0, #120	; 0x78
 800353c:	f000 fa20 	bl	8003980 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8003540:	22d9      	movs	r2, #217	; 0xd9
 8003542:	2100      	movs	r1, #0
 8003544:	2078      	movs	r0, #120	; 0x78
 8003546:	f000 fa1b 	bl	8003980 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 800354a:	2222      	movs	r2, #34	; 0x22
 800354c:	2100      	movs	r1, #0
 800354e:	2078      	movs	r0, #120	; 0x78
 8003550:	f000 fa16 	bl	8003980 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8003554:	22da      	movs	r2, #218	; 0xda
 8003556:	2100      	movs	r1, #0
 8003558:	2078      	movs	r0, #120	; 0x78
 800355a:	f000 fa11 	bl	8003980 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 800355e:	2212      	movs	r2, #18
 8003560:	2100      	movs	r1, #0
 8003562:	2078      	movs	r0, #120	; 0x78
 8003564:	f000 fa0c 	bl	8003980 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8003568:	22db      	movs	r2, #219	; 0xdb
 800356a:	2100      	movs	r1, #0
 800356c:	2078      	movs	r0, #120	; 0x78
 800356e:	f000 fa07 	bl	8003980 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8003572:	2220      	movs	r2, #32
 8003574:	2100      	movs	r1, #0
 8003576:	2078      	movs	r0, #120	; 0x78
 8003578:	f000 fa02 	bl	8003980 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 800357c:	228d      	movs	r2, #141	; 0x8d
 800357e:	2100      	movs	r1, #0
 8003580:	2078      	movs	r0, #120	; 0x78
 8003582:	f000 f9fd 	bl	8003980 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8003586:	2214      	movs	r2, #20
 8003588:	2100      	movs	r1, #0
 800358a:	2078      	movs	r0, #120	; 0x78
 800358c:	f000 f9f8 	bl	8003980 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8003590:	22af      	movs	r2, #175	; 0xaf
 8003592:	2100      	movs	r1, #0
 8003594:	2078      	movs	r0, #120	; 0x78
 8003596:	f000 f9f3 	bl	8003980 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 800359a:	222e      	movs	r2, #46	; 0x2e
 800359c:	2100      	movs	r1, #0
 800359e:	2078      	movs	r0, #120	; 0x78
 80035a0:	f000 f9ee 	bl	8003980 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80035a4:	2000      	movs	r0, #0
 80035a6:	f000 f847 	bl	8003638 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 80035aa:	f000 f813 	bl	80035d4 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 80035ae:	4b08      	ldr	r3, [pc, #32]	; (80035d0 <SSD1306_Init+0x184>)
 80035b0:	2200      	movs	r2, #0
 80035b2:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80035b4:	4b06      	ldr	r3, [pc, #24]	; (80035d0 <SSD1306_Init+0x184>)
 80035b6:	2200      	movs	r2, #0
 80035b8:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 80035ba:	4b05      	ldr	r3, [pc, #20]	; (80035d0 <SSD1306_Init+0x184>)
 80035bc:	2201      	movs	r2, #1
 80035be:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 80035c0:	2301      	movs	r3, #1
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	3708      	adds	r7, #8
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}
 80035ca:	bf00      	nop
 80035cc:	20000b60 	.word	0x20000b60
 80035d0:	20000a0c 	.word	0x20000a0c

080035d4 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b082      	sub	sp, #8
 80035d8:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 80035da:	2300      	movs	r3, #0
 80035dc:	71fb      	strb	r3, [r7, #7]
 80035de:	e021      	b.n	8003624 <SSD1306_UpdateScreen+0x50>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80035e0:	79fb      	ldrb	r3, [r7, #7]
 80035e2:	3b50      	subs	r3, #80	; 0x50
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	461a      	mov	r2, r3
 80035e8:	2100      	movs	r1, #0
 80035ea:	2078      	movs	r0, #120	; 0x78
 80035ec:	f000 f9c8 	bl	8003980 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80035f0:	2200      	movs	r2, #0
 80035f2:	2100      	movs	r1, #0
 80035f4:	2078      	movs	r0, #120	; 0x78
 80035f6:	f000 f9c3 	bl	8003980 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80035fa:	2210      	movs	r2, #16
 80035fc:	2100      	movs	r1, #0
 80035fe:	2078      	movs	r0, #120	; 0x78
 8003600:	f000 f9be 	bl	8003980 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8003604:	79fa      	ldrb	r2, [r7, #7]
 8003606:	4613      	mov	r3, r2
 8003608:	019b      	lsls	r3, r3, #6
 800360a:	4413      	add	r3, r2
 800360c:	005b      	lsls	r3, r3, #1
 800360e:	461a      	mov	r2, r3
 8003610:	4b08      	ldr	r3, [pc, #32]	; (8003634 <SSD1306_UpdateScreen+0x60>)
 8003612:	441a      	add	r2, r3
 8003614:	2382      	movs	r3, #130	; 0x82
 8003616:	2140      	movs	r1, #64	; 0x40
 8003618:	2078      	movs	r0, #120	; 0x78
 800361a:	f000 f969 	bl	80038f0 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 800361e:	79fb      	ldrb	r3, [r7, #7]
 8003620:	3301      	adds	r3, #1
 8003622:	71fb      	strb	r3, [r7, #7]
 8003624:	79fb      	ldrb	r3, [r7, #7]
 8003626:	2b07      	cmp	r3, #7
 8003628:	d9da      	bls.n	80035e0 <SSD1306_UpdateScreen+0xc>
	}
}
 800362a:	bf00      	nop
 800362c:	bf00      	nop
 800362e:	3708      	adds	r7, #8
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}
 8003634:	200005fc 	.word	0x200005fc

08003638 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8003638:	b580      	push	{r7, lr}
 800363a:	b082      	sub	sp, #8
 800363c:	af00      	add	r7, sp, #0
 800363e:	4603      	mov	r3, r0
 8003640:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8003642:	79fb      	ldrb	r3, [r7, #7]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d101      	bne.n	800364c <SSD1306_Fill+0x14>
 8003648:	2300      	movs	r3, #0
 800364a:	e000      	b.n	800364e <SSD1306_Fill+0x16>
 800364c:	23ff      	movs	r3, #255	; 0xff
 800364e:	f44f 6282 	mov.w	r2, #1040	; 0x410
 8003652:	4619      	mov	r1, r3
 8003654:	4803      	ldr	r0, [pc, #12]	; (8003664 <SSD1306_Fill+0x2c>)
 8003656:	f004 fe83 	bl	8008360 <memset>
}
 800365a:	bf00      	nop
 800365c:	3708      	adds	r7, #8
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}
 8003662:	bf00      	nop
 8003664:	200005fc 	.word	0x200005fc

08003668 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8003668:	b490      	push	{r4, r7}
 800366a:	b082      	sub	sp, #8
 800366c:	af00      	add	r7, sp, #0
 800366e:	4603      	mov	r3, r0
 8003670:	80fb      	strh	r3, [r7, #6]
 8003672:	460b      	mov	r3, r1
 8003674:	80bb      	strh	r3, [r7, #4]
 8003676:	4613      	mov	r3, r2
 8003678:	70fb      	strb	r3, [r7, #3]
	if (
 800367a:	88fb      	ldrh	r3, [r7, #6]
 800367c:	2b81      	cmp	r3, #129	; 0x81
 800367e:	d854      	bhi.n	800372a <SSD1306_DrawPixel+0xc2>
		x >= SSD1306_WIDTH ||
 8003680:	88bb      	ldrh	r3, [r7, #4]
 8003682:	2b3f      	cmp	r3, #63	; 0x3f
 8003684:	d851      	bhi.n	800372a <SSD1306_DrawPixel+0xc2>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8003686:	4b2b      	ldr	r3, [pc, #172]	; (8003734 <SSD1306_DrawPixel+0xcc>)
 8003688:	791b      	ldrb	r3, [r3, #4]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d006      	beq.n	800369c <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 800368e:	78fb      	ldrb	r3, [r7, #3]
 8003690:	2b00      	cmp	r3, #0
 8003692:	bf0c      	ite	eq
 8003694:	2301      	moveq	r3, #1
 8003696:	2300      	movne	r3, #0
 8003698:	b2db      	uxtb	r3, r3
 800369a:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 800369c:	78fb      	ldrb	r3, [r7, #3]
 800369e:	2b01      	cmp	r3, #1
 80036a0:	d120      	bne.n	80036e4 <SSD1306_DrawPixel+0x7c>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80036a2:	88fa      	ldrh	r2, [r7, #6]
 80036a4:	88bb      	ldrh	r3, [r7, #4]
 80036a6:	08db      	lsrs	r3, r3, #3
 80036a8:	b298      	uxth	r0, r3
 80036aa:	4601      	mov	r1, r0
 80036ac:	460b      	mov	r3, r1
 80036ae:	019b      	lsls	r3, r3, #6
 80036b0:	440b      	add	r3, r1
 80036b2:	005b      	lsls	r3, r3, #1
 80036b4:	4413      	add	r3, r2
 80036b6:	4a20      	ldr	r2, [pc, #128]	; (8003738 <SSD1306_DrawPixel+0xd0>)
 80036b8:	5cd3      	ldrb	r3, [r2, r3]
 80036ba:	b25a      	sxtb	r2, r3
 80036bc:	88bb      	ldrh	r3, [r7, #4]
 80036be:	f003 0307 	and.w	r3, r3, #7
 80036c2:	2101      	movs	r1, #1
 80036c4:	fa01 f303 	lsl.w	r3, r1, r3
 80036c8:	b25b      	sxtb	r3, r3
 80036ca:	4313      	orrs	r3, r2
 80036cc:	b25c      	sxtb	r4, r3
 80036ce:	88fa      	ldrh	r2, [r7, #6]
 80036d0:	4601      	mov	r1, r0
 80036d2:	460b      	mov	r3, r1
 80036d4:	019b      	lsls	r3, r3, #6
 80036d6:	440b      	add	r3, r1
 80036d8:	005b      	lsls	r3, r3, #1
 80036da:	4413      	add	r3, r2
 80036dc:	b2e1      	uxtb	r1, r4
 80036de:	4a16      	ldr	r2, [pc, #88]	; (8003738 <SSD1306_DrawPixel+0xd0>)
 80036e0:	54d1      	strb	r1, [r2, r3]
 80036e2:	e023      	b.n	800372c <SSD1306_DrawPixel+0xc4>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80036e4:	88fa      	ldrh	r2, [r7, #6]
 80036e6:	88bb      	ldrh	r3, [r7, #4]
 80036e8:	08db      	lsrs	r3, r3, #3
 80036ea:	b298      	uxth	r0, r3
 80036ec:	4601      	mov	r1, r0
 80036ee:	460b      	mov	r3, r1
 80036f0:	019b      	lsls	r3, r3, #6
 80036f2:	440b      	add	r3, r1
 80036f4:	005b      	lsls	r3, r3, #1
 80036f6:	4413      	add	r3, r2
 80036f8:	4a0f      	ldr	r2, [pc, #60]	; (8003738 <SSD1306_DrawPixel+0xd0>)
 80036fa:	5cd3      	ldrb	r3, [r2, r3]
 80036fc:	b25a      	sxtb	r2, r3
 80036fe:	88bb      	ldrh	r3, [r7, #4]
 8003700:	f003 0307 	and.w	r3, r3, #7
 8003704:	2101      	movs	r1, #1
 8003706:	fa01 f303 	lsl.w	r3, r1, r3
 800370a:	b25b      	sxtb	r3, r3
 800370c:	43db      	mvns	r3, r3
 800370e:	b25b      	sxtb	r3, r3
 8003710:	4013      	ands	r3, r2
 8003712:	b25c      	sxtb	r4, r3
 8003714:	88fa      	ldrh	r2, [r7, #6]
 8003716:	4601      	mov	r1, r0
 8003718:	460b      	mov	r3, r1
 800371a:	019b      	lsls	r3, r3, #6
 800371c:	440b      	add	r3, r1
 800371e:	005b      	lsls	r3, r3, #1
 8003720:	4413      	add	r3, r2
 8003722:	b2e1      	uxtb	r1, r4
 8003724:	4a04      	ldr	r2, [pc, #16]	; (8003738 <SSD1306_DrawPixel+0xd0>)
 8003726:	54d1      	strb	r1, [r2, r3]
 8003728:	e000      	b.n	800372c <SSD1306_DrawPixel+0xc4>
		return;
 800372a:	bf00      	nop
	}
}
 800372c:	3708      	adds	r7, #8
 800372e:	46bd      	mov	sp, r7
 8003730:	bc90      	pop	{r4, r7}
 8003732:	4770      	bx	lr
 8003734:	20000a0c 	.word	0x20000a0c
 8003738:	200005fc 	.word	0x200005fc

0800373c <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 800373c:	b480      	push	{r7}
 800373e:	b083      	sub	sp, #12
 8003740:	af00      	add	r7, sp, #0
 8003742:	4603      	mov	r3, r0
 8003744:	460a      	mov	r2, r1
 8003746:	80fb      	strh	r3, [r7, #6]
 8003748:	4613      	mov	r3, r2
 800374a:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 800374c:	4a05      	ldr	r2, [pc, #20]	; (8003764 <SSD1306_GotoXY+0x28>)
 800374e:	88fb      	ldrh	r3, [r7, #6]
 8003750:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8003752:	4a04      	ldr	r2, [pc, #16]	; (8003764 <SSD1306_GotoXY+0x28>)
 8003754:	88bb      	ldrh	r3, [r7, #4]
 8003756:	8053      	strh	r3, [r2, #2]
}
 8003758:	bf00      	nop
 800375a:	370c      	adds	r7, #12
 800375c:	46bd      	mov	sp, r7
 800375e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003762:	4770      	bx	lr
 8003764:	20000a0c 	.word	0x20000a0c

08003768 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8003768:	b580      	push	{r7, lr}
 800376a:	b086      	sub	sp, #24
 800376c:	af00      	add	r7, sp, #0
 800376e:	4603      	mov	r3, r0
 8003770:	6039      	str	r1, [r7, #0]
 8003772:	71fb      	strb	r3, [r7, #7]
 8003774:	4613      	mov	r3, r2
 8003776:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8003778:	4b3a      	ldr	r3, [pc, #232]	; (8003864 <SSD1306_Putc+0xfc>)
 800377a:	881b      	ldrh	r3, [r3, #0]
 800377c:	461a      	mov	r2, r3
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	781b      	ldrb	r3, [r3, #0]
 8003782:	4413      	add	r3, r2
	if (
 8003784:	2b81      	cmp	r3, #129	; 0x81
 8003786:	dc07      	bgt.n	8003798 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8003788:	4b36      	ldr	r3, [pc, #216]	; (8003864 <SSD1306_Putc+0xfc>)
 800378a:	885b      	ldrh	r3, [r3, #2]
 800378c:	461a      	mov	r2, r3
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	785b      	ldrb	r3, [r3, #1]
 8003792:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8003794:	2b3f      	cmp	r3, #63	; 0x3f
 8003796:	dd01      	ble.n	800379c <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8003798:	2300      	movs	r3, #0
 800379a:	e05e      	b.n	800385a <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 800379c:	2300      	movs	r3, #0
 800379e:	617b      	str	r3, [r7, #20]
 80037a0:	e04b      	b.n	800383a <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	685a      	ldr	r2, [r3, #4]
 80037a6:	79fb      	ldrb	r3, [r7, #7]
 80037a8:	3b20      	subs	r3, #32
 80037aa:	6839      	ldr	r1, [r7, #0]
 80037ac:	7849      	ldrb	r1, [r1, #1]
 80037ae:	fb01 f303 	mul.w	r3, r1, r3
 80037b2:	4619      	mov	r1, r3
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	440b      	add	r3, r1
 80037b8:	005b      	lsls	r3, r3, #1
 80037ba:	4413      	add	r3, r2
 80037bc:	881b      	ldrh	r3, [r3, #0]
 80037be:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 80037c0:	2300      	movs	r3, #0
 80037c2:	613b      	str	r3, [r7, #16]
 80037c4:	e030      	b.n	8003828 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 80037c6:	68fa      	ldr	r2, [r7, #12]
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	fa02 f303 	lsl.w	r3, r2, r3
 80037ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d010      	beq.n	80037f8 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80037d6:	4b23      	ldr	r3, [pc, #140]	; (8003864 <SSD1306_Putc+0xfc>)
 80037d8:	881a      	ldrh	r2, [r3, #0]
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	b29b      	uxth	r3, r3
 80037de:	4413      	add	r3, r2
 80037e0:	b298      	uxth	r0, r3
 80037e2:	4b20      	ldr	r3, [pc, #128]	; (8003864 <SSD1306_Putc+0xfc>)
 80037e4:	885a      	ldrh	r2, [r3, #2]
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	b29b      	uxth	r3, r3
 80037ea:	4413      	add	r3, r2
 80037ec:	b29b      	uxth	r3, r3
 80037ee:	79ba      	ldrb	r2, [r7, #6]
 80037f0:	4619      	mov	r1, r3
 80037f2:	f7ff ff39 	bl	8003668 <SSD1306_DrawPixel>
 80037f6:	e014      	b.n	8003822 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80037f8:	4b1a      	ldr	r3, [pc, #104]	; (8003864 <SSD1306_Putc+0xfc>)
 80037fa:	881a      	ldrh	r2, [r3, #0]
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	b29b      	uxth	r3, r3
 8003800:	4413      	add	r3, r2
 8003802:	b298      	uxth	r0, r3
 8003804:	4b17      	ldr	r3, [pc, #92]	; (8003864 <SSD1306_Putc+0xfc>)
 8003806:	885a      	ldrh	r2, [r3, #2]
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	b29b      	uxth	r3, r3
 800380c:	4413      	add	r3, r2
 800380e:	b299      	uxth	r1, r3
 8003810:	79bb      	ldrb	r3, [r7, #6]
 8003812:	2b00      	cmp	r3, #0
 8003814:	bf0c      	ite	eq
 8003816:	2301      	moveq	r3, #1
 8003818:	2300      	movne	r3, #0
 800381a:	b2db      	uxtb	r3, r3
 800381c:	461a      	mov	r2, r3
 800381e:	f7ff ff23 	bl	8003668 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	3301      	adds	r3, #1
 8003826:	613b      	str	r3, [r7, #16]
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	781b      	ldrb	r3, [r3, #0]
 800382c:	461a      	mov	r2, r3
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	4293      	cmp	r3, r2
 8003832:	d3c8      	bcc.n	80037c6 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	3301      	adds	r3, #1
 8003838:	617b      	str	r3, [r7, #20]
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	785b      	ldrb	r3, [r3, #1]
 800383e:	461a      	mov	r2, r3
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	4293      	cmp	r3, r2
 8003844:	d3ad      	bcc.n	80037a2 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8003846:	4b07      	ldr	r3, [pc, #28]	; (8003864 <SSD1306_Putc+0xfc>)
 8003848:	881a      	ldrh	r2, [r3, #0]
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	781b      	ldrb	r3, [r3, #0]
 800384e:	b29b      	uxth	r3, r3
 8003850:	4413      	add	r3, r2
 8003852:	b29a      	uxth	r2, r3
 8003854:	4b03      	ldr	r3, [pc, #12]	; (8003864 <SSD1306_Putc+0xfc>)
 8003856:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8003858:	79fb      	ldrb	r3, [r7, #7]
}
 800385a:	4618      	mov	r0, r3
 800385c:	3718      	adds	r7, #24
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}
 8003862:	bf00      	nop
 8003864:	20000a0c 	.word	0x20000a0c

08003868 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8003868:	b580      	push	{r7, lr}
 800386a:	b084      	sub	sp, #16
 800386c:	af00      	add	r7, sp, #0
 800386e:	60f8      	str	r0, [r7, #12]
 8003870:	60b9      	str	r1, [r7, #8]
 8003872:	4613      	mov	r3, r2
 8003874:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8003876:	e012      	b.n	800389e <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	781b      	ldrb	r3, [r3, #0]
 800387c:	79fa      	ldrb	r2, [r7, #7]
 800387e:	68b9      	ldr	r1, [r7, #8]
 8003880:	4618      	mov	r0, r3
 8003882:	f7ff ff71 	bl	8003768 <SSD1306_Putc>
 8003886:	4603      	mov	r3, r0
 8003888:	461a      	mov	r2, r3
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	781b      	ldrb	r3, [r3, #0]
 800388e:	429a      	cmp	r2, r3
 8003890:	d002      	beq.n	8003898 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	781b      	ldrb	r3, [r3, #0]
 8003896:	e008      	b.n	80038aa <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	3301      	adds	r3, #1
 800389c:	60fb      	str	r3, [r7, #12]
	while (*str) {
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	781b      	ldrb	r3, [r3, #0]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d1e8      	bne.n	8003878 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	781b      	ldrb	r3, [r3, #0]
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	3710      	adds	r7, #16
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}

080038b2 <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 80038b2:	b580      	push	{r7, lr}
 80038b4:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 80038b6:	2000      	movs	r0, #0
 80038b8:	f7ff febe 	bl	8003638 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 80038bc:	f7ff fe8a 	bl	80035d4 <SSD1306_UpdateScreen>
}
 80038c0:	bf00      	nop
 80038c2:	bd80      	pop	{r7, pc}

080038c4 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 80038c4:	b480      	push	{r7}
 80038c6:	b083      	sub	sp, #12
 80038c8:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 80038ca:	4b08      	ldr	r3, [pc, #32]	; (80038ec <ssd1306_I2C_Init+0x28>)
 80038cc:	607b      	str	r3, [r7, #4]
	while(p>0)
 80038ce:	e002      	b.n	80038d6 <ssd1306_I2C_Init+0x12>
		p--;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	3b01      	subs	r3, #1
 80038d4:	607b      	str	r3, [r7, #4]
	while(p>0)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d1f9      	bne.n	80038d0 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 80038dc:	bf00      	nop
 80038de:	bf00      	nop
 80038e0:	370c      	adds	r7, #12
 80038e2:	46bd      	mov	sp, r7
 80038e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e8:	4770      	bx	lr
 80038ea:	bf00      	nop
 80038ec:	0003d090 	.word	0x0003d090

080038f0 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 80038f0:	b590      	push	{r4, r7, lr}
 80038f2:	b0c7      	sub	sp, #284	; 0x11c
 80038f4:	af02      	add	r7, sp, #8
 80038f6:	4604      	mov	r4, r0
 80038f8:	4608      	mov	r0, r1
 80038fa:	4639      	mov	r1, r7
 80038fc:	600a      	str	r2, [r1, #0]
 80038fe:	4619      	mov	r1, r3
 8003900:	1dfb      	adds	r3, r7, #7
 8003902:	4622      	mov	r2, r4
 8003904:	701a      	strb	r2, [r3, #0]
 8003906:	1dbb      	adds	r3, r7, #6
 8003908:	4602      	mov	r2, r0
 800390a:	701a      	strb	r2, [r3, #0]
 800390c:	1d3b      	adds	r3, r7, #4
 800390e:	460a      	mov	r2, r1
 8003910:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8003912:	f107 030c 	add.w	r3, r7, #12
 8003916:	1dba      	adds	r2, r7, #6
 8003918:	7812      	ldrb	r2, [r2, #0]
 800391a:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 800391c:	2300      	movs	r3, #0
 800391e:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8003922:	e010      	b.n	8003946 <ssd1306_I2C_WriteMulti+0x56>
dt[i+1] = data[i];
 8003924:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8003928:	463a      	mov	r2, r7
 800392a:	6812      	ldr	r2, [r2, #0]
 800392c:	441a      	add	r2, r3
 800392e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8003932:	3301      	adds	r3, #1
 8003934:	7811      	ldrb	r1, [r2, #0]
 8003936:	f107 020c 	add.w	r2, r7, #12
 800393a:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 800393c:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8003940:	3301      	adds	r3, #1
 8003942:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8003946:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800394a:	b29b      	uxth	r3, r3
 800394c:	1d3a      	adds	r2, r7, #4
 800394e:	8812      	ldrh	r2, [r2, #0]
 8003950:	429a      	cmp	r2, r3
 8003952:	d8e7      	bhi.n	8003924 <ssd1306_I2C_WriteMulti+0x34>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8003954:	1dfb      	adds	r3, r7, #7
 8003956:	781b      	ldrb	r3, [r3, #0]
 8003958:	b299      	uxth	r1, r3
 800395a:	1d3b      	adds	r3, r7, #4
 800395c:	881b      	ldrh	r3, [r3, #0]
 800395e:	3301      	adds	r3, #1
 8003960:	b29b      	uxth	r3, r3
 8003962:	f107 020c 	add.w	r2, r7, #12
 8003966:	200a      	movs	r0, #10
 8003968:	9000      	str	r0, [sp, #0]
 800396a:	4804      	ldr	r0, [pc, #16]	; (800397c <ssd1306_I2C_WriteMulti+0x8c>)
 800396c:	f001 fb16 	bl	8004f9c <HAL_I2C_Master_Transmit>
}
 8003970:	bf00      	nop
 8003972:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8003976:	46bd      	mov	sp, r7
 8003978:	bd90      	pop	{r4, r7, pc}
 800397a:	bf00      	nop
 800397c:	20000b60 	.word	0x20000b60

08003980 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8003980:	b580      	push	{r7, lr}
 8003982:	b086      	sub	sp, #24
 8003984:	af02      	add	r7, sp, #8
 8003986:	4603      	mov	r3, r0
 8003988:	71fb      	strb	r3, [r7, #7]
 800398a:	460b      	mov	r3, r1
 800398c:	71bb      	strb	r3, [r7, #6]
 800398e:	4613      	mov	r3, r2
 8003990:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8003992:	79bb      	ldrb	r3, [r7, #6]
 8003994:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8003996:	797b      	ldrb	r3, [r7, #5]
 8003998:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 800399a:	79fb      	ldrb	r3, [r7, #7]
 800399c:	b299      	uxth	r1, r3
 800399e:	f107 020c 	add.w	r2, r7, #12
 80039a2:	230a      	movs	r3, #10
 80039a4:	9300      	str	r3, [sp, #0]
 80039a6:	2302      	movs	r3, #2
 80039a8:	4803      	ldr	r0, [pc, #12]	; (80039b8 <ssd1306_I2C_Write+0x38>)
 80039aa:	f001 faf7 	bl	8004f9c <HAL_I2C_Master_Transmit>
}
 80039ae:	bf00      	nop
 80039b0:	3710      	adds	r7, #16
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}
 80039b6:	bf00      	nop
 80039b8:	20000b60 	.word	0x20000b60

080039bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80039bc:	b480      	push	{r7}
 80039be:	b083      	sub	sp, #12
 80039c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039c2:	4b0f      	ldr	r3, [pc, #60]	; (8003a00 <HAL_MspInit+0x44>)
 80039c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039c6:	4a0e      	ldr	r2, [pc, #56]	; (8003a00 <HAL_MspInit+0x44>)
 80039c8:	f043 0301 	orr.w	r3, r3, #1
 80039cc:	6613      	str	r3, [r2, #96]	; 0x60
 80039ce:	4b0c      	ldr	r3, [pc, #48]	; (8003a00 <HAL_MspInit+0x44>)
 80039d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039d2:	f003 0301 	and.w	r3, r3, #1
 80039d6:	607b      	str	r3, [r7, #4]
 80039d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80039da:	4b09      	ldr	r3, [pc, #36]	; (8003a00 <HAL_MspInit+0x44>)
 80039dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039de:	4a08      	ldr	r2, [pc, #32]	; (8003a00 <HAL_MspInit+0x44>)
 80039e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039e4:	6593      	str	r3, [r2, #88]	; 0x58
 80039e6:	4b06      	ldr	r3, [pc, #24]	; (8003a00 <HAL_MspInit+0x44>)
 80039e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039ee:	603b      	str	r3, [r7, #0]
 80039f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80039f2:	bf00      	nop
 80039f4:	370c      	adds	r7, #12
 80039f6:	46bd      	mov	sp, r7
 80039f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fc:	4770      	bx	lr
 80039fe:	bf00      	nop
 8003a00:	40021000 	.word	0x40021000

08003a04 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b08a      	sub	sp, #40	; 0x28
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a0c:	f107 0314 	add.w	r3, r7, #20
 8003a10:	2200      	movs	r2, #0
 8003a12:	601a      	str	r2, [r3, #0]
 8003a14:	605a      	str	r2, [r3, #4]
 8003a16:	609a      	str	r2, [r3, #8]
 8003a18:	60da      	str	r2, [r3, #12]
 8003a1a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a17      	ldr	r2, [pc, #92]	; (8003a80 <HAL_I2C_MspInit+0x7c>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d127      	bne.n	8003a76 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a26:	4b17      	ldr	r3, [pc, #92]	; (8003a84 <HAL_I2C_MspInit+0x80>)
 8003a28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a2a:	4a16      	ldr	r2, [pc, #88]	; (8003a84 <HAL_I2C_MspInit+0x80>)
 8003a2c:	f043 0302 	orr.w	r3, r3, #2
 8003a30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003a32:	4b14      	ldr	r3, [pc, #80]	; (8003a84 <HAL_I2C_MspInit+0x80>)
 8003a34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a36:	f003 0302 	and.w	r3, r3, #2
 8003a3a:	613b      	str	r3, [r7, #16]
 8003a3c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003a3e:	23c0      	movs	r3, #192	; 0xc0
 8003a40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003a42:	2312      	movs	r3, #18
 8003a44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003a46:	2301      	movs	r3, #1
 8003a48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a4a:	2303      	movs	r3, #3
 8003a4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003a4e:	2304      	movs	r3, #4
 8003a50:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a52:	f107 0314 	add.w	r3, r7, #20
 8003a56:	4619      	mov	r1, r3
 8003a58:	480b      	ldr	r0, [pc, #44]	; (8003a88 <HAL_I2C_MspInit+0x84>)
 8003a5a:	f001 f853 	bl	8004b04 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003a5e:	4b09      	ldr	r3, [pc, #36]	; (8003a84 <HAL_I2C_MspInit+0x80>)
 8003a60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a62:	4a08      	ldr	r2, [pc, #32]	; (8003a84 <HAL_I2C_MspInit+0x80>)
 8003a64:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003a68:	6593      	str	r3, [r2, #88]	; 0x58
 8003a6a:	4b06      	ldr	r3, [pc, #24]	; (8003a84 <HAL_I2C_MspInit+0x80>)
 8003a6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a6e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a72:	60fb      	str	r3, [r7, #12]
 8003a74:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003a76:	bf00      	nop
 8003a78:	3728      	adds	r7, #40	; 0x28
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}
 8003a7e:	bf00      	nop
 8003a80:	40005400 	.word	0x40005400
 8003a84:	40021000 	.word	0x40021000
 8003a88:	48000400 	.word	0x48000400

08003a8c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b08a      	sub	sp, #40	; 0x28
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a94:	f107 0314 	add.w	r3, r7, #20
 8003a98:	2200      	movs	r2, #0
 8003a9a:	601a      	str	r2, [r3, #0]
 8003a9c:	605a      	str	r2, [r3, #4]
 8003a9e:	609a      	str	r2, [r3, #8]
 8003aa0:	60da      	str	r2, [r3, #12]
 8003aa2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a18      	ldr	r2, [pc, #96]	; (8003b0c <HAL_SPI_MspInit+0x80>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d129      	bne.n	8003b02 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003aae:	4b18      	ldr	r3, [pc, #96]	; (8003b10 <HAL_SPI_MspInit+0x84>)
 8003ab0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ab2:	4a17      	ldr	r2, [pc, #92]	; (8003b10 <HAL_SPI_MspInit+0x84>)
 8003ab4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003ab8:	6613      	str	r3, [r2, #96]	; 0x60
 8003aba:	4b15      	ldr	r3, [pc, #84]	; (8003b10 <HAL_SPI_MspInit+0x84>)
 8003abc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003abe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ac2:	613b      	str	r3, [r7, #16]
 8003ac4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ac6:	4b12      	ldr	r3, [pc, #72]	; (8003b10 <HAL_SPI_MspInit+0x84>)
 8003ac8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003aca:	4a11      	ldr	r2, [pc, #68]	; (8003b10 <HAL_SPI_MspInit+0x84>)
 8003acc:	f043 0301 	orr.w	r3, r3, #1
 8003ad0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003ad2:	4b0f      	ldr	r3, [pc, #60]	; (8003b10 <HAL_SPI_MspInit+0x84>)
 8003ad4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ad6:	f003 0301 	and.w	r3, r3, #1
 8003ada:	60fb      	str	r3, [r7, #12]
 8003adc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA11     ------> SPI1_MISO
    PA12     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_12;
 8003ade:	f641 0302 	movw	r3, #6146	; 0x1802
 8003ae2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ae4:	2302      	movs	r3, #2
 8003ae6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ae8:	2300      	movs	r3, #0
 8003aea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003aec:	2303      	movs	r3, #3
 8003aee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003af0:	2305      	movs	r3, #5
 8003af2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003af4:	f107 0314 	add.w	r3, r7, #20
 8003af8:	4619      	mov	r1, r3
 8003afa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003afe:	f001 f801 	bl	8004b04 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003b02:	bf00      	nop
 8003b04:	3728      	adds	r7, #40	; 0x28
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}
 8003b0a:	bf00      	nop
 8003b0c:	40013000 	.word	0x40013000
 8003b10:	40021000 	.word	0x40021000

08003b14 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b08a      	sub	sp, #40	; 0x28
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b1c:	f107 0314 	add.w	r3, r7, #20
 8003b20:	2200      	movs	r2, #0
 8003b22:	601a      	str	r2, [r3, #0]
 8003b24:	605a      	str	r2, [r3, #4]
 8003b26:	609a      	str	r2, [r3, #8]
 8003b28:	60da      	str	r2, [r3, #12]
 8003b2a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a18      	ldr	r2, [pc, #96]	; (8003b94 <HAL_UART_MspInit+0x80>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d129      	bne.n	8003b8a <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003b36:	4b18      	ldr	r3, [pc, #96]	; (8003b98 <HAL_UART_MspInit+0x84>)
 8003b38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b3a:	4a17      	ldr	r2, [pc, #92]	; (8003b98 <HAL_UART_MspInit+0x84>)
 8003b3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b40:	6613      	str	r3, [r2, #96]	; 0x60
 8003b42:	4b15      	ldr	r3, [pc, #84]	; (8003b98 <HAL_UART_MspInit+0x84>)
 8003b44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b4a:	613b      	str	r3, [r7, #16]
 8003b4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b4e:	4b12      	ldr	r3, [pc, #72]	; (8003b98 <HAL_UART_MspInit+0x84>)
 8003b50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b52:	4a11      	ldr	r2, [pc, #68]	; (8003b98 <HAL_UART_MspInit+0x84>)
 8003b54:	f043 0301 	orr.w	r3, r3, #1
 8003b58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003b5a:	4b0f      	ldr	r3, [pc, #60]	; (8003b98 <HAL_UART_MspInit+0x84>)
 8003b5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b5e:	f003 0301 	and.w	r3, r3, #1
 8003b62:	60fb      	str	r3, [r7, #12]
 8003b64:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003b66:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003b6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b6c:	2302      	movs	r3, #2
 8003b6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b70:	2300      	movs	r3, #0
 8003b72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b74:	2303      	movs	r3, #3
 8003b76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003b78:	2307      	movs	r3, #7
 8003b7a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b7c:	f107 0314 	add.w	r3, r7, #20
 8003b80:	4619      	mov	r1, r3
 8003b82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b86:	f000 ffbd 	bl	8004b04 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003b8a:	bf00      	nop
 8003b8c:	3728      	adds	r7, #40	; 0x28
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}
 8003b92:	bf00      	nop
 8003b94:	40013800 	.word	0x40013800
 8003b98:	40021000 	.word	0x40021000

08003b9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003ba0:	e7fe      	b.n	8003ba0 <NMI_Handler+0x4>

08003ba2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003ba2:	b480      	push	{r7}
 8003ba4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003ba6:	e7fe      	b.n	8003ba6 <HardFault_Handler+0x4>

08003ba8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003bac:	e7fe      	b.n	8003bac <MemManage_Handler+0x4>

08003bae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003bae:	b480      	push	{r7}
 8003bb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003bb2:	e7fe      	b.n	8003bb2 <BusFault_Handler+0x4>

08003bb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003bb8:	e7fe      	b.n	8003bb8 <UsageFault_Handler+0x4>

08003bba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003bba:	b480      	push	{r7}
 8003bbc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003bbe:	bf00      	nop
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc6:	4770      	bx	lr

08003bc8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003bcc:	bf00      	nop
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd4:	4770      	bx	lr

08003bd6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003bd6:	b480      	push	{r7}
 8003bd8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003bda:	bf00      	nop
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be2:	4770      	bx	lr

08003be4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003be8:	f000 fe62 	bl	80048b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003bec:	bf00      	nop
 8003bee:	bd80      	pop	{r7, pc}

08003bf0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	af00      	add	r7, sp, #0
	return 1;
 8003bf4:	2301      	movs	r3, #1
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfe:	4770      	bx	lr

08003c00 <_kill>:

int _kill(int pid, int sig)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b082      	sub	sp, #8
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
 8003c08:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003c0a:	f004 fb69 	bl	80082e0 <__errno>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	2216      	movs	r2, #22
 8003c12:	601a      	str	r2, [r3, #0]
	return -1;
 8003c14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	3708      	adds	r7, #8
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bd80      	pop	{r7, pc}

08003c20 <_exit>:

void _exit (int status)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b082      	sub	sp, #8
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003c28:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003c2c:	6878      	ldr	r0, [r7, #4]
 8003c2e:	f7ff ffe7 	bl	8003c00 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003c32:	e7fe      	b.n	8003c32 <_exit+0x12>

08003c34 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b086      	sub	sp, #24
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	60f8      	str	r0, [r7, #12]
 8003c3c:	60b9      	str	r1, [r7, #8]
 8003c3e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c40:	2300      	movs	r3, #0
 8003c42:	617b      	str	r3, [r7, #20]
 8003c44:	e00a      	b.n	8003c5c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003c46:	f3af 8000 	nop.w
 8003c4a:	4601      	mov	r1, r0
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	1c5a      	adds	r2, r3, #1
 8003c50:	60ba      	str	r2, [r7, #8]
 8003c52:	b2ca      	uxtb	r2, r1
 8003c54:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	3301      	adds	r3, #1
 8003c5a:	617b      	str	r3, [r7, #20]
 8003c5c:	697a      	ldr	r2, [r7, #20]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	429a      	cmp	r2, r3
 8003c62:	dbf0      	blt.n	8003c46 <_read+0x12>
	}

return len;
 8003c64:	687b      	ldr	r3, [r7, #4]
}
 8003c66:	4618      	mov	r0, r3
 8003c68:	3718      	adds	r7, #24
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}

08003c6e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003c6e:	b580      	push	{r7, lr}
 8003c70:	b086      	sub	sp, #24
 8003c72:	af00      	add	r7, sp, #0
 8003c74:	60f8      	str	r0, [r7, #12]
 8003c76:	60b9      	str	r1, [r7, #8]
 8003c78:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	617b      	str	r3, [r7, #20]
 8003c7e:	e009      	b.n	8003c94 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	1c5a      	adds	r2, r3, #1
 8003c84:	60ba      	str	r2, [r7, #8]
 8003c86:	781b      	ldrb	r3, [r3, #0]
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	3301      	adds	r3, #1
 8003c92:	617b      	str	r3, [r7, #20]
 8003c94:	697a      	ldr	r2, [r7, #20]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	dbf1      	blt.n	8003c80 <_write+0x12>
	}
	return len;
 8003c9c:	687b      	ldr	r3, [r7, #4]
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	3718      	adds	r7, #24
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}

08003ca6 <_close>:

int _close(int file)
{
 8003ca6:	b480      	push	{r7}
 8003ca8:	b083      	sub	sp, #12
 8003caa:	af00      	add	r7, sp, #0
 8003cac:	6078      	str	r0, [r7, #4]
	return -1;
 8003cae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	370c      	adds	r7, #12
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbc:	4770      	bx	lr

08003cbe <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003cbe:	b480      	push	{r7}
 8003cc0:	b083      	sub	sp, #12
 8003cc2:	af00      	add	r7, sp, #0
 8003cc4:	6078      	str	r0, [r7, #4]
 8003cc6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003cce:	605a      	str	r2, [r3, #4]
	return 0;
 8003cd0:	2300      	movs	r3, #0
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	370c      	adds	r7, #12
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cdc:	4770      	bx	lr

08003cde <_isatty>:

int _isatty(int file)
{
 8003cde:	b480      	push	{r7}
 8003ce0:	b083      	sub	sp, #12
 8003ce2:	af00      	add	r7, sp, #0
 8003ce4:	6078      	str	r0, [r7, #4]
	return 1;
 8003ce6:	2301      	movs	r3, #1
}
 8003ce8:	4618      	mov	r0, r3
 8003cea:	370c      	adds	r7, #12
 8003cec:	46bd      	mov	sp, r7
 8003cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf2:	4770      	bx	lr

08003cf4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b085      	sub	sp, #20
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	60f8      	str	r0, [r7, #12]
 8003cfc:	60b9      	str	r1, [r7, #8]
 8003cfe:	607a      	str	r2, [r7, #4]
	return 0;
 8003d00:	2300      	movs	r3, #0
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	3714      	adds	r7, #20
 8003d06:	46bd      	mov	sp, r7
 8003d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0c:	4770      	bx	lr
	...

08003d10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b086      	sub	sp, #24
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003d18:	4a14      	ldr	r2, [pc, #80]	; (8003d6c <_sbrk+0x5c>)
 8003d1a:	4b15      	ldr	r3, [pc, #84]	; (8003d70 <_sbrk+0x60>)
 8003d1c:	1ad3      	subs	r3, r2, r3
 8003d1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003d24:	4b13      	ldr	r3, [pc, #76]	; (8003d74 <_sbrk+0x64>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d102      	bne.n	8003d32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003d2c:	4b11      	ldr	r3, [pc, #68]	; (8003d74 <_sbrk+0x64>)
 8003d2e:	4a12      	ldr	r2, [pc, #72]	; (8003d78 <_sbrk+0x68>)
 8003d30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003d32:	4b10      	ldr	r3, [pc, #64]	; (8003d74 <_sbrk+0x64>)
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	4413      	add	r3, r2
 8003d3a:	693a      	ldr	r2, [r7, #16]
 8003d3c:	429a      	cmp	r2, r3
 8003d3e:	d207      	bcs.n	8003d50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003d40:	f004 face 	bl	80082e0 <__errno>
 8003d44:	4603      	mov	r3, r0
 8003d46:	220c      	movs	r2, #12
 8003d48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003d4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003d4e:	e009      	b.n	8003d64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003d50:	4b08      	ldr	r3, [pc, #32]	; (8003d74 <_sbrk+0x64>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003d56:	4b07      	ldr	r3, [pc, #28]	; (8003d74 <_sbrk+0x64>)
 8003d58:	681a      	ldr	r2, [r3, #0]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	4413      	add	r3, r2
 8003d5e:	4a05      	ldr	r2, [pc, #20]	; (8003d74 <_sbrk+0x64>)
 8003d60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003d62:	68fb      	ldr	r3, [r7, #12]
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	3718      	adds	r7, #24
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}
 8003d6c:	2000a000 	.word	0x2000a000
 8003d70:	00000400 	.word	0x00000400
 8003d74:	20000a14 	.word	0x20000a14
 8003d78:	20000cf8 	.word	0x20000cf8

08003d7c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003d80:	4b15      	ldr	r3, [pc, #84]	; (8003dd8 <SystemInit+0x5c>)
 8003d82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d86:	4a14      	ldr	r2, [pc, #80]	; (8003dd8 <SystemInit+0x5c>)
 8003d88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003d8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8003d90:	4b12      	ldr	r3, [pc, #72]	; (8003ddc <SystemInit+0x60>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a11      	ldr	r2, [pc, #68]	; (8003ddc <SystemInit+0x60>)
 8003d96:	f043 0301 	orr.w	r3, r3, #1
 8003d9a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8003d9c:	4b0f      	ldr	r3, [pc, #60]	; (8003ddc <SystemInit+0x60>)
 8003d9e:	2200      	movs	r2, #0
 8003da0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8003da2:	4b0e      	ldr	r3, [pc, #56]	; (8003ddc <SystemInit+0x60>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a0d      	ldr	r2, [pc, #52]	; (8003ddc <SystemInit+0x60>)
 8003da8:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8003dac:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8003db0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8003db2:	4b0a      	ldr	r3, [pc, #40]	; (8003ddc <SystemInit+0x60>)
 8003db4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003db8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003dba:	4b08      	ldr	r3, [pc, #32]	; (8003ddc <SystemInit+0x60>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a07      	ldr	r2, [pc, #28]	; (8003ddc <SystemInit+0x60>)
 8003dc0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003dc4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8003dc6:	4b05      	ldr	r3, [pc, #20]	; (8003ddc <SystemInit+0x60>)
 8003dc8:	2200      	movs	r2, #0
 8003dca:	619a      	str	r2, [r3, #24]
}
 8003dcc:	bf00      	nop
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd4:	4770      	bx	lr
 8003dd6:	bf00      	nop
 8003dd8:	e000ed00 	.word	0xe000ed00
 8003ddc:	40021000 	.word	0x40021000

08003de0 <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b084      	sub	sp, #16
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 8003de8:	4b22      	ldr	r3, [pc, #136]	; (8003e74 <WIZCHIP_READ+0x94>)
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	4798      	blx	r3
   WIZCHIP.CS._select();
 8003dee:	4b21      	ldr	r3, [pc, #132]	; (8003e74 <WIZCHIP_READ+0x94>)
 8003df0:	691b      	ldr	r3, [r3, #16]
 8003df2:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8003df4:	4b1f      	ldr	r3, [pc, #124]	; (8003e74 <WIZCHIP_READ+0x94>)
 8003df6:	6a1b      	ldr	r3, [r3, #32]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d003      	beq.n	8003e04 <WIZCHIP_READ+0x24>
 8003dfc:	4b1d      	ldr	r3, [pc, #116]	; (8003e74 <WIZCHIP_READ+0x94>)
 8003dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d114      	bne.n	8003e2e <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8003e04:	4b1b      	ldr	r3, [pc, #108]	; (8003e74 <WIZCHIP_READ+0x94>)
 8003e06:	69db      	ldr	r3, [r3, #28]
 8003e08:	687a      	ldr	r2, [r7, #4]
 8003e0a:	0c12      	lsrs	r2, r2, #16
 8003e0c:	b2d2      	uxtb	r2, r2
 8003e0e:	4610      	mov	r0, r2
 8003e10:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8003e12:	4b18      	ldr	r3, [pc, #96]	; (8003e74 <WIZCHIP_READ+0x94>)
 8003e14:	69db      	ldr	r3, [r3, #28]
 8003e16:	687a      	ldr	r2, [r7, #4]
 8003e18:	0a12      	lsrs	r2, r2, #8
 8003e1a:	b2d2      	uxtb	r2, r2
 8003e1c:	4610      	mov	r0, r2
 8003e1e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8003e20:	4b14      	ldr	r3, [pc, #80]	; (8003e74 <WIZCHIP_READ+0x94>)
 8003e22:	69db      	ldr	r3, [r3, #28]
 8003e24:	687a      	ldr	r2, [r7, #4]
 8003e26:	b2d2      	uxtb	r2, r2
 8003e28:	4610      	mov	r0, r2
 8003e2a:	4798      	blx	r3
 8003e2c:	e011      	b.n	8003e52 <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	0c1b      	lsrs	r3, r3, #16
 8003e32:	b2db      	uxtb	r3, r3
 8003e34:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	0a1b      	lsrs	r3, r3, #8
 8003e3a:	b2db      	uxtb	r3, r3
 8003e3c:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	b2db      	uxtb	r3, r3
 8003e42:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8003e44:	4b0b      	ldr	r3, [pc, #44]	; (8003e74 <WIZCHIP_READ+0x94>)
 8003e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e48:	f107 020c 	add.w	r2, r7, #12
 8003e4c:	2103      	movs	r1, #3
 8003e4e:	4610      	mov	r0, r2
 8003e50:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 8003e52:	4b08      	ldr	r3, [pc, #32]	; (8003e74 <WIZCHIP_READ+0x94>)
 8003e54:	699b      	ldr	r3, [r3, #24]
 8003e56:	4798      	blx	r3
 8003e58:	4603      	mov	r3, r0
 8003e5a:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 8003e5c:	4b05      	ldr	r3, [pc, #20]	; (8003e74 <WIZCHIP_READ+0x94>)
 8003e5e:	695b      	ldr	r3, [r3, #20]
 8003e60:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8003e62:	4b04      	ldr	r3, [pc, #16]	; (8003e74 <WIZCHIP_READ+0x94>)
 8003e64:	68db      	ldr	r3, [r3, #12]
 8003e66:	4798      	blx	r3
   return ret;
 8003e68:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	3710      	adds	r7, #16
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd80      	pop	{r7, pc}
 8003e72:	bf00      	nop
 8003e74:	2000006c 	.word	0x2000006c

08003e78 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b084      	sub	sp, #16
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
 8003e80:	460b      	mov	r3, r1
 8003e82:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 8003e84:	4b22      	ldr	r3, [pc, #136]	; (8003f10 <WIZCHIP_WRITE+0x98>)
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	4798      	blx	r3
   WIZCHIP.CS._select();
 8003e8a:	4b21      	ldr	r3, [pc, #132]	; (8003f10 <WIZCHIP_WRITE+0x98>)
 8003e8c:	691b      	ldr	r3, [r3, #16]
 8003e8e:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	f043 0304 	orr.w	r3, r3, #4
 8003e96:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8003e98:	4b1d      	ldr	r3, [pc, #116]	; (8003f10 <WIZCHIP_WRITE+0x98>)
 8003e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d119      	bne.n	8003ed4 <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8003ea0:	4b1b      	ldr	r3, [pc, #108]	; (8003f10 <WIZCHIP_WRITE+0x98>)
 8003ea2:	69db      	ldr	r3, [r3, #28]
 8003ea4:	687a      	ldr	r2, [r7, #4]
 8003ea6:	0c12      	lsrs	r2, r2, #16
 8003ea8:	b2d2      	uxtb	r2, r2
 8003eaa:	4610      	mov	r0, r2
 8003eac:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8003eae:	4b18      	ldr	r3, [pc, #96]	; (8003f10 <WIZCHIP_WRITE+0x98>)
 8003eb0:	69db      	ldr	r3, [r3, #28]
 8003eb2:	687a      	ldr	r2, [r7, #4]
 8003eb4:	0a12      	lsrs	r2, r2, #8
 8003eb6:	b2d2      	uxtb	r2, r2
 8003eb8:	4610      	mov	r0, r2
 8003eba:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8003ebc:	4b14      	ldr	r3, [pc, #80]	; (8003f10 <WIZCHIP_WRITE+0x98>)
 8003ebe:	69db      	ldr	r3, [r3, #28]
 8003ec0:	687a      	ldr	r2, [r7, #4]
 8003ec2:	b2d2      	uxtb	r2, r2
 8003ec4:	4610      	mov	r0, r2
 8003ec6:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 8003ec8:	4b11      	ldr	r3, [pc, #68]	; (8003f10 <WIZCHIP_WRITE+0x98>)
 8003eca:	69db      	ldr	r3, [r3, #28]
 8003ecc:	78fa      	ldrb	r2, [r7, #3]
 8003ece:	4610      	mov	r0, r2
 8003ed0:	4798      	blx	r3
 8003ed2:	e013      	b.n	8003efc <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	0c1b      	lsrs	r3, r3, #16
 8003ed8:	b2db      	uxtb	r3, r3
 8003eda:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	0a1b      	lsrs	r3, r3, #8
 8003ee0:	b2db      	uxtb	r3, r3
 8003ee2:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	b2db      	uxtb	r3, r3
 8003ee8:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 8003eea:	78fb      	ldrb	r3, [r7, #3]
 8003eec:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 8003eee:	4b08      	ldr	r3, [pc, #32]	; (8003f10 <WIZCHIP_WRITE+0x98>)
 8003ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef2:	f107 020c 	add.w	r2, r7, #12
 8003ef6:	2104      	movs	r1, #4
 8003ef8:	4610      	mov	r0, r2
 8003efa:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8003efc:	4b04      	ldr	r3, [pc, #16]	; (8003f10 <WIZCHIP_WRITE+0x98>)
 8003efe:	695b      	ldr	r3, [r3, #20]
 8003f00:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8003f02:	4b03      	ldr	r3, [pc, #12]	; (8003f10 <WIZCHIP_WRITE+0x98>)
 8003f04:	68db      	ldr	r3, [r3, #12]
 8003f06:	4798      	blx	r3
}
 8003f08:	bf00      	nop
 8003f0a:	3710      	adds	r7, #16
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd80      	pop	{r7, pc}
 8003f10:	2000006c 	.word	0x2000006c

08003f14 <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8003f14:	b590      	push	{r4, r7, lr}
 8003f16:	b087      	sub	sp, #28
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	60f8      	str	r0, [r7, #12]
 8003f1c:	60b9      	str	r1, [r7, #8]
 8003f1e:	4613      	mov	r3, r2
 8003f20:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8003f22:	4b2b      	ldr	r3, [pc, #172]	; (8003fd0 <WIZCHIP_READ_BUF+0xbc>)
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	4798      	blx	r3
   WIZCHIP.CS._select();
 8003f28:	4b29      	ldr	r3, [pc, #164]	; (8003fd0 <WIZCHIP_READ_BUF+0xbc>)
 8003f2a:	691b      	ldr	r3, [r3, #16]
 8003f2c:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8003f2e:	4b28      	ldr	r3, [pc, #160]	; (8003fd0 <WIZCHIP_READ_BUF+0xbc>)
 8003f30:	6a1b      	ldr	r3, [r3, #32]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d003      	beq.n	8003f3e <WIZCHIP_READ_BUF+0x2a>
 8003f36:	4b26      	ldr	r3, [pc, #152]	; (8003fd0 <WIZCHIP_READ_BUF+0xbc>)
 8003f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d126      	bne.n	8003f8c <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8003f3e:	4b24      	ldr	r3, [pc, #144]	; (8003fd0 <WIZCHIP_READ_BUF+0xbc>)
 8003f40:	69db      	ldr	r3, [r3, #28]
 8003f42:	68fa      	ldr	r2, [r7, #12]
 8003f44:	0c12      	lsrs	r2, r2, #16
 8003f46:	b2d2      	uxtb	r2, r2
 8003f48:	4610      	mov	r0, r2
 8003f4a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8003f4c:	4b20      	ldr	r3, [pc, #128]	; (8003fd0 <WIZCHIP_READ_BUF+0xbc>)
 8003f4e:	69db      	ldr	r3, [r3, #28]
 8003f50:	68fa      	ldr	r2, [r7, #12]
 8003f52:	0a12      	lsrs	r2, r2, #8
 8003f54:	b2d2      	uxtb	r2, r2
 8003f56:	4610      	mov	r0, r2
 8003f58:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8003f5a:	4b1d      	ldr	r3, [pc, #116]	; (8003fd0 <WIZCHIP_READ_BUF+0xbc>)
 8003f5c:	69db      	ldr	r3, [r3, #28]
 8003f5e:	68fa      	ldr	r2, [r7, #12]
 8003f60:	b2d2      	uxtb	r2, r2
 8003f62:	4610      	mov	r0, r2
 8003f64:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8003f66:	2300      	movs	r3, #0
 8003f68:	82fb      	strh	r3, [r7, #22]
 8003f6a:	e00a      	b.n	8003f82 <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 8003f6c:	4b18      	ldr	r3, [pc, #96]	; (8003fd0 <WIZCHIP_READ_BUF+0xbc>)
 8003f6e:	699b      	ldr	r3, [r3, #24]
 8003f70:	8afa      	ldrh	r2, [r7, #22]
 8003f72:	68b9      	ldr	r1, [r7, #8]
 8003f74:	188c      	adds	r4, r1, r2
 8003f76:	4798      	blx	r3
 8003f78:	4603      	mov	r3, r0
 8003f7a:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 8003f7c:	8afb      	ldrh	r3, [r7, #22]
 8003f7e:	3301      	adds	r3, #1
 8003f80:	82fb      	strh	r3, [r7, #22]
 8003f82:	8afa      	ldrh	r2, [r7, #22]
 8003f84:	88fb      	ldrh	r3, [r7, #6]
 8003f86:	429a      	cmp	r2, r3
 8003f88:	d3f0      	bcc.n	8003f6c <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8003f8a:	e017      	b.n	8003fbc <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	0c1b      	lsrs	r3, r3, #16
 8003f90:	b2db      	uxtb	r3, r3
 8003f92:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	0a1b      	lsrs	r3, r3, #8
 8003f98:	b2db      	uxtb	r3, r3
 8003f9a:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	b2db      	uxtb	r3, r3
 8003fa0:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8003fa2:	4b0b      	ldr	r3, [pc, #44]	; (8003fd0 <WIZCHIP_READ_BUF+0xbc>)
 8003fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa6:	f107 0210 	add.w	r2, r7, #16
 8003faa:	2103      	movs	r1, #3
 8003fac:	4610      	mov	r0, r2
 8003fae:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 8003fb0:	4b07      	ldr	r3, [pc, #28]	; (8003fd0 <WIZCHIP_READ_BUF+0xbc>)
 8003fb2:	6a1b      	ldr	r3, [r3, #32]
 8003fb4:	88fa      	ldrh	r2, [r7, #6]
 8003fb6:	4611      	mov	r1, r2
 8003fb8:	68b8      	ldr	r0, [r7, #8]
 8003fba:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8003fbc:	4b04      	ldr	r3, [pc, #16]	; (8003fd0 <WIZCHIP_READ_BUF+0xbc>)
 8003fbe:	695b      	ldr	r3, [r3, #20]
 8003fc0:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8003fc2:	4b03      	ldr	r3, [pc, #12]	; (8003fd0 <WIZCHIP_READ_BUF+0xbc>)
 8003fc4:	68db      	ldr	r3, [r3, #12]
 8003fc6:	4798      	blx	r3
}
 8003fc8:	bf00      	nop
 8003fca:	371c      	adds	r7, #28
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bd90      	pop	{r4, r7, pc}
 8003fd0:	2000006c 	.word	0x2000006c

08003fd4 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b086      	sub	sp, #24
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	60f8      	str	r0, [r7, #12]
 8003fdc:	60b9      	str	r1, [r7, #8]
 8003fde:	4613      	mov	r3, r2
 8003fe0:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8003fe2:	4b2b      	ldr	r3, [pc, #172]	; (8004090 <WIZCHIP_WRITE_BUF+0xbc>)
 8003fe4:	689b      	ldr	r3, [r3, #8]
 8003fe6:	4798      	blx	r3
   WIZCHIP.CS._select();
 8003fe8:	4b29      	ldr	r3, [pc, #164]	; (8004090 <WIZCHIP_WRITE_BUF+0xbc>)
 8003fea:	691b      	ldr	r3, [r3, #16]
 8003fec:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	f043 0304 	orr.w	r3, r3, #4
 8003ff4:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8003ff6:	4b26      	ldr	r3, [pc, #152]	; (8004090 <WIZCHIP_WRITE_BUF+0xbc>)
 8003ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d126      	bne.n	800404c <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8003ffe:	4b24      	ldr	r3, [pc, #144]	; (8004090 <WIZCHIP_WRITE_BUF+0xbc>)
 8004000:	69db      	ldr	r3, [r3, #28]
 8004002:	68fa      	ldr	r2, [r7, #12]
 8004004:	0c12      	lsrs	r2, r2, #16
 8004006:	b2d2      	uxtb	r2, r2
 8004008:	4610      	mov	r0, r2
 800400a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 800400c:	4b20      	ldr	r3, [pc, #128]	; (8004090 <WIZCHIP_WRITE_BUF+0xbc>)
 800400e:	69db      	ldr	r3, [r3, #28]
 8004010:	68fa      	ldr	r2, [r7, #12]
 8004012:	0a12      	lsrs	r2, r2, #8
 8004014:	b2d2      	uxtb	r2, r2
 8004016:	4610      	mov	r0, r2
 8004018:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 800401a:	4b1d      	ldr	r3, [pc, #116]	; (8004090 <WIZCHIP_WRITE_BUF+0xbc>)
 800401c:	69db      	ldr	r3, [r3, #28]
 800401e:	68fa      	ldr	r2, [r7, #12]
 8004020:	b2d2      	uxtb	r2, r2
 8004022:	4610      	mov	r0, r2
 8004024:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8004026:	2300      	movs	r3, #0
 8004028:	82fb      	strh	r3, [r7, #22]
 800402a:	e00a      	b.n	8004042 <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 800402c:	4b18      	ldr	r3, [pc, #96]	; (8004090 <WIZCHIP_WRITE_BUF+0xbc>)
 800402e:	69db      	ldr	r3, [r3, #28]
 8004030:	8afa      	ldrh	r2, [r7, #22]
 8004032:	68b9      	ldr	r1, [r7, #8]
 8004034:	440a      	add	r2, r1
 8004036:	7812      	ldrb	r2, [r2, #0]
 8004038:	4610      	mov	r0, r2
 800403a:	4798      	blx	r3
		for(i = 0; i < len; i++)
 800403c:	8afb      	ldrh	r3, [r7, #22]
 800403e:	3301      	adds	r3, #1
 8004040:	82fb      	strh	r3, [r7, #22]
 8004042:	8afa      	ldrh	r2, [r7, #22]
 8004044:	88fb      	ldrh	r3, [r7, #6]
 8004046:	429a      	cmp	r2, r3
 8004048:	d3f0      	bcc.n	800402c <WIZCHIP_WRITE_BUF+0x58>
 800404a:	e017      	b.n	800407c <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	0c1b      	lsrs	r3, r3, #16
 8004050:	b2db      	uxtb	r3, r3
 8004052:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	0a1b      	lsrs	r3, r3, #8
 8004058:	b2db      	uxtb	r3, r3
 800405a:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	b2db      	uxtb	r3, r3
 8004060:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8004062:	4b0b      	ldr	r3, [pc, #44]	; (8004090 <WIZCHIP_WRITE_BUF+0xbc>)
 8004064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004066:	f107 0210 	add.w	r2, r7, #16
 800406a:	2103      	movs	r1, #3
 800406c:	4610      	mov	r0, r2
 800406e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 8004070:	4b07      	ldr	r3, [pc, #28]	; (8004090 <WIZCHIP_WRITE_BUF+0xbc>)
 8004072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004074:	88fa      	ldrh	r2, [r7, #6]
 8004076:	4611      	mov	r1, r2
 8004078:	68b8      	ldr	r0, [r7, #8]
 800407a:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 800407c:	4b04      	ldr	r3, [pc, #16]	; (8004090 <WIZCHIP_WRITE_BUF+0xbc>)
 800407e:	695b      	ldr	r3, [r3, #20]
 8004080:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8004082:	4b03      	ldr	r3, [pc, #12]	; (8004090 <WIZCHIP_WRITE_BUF+0xbc>)
 8004084:	68db      	ldr	r3, [r3, #12]
 8004086:	4798      	blx	r3
}
 8004088:	bf00      	nop
 800408a:	3718      	adds	r7, #24
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}
 8004090:	2000006c 	.word	0x2000006c

08004094 <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 8004094:	b590      	push	{r4, r7, lr}
 8004096:	b085      	sub	sp, #20
 8004098:	af00      	add	r7, sp, #0
 800409a:	4603      	mov	r3, r0
 800409c:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 800409e:	2300      	movs	r3, #0
 80040a0:	81fb      	strh	r3, [r7, #14]
 80040a2:	2300      	movs	r3, #0
 80040a4:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 80040a6:	79fb      	ldrb	r3, [r7, #7]
 80040a8:	009b      	lsls	r3, r3, #2
 80040aa:	3301      	adds	r3, #1
 80040ac:	00db      	lsls	r3, r3, #3
 80040ae:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80040b2:	4618      	mov	r0, r3
 80040b4:	f7ff fe94 	bl	8003de0 <WIZCHIP_READ>
 80040b8:	4603      	mov	r3, r0
 80040ba:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 80040bc:	89bb      	ldrh	r3, [r7, #12]
 80040be:	021b      	lsls	r3, r3, #8
 80040c0:	b29c      	uxth	r4, r3
 80040c2:	79fb      	ldrb	r3, [r7, #7]
 80040c4:	009b      	lsls	r3, r3, #2
 80040c6:	3301      	adds	r3, #1
 80040c8:	00db      	lsls	r3, r3, #3
 80040ca:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 80040ce:	4618      	mov	r0, r3
 80040d0:	f7ff fe86 	bl	8003de0 <WIZCHIP_READ>
 80040d4:	4603      	mov	r3, r0
 80040d6:	b29b      	uxth	r3, r3
 80040d8:	4423      	add	r3, r4
 80040da:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 80040dc:	89bb      	ldrh	r3, [r7, #12]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d01a      	beq.n	8004118 <getSn_TX_FSR+0x84>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 80040e2:	79fb      	ldrb	r3, [r7, #7]
 80040e4:	009b      	lsls	r3, r3, #2
 80040e6:	3301      	adds	r3, #1
 80040e8:	00db      	lsls	r3, r3, #3
 80040ea:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80040ee:	4618      	mov	r0, r3
 80040f0:	f7ff fe76 	bl	8003de0 <WIZCHIP_READ>
 80040f4:	4603      	mov	r3, r0
 80040f6:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 80040f8:	89fb      	ldrh	r3, [r7, #14]
 80040fa:	021b      	lsls	r3, r3, #8
 80040fc:	b29c      	uxth	r4, r3
 80040fe:	79fb      	ldrb	r3, [r7, #7]
 8004100:	009b      	lsls	r3, r3, #2
 8004102:	3301      	adds	r3, #1
 8004104:	00db      	lsls	r3, r3, #3
 8004106:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800410a:	4618      	mov	r0, r3
 800410c:	f7ff fe68 	bl	8003de0 <WIZCHIP_READ>
 8004110:	4603      	mov	r3, r0
 8004112:	b29b      	uxth	r3, r3
 8004114:	4423      	add	r3, r4
 8004116:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8004118:	89fa      	ldrh	r2, [r7, #14]
 800411a:	89bb      	ldrh	r3, [r7, #12]
 800411c:	429a      	cmp	r2, r3
 800411e:	d1c2      	bne.n	80040a6 <getSn_TX_FSR+0x12>
   return val;
 8004120:	89fb      	ldrh	r3, [r7, #14]
}
 8004122:	4618      	mov	r0, r3
 8004124:	3714      	adds	r7, #20
 8004126:	46bd      	mov	sp, r7
 8004128:	bd90      	pop	{r4, r7, pc}

0800412a <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 800412a:	b590      	push	{r4, r7, lr}
 800412c:	b085      	sub	sp, #20
 800412e:	af00      	add	r7, sp, #0
 8004130:	4603      	mov	r3, r0
 8004132:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8004134:	2300      	movs	r3, #0
 8004136:	81fb      	strh	r3, [r7, #14]
 8004138:	2300      	movs	r3, #0
 800413a:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 800413c:	79fb      	ldrb	r3, [r7, #7]
 800413e:	009b      	lsls	r3, r3, #2
 8004140:	3301      	adds	r3, #1
 8004142:	00db      	lsls	r3, r3, #3
 8004144:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 8004148:	4618      	mov	r0, r3
 800414a:	f7ff fe49 	bl	8003de0 <WIZCHIP_READ>
 800414e:	4603      	mov	r3, r0
 8004150:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8004152:	89bb      	ldrh	r3, [r7, #12]
 8004154:	021b      	lsls	r3, r3, #8
 8004156:	b29c      	uxth	r4, r3
 8004158:	79fb      	ldrb	r3, [r7, #7]
 800415a:	009b      	lsls	r3, r3, #2
 800415c:	3301      	adds	r3, #1
 800415e:	00db      	lsls	r3, r3, #3
 8004160:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8004164:	4618      	mov	r0, r3
 8004166:	f7ff fe3b 	bl	8003de0 <WIZCHIP_READ>
 800416a:	4603      	mov	r3, r0
 800416c:	b29b      	uxth	r3, r3
 800416e:	4423      	add	r3, r4
 8004170:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8004172:	89bb      	ldrh	r3, [r7, #12]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d01a      	beq.n	80041ae <getSn_RX_RSR+0x84>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 8004178:	79fb      	ldrb	r3, [r7, #7]
 800417a:	009b      	lsls	r3, r3, #2
 800417c:	3301      	adds	r3, #1
 800417e:	00db      	lsls	r3, r3, #3
 8004180:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 8004184:	4618      	mov	r0, r3
 8004186:	f7ff fe2b 	bl	8003de0 <WIZCHIP_READ>
 800418a:	4603      	mov	r3, r0
 800418c:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 800418e:	89fb      	ldrh	r3, [r7, #14]
 8004190:	021b      	lsls	r3, r3, #8
 8004192:	b29c      	uxth	r4, r3
 8004194:	79fb      	ldrb	r3, [r7, #7]
 8004196:	009b      	lsls	r3, r3, #2
 8004198:	3301      	adds	r3, #1
 800419a:	00db      	lsls	r3, r3, #3
 800419c:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 80041a0:	4618      	mov	r0, r3
 80041a2:	f7ff fe1d 	bl	8003de0 <WIZCHIP_READ>
 80041a6:	4603      	mov	r3, r0
 80041a8:	b29b      	uxth	r3, r3
 80041aa:	4423      	add	r3, r4
 80041ac:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 80041ae:	89fa      	ldrh	r2, [r7, #14]
 80041b0:	89bb      	ldrh	r3, [r7, #12]
 80041b2:	429a      	cmp	r2, r3
 80041b4:	d1c2      	bne.n	800413c <getSn_RX_RSR+0x12>
   return val;
 80041b6:	89fb      	ldrh	r3, [r7, #14]
}
 80041b8:	4618      	mov	r0, r3
 80041ba:	3714      	adds	r7, #20
 80041bc:	46bd      	mov	sp, r7
 80041be:	bd90      	pop	{r4, r7, pc}

080041c0 <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 80041c0:	b590      	push	{r4, r7, lr}
 80041c2:	b085      	sub	sp, #20
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	4603      	mov	r3, r0
 80041c8:	6039      	str	r1, [r7, #0]
 80041ca:	71fb      	strb	r3, [r7, #7]
 80041cc:	4613      	mov	r3, r2
 80041ce:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 80041d0:	2300      	movs	r3, #0
 80041d2:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 80041d4:	2300      	movs	r3, #0
 80041d6:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 80041d8:	88bb      	ldrh	r3, [r7, #4]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d048      	beq.n	8004270 <wiz_send_data+0xb0>
   ptr = getSn_TX_WR(sn);
 80041de:	79fb      	ldrb	r3, [r7, #7]
 80041e0:	009b      	lsls	r3, r3, #2
 80041e2:	3301      	adds	r3, #1
 80041e4:	00db      	lsls	r3, r3, #3
 80041e6:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80041ea:	4618      	mov	r0, r3
 80041ec:	f7ff fdf8 	bl	8003de0 <WIZCHIP_READ>
 80041f0:	4603      	mov	r3, r0
 80041f2:	b29b      	uxth	r3, r3
 80041f4:	021b      	lsls	r3, r3, #8
 80041f6:	b29c      	uxth	r4, r3
 80041f8:	79fb      	ldrb	r3, [r7, #7]
 80041fa:	009b      	lsls	r3, r3, #2
 80041fc:	3301      	adds	r3, #1
 80041fe:	00db      	lsls	r3, r3, #3
 8004200:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 8004204:	4618      	mov	r0, r3
 8004206:	f7ff fdeb 	bl	8003de0 <WIZCHIP_READ>
 800420a:	4603      	mov	r3, r0
 800420c:	b29b      	uxth	r3, r3
 800420e:	4423      	add	r3, r4
 8004210:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 8004212:	89fb      	ldrh	r3, [r7, #14]
 8004214:	021b      	lsls	r3, r3, #8
 8004216:	79fa      	ldrb	r2, [r7, #7]
 8004218:	0092      	lsls	r2, r2, #2
 800421a:	3202      	adds	r2, #2
 800421c:	00d2      	lsls	r2, r2, #3
 800421e:	4413      	add	r3, r2
 8004220:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 8004222:	88bb      	ldrh	r3, [r7, #4]
 8004224:	461a      	mov	r2, r3
 8004226:	6839      	ldr	r1, [r7, #0]
 8004228:	68b8      	ldr	r0, [r7, #8]
 800422a:	f7ff fed3 	bl	8003fd4 <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 800422e:	89fa      	ldrh	r2, [r7, #14]
 8004230:	88bb      	ldrh	r3, [r7, #4]
 8004232:	4413      	add	r3, r2
 8004234:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 8004236:	79fb      	ldrb	r3, [r7, #7]
 8004238:	009b      	lsls	r3, r3, #2
 800423a:	3301      	adds	r3, #1
 800423c:	00db      	lsls	r3, r3, #3
 800423e:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8004242:	461a      	mov	r2, r3
 8004244:	89fb      	ldrh	r3, [r7, #14]
 8004246:	0a1b      	lsrs	r3, r3, #8
 8004248:	b29b      	uxth	r3, r3
 800424a:	b2db      	uxtb	r3, r3
 800424c:	4619      	mov	r1, r3
 800424e:	4610      	mov	r0, r2
 8004250:	f7ff fe12 	bl	8003e78 <WIZCHIP_WRITE>
 8004254:	79fb      	ldrb	r3, [r7, #7]
 8004256:	009b      	lsls	r3, r3, #2
 8004258:	3301      	adds	r3, #1
 800425a:	00db      	lsls	r3, r3, #3
 800425c:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 8004260:	461a      	mov	r2, r3
 8004262:	89fb      	ldrh	r3, [r7, #14]
 8004264:	b2db      	uxtb	r3, r3
 8004266:	4619      	mov	r1, r3
 8004268:	4610      	mov	r0, r2
 800426a:	f7ff fe05 	bl	8003e78 <WIZCHIP_WRITE>
 800426e:	e000      	b.n	8004272 <wiz_send_data+0xb2>
   if(len == 0)  return;
 8004270:	bf00      	nop
}
 8004272:	3714      	adds	r7, #20
 8004274:	46bd      	mov	sp, r7
 8004276:	bd90      	pop	{r4, r7, pc}

08004278 <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8004278:	b590      	push	{r4, r7, lr}
 800427a:	b085      	sub	sp, #20
 800427c:	af00      	add	r7, sp, #0
 800427e:	4603      	mov	r3, r0
 8004280:	6039      	str	r1, [r7, #0]
 8004282:	71fb      	strb	r3, [r7, #7]
 8004284:	4613      	mov	r3, r2
 8004286:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8004288:	2300      	movs	r3, #0
 800428a:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 800428c:	2300      	movs	r3, #0
 800428e:	60bb      	str	r3, [r7, #8]
   
   if(len == 0) return;
 8004290:	88bb      	ldrh	r3, [r7, #4]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d048      	beq.n	8004328 <wiz_recv_data+0xb0>
   ptr = getSn_RX_RD(sn);
 8004296:	79fb      	ldrb	r3, [r7, #7]
 8004298:	009b      	lsls	r3, r3, #2
 800429a:	3301      	adds	r3, #1
 800429c:	00db      	lsls	r3, r3, #3
 800429e:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 80042a2:	4618      	mov	r0, r3
 80042a4:	f7ff fd9c 	bl	8003de0 <WIZCHIP_READ>
 80042a8:	4603      	mov	r3, r0
 80042aa:	b29b      	uxth	r3, r3
 80042ac:	021b      	lsls	r3, r3, #8
 80042ae:	b29c      	uxth	r4, r3
 80042b0:	79fb      	ldrb	r3, [r7, #7]
 80042b2:	009b      	lsls	r3, r3, #2
 80042b4:	3301      	adds	r3, #1
 80042b6:	00db      	lsls	r3, r3, #3
 80042b8:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 80042bc:	4618      	mov	r0, r3
 80042be:	f7ff fd8f 	bl	8003de0 <WIZCHIP_READ>
 80042c2:	4603      	mov	r3, r0
 80042c4:	b29b      	uxth	r3, r3
 80042c6:	4423      	add	r3, r4
 80042c8:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 80042ca:	89fb      	ldrh	r3, [r7, #14]
 80042cc:	021b      	lsls	r3, r3, #8
 80042ce:	79fa      	ldrb	r2, [r7, #7]
 80042d0:	0092      	lsls	r2, r2, #2
 80042d2:	3203      	adds	r2, #3
 80042d4:	00d2      	lsls	r2, r2, #3
 80042d6:	4413      	add	r3, r2
 80042d8:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 80042da:	88bb      	ldrh	r3, [r7, #4]
 80042dc:	461a      	mov	r2, r3
 80042de:	6839      	ldr	r1, [r7, #0]
 80042e0:	68b8      	ldr	r0, [r7, #8]
 80042e2:	f7ff fe17 	bl	8003f14 <WIZCHIP_READ_BUF>
   ptr += len;
 80042e6:	89fa      	ldrh	r2, [r7, #14]
 80042e8:	88bb      	ldrh	r3, [r7, #4]
 80042ea:	4413      	add	r3, r2
 80042ec:	81fb      	strh	r3, [r7, #14]
   
   setSn_RX_RD(sn,ptr);
 80042ee:	79fb      	ldrb	r3, [r7, #7]
 80042f0:	009b      	lsls	r3, r3, #2
 80042f2:	3301      	adds	r3, #1
 80042f4:	00db      	lsls	r3, r3, #3
 80042f6:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 80042fa:	461a      	mov	r2, r3
 80042fc:	89fb      	ldrh	r3, [r7, #14]
 80042fe:	0a1b      	lsrs	r3, r3, #8
 8004300:	b29b      	uxth	r3, r3
 8004302:	b2db      	uxtb	r3, r3
 8004304:	4619      	mov	r1, r3
 8004306:	4610      	mov	r0, r2
 8004308:	f7ff fdb6 	bl	8003e78 <WIZCHIP_WRITE>
 800430c:	79fb      	ldrb	r3, [r7, #7]
 800430e:	009b      	lsls	r3, r3, #2
 8004310:	3301      	adds	r3, #1
 8004312:	00db      	lsls	r3, r3, #3
 8004314:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8004318:	461a      	mov	r2, r3
 800431a:	89fb      	ldrh	r3, [r7, #14]
 800431c:	b2db      	uxtb	r3, r3
 800431e:	4619      	mov	r1, r3
 8004320:	4610      	mov	r0, r2
 8004322:	f7ff fda9 	bl	8003e78 <WIZCHIP_WRITE>
 8004326:	e000      	b.n	800432a <wiz_recv_data+0xb2>
   if(len == 0) return;
 8004328:	bf00      	nop
}
 800432a:	3714      	adds	r7, #20
 800432c:	46bd      	mov	sp, r7
 800432e:	bd90      	pop	{r4, r7, pc}

08004330 <wiz_recv_ignore>:


void wiz_recv_ignore(uint8_t sn, uint16_t len)
{
 8004330:	b590      	push	{r4, r7, lr}
 8004332:	b085      	sub	sp, #20
 8004334:	af00      	add	r7, sp, #0
 8004336:	4603      	mov	r3, r0
 8004338:	460a      	mov	r2, r1
 800433a:	71fb      	strb	r3, [r7, #7]
 800433c:	4613      	mov	r3, r2
 800433e:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8004340:	2300      	movs	r3, #0
 8004342:	81fb      	strh	r3, [r7, #14]

   ptr = getSn_RX_RD(sn);
 8004344:	79fb      	ldrb	r3, [r7, #7]
 8004346:	009b      	lsls	r3, r3, #2
 8004348:	3301      	adds	r3, #1
 800434a:	00db      	lsls	r3, r3, #3
 800434c:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8004350:	4618      	mov	r0, r3
 8004352:	f7ff fd45 	bl	8003de0 <WIZCHIP_READ>
 8004356:	4603      	mov	r3, r0
 8004358:	b29b      	uxth	r3, r3
 800435a:	021b      	lsls	r3, r3, #8
 800435c:	b29c      	uxth	r4, r3
 800435e:	79fb      	ldrb	r3, [r7, #7]
 8004360:	009b      	lsls	r3, r3, #2
 8004362:	3301      	adds	r3, #1
 8004364:	00db      	lsls	r3, r3, #3
 8004366:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 800436a:	4618      	mov	r0, r3
 800436c:	f7ff fd38 	bl	8003de0 <WIZCHIP_READ>
 8004370:	4603      	mov	r3, r0
 8004372:	b29b      	uxth	r3, r3
 8004374:	4423      	add	r3, r4
 8004376:	81fb      	strh	r3, [r7, #14]
   ptr += len;
 8004378:	89fa      	ldrh	r2, [r7, #14]
 800437a:	88bb      	ldrh	r3, [r7, #4]
 800437c:	4413      	add	r3, r2
 800437e:	81fb      	strh	r3, [r7, #14]
   setSn_RX_RD(sn,ptr);
 8004380:	79fb      	ldrb	r3, [r7, #7]
 8004382:	009b      	lsls	r3, r3, #2
 8004384:	3301      	adds	r3, #1
 8004386:	00db      	lsls	r3, r3, #3
 8004388:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 800438c:	461a      	mov	r2, r3
 800438e:	89fb      	ldrh	r3, [r7, #14]
 8004390:	0a1b      	lsrs	r3, r3, #8
 8004392:	b29b      	uxth	r3, r3
 8004394:	b2db      	uxtb	r3, r3
 8004396:	4619      	mov	r1, r3
 8004398:	4610      	mov	r0, r2
 800439a:	f7ff fd6d 	bl	8003e78 <WIZCHIP_WRITE>
 800439e:	79fb      	ldrb	r3, [r7, #7]
 80043a0:	009b      	lsls	r3, r3, #2
 80043a2:	3301      	adds	r3, #1
 80043a4:	00db      	lsls	r3, r3, #3
 80043a6:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 80043aa:	461a      	mov	r2, r3
 80043ac:	89fb      	ldrh	r3, [r7, #14]
 80043ae:	b2db      	uxtb	r3, r3
 80043b0:	4619      	mov	r1, r3
 80043b2:	4610      	mov	r0, r2
 80043b4:	f7ff fd60 	bl	8003e78 <WIZCHIP_WRITE>
}
 80043b8:	bf00      	nop
 80043ba:	3714      	adds	r7, #20
 80043bc:	46bd      	mov	sp, r7
 80043be:	bd90      	pop	{r4, r7, pc}

080043c0 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void       wizchip_cris_enter(void)           {};
void       wizchip_cris_enter(void)           {}
 80043c0:	b480      	push	{r7}
 80043c2:	af00      	add	r7, sp, #0
 80043c4:	bf00      	nop
 80043c6:	46bd      	mov	sp, r7
 80043c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043cc:	4770      	bx	lr

080043ce <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void       wizchip_cris_exit(void)          {};
void       wizchip_cris_exit(void)          {}
 80043ce:	b480      	push	{r7}
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	bf00      	nop
 80043d4:	46bd      	mov	sp, r7
 80043d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043da:	4770      	bx	lr

080043dc <wizchip_cs_select>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void     wizchip_cs_select(void)            {};

void wizchip_cs_select(void) {}
 80043dc:	b480      	push	{r7}
 80043de:	af00      	add	r7, sp, #0
 80043e0:	bf00      	nop
 80043e2:	46bd      	mov	sp, r7
 80043e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e8:	4770      	bx	lr

080043ea <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void     wizchip_cs_deselect(void)          {};
void wizchip_cs_deselect(void) { }
 80043ea:	b480      	push	{r7}
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	bf00      	nop
 80043f0:	46bd      	mov	sp, r7
 80043f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f6:	4770      	bx	lr

080043f8 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 80043f8:	b480      	push	{r7}
 80043fa:	b083      	sub	sp, #12
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	781b      	ldrb	r3, [r3, #0]
 8004404:	b2db      	uxtb	r3, r3
 8004406:	4618      	mov	r0, r3
 8004408:	370c      	adds	r7, #12
 800440a:	46bd      	mov	sp, r7
 800440c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004410:	4770      	bx	lr

08004412 <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void     wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void     wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 8004412:	b480      	push	{r7}
 8004414:	b083      	sub	sp, #12
 8004416:	af00      	add	r7, sp, #0
 8004418:	6078      	str	r0, [r7, #4]
 800441a:	460b      	mov	r3, r1
 800441c:	70fb      	strb	r3, [r7, #3]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	78fa      	ldrb	r2, [r7, #3]
 8004422:	701a      	strb	r2, [r3, #0]
 8004424:	bf00      	nop
 8004426:	370c      	adds	r7, #12
 8004428:	46bd      	mov	sp, r7
 800442a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442e:	4770      	bx	lr

08004430 <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 8004430:	b480      	push	{r7}
 8004432:	af00      	add	r7, sp, #0
 8004434:	2300      	movs	r3, #0
 8004436:	4618      	mov	r0, r3
 8004438:	46bd      	mov	sp, r7
 800443a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443e:	4770      	bx	lr

08004440 <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void     wizchip_spi_writebyte(uint8_t wb) {};
void     wizchip_spi_writebyte(uint8_t wb) {}
 8004440:	b480      	push	{r7}
 8004442:	b083      	sub	sp, #12
 8004444:	af00      	add	r7, sp, #0
 8004446:	4603      	mov	r3, r0
 8004448:	71fb      	strb	r3, [r7, #7]
 800444a:	bf00      	nop
 800444c:	370c      	adds	r7, #12
 800444e:	46bd      	mov	sp, r7
 8004450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004454:	4770      	bx	lr

08004456 <wizchip_spi_readburst>:
 * @brief Default function to burst read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void     wizchip_spi_readburst(uint8_t* pBuf, uint16_t len)     {}; 
void     wizchip_spi_readburst(uint8_t* pBuf, uint16_t len)     {}
 8004456:	b480      	push	{r7}
 8004458:	b083      	sub	sp, #12
 800445a:	af00      	add	r7, sp, #0
 800445c:	6078      	str	r0, [r7, #4]
 800445e:	460b      	mov	r3, r1
 8004460:	807b      	strh	r3, [r7, #2]
 8004462:	bf00      	nop
 8004464:	370c      	adds	r7, #12
 8004466:	46bd      	mov	sp, r7
 8004468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446c:	4770      	bx	lr

0800446e <wizchip_spi_writeburst>:
 * @brief Default function to burst write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void     wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {};
void     wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {}
 800446e:	b480      	push	{r7}
 8004470:	b083      	sub	sp, #12
 8004472:	af00      	add	r7, sp, #0
 8004474:	6078      	str	r0, [r7, #4]
 8004476:	460b      	mov	r3, r1
 8004478:	807b      	strh	r3, [r7, #2]
 800447a:	bf00      	nop
 800447c:	370c      	adds	r7, #12
 800447e:	46bd      	mov	sp, r7
 8004480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004484:	4770      	bx	lr
	...

08004488 <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 8004488:	b480      	push	{r7}
 800448a:	b083      	sub	sp, #12
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
 8004490:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d002      	beq.n	800449e <reg_wizchip_cs_cbfunc+0x16>
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d106      	bne.n	80044ac <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 800449e:	4b0a      	ldr	r3, [pc, #40]	; (80044c8 <reg_wizchip_cs_cbfunc+0x40>)
 80044a0:	4a0a      	ldr	r2, [pc, #40]	; (80044cc <reg_wizchip_cs_cbfunc+0x44>)
 80044a2:	611a      	str	r2, [r3, #16]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 80044a4:	4b08      	ldr	r3, [pc, #32]	; (80044c8 <reg_wizchip_cs_cbfunc+0x40>)
 80044a6:	4a0a      	ldr	r2, [pc, #40]	; (80044d0 <reg_wizchip_cs_cbfunc+0x48>)
 80044a8:	615a      	str	r2, [r3, #20]
 80044aa:	e006      	b.n	80044ba <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 80044ac:	4a06      	ldr	r2, [pc, #24]	; (80044c8 <reg_wizchip_cs_cbfunc+0x40>)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6113      	str	r3, [r2, #16]
      WIZCHIP.CS._deselect = cs_desel;
 80044b2:	4a05      	ldr	r2, [pc, #20]	; (80044c8 <reg_wizchip_cs_cbfunc+0x40>)
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	6153      	str	r3, [r2, #20]
   }
}
 80044b8:	bf00      	nop
 80044ba:	bf00      	nop
 80044bc:	370c      	adds	r7, #12
 80044be:	46bd      	mov	sp, r7
 80044c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c4:	4770      	bx	lr
 80044c6:	bf00      	nop
 80044c8:	2000006c 	.word	0x2000006c
 80044cc:	080043dd 	.word	0x080043dd
 80044d0:	080043eb 	.word	0x080043eb

080044d4 <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 80044d4:	b480      	push	{r7}
 80044d6:	b083      	sub	sp, #12
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
 80044dc:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 80044de:	bf00      	nop
 80044e0:	4b0f      	ldr	r3, [pc, #60]	; (8004520 <reg_wizchip_spi_cbfunc+0x4c>)
 80044e2:	881b      	ldrh	r3, [r3, #0]
 80044e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d0f9      	beq.n	80044e0 <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d002      	beq.n	80044f8 <reg_wizchip_spi_cbfunc+0x24>
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d106      	bne.n	8004506 <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 80044f8:	4b09      	ldr	r3, [pc, #36]	; (8004520 <reg_wizchip_spi_cbfunc+0x4c>)
 80044fa:	4a0a      	ldr	r2, [pc, #40]	; (8004524 <reg_wizchip_spi_cbfunc+0x50>)
 80044fc:	619a      	str	r2, [r3, #24]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 80044fe:	4b08      	ldr	r3, [pc, #32]	; (8004520 <reg_wizchip_spi_cbfunc+0x4c>)
 8004500:	4a09      	ldr	r2, [pc, #36]	; (8004528 <reg_wizchip_spi_cbfunc+0x54>)
 8004502:	61da      	str	r2, [r3, #28]
 8004504:	e006      	b.n	8004514 <reg_wizchip_spi_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 8004506:	4a06      	ldr	r2, [pc, #24]	; (8004520 <reg_wizchip_spi_cbfunc+0x4c>)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6193      	str	r3, [r2, #24]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 800450c:	4a04      	ldr	r2, [pc, #16]	; (8004520 <reg_wizchip_spi_cbfunc+0x4c>)
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	61d3      	str	r3, [r2, #28]
   }
}
 8004512:	bf00      	nop
 8004514:	bf00      	nop
 8004516:	370c      	adds	r7, #12
 8004518:	46bd      	mov	sp, r7
 800451a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451e:	4770      	bx	lr
 8004520:	2000006c 	.word	0x2000006c
 8004524:	08004431 	.word	0x08004431
 8004528:	08004441 	.word	0x08004441

0800452c <reg_wizchip_spiburst_cbfunc>:

// 20140626 Eric Added for SPI burst operations
void reg_wizchip_spiburst_cbfunc(void (*spi_rb)(uint8_t* pBuf, uint16_t len), void (*spi_wb)(uint8_t* pBuf, uint16_t len))
{
 800452c:	b480      	push	{r7}
 800452e:	b083      	sub	sp, #12
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
 8004534:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8004536:	bf00      	nop
 8004538:	4b0f      	ldr	r3, [pc, #60]	; (8004578 <reg_wizchip_spiburst_cbfunc+0x4c>)
 800453a:	881b      	ldrh	r3, [r3, #0]
 800453c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004540:	2b00      	cmp	r3, #0
 8004542:	d0f9      	beq.n	8004538 <reg_wizchip_spiburst_cbfunc+0xc>

   if(!spi_rb || !spi_wb)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d002      	beq.n	8004550 <reg_wizchip_spiburst_cbfunc+0x24>
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d106      	bne.n	800455e <reg_wizchip_spiburst_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_burst   = wizchip_spi_readburst;
 8004550:	4b09      	ldr	r3, [pc, #36]	; (8004578 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8004552:	4a0a      	ldr	r2, [pc, #40]	; (800457c <reg_wizchip_spiburst_cbfunc+0x50>)
 8004554:	621a      	str	r2, [r3, #32]
      WIZCHIP.IF.SPI._write_burst  = wizchip_spi_writeburst;
 8004556:	4b08      	ldr	r3, [pc, #32]	; (8004578 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8004558:	4a09      	ldr	r2, [pc, #36]	; (8004580 <reg_wizchip_spiburst_cbfunc+0x54>)
 800455a:	625a      	str	r2, [r3, #36]	; 0x24
 800455c:	e006      	b.n	800456c <reg_wizchip_spiburst_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_burst   = spi_rb;
 800455e:	4a06      	ldr	r2, [pc, #24]	; (8004578 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6213      	str	r3, [r2, #32]
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
 8004564:	4a04      	ldr	r2, [pc, #16]	; (8004578 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	6253      	str	r3, [r2, #36]	; 0x24
   }
}
 800456a:	bf00      	nop
 800456c:	bf00      	nop
 800456e:	370c      	adds	r7, #12
 8004570:	46bd      	mov	sp, r7
 8004572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004576:	4770      	bx	lr
 8004578:	2000006c 	.word	0x2000006c
 800457c:	08004457 	.word	0x08004457
 8004580:	0800446f 	.word	0x0800446f

08004584 <wizchip_sw_reset>:
   }
   return 0;
}

void wizchip_sw_reset(void)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b086      	sub	sp, #24
 8004588:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 800458a:	1d3b      	adds	r3, r7, #4
 800458c:	2206      	movs	r2, #6
 800458e:	4619      	mov	r1, r3
 8004590:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8004594:	f7ff fcbe 	bl	8003f14 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 8004598:	f107 0314 	add.w	r3, r7, #20
 800459c:	2204      	movs	r2, #4
 800459e:	4619      	mov	r1, r3
 80045a0:	f44f 7080 	mov.w	r0, #256	; 0x100
 80045a4:	f7ff fcb6 	bl	8003f14 <WIZCHIP_READ_BUF>
 80045a8:	f107 0310 	add.w	r3, r7, #16
 80045ac:	2204      	movs	r2, #4
 80045ae:	4619      	mov	r1, r3
 80045b0:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 80045b4:	f7ff fcae 	bl	8003f14 <WIZCHIP_READ_BUF>
 80045b8:	f107 030c 	add.w	r3, r7, #12
 80045bc:	2204      	movs	r2, #4
 80045be:	4619      	mov	r1, r3
 80045c0:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 80045c4:	f7ff fca6 	bl	8003f14 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 80045c8:	2180      	movs	r1, #128	; 0x80
 80045ca:	2000      	movs	r0, #0
 80045cc:	f7ff fc54 	bl	8003e78 <WIZCHIP_WRITE>
   getMR(); // for delay
 80045d0:	2000      	movs	r0, #0
 80045d2:	f7ff fc05 	bl	8003de0 <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 80045d6:	1d3b      	adds	r3, r7, #4
 80045d8:	2206      	movs	r2, #6
 80045da:	4619      	mov	r1, r3
 80045dc:	f44f 6010 	mov.w	r0, #2304	; 0x900
 80045e0:	f7ff fcf8 	bl	8003fd4 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 80045e4:	f107 0314 	add.w	r3, r7, #20
 80045e8:	2204      	movs	r2, #4
 80045ea:	4619      	mov	r1, r3
 80045ec:	f44f 7080 	mov.w	r0, #256	; 0x100
 80045f0:	f7ff fcf0 	bl	8003fd4 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 80045f4:	f107 0310 	add.w	r3, r7, #16
 80045f8:	2204      	movs	r2, #4
 80045fa:	4619      	mov	r1, r3
 80045fc:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8004600:	f7ff fce8 	bl	8003fd4 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 8004604:	f107 030c 	add.w	r3, r7, #12
 8004608:	2204      	movs	r2, #4
 800460a:	4619      	mov	r1, r3
 800460c:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8004610:	f7ff fce0 	bl	8003fd4 <WIZCHIP_WRITE_BUF>
}
 8004614:	bf00      	nop
 8004616:	3718      	adds	r7, #24
 8004618:	46bd      	mov	sp, r7
 800461a:	bd80      	pop	{r7, pc}

0800461c <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b084      	sub	sp, #16
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
 8004624:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 8004626:	2300      	movs	r3, #0
 8004628:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 800462a:	f7ff ffab 	bl	8004584 <wizchip_sw_reset>
   if(txsize)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d03b      	beq.n	80046ac <wizchip_init+0x90>
   {
      tmp = 0;
 8004634:	2300      	movs	r3, #0
 8004636:	73bb      	strb	r3, [r7, #14]
            tmp += txsize[i];
            if(tmp > 128) return -1;
        }
        if(tmp % 8) return -1;
   #else
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004638:	2300      	movs	r3, #0
 800463a:	73fb      	strb	r3, [r7, #15]
 800463c:	e015      	b.n	800466a <wizchip_init+0x4e>
        {
            tmp += txsize[i];
 800463e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004642:	687a      	ldr	r2, [r7, #4]
 8004644:	4413      	add	r3, r2
 8004646:	781a      	ldrb	r2, [r3, #0]
 8004648:	7bbb      	ldrb	r3, [r7, #14]
 800464a:	4413      	add	r3, r2
 800464c:	b2db      	uxtb	r3, r3
 800464e:	73bb      	strb	r3, [r7, #14]

        #if _WIZCHIP_ < W5200    //2016.10.28 peter add condition for w5100 and w5100s
            if(tmp > 8) return -1;
        #else
            if(tmp > 16) return -1;
 8004650:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004654:	2b10      	cmp	r3, #16
 8004656:	dd02      	ble.n	800465e <wizchip_init+0x42>
 8004658:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800465c:	e066      	b.n	800472c <wizchip_init+0x110>
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800465e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004662:	b2db      	uxtb	r3, r3
 8004664:	3301      	adds	r3, #1
 8004666:	b2db      	uxtb	r3, r3
 8004668:	73fb      	strb	r3, [r7, #15]
 800466a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800466e:	2b07      	cmp	r3, #7
 8004670:	dde5      	ble.n	800463e <wizchip_init+0x22>
        #endif
        }
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004672:	2300      	movs	r3, #0
 8004674:	73fb      	strb	r3, [r7, #15]
 8004676:	e015      	b.n	80046a4 <wizchip_init+0x88>
        #if _WIZCHIP_ < W5200    //2016.10.28 peter add condition for w5100
            j = 0;
            while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
            setSn_TXBUF_SIZE(i, j);
        #else
            setSn_TXBUF_SIZE(i, txsize[i]);
 8004678:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800467c:	009b      	lsls	r3, r3, #2
 800467e:	3301      	adds	r3, #1
 8004680:	00db      	lsls	r3, r3, #3
 8004682:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8004686:	4618      	mov	r0, r3
 8004688:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800468c:	687a      	ldr	r2, [r7, #4]
 800468e:	4413      	add	r3, r2
 8004690:	781b      	ldrb	r3, [r3, #0]
 8004692:	4619      	mov	r1, r3
 8004694:	f7ff fbf0 	bl	8003e78 <WIZCHIP_WRITE>
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004698:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800469c:	b2db      	uxtb	r3, r3
 800469e:	3301      	adds	r3, #1
 80046a0:	b2db      	uxtb	r3, r3
 80046a2:	73fb      	strb	r3, [r7, #15]
 80046a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80046a8:	2b07      	cmp	r3, #7
 80046aa:	dde5      	ble.n	8004678 <wizchip_init+0x5c>
        }

    #endif
   }

   if(rxsize)
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d03b      	beq.n	800472a <wizchip_init+0x10e>
   {
      tmp = 0;
 80046b2:	2300      	movs	r3, #0
 80046b4:	73bb      	strb	r3, [r7, #14]
            tmp += rxsize[i];
            if(tmp > 128) return -1;
        }
        if(tmp % 8) return -1;
   #else
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80046b6:	2300      	movs	r3, #0
 80046b8:	73fb      	strb	r3, [r7, #15]
 80046ba:	e015      	b.n	80046e8 <wizchip_init+0xcc>
        {
            tmp += rxsize[i];
 80046bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80046c0:	683a      	ldr	r2, [r7, #0]
 80046c2:	4413      	add	r3, r2
 80046c4:	781a      	ldrb	r2, [r3, #0]
 80046c6:	7bbb      	ldrb	r3, [r7, #14]
 80046c8:	4413      	add	r3, r2
 80046ca:	b2db      	uxtb	r3, r3
 80046cc:	73bb      	strb	r3, [r7, #14]
        #if _WIZCHIP_ < W5200    //2016.10.28 peter add condition for w5100 and w5100s
            if(tmp > 8) return -1;
        #else
            if(tmp > 16) return -1;
 80046ce:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80046d2:	2b10      	cmp	r3, #16
 80046d4:	dd02      	ble.n	80046dc <wizchip_init+0xc0>
 80046d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80046da:	e027      	b.n	800472c <wizchip_init+0x110>
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80046dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80046e0:	b2db      	uxtb	r3, r3
 80046e2:	3301      	adds	r3, #1
 80046e4:	b2db      	uxtb	r3, r3
 80046e6:	73fb      	strb	r3, [r7, #15]
 80046e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80046ec:	2b07      	cmp	r3, #7
 80046ee:	dde5      	ble.n	80046bc <wizchip_init+0xa0>
        #endif
        }

        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80046f0:	2300      	movs	r3, #0
 80046f2:	73fb      	strb	r3, [r7, #15]
 80046f4:	e015      	b.n	8004722 <wizchip_init+0x106>
        #if _WIZCHIP_ < W5200    // add condition for w5100
            j = 0;
            while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
            setSn_RXBUF_SIZE(i, j);
        #else
            setSn_RXBUF_SIZE(i, rxsize[i]);
 80046f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80046fa:	009b      	lsls	r3, r3, #2
 80046fc:	3301      	adds	r3, #1
 80046fe:	00db      	lsls	r3, r3, #3
 8004700:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8004704:	4618      	mov	r0, r3
 8004706:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800470a:	683a      	ldr	r2, [r7, #0]
 800470c:	4413      	add	r3, r2
 800470e:	781b      	ldrb	r3, [r3, #0]
 8004710:	4619      	mov	r1, r3
 8004712:	f7ff fbb1 	bl	8003e78 <WIZCHIP_WRITE>
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004716:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800471a:	b2db      	uxtb	r3, r3
 800471c:	3301      	adds	r3, #1
 800471e:	b2db      	uxtb	r3, r3
 8004720:	73fb      	strb	r3, [r7, #15]
 8004722:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004726:	2b07      	cmp	r3, #7
 8004728:	dde5      	ble.n	80046f6 <wizchip_init+0xda>
        #endif
        }
    #endif
   }
   return 0;
 800472a:	2300      	movs	r3, #0
}
 800472c:	4618      	mov	r0, r3
 800472e:	3710      	adds	r7, #16
 8004730:	46bd      	mov	sp, r7
 8004732:	bd80      	pop	{r7, pc}

08004734 <wizchip_setnetinfo>:
}
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b082      	sub	sp, #8
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2206      	movs	r2, #6
 8004740:	4619      	mov	r1, r3
 8004742:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8004746:	f7ff fc45 	bl	8003fd4 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	330e      	adds	r3, #14
 800474e:	2204      	movs	r2, #4
 8004750:	4619      	mov	r1, r3
 8004752:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004756:	f7ff fc3d 	bl	8003fd4 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	330a      	adds	r3, #10
 800475e:	2204      	movs	r2, #4
 8004760:	4619      	mov	r1, r3
 8004762:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8004766:	f7ff fc35 	bl	8003fd4 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	3306      	adds	r3, #6
 800476e:	2204      	movs	r2, #4
 8004770:	4619      	mov	r1, r3
 8004772:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8004776:	f7ff fc2d 	bl	8003fd4 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	7c9a      	ldrb	r2, [r3, #18]
 800477e:	4b0b      	ldr	r3, [pc, #44]	; (80047ac <wizchip_setnetinfo+0x78>)
 8004780:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	7cda      	ldrb	r2, [r3, #19]
 8004786:	4b09      	ldr	r3, [pc, #36]	; (80047ac <wizchip_setnetinfo+0x78>)
 8004788:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	7d1a      	ldrb	r2, [r3, #20]
 800478e:	4b07      	ldr	r3, [pc, #28]	; (80047ac <wizchip_setnetinfo+0x78>)
 8004790:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	7d5a      	ldrb	r2, [r3, #21]
 8004796:	4b05      	ldr	r3, [pc, #20]	; (80047ac <wizchip_setnetinfo+0x78>)
 8004798:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	7d9a      	ldrb	r2, [r3, #22]
 800479e:	4b04      	ldr	r3, [pc, #16]	; (80047b0 <wizchip_setnetinfo+0x7c>)
 80047a0:	701a      	strb	r2, [r3, #0]
}
 80047a2:	bf00      	nop
 80047a4:	3708      	adds	r7, #8
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}
 80047aa:	bf00      	nop
 80047ac:	20000a18 	.word	0x20000a18
 80047b0:	20000a1c 	.word	0x20000a1c

080047b4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80047b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80047ec <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80047b8:	f7ff fae0 	bl	8003d7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80047bc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80047be:	e003      	b.n	80047c8 <LoopCopyDataInit>

080047c0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80047c0:	4b0b      	ldr	r3, [pc, #44]	; (80047f0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80047c2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80047c4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80047c6:	3104      	adds	r1, #4

080047c8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80047c8:	480a      	ldr	r0, [pc, #40]	; (80047f4 <LoopForever+0xa>)
	ldr	r3, =_edata
 80047ca:	4b0b      	ldr	r3, [pc, #44]	; (80047f8 <LoopForever+0xe>)
	adds	r2, r0, r1
 80047cc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80047ce:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80047d0:	d3f6      	bcc.n	80047c0 <CopyDataInit>
	ldr	r2, =_sbss
 80047d2:	4a0a      	ldr	r2, [pc, #40]	; (80047fc <LoopForever+0x12>)
	b	LoopFillZerobss
 80047d4:	e002      	b.n	80047dc <LoopFillZerobss>

080047d6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80047d6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80047d8:	f842 3b04 	str.w	r3, [r2], #4

080047dc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80047dc:	4b08      	ldr	r3, [pc, #32]	; (8004800 <LoopForever+0x16>)
	cmp	r2, r3
 80047de:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80047e0:	d3f9      	bcc.n	80047d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80047e2:	f003 fd83 	bl	80082ec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80047e6:	f7fd fcc3 	bl	8002170 <main>

080047ea <LoopForever>:

LoopForever:
    b LoopForever
 80047ea:	e7fe      	b.n	80047ea <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80047ec:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 80047f0:	0800c39c 	.word	0x0800c39c
	ldr	r0, =_sdata
 80047f4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80047f8:	20000100 	.word	0x20000100
	ldr	r2, =_sbss
 80047fc:	20000100 	.word	0x20000100
	ldr	r3, = _ebss
 8004800:	20000cf4 	.word	0x20000cf4

08004804 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004804:	e7fe      	b.n	8004804 <ADC1_2_IRQHandler>

08004806 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004806:	b580      	push	{r7, lr}
 8004808:	b082      	sub	sp, #8
 800480a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800480c:	2300      	movs	r3, #0
 800480e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004810:	2003      	movs	r0, #3
 8004812:	f000 f943 	bl	8004a9c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004816:	2000      	movs	r0, #0
 8004818:	f000 f80e 	bl	8004838 <HAL_InitTick>
 800481c:	4603      	mov	r3, r0
 800481e:	2b00      	cmp	r3, #0
 8004820:	d002      	beq.n	8004828 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8004822:	2301      	movs	r3, #1
 8004824:	71fb      	strb	r3, [r7, #7]
 8004826:	e001      	b.n	800482c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004828:	f7ff f8c8 	bl	80039bc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800482c:	79fb      	ldrb	r3, [r7, #7]
}
 800482e:	4618      	mov	r0, r3
 8004830:	3708      	adds	r7, #8
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}
	...

08004838 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b084      	sub	sp, #16
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004840:	2300      	movs	r3, #0
 8004842:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8004844:	4b17      	ldr	r3, [pc, #92]	; (80048a4 <HAL_InitTick+0x6c>)
 8004846:	781b      	ldrb	r3, [r3, #0]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d023      	beq.n	8004894 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800484c:	4b16      	ldr	r3, [pc, #88]	; (80048a8 <HAL_InitTick+0x70>)
 800484e:	681a      	ldr	r2, [r3, #0]
 8004850:	4b14      	ldr	r3, [pc, #80]	; (80048a4 <HAL_InitTick+0x6c>)
 8004852:	781b      	ldrb	r3, [r3, #0]
 8004854:	4619      	mov	r1, r3
 8004856:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800485a:	fbb3 f3f1 	udiv	r3, r3, r1
 800485e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004862:	4618      	mov	r0, r3
 8004864:	f000 f941 	bl	8004aea <HAL_SYSTICK_Config>
 8004868:	4603      	mov	r3, r0
 800486a:	2b00      	cmp	r3, #0
 800486c:	d10f      	bne.n	800488e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2b0f      	cmp	r3, #15
 8004872:	d809      	bhi.n	8004888 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004874:	2200      	movs	r2, #0
 8004876:	6879      	ldr	r1, [r7, #4]
 8004878:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800487c:	f000 f919 	bl	8004ab2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004880:	4a0a      	ldr	r2, [pc, #40]	; (80048ac <HAL_InitTick+0x74>)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6013      	str	r3, [r2, #0]
 8004886:	e007      	b.n	8004898 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8004888:	2301      	movs	r3, #1
 800488a:	73fb      	strb	r3, [r7, #15]
 800488c:	e004      	b.n	8004898 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800488e:	2301      	movs	r3, #1
 8004890:	73fb      	strb	r3, [r7, #15]
 8004892:	e001      	b.n	8004898 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004894:	2301      	movs	r3, #1
 8004896:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004898:	7bfb      	ldrb	r3, [r7, #15]
}
 800489a:	4618      	mov	r0, r3
 800489c:	3710      	adds	r7, #16
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}
 80048a2:	bf00      	nop
 80048a4:	20000098 	.word	0x20000098
 80048a8:	20000068 	.word	0x20000068
 80048ac:	20000094 	.word	0x20000094

080048b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80048b0:	b480      	push	{r7}
 80048b2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80048b4:	4b06      	ldr	r3, [pc, #24]	; (80048d0 <HAL_IncTick+0x20>)
 80048b6:	781b      	ldrb	r3, [r3, #0]
 80048b8:	461a      	mov	r2, r3
 80048ba:	4b06      	ldr	r3, [pc, #24]	; (80048d4 <HAL_IncTick+0x24>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4413      	add	r3, r2
 80048c0:	4a04      	ldr	r2, [pc, #16]	; (80048d4 <HAL_IncTick+0x24>)
 80048c2:	6013      	str	r3, [r2, #0]
}
 80048c4:	bf00      	nop
 80048c6:	46bd      	mov	sp, r7
 80048c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048cc:	4770      	bx	lr
 80048ce:	bf00      	nop
 80048d0:	20000098 	.word	0x20000098
 80048d4:	20000ce0 	.word	0x20000ce0

080048d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80048d8:	b480      	push	{r7}
 80048da:	af00      	add	r7, sp, #0
  return uwTick;
 80048dc:	4b03      	ldr	r3, [pc, #12]	; (80048ec <HAL_GetTick+0x14>)
 80048de:	681b      	ldr	r3, [r3, #0]
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	46bd      	mov	sp, r7
 80048e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e8:	4770      	bx	lr
 80048ea:	bf00      	nop
 80048ec:	20000ce0 	.word	0x20000ce0

080048f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b084      	sub	sp, #16
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80048f8:	f7ff ffee 	bl	80048d8 <HAL_GetTick>
 80048fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004908:	d005      	beq.n	8004916 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800490a:	4b0a      	ldr	r3, [pc, #40]	; (8004934 <HAL_Delay+0x44>)
 800490c:	781b      	ldrb	r3, [r3, #0]
 800490e:	461a      	mov	r2, r3
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	4413      	add	r3, r2
 8004914:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004916:	bf00      	nop
 8004918:	f7ff ffde 	bl	80048d8 <HAL_GetTick>
 800491c:	4602      	mov	r2, r0
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	1ad3      	subs	r3, r2, r3
 8004922:	68fa      	ldr	r2, [r7, #12]
 8004924:	429a      	cmp	r2, r3
 8004926:	d8f7      	bhi.n	8004918 <HAL_Delay+0x28>
  {
  }
}
 8004928:	bf00      	nop
 800492a:	bf00      	nop
 800492c:	3710      	adds	r7, #16
 800492e:	46bd      	mov	sp, r7
 8004930:	bd80      	pop	{r7, pc}
 8004932:	bf00      	nop
 8004934:	20000098 	.word	0x20000098

08004938 <__NVIC_SetPriorityGrouping>:
{
 8004938:	b480      	push	{r7}
 800493a:	b085      	sub	sp, #20
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	f003 0307 	and.w	r3, r3, #7
 8004946:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004948:	4b0c      	ldr	r3, [pc, #48]	; (800497c <__NVIC_SetPriorityGrouping+0x44>)
 800494a:	68db      	ldr	r3, [r3, #12]
 800494c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800494e:	68ba      	ldr	r2, [r7, #8]
 8004950:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004954:	4013      	ands	r3, r2
 8004956:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004960:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004964:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004968:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800496a:	4a04      	ldr	r2, [pc, #16]	; (800497c <__NVIC_SetPriorityGrouping+0x44>)
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	60d3      	str	r3, [r2, #12]
}
 8004970:	bf00      	nop
 8004972:	3714      	adds	r7, #20
 8004974:	46bd      	mov	sp, r7
 8004976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497a:	4770      	bx	lr
 800497c:	e000ed00 	.word	0xe000ed00

08004980 <__NVIC_GetPriorityGrouping>:
{
 8004980:	b480      	push	{r7}
 8004982:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004984:	4b04      	ldr	r3, [pc, #16]	; (8004998 <__NVIC_GetPriorityGrouping+0x18>)
 8004986:	68db      	ldr	r3, [r3, #12]
 8004988:	0a1b      	lsrs	r3, r3, #8
 800498a:	f003 0307 	and.w	r3, r3, #7
}
 800498e:	4618      	mov	r0, r3
 8004990:	46bd      	mov	sp, r7
 8004992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004996:	4770      	bx	lr
 8004998:	e000ed00 	.word	0xe000ed00

0800499c <__NVIC_SetPriority>:
{
 800499c:	b480      	push	{r7}
 800499e:	b083      	sub	sp, #12
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	4603      	mov	r3, r0
 80049a4:	6039      	str	r1, [r7, #0]
 80049a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80049a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	db0a      	blt.n	80049c6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	b2da      	uxtb	r2, r3
 80049b4:	490c      	ldr	r1, [pc, #48]	; (80049e8 <__NVIC_SetPriority+0x4c>)
 80049b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049ba:	0112      	lsls	r2, r2, #4
 80049bc:	b2d2      	uxtb	r2, r2
 80049be:	440b      	add	r3, r1
 80049c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80049c4:	e00a      	b.n	80049dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	b2da      	uxtb	r2, r3
 80049ca:	4908      	ldr	r1, [pc, #32]	; (80049ec <__NVIC_SetPriority+0x50>)
 80049cc:	79fb      	ldrb	r3, [r7, #7]
 80049ce:	f003 030f 	and.w	r3, r3, #15
 80049d2:	3b04      	subs	r3, #4
 80049d4:	0112      	lsls	r2, r2, #4
 80049d6:	b2d2      	uxtb	r2, r2
 80049d8:	440b      	add	r3, r1
 80049da:	761a      	strb	r2, [r3, #24]
}
 80049dc:	bf00      	nop
 80049de:	370c      	adds	r7, #12
 80049e0:	46bd      	mov	sp, r7
 80049e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e6:	4770      	bx	lr
 80049e8:	e000e100 	.word	0xe000e100
 80049ec:	e000ed00 	.word	0xe000ed00

080049f0 <NVIC_EncodePriority>:
{
 80049f0:	b480      	push	{r7}
 80049f2:	b089      	sub	sp, #36	; 0x24
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	60f8      	str	r0, [r7, #12]
 80049f8:	60b9      	str	r1, [r7, #8]
 80049fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	f003 0307 	and.w	r3, r3, #7
 8004a02:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004a04:	69fb      	ldr	r3, [r7, #28]
 8004a06:	f1c3 0307 	rsb	r3, r3, #7
 8004a0a:	2b04      	cmp	r3, #4
 8004a0c:	bf28      	it	cs
 8004a0e:	2304      	movcs	r3, #4
 8004a10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004a12:	69fb      	ldr	r3, [r7, #28]
 8004a14:	3304      	adds	r3, #4
 8004a16:	2b06      	cmp	r3, #6
 8004a18:	d902      	bls.n	8004a20 <NVIC_EncodePriority+0x30>
 8004a1a:	69fb      	ldr	r3, [r7, #28]
 8004a1c:	3b03      	subs	r3, #3
 8004a1e:	e000      	b.n	8004a22 <NVIC_EncodePriority+0x32>
 8004a20:	2300      	movs	r3, #0
 8004a22:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a24:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004a28:	69bb      	ldr	r3, [r7, #24]
 8004a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a2e:	43da      	mvns	r2, r3
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	401a      	ands	r2, r3
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004a38:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004a3c:	697b      	ldr	r3, [r7, #20]
 8004a3e:	fa01 f303 	lsl.w	r3, r1, r3
 8004a42:	43d9      	mvns	r1, r3
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a48:	4313      	orrs	r3, r2
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	3724      	adds	r7, #36	; 0x24
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a54:	4770      	bx	lr
	...

08004a58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b082      	sub	sp, #8
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	3b01      	subs	r3, #1
 8004a64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004a68:	d301      	bcc.n	8004a6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	e00f      	b.n	8004a8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004a6e:	4a0a      	ldr	r2, [pc, #40]	; (8004a98 <SysTick_Config+0x40>)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	3b01      	subs	r3, #1
 8004a74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004a76:	210f      	movs	r1, #15
 8004a78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004a7c:	f7ff ff8e 	bl	800499c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004a80:	4b05      	ldr	r3, [pc, #20]	; (8004a98 <SysTick_Config+0x40>)
 8004a82:	2200      	movs	r2, #0
 8004a84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004a86:	4b04      	ldr	r3, [pc, #16]	; (8004a98 <SysTick_Config+0x40>)
 8004a88:	2207      	movs	r2, #7
 8004a8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004a8c:	2300      	movs	r3, #0
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	3708      	adds	r7, #8
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bd80      	pop	{r7, pc}
 8004a96:	bf00      	nop
 8004a98:	e000e010 	.word	0xe000e010

08004a9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b082      	sub	sp, #8
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004aa4:	6878      	ldr	r0, [r7, #4]
 8004aa6:	f7ff ff47 	bl	8004938 <__NVIC_SetPriorityGrouping>
}
 8004aaa:	bf00      	nop
 8004aac:	3708      	adds	r7, #8
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bd80      	pop	{r7, pc}

08004ab2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004ab2:	b580      	push	{r7, lr}
 8004ab4:	b086      	sub	sp, #24
 8004ab6:	af00      	add	r7, sp, #0
 8004ab8:	4603      	mov	r3, r0
 8004aba:	60b9      	str	r1, [r7, #8]
 8004abc:	607a      	str	r2, [r7, #4]
 8004abe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004ac4:	f7ff ff5c 	bl	8004980 <__NVIC_GetPriorityGrouping>
 8004ac8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004aca:	687a      	ldr	r2, [r7, #4]
 8004acc:	68b9      	ldr	r1, [r7, #8]
 8004ace:	6978      	ldr	r0, [r7, #20]
 8004ad0:	f7ff ff8e 	bl	80049f0 <NVIC_EncodePriority>
 8004ad4:	4602      	mov	r2, r0
 8004ad6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ada:	4611      	mov	r1, r2
 8004adc:	4618      	mov	r0, r3
 8004ade:	f7ff ff5d 	bl	800499c <__NVIC_SetPriority>
}
 8004ae2:	bf00      	nop
 8004ae4:	3718      	adds	r7, #24
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bd80      	pop	{r7, pc}

08004aea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004aea:	b580      	push	{r7, lr}
 8004aec:	b082      	sub	sp, #8
 8004aee:	af00      	add	r7, sp, #0
 8004af0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	f7ff ffb0 	bl	8004a58 <SysTick_Config>
 8004af8:	4603      	mov	r3, r0
}
 8004afa:	4618      	mov	r0, r3
 8004afc:	3708      	adds	r7, #8
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bd80      	pop	{r7, pc}
	...

08004b04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004b04:	b480      	push	{r7}
 8004b06:	b087      	sub	sp, #28
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
 8004b0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004b0e:	2300      	movs	r3, #0
 8004b10:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004b12:	e14e      	b.n	8004db2 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	681a      	ldr	r2, [r3, #0]
 8004b18:	2101      	movs	r1, #1
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	fa01 f303 	lsl.w	r3, r1, r3
 8004b20:	4013      	ands	r3, r2
 8004b22:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	f000 8140 	beq.w	8004dac <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	2b01      	cmp	r3, #1
 8004b32:	d00b      	beq.n	8004b4c <HAL_GPIO_Init+0x48>
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	2b02      	cmp	r3, #2
 8004b3a:	d007      	beq.n	8004b4c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004b40:	2b11      	cmp	r3, #17
 8004b42:	d003      	beq.n	8004b4c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	2b12      	cmp	r3, #18
 8004b4a:	d130      	bne.n	8004bae <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	689b      	ldr	r3, [r3, #8]
 8004b50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	005b      	lsls	r3, r3, #1
 8004b56:	2203      	movs	r2, #3
 8004b58:	fa02 f303 	lsl.w	r3, r2, r3
 8004b5c:	43db      	mvns	r3, r3
 8004b5e:	693a      	ldr	r2, [r7, #16]
 8004b60:	4013      	ands	r3, r2
 8004b62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	68da      	ldr	r2, [r3, #12]
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	005b      	lsls	r3, r3, #1
 8004b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b70:	693a      	ldr	r2, [r7, #16]
 8004b72:	4313      	orrs	r3, r2
 8004b74:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	693a      	ldr	r2, [r7, #16]
 8004b7a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004b82:	2201      	movs	r2, #1
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	fa02 f303 	lsl.w	r3, r2, r3
 8004b8a:	43db      	mvns	r3, r3
 8004b8c:	693a      	ldr	r2, [r7, #16]
 8004b8e:	4013      	ands	r3, r2
 8004b90:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	091b      	lsrs	r3, r3, #4
 8004b98:	f003 0201 	and.w	r2, r3, #1
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8004ba2:	693a      	ldr	r2, [r7, #16]
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	693a      	ldr	r2, [r7, #16]
 8004bac:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	68db      	ldr	r3, [r3, #12]
 8004bb2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	005b      	lsls	r3, r3, #1
 8004bb8:	2203      	movs	r2, #3
 8004bba:	fa02 f303 	lsl.w	r3, r2, r3
 8004bbe:	43db      	mvns	r3, r3
 8004bc0:	693a      	ldr	r2, [r7, #16]
 8004bc2:	4013      	ands	r3, r2
 8004bc4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	689a      	ldr	r2, [r3, #8]
 8004bca:	697b      	ldr	r3, [r7, #20]
 8004bcc:	005b      	lsls	r3, r3, #1
 8004bce:	fa02 f303 	lsl.w	r3, r2, r3
 8004bd2:	693a      	ldr	r2, [r7, #16]
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	693a      	ldr	r2, [r7, #16]
 8004bdc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	2b02      	cmp	r3, #2
 8004be4:	d003      	beq.n	8004bee <HAL_GPIO_Init+0xea>
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	2b12      	cmp	r3, #18
 8004bec:	d123      	bne.n	8004c36 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	08da      	lsrs	r2, r3, #3
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	3208      	adds	r2, #8
 8004bf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004bfa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004bfc:	697b      	ldr	r3, [r7, #20]
 8004bfe:	f003 0307 	and.w	r3, r3, #7
 8004c02:	009b      	lsls	r3, r3, #2
 8004c04:	220f      	movs	r2, #15
 8004c06:	fa02 f303 	lsl.w	r3, r2, r3
 8004c0a:	43db      	mvns	r3, r3
 8004c0c:	693a      	ldr	r2, [r7, #16]
 8004c0e:	4013      	ands	r3, r2
 8004c10:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	691a      	ldr	r2, [r3, #16]
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	f003 0307 	and.w	r3, r3, #7
 8004c1c:	009b      	lsls	r3, r3, #2
 8004c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c22:	693a      	ldr	r2, [r7, #16]
 8004c24:	4313      	orrs	r3, r2
 8004c26:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004c28:	697b      	ldr	r3, [r7, #20]
 8004c2a:	08da      	lsrs	r2, r3, #3
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	3208      	adds	r2, #8
 8004c30:	6939      	ldr	r1, [r7, #16]
 8004c32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004c3c:	697b      	ldr	r3, [r7, #20]
 8004c3e:	005b      	lsls	r3, r3, #1
 8004c40:	2203      	movs	r2, #3
 8004c42:	fa02 f303 	lsl.w	r3, r2, r3
 8004c46:	43db      	mvns	r3, r3
 8004c48:	693a      	ldr	r2, [r7, #16]
 8004c4a:	4013      	ands	r3, r2
 8004c4c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	f003 0203 	and.w	r2, r3, #3
 8004c56:	697b      	ldr	r3, [r7, #20]
 8004c58:	005b      	lsls	r3, r3, #1
 8004c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c5e:	693a      	ldr	r2, [r7, #16]
 8004c60:	4313      	orrs	r3, r2
 8004c62:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	693a      	ldr	r2, [r7, #16]
 8004c68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	f000 809a 	beq.w	8004dac <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c78:	4b55      	ldr	r3, [pc, #340]	; (8004dd0 <HAL_GPIO_Init+0x2cc>)
 8004c7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c7c:	4a54      	ldr	r2, [pc, #336]	; (8004dd0 <HAL_GPIO_Init+0x2cc>)
 8004c7e:	f043 0301 	orr.w	r3, r3, #1
 8004c82:	6613      	str	r3, [r2, #96]	; 0x60
 8004c84:	4b52      	ldr	r3, [pc, #328]	; (8004dd0 <HAL_GPIO_Init+0x2cc>)
 8004c86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c88:	f003 0301 	and.w	r3, r3, #1
 8004c8c:	60bb      	str	r3, [r7, #8]
 8004c8e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004c90:	4a50      	ldr	r2, [pc, #320]	; (8004dd4 <HAL_GPIO_Init+0x2d0>)
 8004c92:	697b      	ldr	r3, [r7, #20]
 8004c94:	089b      	lsrs	r3, r3, #2
 8004c96:	3302      	adds	r3, #2
 8004c98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c9c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	f003 0303 	and.w	r3, r3, #3
 8004ca4:	009b      	lsls	r3, r3, #2
 8004ca6:	220f      	movs	r2, #15
 8004ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8004cac:	43db      	mvns	r3, r3
 8004cae:	693a      	ldr	r2, [r7, #16]
 8004cb0:	4013      	ands	r3, r2
 8004cb2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004cba:	d013      	beq.n	8004ce4 <HAL_GPIO_Init+0x1e0>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	4a46      	ldr	r2, [pc, #280]	; (8004dd8 <HAL_GPIO_Init+0x2d4>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d00d      	beq.n	8004ce0 <HAL_GPIO_Init+0x1dc>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	4a45      	ldr	r2, [pc, #276]	; (8004ddc <HAL_GPIO_Init+0x2d8>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d007      	beq.n	8004cdc <HAL_GPIO_Init+0x1d8>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	4a44      	ldr	r2, [pc, #272]	; (8004de0 <HAL_GPIO_Init+0x2dc>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d101      	bne.n	8004cd8 <HAL_GPIO_Init+0x1d4>
 8004cd4:	2303      	movs	r3, #3
 8004cd6:	e006      	b.n	8004ce6 <HAL_GPIO_Init+0x1e2>
 8004cd8:	2307      	movs	r3, #7
 8004cda:	e004      	b.n	8004ce6 <HAL_GPIO_Init+0x1e2>
 8004cdc:	2302      	movs	r3, #2
 8004cde:	e002      	b.n	8004ce6 <HAL_GPIO_Init+0x1e2>
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	e000      	b.n	8004ce6 <HAL_GPIO_Init+0x1e2>
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	697a      	ldr	r2, [r7, #20]
 8004ce8:	f002 0203 	and.w	r2, r2, #3
 8004cec:	0092      	lsls	r2, r2, #2
 8004cee:	4093      	lsls	r3, r2
 8004cf0:	693a      	ldr	r2, [r7, #16]
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004cf6:	4937      	ldr	r1, [pc, #220]	; (8004dd4 <HAL_GPIO_Init+0x2d0>)
 8004cf8:	697b      	ldr	r3, [r7, #20]
 8004cfa:	089b      	lsrs	r3, r3, #2
 8004cfc:	3302      	adds	r3, #2
 8004cfe:	693a      	ldr	r2, [r7, #16]
 8004d00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004d04:	4b37      	ldr	r3, [pc, #220]	; (8004de4 <HAL_GPIO_Init+0x2e0>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	43db      	mvns	r3, r3
 8004d0e:	693a      	ldr	r2, [r7, #16]
 8004d10:	4013      	ands	r3, r2
 8004d12:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d003      	beq.n	8004d28 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8004d20:	693a      	ldr	r2, [r7, #16]
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	4313      	orrs	r3, r2
 8004d26:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004d28:	4a2e      	ldr	r2, [pc, #184]	; (8004de4 <HAL_GPIO_Init+0x2e0>)
 8004d2a:	693b      	ldr	r3, [r7, #16]
 8004d2c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8004d2e:	4b2d      	ldr	r3, [pc, #180]	; (8004de4 <HAL_GPIO_Init+0x2e0>)
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	43db      	mvns	r3, r3
 8004d38:	693a      	ldr	r2, [r7, #16]
 8004d3a:	4013      	ands	r3, r2
 8004d3c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d003      	beq.n	8004d52 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8004d4a:	693a      	ldr	r2, [r7, #16]
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004d52:	4a24      	ldr	r2, [pc, #144]	; (8004de4 <HAL_GPIO_Init+0x2e0>)
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004d58:	4b22      	ldr	r3, [pc, #136]	; (8004de4 <HAL_GPIO_Init+0x2e0>)
 8004d5a:	689b      	ldr	r3, [r3, #8]
 8004d5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	43db      	mvns	r3, r3
 8004d62:	693a      	ldr	r2, [r7, #16]
 8004d64:	4013      	ands	r3, r2
 8004d66:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d003      	beq.n	8004d7c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8004d74:	693a      	ldr	r2, [r7, #16]
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004d7c:	4a19      	ldr	r2, [pc, #100]	; (8004de4 <HAL_GPIO_Init+0x2e0>)
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004d82:	4b18      	ldr	r3, [pc, #96]	; (8004de4 <HAL_GPIO_Init+0x2e0>)
 8004d84:	68db      	ldr	r3, [r3, #12]
 8004d86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	43db      	mvns	r3, r3
 8004d8c:	693a      	ldr	r2, [r7, #16]
 8004d8e:	4013      	ands	r3, r2
 8004d90:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d003      	beq.n	8004da6 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8004d9e:	693a      	ldr	r2, [r7, #16]
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	4313      	orrs	r3, r2
 8004da4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004da6:	4a0f      	ldr	r2, [pc, #60]	; (8004de4 <HAL_GPIO_Init+0x2e0>)
 8004da8:	693b      	ldr	r3, [r7, #16]
 8004daa:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8004dac:	697b      	ldr	r3, [r7, #20]
 8004dae:	3301      	adds	r3, #1
 8004db0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	681a      	ldr	r2, [r3, #0]
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	fa22 f303 	lsr.w	r3, r2, r3
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	f47f aea9 	bne.w	8004b14 <HAL_GPIO_Init+0x10>
  }
}
 8004dc2:	bf00      	nop
 8004dc4:	bf00      	nop
 8004dc6:	371c      	adds	r7, #28
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dce:	4770      	bx	lr
 8004dd0:	40021000 	.word	0x40021000
 8004dd4:	40010000 	.word	0x40010000
 8004dd8:	48000400 	.word	0x48000400
 8004ddc:	48000800 	.word	0x48000800
 8004de0:	48000c00 	.word	0x48000c00
 8004de4:	40010400 	.word	0x40010400

08004de8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004de8:	b480      	push	{r7}
 8004dea:	b085      	sub	sp, #20
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
 8004df0:	460b      	mov	r3, r1
 8004df2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	691a      	ldr	r2, [r3, #16]
 8004df8:	887b      	ldrh	r3, [r7, #2]
 8004dfa:	4013      	ands	r3, r2
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d002      	beq.n	8004e06 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004e00:	2301      	movs	r3, #1
 8004e02:	73fb      	strb	r3, [r7, #15]
 8004e04:	e001      	b.n	8004e0a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004e06:	2300      	movs	r3, #0
 8004e08:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004e0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	3714      	adds	r7, #20
 8004e10:	46bd      	mov	sp, r7
 8004e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e16:	4770      	bx	lr

08004e18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b083      	sub	sp, #12
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
 8004e20:	460b      	mov	r3, r1
 8004e22:	807b      	strh	r3, [r7, #2]
 8004e24:	4613      	mov	r3, r2
 8004e26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004e28:	787b      	ldrb	r3, [r7, #1]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d003      	beq.n	8004e36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004e2e:	887a      	ldrh	r2, [r7, #2]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004e34:	e002      	b.n	8004e3c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004e36:	887a      	ldrh	r2, [r7, #2]
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004e3c:	bf00      	nop
 8004e3e:	370c      	adds	r7, #12
 8004e40:	46bd      	mov	sp, r7
 8004e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e46:	4770      	bx	lr

08004e48 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	b085      	sub	sp, #20
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
 8004e50:	460b      	mov	r3, r1
 8004e52:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	695b      	ldr	r3, [r3, #20]
 8004e58:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004e5a:	887a      	ldrh	r2, [r7, #2]
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	4013      	ands	r3, r2
 8004e60:	041a      	lsls	r2, r3, #16
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	43d9      	mvns	r1, r3
 8004e66:	887b      	ldrh	r3, [r7, #2]
 8004e68:	400b      	ands	r3, r1
 8004e6a:	431a      	orrs	r2, r3
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	619a      	str	r2, [r3, #24]
}
 8004e70:	bf00      	nop
 8004e72:	3714      	adds	r7, #20
 8004e74:	46bd      	mov	sp, r7
 8004e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7a:	4770      	bx	lr

08004e7c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b082      	sub	sp, #8
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d101      	bne.n	8004e8e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	e081      	b.n	8004f92 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e94:	b2db      	uxtb	r3, r3
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d106      	bne.n	8004ea8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	f7fe fdae 	bl	8003a04 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2224      	movs	r2, #36	; 0x24
 8004eac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	681a      	ldr	r2, [r3, #0]
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f022 0201 	bic.w	r2, r2, #1
 8004ebe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	685a      	ldr	r2, [r3, #4]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004ecc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	689a      	ldr	r2, [r3, #8]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004edc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	68db      	ldr	r3, [r3, #12]
 8004ee2:	2b01      	cmp	r3, #1
 8004ee4:	d107      	bne.n	8004ef6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	689a      	ldr	r2, [r3, #8]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004ef2:	609a      	str	r2, [r3, #8]
 8004ef4:	e006      	b.n	8004f04 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	689a      	ldr	r2, [r3, #8]
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004f02:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	68db      	ldr	r3, [r3, #12]
 8004f08:	2b02      	cmp	r3, #2
 8004f0a:	d104      	bne.n	8004f16 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004f14:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	687a      	ldr	r2, [r7, #4]
 8004f1e:	6812      	ldr	r2, [r2, #0]
 8004f20:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004f24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f28:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	68da      	ldr	r2, [r3, #12]
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004f38:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	691a      	ldr	r2, [r3, #16]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	695b      	ldr	r3, [r3, #20]
 8004f42:	ea42 0103 	orr.w	r1, r2, r3
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	699b      	ldr	r3, [r3, #24]
 8004f4a:	021a      	lsls	r2, r3, #8
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	430a      	orrs	r2, r1
 8004f52:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	69d9      	ldr	r1, [r3, #28]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6a1a      	ldr	r2, [r3, #32]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	430a      	orrs	r2, r1
 8004f62:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	681a      	ldr	r2, [r3, #0]
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f042 0201 	orr.w	r2, r2, #1
 8004f72:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2200      	movs	r2, #0
 8004f78:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2220      	movs	r2, #32
 8004f7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2200      	movs	r2, #0
 8004f86:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004f90:	2300      	movs	r3, #0
}
 8004f92:	4618      	mov	r0, r3
 8004f94:	3708      	adds	r7, #8
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bd80      	pop	{r7, pc}
	...

08004f9c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b088      	sub	sp, #32
 8004fa0:	af02      	add	r7, sp, #8
 8004fa2:	60f8      	str	r0, [r7, #12]
 8004fa4:	607a      	str	r2, [r7, #4]
 8004fa6:	461a      	mov	r2, r3
 8004fa8:	460b      	mov	r3, r1
 8004faa:	817b      	strh	r3, [r7, #10]
 8004fac:	4613      	mov	r3, r2
 8004fae:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004fb6:	b2db      	uxtb	r3, r3
 8004fb8:	2b20      	cmp	r3, #32
 8004fba:	f040 80da 	bne.w	8005172 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004fc4:	2b01      	cmp	r3, #1
 8004fc6:	d101      	bne.n	8004fcc <HAL_I2C_Master_Transmit+0x30>
 8004fc8:	2302      	movs	r3, #2
 8004fca:	e0d3      	b.n	8005174 <HAL_I2C_Master_Transmit+0x1d8>
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	2201      	movs	r2, #1
 8004fd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004fd4:	f7ff fc80 	bl	80048d8 <HAL_GetTick>
 8004fd8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004fda:	697b      	ldr	r3, [r7, #20]
 8004fdc:	9300      	str	r3, [sp, #0]
 8004fde:	2319      	movs	r3, #25
 8004fe0:	2201      	movs	r2, #1
 8004fe2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004fe6:	68f8      	ldr	r0, [r7, #12]
 8004fe8:	f000 f9f7 	bl	80053da <I2C_WaitOnFlagUntilTimeout>
 8004fec:	4603      	mov	r3, r0
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d001      	beq.n	8004ff6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	e0be      	b.n	8005174 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	2221      	movs	r2, #33	; 0x21
 8004ffa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	2210      	movs	r2, #16
 8005002:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	2200      	movs	r2, #0
 800500a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	687a      	ldr	r2, [r7, #4]
 8005010:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	893a      	ldrh	r2, [r7, #8]
 8005016:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	2200      	movs	r2, #0
 800501c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005022:	b29b      	uxth	r3, r3
 8005024:	2bff      	cmp	r3, #255	; 0xff
 8005026:	d90e      	bls.n	8005046 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	22ff      	movs	r2, #255	; 0xff
 800502c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005032:	b2da      	uxtb	r2, r3
 8005034:	8979      	ldrh	r1, [r7, #10]
 8005036:	4b51      	ldr	r3, [pc, #324]	; (800517c <HAL_I2C_Master_Transmit+0x1e0>)
 8005038:	9300      	str	r3, [sp, #0]
 800503a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800503e:	68f8      	ldr	r0, [r7, #12]
 8005040:	f000 faee 	bl	8005620 <I2C_TransferConfig>
 8005044:	e06c      	b.n	8005120 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800504a:	b29a      	uxth	r2, r3
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005054:	b2da      	uxtb	r2, r3
 8005056:	8979      	ldrh	r1, [r7, #10]
 8005058:	4b48      	ldr	r3, [pc, #288]	; (800517c <HAL_I2C_Master_Transmit+0x1e0>)
 800505a:	9300      	str	r3, [sp, #0]
 800505c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005060:	68f8      	ldr	r0, [r7, #12]
 8005062:	f000 fadd 	bl	8005620 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8005066:	e05b      	b.n	8005120 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005068:	697a      	ldr	r2, [r7, #20]
 800506a:	6a39      	ldr	r1, [r7, #32]
 800506c:	68f8      	ldr	r0, [r7, #12]
 800506e:	f000 f9f4 	bl	800545a <I2C_WaitOnTXISFlagUntilTimeout>
 8005072:	4603      	mov	r3, r0
 8005074:	2b00      	cmp	r3, #0
 8005076:	d001      	beq.n	800507c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8005078:	2301      	movs	r3, #1
 800507a:	e07b      	b.n	8005174 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005080:	781a      	ldrb	r2, [r3, #0]
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800508c:	1c5a      	adds	r2, r3, #1
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005096:	b29b      	uxth	r3, r3
 8005098:	3b01      	subs	r3, #1
 800509a:	b29a      	uxth	r2, r3
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050a4:	3b01      	subs	r3, #1
 80050a6:	b29a      	uxth	r2, r3
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050b0:	b29b      	uxth	r3, r3
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d034      	beq.n	8005120 <HAL_I2C_Master_Transmit+0x184>
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d130      	bne.n	8005120 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80050be:	697b      	ldr	r3, [r7, #20]
 80050c0:	9300      	str	r3, [sp, #0]
 80050c2:	6a3b      	ldr	r3, [r7, #32]
 80050c4:	2200      	movs	r2, #0
 80050c6:	2180      	movs	r1, #128	; 0x80
 80050c8:	68f8      	ldr	r0, [r7, #12]
 80050ca:	f000 f986 	bl	80053da <I2C_WaitOnFlagUntilTimeout>
 80050ce:	4603      	mov	r3, r0
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d001      	beq.n	80050d8 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80050d4:	2301      	movs	r3, #1
 80050d6:	e04d      	b.n	8005174 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050dc:	b29b      	uxth	r3, r3
 80050de:	2bff      	cmp	r3, #255	; 0xff
 80050e0:	d90e      	bls.n	8005100 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	22ff      	movs	r2, #255	; 0xff
 80050e6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050ec:	b2da      	uxtb	r2, r3
 80050ee:	8979      	ldrh	r1, [r7, #10]
 80050f0:	2300      	movs	r3, #0
 80050f2:	9300      	str	r3, [sp, #0]
 80050f4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80050f8:	68f8      	ldr	r0, [r7, #12]
 80050fa:	f000 fa91 	bl	8005620 <I2C_TransferConfig>
 80050fe:	e00f      	b.n	8005120 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005104:	b29a      	uxth	r2, r3
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800510e:	b2da      	uxtb	r2, r3
 8005110:	8979      	ldrh	r1, [r7, #10]
 8005112:	2300      	movs	r3, #0
 8005114:	9300      	str	r3, [sp, #0]
 8005116:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800511a:	68f8      	ldr	r0, [r7, #12]
 800511c:	f000 fa80 	bl	8005620 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005124:	b29b      	uxth	r3, r3
 8005126:	2b00      	cmp	r3, #0
 8005128:	d19e      	bne.n	8005068 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800512a:	697a      	ldr	r2, [r7, #20]
 800512c:	6a39      	ldr	r1, [r7, #32]
 800512e:	68f8      	ldr	r0, [r7, #12]
 8005130:	f000 f9d3 	bl	80054da <I2C_WaitOnSTOPFlagUntilTimeout>
 8005134:	4603      	mov	r3, r0
 8005136:	2b00      	cmp	r3, #0
 8005138:	d001      	beq.n	800513e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800513a:	2301      	movs	r3, #1
 800513c:	e01a      	b.n	8005174 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	2220      	movs	r2, #32
 8005144:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	6859      	ldr	r1, [r3, #4]
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681a      	ldr	r2, [r3, #0]
 8005150:	4b0b      	ldr	r3, [pc, #44]	; (8005180 <HAL_I2C_Master_Transmit+0x1e4>)
 8005152:	400b      	ands	r3, r1
 8005154:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	2220      	movs	r2, #32
 800515a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	2200      	movs	r2, #0
 8005162:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	2200      	movs	r2, #0
 800516a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800516e:	2300      	movs	r3, #0
 8005170:	e000      	b.n	8005174 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8005172:	2302      	movs	r3, #2
  }
}
 8005174:	4618      	mov	r0, r3
 8005176:	3718      	adds	r7, #24
 8005178:	46bd      	mov	sp, r7
 800517a:	bd80      	pop	{r7, pc}
 800517c:	80002000 	.word	0x80002000
 8005180:	fe00e800 	.word	0xfe00e800

08005184 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b08a      	sub	sp, #40	; 0x28
 8005188:	af02      	add	r7, sp, #8
 800518a:	60f8      	str	r0, [r7, #12]
 800518c:	607a      	str	r2, [r7, #4]
 800518e:	603b      	str	r3, [r7, #0]
 8005190:	460b      	mov	r3, r1
 8005192:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8005194:	2300      	movs	r3, #0
 8005196:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800519e:	b2db      	uxtb	r3, r3
 80051a0:	2b20      	cmp	r3, #32
 80051a2:	f040 80f1 	bne.w	8005388 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	699b      	ldr	r3, [r3, #24]
 80051ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80051b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051b4:	d101      	bne.n	80051ba <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 80051b6:	2302      	movs	r3, #2
 80051b8:	e0e7      	b.n	800538a <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80051c0:	2b01      	cmp	r3, #1
 80051c2:	d101      	bne.n	80051c8 <HAL_I2C_IsDeviceReady+0x44>
 80051c4:	2302      	movs	r3, #2
 80051c6:	e0e0      	b.n	800538a <HAL_I2C_IsDeviceReady+0x206>
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	2201      	movs	r2, #1
 80051cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	2224      	movs	r2, #36	; 0x24
 80051d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	2200      	movs	r2, #0
 80051dc:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	68db      	ldr	r3, [r3, #12]
 80051e2:	2b01      	cmp	r3, #1
 80051e4:	d107      	bne.n	80051f6 <HAL_I2C_IsDeviceReady+0x72>
 80051e6:	897b      	ldrh	r3, [r7, #10]
 80051e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80051ec:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80051f0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80051f4:	e004      	b.n	8005200 <HAL_I2C_IsDeviceReady+0x7c>
 80051f6:	897b      	ldrh	r3, [r7, #10]
 80051f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80051fc:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8005200:	68fa      	ldr	r2, [r7, #12]
 8005202:	6812      	ldr	r2, [r2, #0]
 8005204:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8005206:	f7ff fb67 	bl	80048d8 <HAL_GetTick>
 800520a:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	699b      	ldr	r3, [r3, #24]
 8005212:	f003 0320 	and.w	r3, r3, #32
 8005216:	2b20      	cmp	r3, #32
 8005218:	bf0c      	ite	eq
 800521a:	2301      	moveq	r3, #1
 800521c:	2300      	movne	r3, #0
 800521e:	b2db      	uxtb	r3, r3
 8005220:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	699b      	ldr	r3, [r3, #24]
 8005228:	f003 0310 	and.w	r3, r3, #16
 800522c:	2b10      	cmp	r3, #16
 800522e:	bf0c      	ite	eq
 8005230:	2301      	moveq	r3, #1
 8005232:	2300      	movne	r3, #0
 8005234:	b2db      	uxtb	r3, r3
 8005236:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8005238:	e034      	b.n	80052a4 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005240:	d01a      	beq.n	8005278 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005242:	f7ff fb49 	bl	80048d8 <HAL_GetTick>
 8005246:	4602      	mov	r2, r0
 8005248:	69bb      	ldr	r3, [r7, #24]
 800524a:	1ad3      	subs	r3, r2, r3
 800524c:	683a      	ldr	r2, [r7, #0]
 800524e:	429a      	cmp	r2, r3
 8005250:	d302      	bcc.n	8005258 <HAL_I2C_IsDeviceReady+0xd4>
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d10f      	bne.n	8005278 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	2220      	movs	r2, #32
 800525c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005264:	f043 0220 	orr.w	r2, r3, #32
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	2200      	movs	r2, #0
 8005270:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8005274:	2301      	movs	r3, #1
 8005276:	e088      	b.n	800538a <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	699b      	ldr	r3, [r3, #24]
 800527e:	f003 0320 	and.w	r3, r3, #32
 8005282:	2b20      	cmp	r3, #32
 8005284:	bf0c      	ite	eq
 8005286:	2301      	moveq	r3, #1
 8005288:	2300      	movne	r3, #0
 800528a:	b2db      	uxtb	r3, r3
 800528c:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	699b      	ldr	r3, [r3, #24]
 8005294:	f003 0310 	and.w	r3, r3, #16
 8005298:	2b10      	cmp	r3, #16
 800529a:	bf0c      	ite	eq
 800529c:	2301      	moveq	r3, #1
 800529e:	2300      	movne	r3, #0
 80052a0:	b2db      	uxtb	r3, r3
 80052a2:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80052a4:	7ffb      	ldrb	r3, [r7, #31]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d102      	bne.n	80052b0 <HAL_I2C_IsDeviceReady+0x12c>
 80052aa:	7fbb      	ldrb	r3, [r7, #30]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d0c4      	beq.n	800523a <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	699b      	ldr	r3, [r3, #24]
 80052b6:	f003 0310 	and.w	r3, r3, #16
 80052ba:	2b10      	cmp	r3, #16
 80052bc:	d01a      	beq.n	80052f4 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80052be:	69bb      	ldr	r3, [r7, #24]
 80052c0:	9300      	str	r3, [sp, #0]
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	2200      	movs	r2, #0
 80052c6:	2120      	movs	r1, #32
 80052c8:	68f8      	ldr	r0, [r7, #12]
 80052ca:	f000 f886 	bl	80053da <I2C_WaitOnFlagUntilTimeout>
 80052ce:	4603      	mov	r3, r0
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d001      	beq.n	80052d8 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 80052d4:	2301      	movs	r3, #1
 80052d6:	e058      	b.n	800538a <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	2220      	movs	r2, #32
 80052de:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	2220      	movs	r2, #32
 80052e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	2200      	movs	r2, #0
 80052ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 80052f0:	2300      	movs	r3, #0
 80052f2:	e04a      	b.n	800538a <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80052f4:	69bb      	ldr	r3, [r7, #24]
 80052f6:	9300      	str	r3, [sp, #0]
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	2200      	movs	r2, #0
 80052fc:	2120      	movs	r1, #32
 80052fe:	68f8      	ldr	r0, [r7, #12]
 8005300:	f000 f86b 	bl	80053da <I2C_WaitOnFlagUntilTimeout>
 8005304:	4603      	mov	r3, r0
 8005306:	2b00      	cmp	r3, #0
 8005308:	d001      	beq.n	800530e <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 800530a:	2301      	movs	r3, #1
 800530c:	e03d      	b.n	800538a <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	2210      	movs	r2, #16
 8005314:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	2220      	movs	r2, #32
 800531c:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	687a      	ldr	r2, [r7, #4]
 8005322:	429a      	cmp	r2, r3
 8005324:	d118      	bne.n	8005358 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	685a      	ldr	r2, [r3, #4]
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005334:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8005336:	69bb      	ldr	r3, [r7, #24]
 8005338:	9300      	str	r3, [sp, #0]
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	2200      	movs	r2, #0
 800533e:	2120      	movs	r1, #32
 8005340:	68f8      	ldr	r0, [r7, #12]
 8005342:	f000 f84a 	bl	80053da <I2C_WaitOnFlagUntilTimeout>
 8005346:	4603      	mov	r3, r0
 8005348:	2b00      	cmp	r3, #0
 800534a:	d001      	beq.n	8005350 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 800534c:	2301      	movs	r3, #1
 800534e:	e01c      	b.n	800538a <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	2220      	movs	r2, #32
 8005356:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8005358:	697b      	ldr	r3, [r7, #20]
 800535a:	3301      	adds	r3, #1
 800535c:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 800535e:	697b      	ldr	r3, [r7, #20]
 8005360:	687a      	ldr	r2, [r7, #4]
 8005362:	429a      	cmp	r2, r3
 8005364:	f63f af3b 	bhi.w	80051de <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	2220      	movs	r2, #32
 800536c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005374:	f043 0220 	orr.w	r2, r3, #32
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	2200      	movs	r2, #0
 8005380:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8005384:	2301      	movs	r3, #1
 8005386:	e000      	b.n	800538a <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8005388:	2302      	movs	r3, #2
  }
}
 800538a:	4618      	mov	r0, r3
 800538c:	3720      	adds	r7, #32
 800538e:	46bd      	mov	sp, r7
 8005390:	bd80      	pop	{r7, pc}

08005392 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005392:	b480      	push	{r7}
 8005394:	b083      	sub	sp, #12
 8005396:	af00      	add	r7, sp, #0
 8005398:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	699b      	ldr	r3, [r3, #24]
 80053a0:	f003 0302 	and.w	r3, r3, #2
 80053a4:	2b02      	cmp	r3, #2
 80053a6:	d103      	bne.n	80053b0 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	2200      	movs	r2, #0
 80053ae:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	699b      	ldr	r3, [r3, #24]
 80053b6:	f003 0301 	and.w	r3, r3, #1
 80053ba:	2b01      	cmp	r3, #1
 80053bc:	d007      	beq.n	80053ce <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	699a      	ldr	r2, [r3, #24]
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f042 0201 	orr.w	r2, r2, #1
 80053cc:	619a      	str	r2, [r3, #24]
  }
}
 80053ce:	bf00      	nop
 80053d0:	370c      	adds	r7, #12
 80053d2:	46bd      	mov	sp, r7
 80053d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d8:	4770      	bx	lr

080053da <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80053da:	b580      	push	{r7, lr}
 80053dc:	b084      	sub	sp, #16
 80053de:	af00      	add	r7, sp, #0
 80053e0:	60f8      	str	r0, [r7, #12]
 80053e2:	60b9      	str	r1, [r7, #8]
 80053e4:	603b      	str	r3, [r7, #0]
 80053e6:	4613      	mov	r3, r2
 80053e8:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80053ea:	e022      	b.n	8005432 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80053f2:	d01e      	beq.n	8005432 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053f4:	f7ff fa70 	bl	80048d8 <HAL_GetTick>
 80053f8:	4602      	mov	r2, r0
 80053fa:	69bb      	ldr	r3, [r7, #24]
 80053fc:	1ad3      	subs	r3, r2, r3
 80053fe:	683a      	ldr	r2, [r7, #0]
 8005400:	429a      	cmp	r2, r3
 8005402:	d302      	bcc.n	800540a <I2C_WaitOnFlagUntilTimeout+0x30>
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d113      	bne.n	8005432 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800540e:	f043 0220 	orr.w	r2, r3, #32
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	2220      	movs	r2, #32
 800541a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	2200      	movs	r2, #0
 8005422:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	2200      	movs	r2, #0
 800542a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800542e:	2301      	movs	r3, #1
 8005430:	e00f      	b.n	8005452 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	699a      	ldr	r2, [r3, #24]
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	4013      	ands	r3, r2
 800543c:	68ba      	ldr	r2, [r7, #8]
 800543e:	429a      	cmp	r2, r3
 8005440:	bf0c      	ite	eq
 8005442:	2301      	moveq	r3, #1
 8005444:	2300      	movne	r3, #0
 8005446:	b2db      	uxtb	r3, r3
 8005448:	461a      	mov	r2, r3
 800544a:	79fb      	ldrb	r3, [r7, #7]
 800544c:	429a      	cmp	r2, r3
 800544e:	d0cd      	beq.n	80053ec <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005450:	2300      	movs	r3, #0
}
 8005452:	4618      	mov	r0, r3
 8005454:	3710      	adds	r7, #16
 8005456:	46bd      	mov	sp, r7
 8005458:	bd80      	pop	{r7, pc}

0800545a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800545a:	b580      	push	{r7, lr}
 800545c:	b084      	sub	sp, #16
 800545e:	af00      	add	r7, sp, #0
 8005460:	60f8      	str	r0, [r7, #12]
 8005462:	60b9      	str	r1, [r7, #8]
 8005464:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005466:	e02c      	b.n	80054c2 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005468:	687a      	ldr	r2, [r7, #4]
 800546a:	68b9      	ldr	r1, [r7, #8]
 800546c:	68f8      	ldr	r0, [r7, #12]
 800546e:	f000 f871 	bl	8005554 <I2C_IsAcknowledgeFailed>
 8005472:	4603      	mov	r3, r0
 8005474:	2b00      	cmp	r3, #0
 8005476:	d001      	beq.n	800547c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005478:	2301      	movs	r3, #1
 800547a:	e02a      	b.n	80054d2 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005482:	d01e      	beq.n	80054c2 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005484:	f7ff fa28 	bl	80048d8 <HAL_GetTick>
 8005488:	4602      	mov	r2, r0
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	1ad3      	subs	r3, r2, r3
 800548e:	68ba      	ldr	r2, [r7, #8]
 8005490:	429a      	cmp	r2, r3
 8005492:	d302      	bcc.n	800549a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d113      	bne.n	80054c2 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800549e:	f043 0220 	orr.w	r2, r3, #32
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	2220      	movs	r2, #32
 80054aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	2200      	movs	r2, #0
 80054b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	2200      	movs	r2, #0
 80054ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80054be:	2301      	movs	r3, #1
 80054c0:	e007      	b.n	80054d2 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	699b      	ldr	r3, [r3, #24]
 80054c8:	f003 0302 	and.w	r3, r3, #2
 80054cc:	2b02      	cmp	r3, #2
 80054ce:	d1cb      	bne.n	8005468 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80054d0:	2300      	movs	r3, #0
}
 80054d2:	4618      	mov	r0, r3
 80054d4:	3710      	adds	r7, #16
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bd80      	pop	{r7, pc}

080054da <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80054da:	b580      	push	{r7, lr}
 80054dc:	b084      	sub	sp, #16
 80054de:	af00      	add	r7, sp, #0
 80054e0:	60f8      	str	r0, [r7, #12]
 80054e2:	60b9      	str	r1, [r7, #8]
 80054e4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80054e6:	e028      	b.n	800553a <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80054e8:	687a      	ldr	r2, [r7, #4]
 80054ea:	68b9      	ldr	r1, [r7, #8]
 80054ec:	68f8      	ldr	r0, [r7, #12]
 80054ee:	f000 f831 	bl	8005554 <I2C_IsAcknowledgeFailed>
 80054f2:	4603      	mov	r3, r0
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d001      	beq.n	80054fc <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80054f8:	2301      	movs	r3, #1
 80054fa:	e026      	b.n	800554a <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054fc:	f7ff f9ec 	bl	80048d8 <HAL_GetTick>
 8005500:	4602      	mov	r2, r0
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	1ad3      	subs	r3, r2, r3
 8005506:	68ba      	ldr	r2, [r7, #8]
 8005508:	429a      	cmp	r2, r3
 800550a:	d302      	bcc.n	8005512 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d113      	bne.n	800553a <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005516:	f043 0220 	orr.w	r2, r3, #32
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	2220      	movs	r2, #32
 8005522:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	2200      	movs	r2, #0
 800552a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	2200      	movs	r2, #0
 8005532:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005536:	2301      	movs	r3, #1
 8005538:	e007      	b.n	800554a <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	699b      	ldr	r3, [r3, #24]
 8005540:	f003 0320 	and.w	r3, r3, #32
 8005544:	2b20      	cmp	r3, #32
 8005546:	d1cf      	bne.n	80054e8 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005548:	2300      	movs	r3, #0
}
 800554a:	4618      	mov	r0, r3
 800554c:	3710      	adds	r7, #16
 800554e:	46bd      	mov	sp, r7
 8005550:	bd80      	pop	{r7, pc}
	...

08005554 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b084      	sub	sp, #16
 8005558:	af00      	add	r7, sp, #0
 800555a:	60f8      	str	r0, [r7, #12]
 800555c:	60b9      	str	r1, [r7, #8]
 800555e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	699b      	ldr	r3, [r3, #24]
 8005566:	f003 0310 	and.w	r3, r3, #16
 800556a:	2b10      	cmp	r3, #16
 800556c:	d151      	bne.n	8005612 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800556e:	e022      	b.n	80055b6 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005576:	d01e      	beq.n	80055b6 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005578:	f7ff f9ae 	bl	80048d8 <HAL_GetTick>
 800557c:	4602      	mov	r2, r0
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	1ad3      	subs	r3, r2, r3
 8005582:	68ba      	ldr	r2, [r7, #8]
 8005584:	429a      	cmp	r2, r3
 8005586:	d302      	bcc.n	800558e <I2C_IsAcknowledgeFailed+0x3a>
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d113      	bne.n	80055b6 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005592:	f043 0220 	orr.w	r2, r3, #32
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	2220      	movs	r2, #32
 800559e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	2200      	movs	r2, #0
 80055a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	2200      	movs	r2, #0
 80055ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80055b2:	2301      	movs	r3, #1
 80055b4:	e02e      	b.n	8005614 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	699b      	ldr	r3, [r3, #24]
 80055bc:	f003 0320 	and.w	r3, r3, #32
 80055c0:	2b20      	cmp	r3, #32
 80055c2:	d1d5      	bne.n	8005570 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	2210      	movs	r2, #16
 80055ca:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	2220      	movs	r2, #32
 80055d2:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80055d4:	68f8      	ldr	r0, [r7, #12]
 80055d6:	f7ff fedc 	bl	8005392 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	6859      	ldr	r1, [r3, #4]
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681a      	ldr	r2, [r3, #0]
 80055e4:	4b0d      	ldr	r3, [pc, #52]	; (800561c <I2C_IsAcknowledgeFailed+0xc8>)
 80055e6:	400b      	ands	r3, r1
 80055e8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055ee:	f043 0204 	orr.w	r2, r3, #4
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	2220      	movs	r2, #32
 80055fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	2200      	movs	r2, #0
 8005602:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	2200      	movs	r2, #0
 800560a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800560e:	2301      	movs	r3, #1
 8005610:	e000      	b.n	8005614 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8005612:	2300      	movs	r3, #0
}
 8005614:	4618      	mov	r0, r3
 8005616:	3710      	adds	r7, #16
 8005618:	46bd      	mov	sp, r7
 800561a:	bd80      	pop	{r7, pc}
 800561c:	fe00e800 	.word	0xfe00e800

08005620 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005620:	b480      	push	{r7}
 8005622:	b085      	sub	sp, #20
 8005624:	af00      	add	r7, sp, #0
 8005626:	60f8      	str	r0, [r7, #12]
 8005628:	607b      	str	r3, [r7, #4]
 800562a:	460b      	mov	r3, r1
 800562c:	817b      	strh	r3, [r7, #10]
 800562e:	4613      	mov	r3, r2
 8005630:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	685a      	ldr	r2, [r3, #4]
 8005638:	69bb      	ldr	r3, [r7, #24]
 800563a:	0d5b      	lsrs	r3, r3, #21
 800563c:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005640:	4b0d      	ldr	r3, [pc, #52]	; (8005678 <I2C_TransferConfig+0x58>)
 8005642:	430b      	orrs	r3, r1
 8005644:	43db      	mvns	r3, r3
 8005646:	ea02 0103 	and.w	r1, r2, r3
 800564a:	897b      	ldrh	r3, [r7, #10]
 800564c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005650:	7a7b      	ldrb	r3, [r7, #9]
 8005652:	041b      	lsls	r3, r3, #16
 8005654:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005658:	431a      	orrs	r2, r3
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	431a      	orrs	r2, r3
 800565e:	69bb      	ldr	r3, [r7, #24]
 8005660:	431a      	orrs	r2, r3
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	430a      	orrs	r2, r1
 8005668:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800566a:	bf00      	nop
 800566c:	3714      	adds	r7, #20
 800566e:	46bd      	mov	sp, r7
 8005670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005674:	4770      	bx	lr
 8005676:	bf00      	nop
 8005678:	03ff63ff 	.word	0x03ff63ff

0800567c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800567c:	b480      	push	{r7}
 800567e:	b083      	sub	sp, #12
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
 8005684:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800568c:	b2db      	uxtb	r3, r3
 800568e:	2b20      	cmp	r3, #32
 8005690:	d138      	bne.n	8005704 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005698:	2b01      	cmp	r3, #1
 800569a:	d101      	bne.n	80056a0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800569c:	2302      	movs	r3, #2
 800569e:	e032      	b.n	8005706 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2201      	movs	r2, #1
 80056a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2224      	movs	r2, #36	; 0x24
 80056ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	681a      	ldr	r2, [r3, #0]
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f022 0201 	bic.w	r2, r2, #1
 80056be:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	681a      	ldr	r2, [r3, #0]
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80056ce:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	6819      	ldr	r1, [r3, #0]
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	683a      	ldr	r2, [r7, #0]
 80056dc:	430a      	orrs	r2, r1
 80056de:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	681a      	ldr	r2, [r3, #0]
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f042 0201 	orr.w	r2, r2, #1
 80056ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2220      	movs	r2, #32
 80056f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2200      	movs	r2, #0
 80056fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005700:	2300      	movs	r3, #0
 8005702:	e000      	b.n	8005706 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005704:	2302      	movs	r3, #2
  }
}
 8005706:	4618      	mov	r0, r3
 8005708:	370c      	adds	r7, #12
 800570a:	46bd      	mov	sp, r7
 800570c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005710:	4770      	bx	lr

08005712 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005712:	b480      	push	{r7}
 8005714:	b085      	sub	sp, #20
 8005716:	af00      	add	r7, sp, #0
 8005718:	6078      	str	r0, [r7, #4]
 800571a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005722:	b2db      	uxtb	r3, r3
 8005724:	2b20      	cmp	r3, #32
 8005726:	d139      	bne.n	800579c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800572e:	2b01      	cmp	r3, #1
 8005730:	d101      	bne.n	8005736 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005732:	2302      	movs	r3, #2
 8005734:	e033      	b.n	800579e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2201      	movs	r2, #1
 800573a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2224      	movs	r2, #36	; 0x24
 8005742:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	681a      	ldr	r2, [r3, #0]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f022 0201 	bic.w	r2, r2, #1
 8005754:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005764:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	021b      	lsls	r3, r3, #8
 800576a:	68fa      	ldr	r2, [r7, #12]
 800576c:	4313      	orrs	r3, r2
 800576e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	68fa      	ldr	r2, [r7, #12]
 8005776:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	681a      	ldr	r2, [r3, #0]
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f042 0201 	orr.w	r2, r2, #1
 8005786:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2220      	movs	r2, #32
 800578c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2200      	movs	r2, #0
 8005794:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005798:	2300      	movs	r3, #0
 800579a:	e000      	b.n	800579e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800579c:	2302      	movs	r3, #2
  }
}
 800579e:	4618      	mov	r0, r3
 80057a0:	3714      	adds	r7, #20
 80057a2:	46bd      	mov	sp, r7
 80057a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a8:	4770      	bx	lr
	...

080057ac <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80057ac:	b480      	push	{r7}
 80057ae:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80057b0:	4b04      	ldr	r3, [pc, #16]	; (80057c4 <HAL_PWREx_GetVoltageRange+0x18>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80057b8:	4618      	mov	r0, r3
 80057ba:	46bd      	mov	sp, r7
 80057bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c0:	4770      	bx	lr
 80057c2:	bf00      	nop
 80057c4:	40007000 	.word	0x40007000

080057c8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80057c8:	b480      	push	{r7}
 80057ca:	b085      	sub	sp, #20
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057d6:	d130      	bne.n	800583a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80057d8:	4b23      	ldr	r3, [pc, #140]	; (8005868 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80057e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057e4:	d038      	beq.n	8005858 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80057e6:	4b20      	ldr	r3, [pc, #128]	; (8005868 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80057ee:	4a1e      	ldr	r2, [pc, #120]	; (8005868 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80057f0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80057f4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80057f6:	4b1d      	ldr	r3, [pc, #116]	; (800586c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	2232      	movs	r2, #50	; 0x32
 80057fc:	fb02 f303 	mul.w	r3, r2, r3
 8005800:	4a1b      	ldr	r2, [pc, #108]	; (8005870 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8005802:	fba2 2303 	umull	r2, r3, r2, r3
 8005806:	0c9b      	lsrs	r3, r3, #18
 8005808:	3301      	adds	r3, #1
 800580a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800580c:	e002      	b.n	8005814 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	3b01      	subs	r3, #1
 8005812:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005814:	4b14      	ldr	r3, [pc, #80]	; (8005868 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005816:	695b      	ldr	r3, [r3, #20]
 8005818:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800581c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005820:	d102      	bne.n	8005828 <HAL_PWREx_ControlVoltageScaling+0x60>
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d1f2      	bne.n	800580e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005828:	4b0f      	ldr	r3, [pc, #60]	; (8005868 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800582a:	695b      	ldr	r3, [r3, #20]
 800582c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005830:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005834:	d110      	bne.n	8005858 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8005836:	2303      	movs	r3, #3
 8005838:	e00f      	b.n	800585a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800583a:	4b0b      	ldr	r3, [pc, #44]	; (8005868 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005842:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005846:	d007      	beq.n	8005858 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005848:	4b07      	ldr	r3, [pc, #28]	; (8005868 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005850:	4a05      	ldr	r2, [pc, #20]	; (8005868 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005852:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005856:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005858:	2300      	movs	r3, #0
}
 800585a:	4618      	mov	r0, r3
 800585c:	3714      	adds	r7, #20
 800585e:	46bd      	mov	sp, r7
 8005860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005864:	4770      	bx	lr
 8005866:	bf00      	nop
 8005868:	40007000 	.word	0x40007000
 800586c:	20000068 	.word	0x20000068
 8005870:	431bde83 	.word	0x431bde83

08005874 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b08a      	sub	sp, #40	; 0x28
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d102      	bne.n	8005888 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005882:	2301      	movs	r3, #1
 8005884:	f000 bc56 	b.w	8006134 <HAL_RCC_OscConfig+0x8c0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005888:	4ba1      	ldr	r3, [pc, #644]	; (8005b10 <HAL_RCC_OscConfig+0x29c>)
 800588a:	689b      	ldr	r3, [r3, #8]
 800588c:	f003 030c 	and.w	r3, r3, #12
 8005890:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005892:	4b9f      	ldr	r3, [pc, #636]	; (8005b10 <HAL_RCC_OscConfig+0x29c>)
 8005894:	68db      	ldr	r3, [r3, #12]
 8005896:	f003 0303 	and.w	r3, r3, #3
 800589a:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f003 0310 	and.w	r3, r3, #16
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	f000 80e6 	beq.w	8005a76 <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80058aa:	6a3b      	ldr	r3, [r7, #32]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d007      	beq.n	80058c0 <HAL_RCC_OscConfig+0x4c>
 80058b0:	6a3b      	ldr	r3, [r7, #32]
 80058b2:	2b0c      	cmp	r3, #12
 80058b4:	f040 808d 	bne.w	80059d2 <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80058b8:	69fb      	ldr	r3, [r7, #28]
 80058ba:	2b01      	cmp	r3, #1
 80058bc:	f040 8089 	bne.w	80059d2 <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80058c0:	4b93      	ldr	r3, [pc, #588]	; (8005b10 <HAL_RCC_OscConfig+0x29c>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f003 0302 	and.w	r3, r3, #2
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d006      	beq.n	80058da <HAL_RCC_OscConfig+0x66>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	69db      	ldr	r3, [r3, #28]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d102      	bne.n	80058da <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 80058d4:	2301      	movs	r3, #1
 80058d6:	f000 bc2d 	b.w	8006134 <HAL_RCC_OscConfig+0x8c0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80058de:	4b8c      	ldr	r3, [pc, #560]	; (8005b10 <HAL_RCC_OscConfig+0x29c>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f003 0308 	and.w	r3, r3, #8
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d004      	beq.n	80058f4 <HAL_RCC_OscConfig+0x80>
 80058ea:	4b89      	ldr	r3, [pc, #548]	; (8005b10 <HAL_RCC_OscConfig+0x29c>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80058f2:	e005      	b.n	8005900 <HAL_RCC_OscConfig+0x8c>
 80058f4:	4b86      	ldr	r3, [pc, #536]	; (8005b10 <HAL_RCC_OscConfig+0x29c>)
 80058f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80058fa:	091b      	lsrs	r3, r3, #4
 80058fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005900:	4293      	cmp	r3, r2
 8005902:	d224      	bcs.n	800594e <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005908:	4618      	mov	r0, r3
 800590a:	f000 fdbf 	bl	800648c <RCC_SetFlashLatencyFromMSIRange>
 800590e:	4603      	mov	r3, r0
 8005910:	2b00      	cmp	r3, #0
 8005912:	d002      	beq.n	800591a <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8005914:	2301      	movs	r3, #1
 8005916:	f000 bc0d 	b.w	8006134 <HAL_RCC_OscConfig+0x8c0>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800591a:	4b7d      	ldr	r3, [pc, #500]	; (8005b10 <HAL_RCC_OscConfig+0x29c>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4a7c      	ldr	r2, [pc, #496]	; (8005b10 <HAL_RCC_OscConfig+0x29c>)
 8005920:	f043 0308 	orr.w	r3, r3, #8
 8005924:	6013      	str	r3, [r2, #0]
 8005926:	4b7a      	ldr	r3, [pc, #488]	; (8005b10 <HAL_RCC_OscConfig+0x29c>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005932:	4977      	ldr	r1, [pc, #476]	; (8005b10 <HAL_RCC_OscConfig+0x29c>)
 8005934:	4313      	orrs	r3, r2
 8005936:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005938:	4b75      	ldr	r3, [pc, #468]	; (8005b10 <HAL_RCC_OscConfig+0x29c>)
 800593a:	685b      	ldr	r3, [r3, #4]
 800593c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6a1b      	ldr	r3, [r3, #32]
 8005944:	021b      	lsls	r3, r3, #8
 8005946:	4972      	ldr	r1, [pc, #456]	; (8005b10 <HAL_RCC_OscConfig+0x29c>)
 8005948:	4313      	orrs	r3, r2
 800594a:	604b      	str	r3, [r1, #4]
 800594c:	e025      	b.n	800599a <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800594e:	4b70      	ldr	r3, [pc, #448]	; (8005b10 <HAL_RCC_OscConfig+0x29c>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4a6f      	ldr	r2, [pc, #444]	; (8005b10 <HAL_RCC_OscConfig+0x29c>)
 8005954:	f043 0308 	orr.w	r3, r3, #8
 8005958:	6013      	str	r3, [r2, #0]
 800595a:	4b6d      	ldr	r3, [pc, #436]	; (8005b10 <HAL_RCC_OscConfig+0x29c>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005966:	496a      	ldr	r1, [pc, #424]	; (8005b10 <HAL_RCC_OscConfig+0x29c>)
 8005968:	4313      	orrs	r3, r2
 800596a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800596c:	4b68      	ldr	r3, [pc, #416]	; (8005b10 <HAL_RCC_OscConfig+0x29c>)
 800596e:	685b      	ldr	r3, [r3, #4]
 8005970:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6a1b      	ldr	r3, [r3, #32]
 8005978:	021b      	lsls	r3, r3, #8
 800597a:	4965      	ldr	r1, [pc, #404]	; (8005b10 <HAL_RCC_OscConfig+0x29c>)
 800597c:	4313      	orrs	r3, r2
 800597e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005980:	6a3b      	ldr	r3, [r7, #32]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d109      	bne.n	800599a <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800598a:	4618      	mov	r0, r3
 800598c:	f000 fd7e 	bl	800648c <RCC_SetFlashLatencyFromMSIRange>
 8005990:	4603      	mov	r3, r0
 8005992:	2b00      	cmp	r3, #0
 8005994:	d001      	beq.n	800599a <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8005996:	2301      	movs	r3, #1
 8005998:	e3cc      	b.n	8006134 <HAL_RCC_OscConfig+0x8c0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800599a:	f000 fcb3 	bl	8006304 <HAL_RCC_GetSysClockFreq>
 800599e:	4602      	mov	r2, r0
 80059a0:	4b5b      	ldr	r3, [pc, #364]	; (8005b10 <HAL_RCC_OscConfig+0x29c>)
 80059a2:	689b      	ldr	r3, [r3, #8]
 80059a4:	091b      	lsrs	r3, r3, #4
 80059a6:	f003 030f 	and.w	r3, r3, #15
 80059aa:	495a      	ldr	r1, [pc, #360]	; (8005b14 <HAL_RCC_OscConfig+0x2a0>)
 80059ac:	5ccb      	ldrb	r3, [r1, r3]
 80059ae:	f003 031f 	and.w	r3, r3, #31
 80059b2:	fa22 f303 	lsr.w	r3, r2, r3
 80059b6:	4a58      	ldr	r2, [pc, #352]	; (8005b18 <HAL_RCC_OscConfig+0x2a4>)
 80059b8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80059ba:	4b58      	ldr	r3, [pc, #352]	; (8005b1c <HAL_RCC_OscConfig+0x2a8>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	4618      	mov	r0, r3
 80059c0:	f7fe ff3a 	bl	8004838 <HAL_InitTick>
 80059c4:	4603      	mov	r3, r0
 80059c6:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 80059c8:	7dfb      	ldrb	r3, [r7, #23]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d052      	beq.n	8005a74 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 80059ce:	7dfb      	ldrb	r3, [r7, #23]
 80059d0:	e3b0      	b.n	8006134 <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	69db      	ldr	r3, [r3, #28]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d032      	beq.n	8005a40 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80059da:	4b4d      	ldr	r3, [pc, #308]	; (8005b10 <HAL_RCC_OscConfig+0x29c>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	4a4c      	ldr	r2, [pc, #304]	; (8005b10 <HAL_RCC_OscConfig+0x29c>)
 80059e0:	f043 0301 	orr.w	r3, r3, #1
 80059e4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80059e6:	f7fe ff77 	bl	80048d8 <HAL_GetTick>
 80059ea:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80059ec:	e008      	b.n	8005a00 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80059ee:	f7fe ff73 	bl	80048d8 <HAL_GetTick>
 80059f2:	4602      	mov	r2, r0
 80059f4:	69bb      	ldr	r3, [r7, #24]
 80059f6:	1ad3      	subs	r3, r2, r3
 80059f8:	2b02      	cmp	r3, #2
 80059fa:	d901      	bls.n	8005a00 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 80059fc:	2303      	movs	r3, #3
 80059fe:	e399      	b.n	8006134 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005a00:	4b43      	ldr	r3, [pc, #268]	; (8005b10 <HAL_RCC_OscConfig+0x29c>)
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f003 0302 	and.w	r3, r3, #2
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d0f0      	beq.n	80059ee <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005a0c:	4b40      	ldr	r3, [pc, #256]	; (8005b10 <HAL_RCC_OscConfig+0x29c>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4a3f      	ldr	r2, [pc, #252]	; (8005b10 <HAL_RCC_OscConfig+0x29c>)
 8005a12:	f043 0308 	orr.w	r3, r3, #8
 8005a16:	6013      	str	r3, [r2, #0]
 8005a18:	4b3d      	ldr	r3, [pc, #244]	; (8005b10 <HAL_RCC_OscConfig+0x29c>)
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a24:	493a      	ldr	r1, [pc, #232]	; (8005b10 <HAL_RCC_OscConfig+0x29c>)
 8005a26:	4313      	orrs	r3, r2
 8005a28:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005a2a:	4b39      	ldr	r3, [pc, #228]	; (8005b10 <HAL_RCC_OscConfig+0x29c>)
 8005a2c:	685b      	ldr	r3, [r3, #4]
 8005a2e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6a1b      	ldr	r3, [r3, #32]
 8005a36:	021b      	lsls	r3, r3, #8
 8005a38:	4935      	ldr	r1, [pc, #212]	; (8005b10 <HAL_RCC_OscConfig+0x29c>)
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	604b      	str	r3, [r1, #4]
 8005a3e:	e01a      	b.n	8005a76 <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005a40:	4b33      	ldr	r3, [pc, #204]	; (8005b10 <HAL_RCC_OscConfig+0x29c>)
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4a32      	ldr	r2, [pc, #200]	; (8005b10 <HAL_RCC_OscConfig+0x29c>)
 8005a46:	f023 0301 	bic.w	r3, r3, #1
 8005a4a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005a4c:	f7fe ff44 	bl	80048d8 <HAL_GetTick>
 8005a50:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005a52:	e008      	b.n	8005a66 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005a54:	f7fe ff40 	bl	80048d8 <HAL_GetTick>
 8005a58:	4602      	mov	r2, r0
 8005a5a:	69bb      	ldr	r3, [r7, #24]
 8005a5c:	1ad3      	subs	r3, r2, r3
 8005a5e:	2b02      	cmp	r3, #2
 8005a60:	d901      	bls.n	8005a66 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005a62:	2303      	movs	r3, #3
 8005a64:	e366      	b.n	8006134 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005a66:	4b2a      	ldr	r3, [pc, #168]	; (8005b10 <HAL_RCC_OscConfig+0x29c>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f003 0302 	and.w	r3, r3, #2
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d1f0      	bne.n	8005a54 <HAL_RCC_OscConfig+0x1e0>
 8005a72:	e000      	b.n	8005a76 <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005a74:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f003 0301 	and.w	r3, r3, #1
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d073      	beq.n	8005b6a <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005a82:	6a3b      	ldr	r3, [r7, #32]
 8005a84:	2b08      	cmp	r3, #8
 8005a86:	d005      	beq.n	8005a94 <HAL_RCC_OscConfig+0x220>
 8005a88:	6a3b      	ldr	r3, [r7, #32]
 8005a8a:	2b0c      	cmp	r3, #12
 8005a8c:	d10e      	bne.n	8005aac <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005a8e:	69fb      	ldr	r3, [r7, #28]
 8005a90:	2b03      	cmp	r3, #3
 8005a92:	d10b      	bne.n	8005aac <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a94:	4b1e      	ldr	r3, [pc, #120]	; (8005b10 <HAL_RCC_OscConfig+0x29c>)
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d063      	beq.n	8005b68 <HAL_RCC_OscConfig+0x2f4>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d15f      	bne.n	8005b68 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	e343      	b.n	8006134 <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	685b      	ldr	r3, [r3, #4]
 8005ab0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ab4:	d106      	bne.n	8005ac4 <HAL_RCC_OscConfig+0x250>
 8005ab6:	4b16      	ldr	r3, [pc, #88]	; (8005b10 <HAL_RCC_OscConfig+0x29c>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4a15      	ldr	r2, [pc, #84]	; (8005b10 <HAL_RCC_OscConfig+0x29c>)
 8005abc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ac0:	6013      	str	r3, [r2, #0]
 8005ac2:	e01d      	b.n	8005b00 <HAL_RCC_OscConfig+0x28c>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	685b      	ldr	r3, [r3, #4]
 8005ac8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005acc:	d10c      	bne.n	8005ae8 <HAL_RCC_OscConfig+0x274>
 8005ace:	4b10      	ldr	r3, [pc, #64]	; (8005b10 <HAL_RCC_OscConfig+0x29c>)
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	4a0f      	ldr	r2, [pc, #60]	; (8005b10 <HAL_RCC_OscConfig+0x29c>)
 8005ad4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005ad8:	6013      	str	r3, [r2, #0]
 8005ada:	4b0d      	ldr	r3, [pc, #52]	; (8005b10 <HAL_RCC_OscConfig+0x29c>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4a0c      	ldr	r2, [pc, #48]	; (8005b10 <HAL_RCC_OscConfig+0x29c>)
 8005ae0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ae4:	6013      	str	r3, [r2, #0]
 8005ae6:	e00b      	b.n	8005b00 <HAL_RCC_OscConfig+0x28c>
 8005ae8:	4b09      	ldr	r3, [pc, #36]	; (8005b10 <HAL_RCC_OscConfig+0x29c>)
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	4a08      	ldr	r2, [pc, #32]	; (8005b10 <HAL_RCC_OscConfig+0x29c>)
 8005aee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005af2:	6013      	str	r3, [r2, #0]
 8005af4:	4b06      	ldr	r3, [pc, #24]	; (8005b10 <HAL_RCC_OscConfig+0x29c>)
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	4a05      	ldr	r2, [pc, #20]	; (8005b10 <HAL_RCC_OscConfig+0x29c>)
 8005afa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005afe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	685b      	ldr	r3, [r3, #4]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d01b      	beq.n	8005b40 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b08:	f7fe fee6 	bl	80048d8 <HAL_GetTick>
 8005b0c:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005b0e:	e010      	b.n	8005b32 <HAL_RCC_OscConfig+0x2be>
 8005b10:	40021000 	.word	0x40021000
 8005b14:	0800c1f8 	.word	0x0800c1f8
 8005b18:	20000068 	.word	0x20000068
 8005b1c:	20000094 	.word	0x20000094
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005b20:	f7fe feda 	bl	80048d8 <HAL_GetTick>
 8005b24:	4602      	mov	r2, r0
 8005b26:	69bb      	ldr	r3, [r7, #24]
 8005b28:	1ad3      	subs	r3, r2, r3
 8005b2a:	2b64      	cmp	r3, #100	; 0x64
 8005b2c:	d901      	bls.n	8005b32 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8005b2e:	2303      	movs	r3, #3
 8005b30:	e300      	b.n	8006134 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005b32:	4ba0      	ldr	r3, [pc, #640]	; (8005db4 <HAL_RCC_OscConfig+0x540>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d0f0      	beq.n	8005b20 <HAL_RCC_OscConfig+0x2ac>
 8005b3e:	e014      	b.n	8005b6a <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b40:	f7fe feca 	bl	80048d8 <HAL_GetTick>
 8005b44:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005b46:	e008      	b.n	8005b5a <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005b48:	f7fe fec6 	bl	80048d8 <HAL_GetTick>
 8005b4c:	4602      	mov	r2, r0
 8005b4e:	69bb      	ldr	r3, [r7, #24]
 8005b50:	1ad3      	subs	r3, r2, r3
 8005b52:	2b64      	cmp	r3, #100	; 0x64
 8005b54:	d901      	bls.n	8005b5a <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8005b56:	2303      	movs	r3, #3
 8005b58:	e2ec      	b.n	8006134 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005b5a:	4b96      	ldr	r3, [pc, #600]	; (8005db4 <HAL_RCC_OscConfig+0x540>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d1f0      	bne.n	8005b48 <HAL_RCC_OscConfig+0x2d4>
 8005b66:	e000      	b.n	8005b6a <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f003 0302 	and.w	r3, r3, #2
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d060      	beq.n	8005c38 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005b76:	6a3b      	ldr	r3, [r7, #32]
 8005b78:	2b04      	cmp	r3, #4
 8005b7a:	d005      	beq.n	8005b88 <HAL_RCC_OscConfig+0x314>
 8005b7c:	6a3b      	ldr	r3, [r7, #32]
 8005b7e:	2b0c      	cmp	r3, #12
 8005b80:	d119      	bne.n	8005bb6 <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005b82:	69fb      	ldr	r3, [r7, #28]
 8005b84:	2b02      	cmp	r3, #2
 8005b86:	d116      	bne.n	8005bb6 <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005b88:	4b8a      	ldr	r3, [pc, #552]	; (8005db4 <HAL_RCC_OscConfig+0x540>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d005      	beq.n	8005ba0 <HAL_RCC_OscConfig+0x32c>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	68db      	ldr	r3, [r3, #12]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d101      	bne.n	8005ba0 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	e2c9      	b.n	8006134 <HAL_RCC_OscConfig+0x8c0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ba0:	4b84      	ldr	r3, [pc, #528]	; (8005db4 <HAL_RCC_OscConfig+0x540>)
 8005ba2:	685b      	ldr	r3, [r3, #4]
 8005ba4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	691b      	ldr	r3, [r3, #16]
 8005bac:	061b      	lsls	r3, r3, #24
 8005bae:	4981      	ldr	r1, [pc, #516]	; (8005db4 <HAL_RCC_OscConfig+0x540>)
 8005bb0:	4313      	orrs	r3, r2
 8005bb2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005bb4:	e040      	b.n	8005c38 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	68db      	ldr	r3, [r3, #12]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d023      	beq.n	8005c06 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005bbe:	4b7d      	ldr	r3, [pc, #500]	; (8005db4 <HAL_RCC_OscConfig+0x540>)
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	4a7c      	ldr	r2, [pc, #496]	; (8005db4 <HAL_RCC_OscConfig+0x540>)
 8005bc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005bc8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bca:	f7fe fe85 	bl	80048d8 <HAL_GetTick>
 8005bce:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005bd0:	e008      	b.n	8005be4 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005bd2:	f7fe fe81 	bl	80048d8 <HAL_GetTick>
 8005bd6:	4602      	mov	r2, r0
 8005bd8:	69bb      	ldr	r3, [r7, #24]
 8005bda:	1ad3      	subs	r3, r2, r3
 8005bdc:	2b02      	cmp	r3, #2
 8005bde:	d901      	bls.n	8005be4 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8005be0:	2303      	movs	r3, #3
 8005be2:	e2a7      	b.n	8006134 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005be4:	4b73      	ldr	r3, [pc, #460]	; (8005db4 <HAL_RCC_OscConfig+0x540>)
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d0f0      	beq.n	8005bd2 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005bf0:	4b70      	ldr	r3, [pc, #448]	; (8005db4 <HAL_RCC_OscConfig+0x540>)
 8005bf2:	685b      	ldr	r3, [r3, #4]
 8005bf4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	691b      	ldr	r3, [r3, #16]
 8005bfc:	061b      	lsls	r3, r3, #24
 8005bfe:	496d      	ldr	r1, [pc, #436]	; (8005db4 <HAL_RCC_OscConfig+0x540>)
 8005c00:	4313      	orrs	r3, r2
 8005c02:	604b      	str	r3, [r1, #4]
 8005c04:	e018      	b.n	8005c38 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005c06:	4b6b      	ldr	r3, [pc, #428]	; (8005db4 <HAL_RCC_OscConfig+0x540>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	4a6a      	ldr	r2, [pc, #424]	; (8005db4 <HAL_RCC_OscConfig+0x540>)
 8005c0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c12:	f7fe fe61 	bl	80048d8 <HAL_GetTick>
 8005c16:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005c18:	e008      	b.n	8005c2c <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005c1a:	f7fe fe5d 	bl	80048d8 <HAL_GetTick>
 8005c1e:	4602      	mov	r2, r0
 8005c20:	69bb      	ldr	r3, [r7, #24]
 8005c22:	1ad3      	subs	r3, r2, r3
 8005c24:	2b02      	cmp	r3, #2
 8005c26:	d901      	bls.n	8005c2c <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8005c28:	2303      	movs	r3, #3
 8005c2a:	e283      	b.n	8006134 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005c2c:	4b61      	ldr	r3, [pc, #388]	; (8005db4 <HAL_RCC_OscConfig+0x540>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d1f0      	bne.n	8005c1a <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f003 0308 	and.w	r3, r3, #8
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d07f      	beq.n	8005d44 <HAL_RCC_OscConfig+0x4d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	695b      	ldr	r3, [r3, #20]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d05f      	beq.n	8005d0c <HAL_RCC_OscConfig+0x498>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8005c4c:	4b59      	ldr	r3, [pc, #356]	; (8005db4 <HAL_RCC_OscConfig+0x540>)
 8005c4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c52:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	699a      	ldr	r2, [r3, #24]
 8005c58:	693b      	ldr	r3, [r7, #16]
 8005c5a:	f003 0310 	and.w	r3, r3, #16
 8005c5e:	429a      	cmp	r2, r3
 8005c60:	d037      	beq.n	8005cd2 <HAL_RCC_OscConfig+0x45e>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8005c62:	693b      	ldr	r3, [r7, #16]
 8005c64:	f003 0302 	and.w	r3, r3, #2
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d006      	beq.n	8005c7a <HAL_RCC_OscConfig+0x406>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8005c6c:	693b      	ldr	r3, [r7, #16]
 8005c6e:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d101      	bne.n	8005c7a <HAL_RCC_OscConfig+0x406>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8005c76:	2301      	movs	r3, #1
 8005c78:	e25c      	b.n	8006134 <HAL_RCC_OscConfig+0x8c0>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8005c7a:	693b      	ldr	r3, [r7, #16]
 8005c7c:	f003 0301 	and.w	r3, r3, #1
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d01b      	beq.n	8005cbc <HAL_RCC_OscConfig+0x448>
        {
          __HAL_RCC_LSI_DISABLE();
 8005c84:	4b4b      	ldr	r3, [pc, #300]	; (8005db4 <HAL_RCC_OscConfig+0x540>)
 8005c86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c8a:	4a4a      	ldr	r2, [pc, #296]	; (8005db4 <HAL_RCC_OscConfig+0x540>)
 8005c8c:	f023 0301 	bic.w	r3, r3, #1
 8005c90:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005c94:	f7fe fe20 	bl	80048d8 <HAL_GetTick>
 8005c98:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005c9a:	e008      	b.n	8005cae <HAL_RCC_OscConfig+0x43a>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005c9c:	f7fe fe1c 	bl	80048d8 <HAL_GetTick>
 8005ca0:	4602      	mov	r2, r0
 8005ca2:	69bb      	ldr	r3, [r7, #24]
 8005ca4:	1ad3      	subs	r3, r2, r3
 8005ca6:	2b11      	cmp	r3, #17
 8005ca8:	d901      	bls.n	8005cae <HAL_RCC_OscConfig+0x43a>
            {
              return HAL_TIMEOUT;
 8005caa:	2303      	movs	r3, #3
 8005cac:	e242      	b.n	8006134 <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005cae:	4b41      	ldr	r3, [pc, #260]	; (8005db4 <HAL_RCC_OscConfig+0x540>)
 8005cb0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005cb4:	f003 0302 	and.w	r3, r3, #2
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d1ef      	bne.n	8005c9c <HAL_RCC_OscConfig+0x428>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8005cbc:	4b3d      	ldr	r3, [pc, #244]	; (8005db4 <HAL_RCC_OscConfig+0x540>)
 8005cbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005cc2:	f023 0210 	bic.w	r2, r3, #16
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	699b      	ldr	r3, [r3, #24]
 8005cca:	493a      	ldr	r1, [pc, #232]	; (8005db4 <HAL_RCC_OscConfig+0x540>)
 8005ccc:	4313      	orrs	r3, r2
 8005cce:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005cd2:	4b38      	ldr	r3, [pc, #224]	; (8005db4 <HAL_RCC_OscConfig+0x540>)
 8005cd4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005cd8:	4a36      	ldr	r2, [pc, #216]	; (8005db4 <HAL_RCC_OscConfig+0x540>)
 8005cda:	f043 0301 	orr.w	r3, r3, #1
 8005cde:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ce2:	f7fe fdf9 	bl	80048d8 <HAL_GetTick>
 8005ce6:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005ce8:	e008      	b.n	8005cfc <HAL_RCC_OscConfig+0x488>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005cea:	f7fe fdf5 	bl	80048d8 <HAL_GetTick>
 8005cee:	4602      	mov	r2, r0
 8005cf0:	69bb      	ldr	r3, [r7, #24]
 8005cf2:	1ad3      	subs	r3, r2, r3
 8005cf4:	2b11      	cmp	r3, #17
 8005cf6:	d901      	bls.n	8005cfc <HAL_RCC_OscConfig+0x488>
        {
          return HAL_TIMEOUT;
 8005cf8:	2303      	movs	r3, #3
 8005cfa:	e21b      	b.n	8006134 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005cfc:	4b2d      	ldr	r3, [pc, #180]	; (8005db4 <HAL_RCC_OscConfig+0x540>)
 8005cfe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d02:	f003 0302 	and.w	r3, r3, #2
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d0ef      	beq.n	8005cea <HAL_RCC_OscConfig+0x476>
 8005d0a:	e01b      	b.n	8005d44 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005d0c:	4b29      	ldr	r3, [pc, #164]	; (8005db4 <HAL_RCC_OscConfig+0x540>)
 8005d0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d12:	4a28      	ldr	r2, [pc, #160]	; (8005db4 <HAL_RCC_OscConfig+0x540>)
 8005d14:	f023 0301 	bic.w	r3, r3, #1
 8005d18:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d1c:	f7fe fddc 	bl	80048d8 <HAL_GetTick>
 8005d20:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005d22:	e008      	b.n	8005d36 <HAL_RCC_OscConfig+0x4c2>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005d24:	f7fe fdd8 	bl	80048d8 <HAL_GetTick>
 8005d28:	4602      	mov	r2, r0
 8005d2a:	69bb      	ldr	r3, [r7, #24]
 8005d2c:	1ad3      	subs	r3, r2, r3
 8005d2e:	2b11      	cmp	r3, #17
 8005d30:	d901      	bls.n	8005d36 <HAL_RCC_OscConfig+0x4c2>
        {
          return HAL_TIMEOUT;
 8005d32:	2303      	movs	r3, #3
 8005d34:	e1fe      	b.n	8006134 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005d36:	4b1f      	ldr	r3, [pc, #124]	; (8005db4 <HAL_RCC_OscConfig+0x540>)
 8005d38:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d3c:	f003 0302 	and.w	r3, r3, #2
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d1ef      	bne.n	8005d24 <HAL_RCC_OscConfig+0x4b0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f003 0304 	and.w	r3, r3, #4
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	f000 80c1 	beq.w	8005ed4 <HAL_RCC_OscConfig+0x660>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005d52:	2300      	movs	r3, #0
 8005d54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005d58:	4b16      	ldr	r3, [pc, #88]	; (8005db4 <HAL_RCC_OscConfig+0x540>)
 8005d5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d10e      	bne.n	8005d82 <HAL_RCC_OscConfig+0x50e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d64:	4b13      	ldr	r3, [pc, #76]	; (8005db4 <HAL_RCC_OscConfig+0x540>)
 8005d66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d68:	4a12      	ldr	r2, [pc, #72]	; (8005db4 <HAL_RCC_OscConfig+0x540>)
 8005d6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d6e:	6593      	str	r3, [r2, #88]	; 0x58
 8005d70:	4b10      	ldr	r3, [pc, #64]	; (8005db4 <HAL_RCC_OscConfig+0x540>)
 8005d72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d78:	60fb      	str	r3, [r7, #12]
 8005d7a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005d82:	4b0d      	ldr	r3, [pc, #52]	; (8005db8 <HAL_RCC_OscConfig+0x544>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d11c      	bne.n	8005dc8 <HAL_RCC_OscConfig+0x554>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005d8e:	4b0a      	ldr	r3, [pc, #40]	; (8005db8 <HAL_RCC_OscConfig+0x544>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	4a09      	ldr	r2, [pc, #36]	; (8005db8 <HAL_RCC_OscConfig+0x544>)
 8005d94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005d9a:	f7fe fd9d 	bl	80048d8 <HAL_GetTick>
 8005d9e:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005da0:	e00c      	b.n	8005dbc <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005da2:	f7fe fd99 	bl	80048d8 <HAL_GetTick>
 8005da6:	4602      	mov	r2, r0
 8005da8:	69bb      	ldr	r3, [r7, #24]
 8005daa:	1ad3      	subs	r3, r2, r3
 8005dac:	2b02      	cmp	r3, #2
 8005dae:	d905      	bls.n	8005dbc <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8005db0:	2303      	movs	r3, #3
 8005db2:	e1bf      	b.n	8006134 <HAL_RCC_OscConfig+0x8c0>
 8005db4:	40021000 	.word	0x40021000
 8005db8:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005dbc:	4bb1      	ldr	r3, [pc, #708]	; (8006084 <HAL_RCC_OscConfig+0x810>)
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d0ec      	beq.n	8005da2 <HAL_RCC_OscConfig+0x52e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	689b      	ldr	r3, [r3, #8]
 8005dcc:	f003 0301 	and.w	r3, r3, #1
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d02c      	beq.n	8005e2e <HAL_RCC_OscConfig+0x5ba>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8005dd4:	4bac      	ldr	r3, [pc, #688]	; (8006088 <HAL_RCC_OscConfig+0x814>)
 8005dd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dda:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	689b      	ldr	r3, [r3, #8]
 8005de2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005de6:	49a8      	ldr	r1, [pc, #672]	; (8006088 <HAL_RCC_OscConfig+0x814>)
 8005de8:	4313      	orrs	r3, r2
 8005dea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	689b      	ldr	r3, [r3, #8]
 8005df2:	f003 0304 	and.w	r3, r3, #4
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d010      	beq.n	8005e1c <HAL_RCC_OscConfig+0x5a8>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005dfa:	4ba3      	ldr	r3, [pc, #652]	; (8006088 <HAL_RCC_OscConfig+0x814>)
 8005dfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e00:	4aa1      	ldr	r2, [pc, #644]	; (8006088 <HAL_RCC_OscConfig+0x814>)
 8005e02:	f043 0304 	orr.w	r3, r3, #4
 8005e06:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005e0a:	4b9f      	ldr	r3, [pc, #636]	; (8006088 <HAL_RCC_OscConfig+0x814>)
 8005e0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e10:	4a9d      	ldr	r2, [pc, #628]	; (8006088 <HAL_RCC_OscConfig+0x814>)
 8005e12:	f043 0301 	orr.w	r3, r3, #1
 8005e16:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005e1a:	e018      	b.n	8005e4e <HAL_RCC_OscConfig+0x5da>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005e1c:	4b9a      	ldr	r3, [pc, #616]	; (8006088 <HAL_RCC_OscConfig+0x814>)
 8005e1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e22:	4a99      	ldr	r2, [pc, #612]	; (8006088 <HAL_RCC_OscConfig+0x814>)
 8005e24:	f043 0301 	orr.w	r3, r3, #1
 8005e28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005e2c:	e00f      	b.n	8005e4e <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005e2e:	4b96      	ldr	r3, [pc, #600]	; (8006088 <HAL_RCC_OscConfig+0x814>)
 8005e30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e34:	4a94      	ldr	r2, [pc, #592]	; (8006088 <HAL_RCC_OscConfig+0x814>)
 8005e36:	f023 0301 	bic.w	r3, r3, #1
 8005e3a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005e3e:	4b92      	ldr	r3, [pc, #584]	; (8006088 <HAL_RCC_OscConfig+0x814>)
 8005e40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e44:	4a90      	ldr	r2, [pc, #576]	; (8006088 <HAL_RCC_OscConfig+0x814>)
 8005e46:	f023 0304 	bic.w	r3, r3, #4
 8005e4a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	689b      	ldr	r3, [r3, #8]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d016      	beq.n	8005e84 <HAL_RCC_OscConfig+0x610>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e56:	f7fe fd3f 	bl	80048d8 <HAL_GetTick>
 8005e5a:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005e5c:	e00a      	b.n	8005e74 <HAL_RCC_OscConfig+0x600>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e5e:	f7fe fd3b 	bl	80048d8 <HAL_GetTick>
 8005e62:	4602      	mov	r2, r0
 8005e64:	69bb      	ldr	r3, [r7, #24]
 8005e66:	1ad3      	subs	r3, r2, r3
 8005e68:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d901      	bls.n	8005e74 <HAL_RCC_OscConfig+0x600>
        {
          return HAL_TIMEOUT;
 8005e70:	2303      	movs	r3, #3
 8005e72:	e15f      	b.n	8006134 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005e74:	4b84      	ldr	r3, [pc, #528]	; (8006088 <HAL_RCC_OscConfig+0x814>)
 8005e76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e7a:	f003 0302 	and.w	r3, r3, #2
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d0ed      	beq.n	8005e5e <HAL_RCC_OscConfig+0x5ea>
 8005e82:	e01d      	b.n	8005ec0 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e84:	f7fe fd28 	bl	80048d8 <HAL_GetTick>
 8005e88:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005e8a:	e00a      	b.n	8005ea2 <HAL_RCC_OscConfig+0x62e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e8c:	f7fe fd24 	bl	80048d8 <HAL_GetTick>
 8005e90:	4602      	mov	r2, r0
 8005e92:	69bb      	ldr	r3, [r7, #24]
 8005e94:	1ad3      	subs	r3, r2, r3
 8005e96:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d901      	bls.n	8005ea2 <HAL_RCC_OscConfig+0x62e>
        {
          return HAL_TIMEOUT;
 8005e9e:	2303      	movs	r3, #3
 8005ea0:	e148      	b.n	8006134 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005ea2:	4b79      	ldr	r3, [pc, #484]	; (8006088 <HAL_RCC_OscConfig+0x814>)
 8005ea4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ea8:	f003 0302 	and.w	r3, r3, #2
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d1ed      	bne.n	8005e8c <HAL_RCC_OscConfig+0x618>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8005eb0:	4b75      	ldr	r3, [pc, #468]	; (8006088 <HAL_RCC_OscConfig+0x814>)
 8005eb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005eb6:	4a74      	ldr	r2, [pc, #464]	; (8006088 <HAL_RCC_OscConfig+0x814>)
 8005eb8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ebc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005ec0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005ec4:	2b01      	cmp	r3, #1
 8005ec6:	d105      	bne.n	8005ed4 <HAL_RCC_OscConfig+0x660>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ec8:	4b6f      	ldr	r3, [pc, #444]	; (8006088 <HAL_RCC_OscConfig+0x814>)
 8005eca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ecc:	4a6e      	ldr	r2, [pc, #440]	; (8006088 <HAL_RCC_OscConfig+0x814>)
 8005ece:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ed2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f003 0320 	and.w	r3, r3, #32
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d03c      	beq.n	8005f5a <HAL_RCC_OscConfig+0x6e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d01c      	beq.n	8005f22 <HAL_RCC_OscConfig+0x6ae>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005ee8:	4b67      	ldr	r3, [pc, #412]	; (8006088 <HAL_RCC_OscConfig+0x814>)
 8005eea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005eee:	4a66      	ldr	r2, [pc, #408]	; (8006088 <HAL_RCC_OscConfig+0x814>)
 8005ef0:	f043 0301 	orr.w	r3, r3, #1
 8005ef4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ef8:	f7fe fcee 	bl	80048d8 <HAL_GetTick>
 8005efc:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005efe:	e008      	b.n	8005f12 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005f00:	f7fe fcea 	bl	80048d8 <HAL_GetTick>
 8005f04:	4602      	mov	r2, r0
 8005f06:	69bb      	ldr	r3, [r7, #24]
 8005f08:	1ad3      	subs	r3, r2, r3
 8005f0a:	2b02      	cmp	r3, #2
 8005f0c:	d901      	bls.n	8005f12 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8005f0e:	2303      	movs	r3, #3
 8005f10:	e110      	b.n	8006134 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005f12:	4b5d      	ldr	r3, [pc, #372]	; (8006088 <HAL_RCC_OscConfig+0x814>)
 8005f14:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005f18:	f003 0302 	and.w	r3, r3, #2
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d0ef      	beq.n	8005f00 <HAL_RCC_OscConfig+0x68c>
 8005f20:	e01b      	b.n	8005f5a <HAL_RCC_OscConfig+0x6e6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005f22:	4b59      	ldr	r3, [pc, #356]	; (8006088 <HAL_RCC_OscConfig+0x814>)
 8005f24:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005f28:	4a57      	ldr	r2, [pc, #348]	; (8006088 <HAL_RCC_OscConfig+0x814>)
 8005f2a:	f023 0301 	bic.w	r3, r3, #1
 8005f2e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f32:	f7fe fcd1 	bl	80048d8 <HAL_GetTick>
 8005f36:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005f38:	e008      	b.n	8005f4c <HAL_RCC_OscConfig+0x6d8>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005f3a:	f7fe fccd 	bl	80048d8 <HAL_GetTick>
 8005f3e:	4602      	mov	r2, r0
 8005f40:	69bb      	ldr	r3, [r7, #24]
 8005f42:	1ad3      	subs	r3, r2, r3
 8005f44:	2b02      	cmp	r3, #2
 8005f46:	d901      	bls.n	8005f4c <HAL_RCC_OscConfig+0x6d8>
        {
          return HAL_TIMEOUT;
 8005f48:	2303      	movs	r3, #3
 8005f4a:	e0f3      	b.n	8006134 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005f4c:	4b4e      	ldr	r3, [pc, #312]	; (8006088 <HAL_RCC_OscConfig+0x814>)
 8005f4e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005f52:	f003 0302 	and.w	r3, r3, #2
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d1ef      	bne.n	8005f3a <HAL_RCC_OscConfig+0x6c6>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	f000 80e7 	beq.w	8006132 <HAL_RCC_OscConfig+0x8be>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f68:	2b02      	cmp	r3, #2
 8005f6a:	f040 80b7 	bne.w	80060dc <HAL_RCC_OscConfig+0x868>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005f6e:	4b46      	ldr	r3, [pc, #280]	; (8006088 <HAL_RCC_OscConfig+0x814>)
 8005f70:	68db      	ldr	r3, [r3, #12]
 8005f72:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f74:	69fb      	ldr	r3, [r7, #28]
 8005f76:	f003 0203 	and.w	r2, r3, #3
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f7e:	429a      	cmp	r2, r3
 8005f80:	d124      	bne.n	8005fcc <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005f82:	69fb      	ldr	r3, [r7, #28]
 8005f84:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f8c:	3b01      	subs	r3, #1
 8005f8e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f90:	429a      	cmp	r2, r3
 8005f92:	d11b      	bne.n	8005fcc <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005f94:	69fb      	ldr	r3, [r7, #28]
 8005f96:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f9e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005fa0:	429a      	cmp	r2, r3
 8005fa2:	d113      	bne.n	8005fcc <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005fa4:	69fb      	ldr	r3, [r7, #28]
 8005fa6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fae:	085b      	lsrs	r3, r3, #1
 8005fb0:	3b01      	subs	r3, #1
 8005fb2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005fb4:	429a      	cmp	r2, r3
 8005fb6:	d109      	bne.n	8005fcc <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005fb8:	69fb      	ldr	r3, [r7, #28]
 8005fba:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fc2:	085b      	lsrs	r3, r3, #1
 8005fc4:	3b01      	subs	r3, #1
 8005fc6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005fc8:	429a      	cmp	r2, r3
 8005fca:	d061      	beq.n	8006090 <HAL_RCC_OscConfig+0x81c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005fcc:	6a3b      	ldr	r3, [r7, #32]
 8005fce:	2b0c      	cmp	r3, #12
 8005fd0:	d056      	beq.n	8006080 <HAL_RCC_OscConfig+0x80c>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005fd2:	4b2d      	ldr	r3, [pc, #180]	; (8006088 <HAL_RCC_OscConfig+0x814>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	4a2c      	ldr	r2, [pc, #176]	; (8006088 <HAL_RCC_OscConfig+0x814>)
 8005fd8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005fdc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005fde:	f7fe fc7b 	bl	80048d8 <HAL_GetTick>
 8005fe2:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005fe4:	e008      	b.n	8005ff8 <HAL_RCC_OscConfig+0x784>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005fe6:	f7fe fc77 	bl	80048d8 <HAL_GetTick>
 8005fea:	4602      	mov	r2, r0
 8005fec:	69bb      	ldr	r3, [r7, #24]
 8005fee:	1ad3      	subs	r3, r2, r3
 8005ff0:	2b02      	cmp	r3, #2
 8005ff2:	d901      	bls.n	8005ff8 <HAL_RCC_OscConfig+0x784>
              {
                return HAL_TIMEOUT;
 8005ff4:	2303      	movs	r3, #3
 8005ff6:	e09d      	b.n	8006134 <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005ff8:	4b23      	ldr	r3, [pc, #140]	; (8006088 <HAL_RCC_OscConfig+0x814>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006000:	2b00      	cmp	r3, #0
 8006002:	d1f0      	bne.n	8005fe6 <HAL_RCC_OscConfig+0x772>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006004:	4b20      	ldr	r3, [pc, #128]	; (8006088 <HAL_RCC_OscConfig+0x814>)
 8006006:	68da      	ldr	r2, [r3, #12]
 8006008:	4b20      	ldr	r3, [pc, #128]	; (800608c <HAL_RCC_OscConfig+0x818>)
 800600a:	4013      	ands	r3, r2
 800600c:	687a      	ldr	r2, [r7, #4]
 800600e:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8006010:	687a      	ldr	r2, [r7, #4]
 8006012:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006014:	3a01      	subs	r2, #1
 8006016:	0112      	lsls	r2, r2, #4
 8006018:	4311      	orrs	r1, r2
 800601a:	687a      	ldr	r2, [r7, #4]
 800601c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800601e:	0212      	lsls	r2, r2, #8
 8006020:	4311      	orrs	r1, r2
 8006022:	687a      	ldr	r2, [r7, #4]
 8006024:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006026:	0852      	lsrs	r2, r2, #1
 8006028:	3a01      	subs	r2, #1
 800602a:	0552      	lsls	r2, r2, #21
 800602c:	4311      	orrs	r1, r2
 800602e:	687a      	ldr	r2, [r7, #4]
 8006030:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006032:	0852      	lsrs	r2, r2, #1
 8006034:	3a01      	subs	r2, #1
 8006036:	0652      	lsls	r2, r2, #25
 8006038:	430a      	orrs	r2, r1
 800603a:	4913      	ldr	r1, [pc, #76]	; (8006088 <HAL_RCC_OscConfig+0x814>)
 800603c:	4313      	orrs	r3, r2
 800603e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006040:	4b11      	ldr	r3, [pc, #68]	; (8006088 <HAL_RCC_OscConfig+0x814>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4a10      	ldr	r2, [pc, #64]	; (8006088 <HAL_RCC_OscConfig+0x814>)
 8006046:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800604a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800604c:	4b0e      	ldr	r3, [pc, #56]	; (8006088 <HAL_RCC_OscConfig+0x814>)
 800604e:	68db      	ldr	r3, [r3, #12]
 8006050:	4a0d      	ldr	r2, [pc, #52]	; (8006088 <HAL_RCC_OscConfig+0x814>)
 8006052:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006056:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006058:	f7fe fc3e 	bl	80048d8 <HAL_GetTick>
 800605c:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800605e:	e008      	b.n	8006072 <HAL_RCC_OscConfig+0x7fe>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006060:	f7fe fc3a 	bl	80048d8 <HAL_GetTick>
 8006064:	4602      	mov	r2, r0
 8006066:	69bb      	ldr	r3, [r7, #24]
 8006068:	1ad3      	subs	r3, r2, r3
 800606a:	2b02      	cmp	r3, #2
 800606c:	d901      	bls.n	8006072 <HAL_RCC_OscConfig+0x7fe>
              {
                return HAL_TIMEOUT;
 800606e:	2303      	movs	r3, #3
 8006070:	e060      	b.n	8006134 <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006072:	4b05      	ldr	r3, [pc, #20]	; (8006088 <HAL_RCC_OscConfig+0x814>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800607a:	2b00      	cmp	r3, #0
 800607c:	d0f0      	beq.n	8006060 <HAL_RCC_OscConfig+0x7ec>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800607e:	e058      	b.n	8006132 <HAL_RCC_OscConfig+0x8be>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006080:	2301      	movs	r3, #1
 8006082:	e057      	b.n	8006134 <HAL_RCC_OscConfig+0x8c0>
 8006084:	40007000 	.word	0x40007000
 8006088:	40021000 	.word	0x40021000
 800608c:	f99f808c 	.word	0xf99f808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006090:	4b2a      	ldr	r3, [pc, #168]	; (800613c <HAL_RCC_OscConfig+0x8c8>)
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006098:	2b00      	cmp	r3, #0
 800609a:	d14a      	bne.n	8006132 <HAL_RCC_OscConfig+0x8be>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800609c:	4b27      	ldr	r3, [pc, #156]	; (800613c <HAL_RCC_OscConfig+0x8c8>)
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4a26      	ldr	r2, [pc, #152]	; (800613c <HAL_RCC_OscConfig+0x8c8>)
 80060a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80060a6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80060a8:	4b24      	ldr	r3, [pc, #144]	; (800613c <HAL_RCC_OscConfig+0x8c8>)
 80060aa:	68db      	ldr	r3, [r3, #12]
 80060ac:	4a23      	ldr	r2, [pc, #140]	; (800613c <HAL_RCC_OscConfig+0x8c8>)
 80060ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80060b2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80060b4:	f7fe fc10 	bl	80048d8 <HAL_GetTick>
 80060b8:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80060ba:	e008      	b.n	80060ce <HAL_RCC_OscConfig+0x85a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80060bc:	f7fe fc0c 	bl	80048d8 <HAL_GetTick>
 80060c0:	4602      	mov	r2, r0
 80060c2:	69bb      	ldr	r3, [r7, #24]
 80060c4:	1ad3      	subs	r3, r2, r3
 80060c6:	2b02      	cmp	r3, #2
 80060c8:	d901      	bls.n	80060ce <HAL_RCC_OscConfig+0x85a>
            {
              return HAL_TIMEOUT;
 80060ca:	2303      	movs	r3, #3
 80060cc:	e032      	b.n	8006134 <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80060ce:	4b1b      	ldr	r3, [pc, #108]	; (800613c <HAL_RCC_OscConfig+0x8c8>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d0f0      	beq.n	80060bc <HAL_RCC_OscConfig+0x848>
 80060da:	e02a      	b.n	8006132 <HAL_RCC_OscConfig+0x8be>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80060dc:	6a3b      	ldr	r3, [r7, #32]
 80060de:	2b0c      	cmp	r3, #12
 80060e0:	d025      	beq.n	800612e <HAL_RCC_OscConfig+0x8ba>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060e2:	4b16      	ldr	r3, [pc, #88]	; (800613c <HAL_RCC_OscConfig+0x8c8>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	4a15      	ldr	r2, [pc, #84]	; (800613c <HAL_RCC_OscConfig+0x8c8>)
 80060e8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80060ec:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80060ee:	4b13      	ldr	r3, [pc, #76]	; (800613c <HAL_RCC_OscConfig+0x8c8>)
 80060f0:	68db      	ldr	r3, [r3, #12]
 80060f2:	4a12      	ldr	r2, [pc, #72]	; (800613c <HAL_RCC_OscConfig+0x8c8>)
 80060f4:	f023 0303 	bic.w	r3, r3, #3
 80060f8:	60d3      	str	r3, [r2, #12]
#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 80060fa:	4b10      	ldr	r3, [pc, #64]	; (800613c <HAL_RCC_OscConfig+0x8c8>)
 80060fc:	68db      	ldr	r3, [r3, #12]
 80060fe:	4a0f      	ldr	r2, [pc, #60]	; (800613c <HAL_RCC_OscConfig+0x8c8>)
 8006100:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8006104:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006106:	f7fe fbe7 	bl	80048d8 <HAL_GetTick>
 800610a:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800610c:	e008      	b.n	8006120 <HAL_RCC_OscConfig+0x8ac>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800610e:	f7fe fbe3 	bl	80048d8 <HAL_GetTick>
 8006112:	4602      	mov	r2, r0
 8006114:	69bb      	ldr	r3, [r7, #24]
 8006116:	1ad3      	subs	r3, r2, r3
 8006118:	2b02      	cmp	r3, #2
 800611a:	d901      	bls.n	8006120 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 800611c:	2303      	movs	r3, #3
 800611e:	e009      	b.n	8006134 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006120:	4b06      	ldr	r3, [pc, #24]	; (800613c <HAL_RCC_OscConfig+0x8c8>)
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006128:	2b00      	cmp	r3, #0
 800612a:	d1f0      	bne.n	800610e <HAL_RCC_OscConfig+0x89a>
 800612c:	e001      	b.n	8006132 <HAL_RCC_OscConfig+0x8be>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800612e:	2301      	movs	r3, #1
 8006130:	e000      	b.n	8006134 <HAL_RCC_OscConfig+0x8c0>
      }
    }
  }
  return HAL_OK;
 8006132:	2300      	movs	r3, #0
}
 8006134:	4618      	mov	r0, r3
 8006136:	3728      	adds	r7, #40	; 0x28
 8006138:	46bd      	mov	sp, r7
 800613a:	bd80      	pop	{r7, pc}
 800613c:	40021000 	.word	0x40021000

08006140 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b084      	sub	sp, #16
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
 8006148:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d101      	bne.n	8006154 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006150:	2301      	movs	r3, #1
 8006152:	e0c8      	b.n	80062e6 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006154:	4b66      	ldr	r3, [pc, #408]	; (80062f0 <HAL_RCC_ClockConfig+0x1b0>)
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f003 0307 	and.w	r3, r3, #7
 800615c:	683a      	ldr	r2, [r7, #0]
 800615e:	429a      	cmp	r2, r3
 8006160:	d910      	bls.n	8006184 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006162:	4b63      	ldr	r3, [pc, #396]	; (80062f0 <HAL_RCC_ClockConfig+0x1b0>)
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f023 0207 	bic.w	r2, r3, #7
 800616a:	4961      	ldr	r1, [pc, #388]	; (80062f0 <HAL_RCC_ClockConfig+0x1b0>)
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	4313      	orrs	r3, r2
 8006170:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006172:	4b5f      	ldr	r3, [pc, #380]	; (80062f0 <HAL_RCC_ClockConfig+0x1b0>)
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f003 0307 	and.w	r3, r3, #7
 800617a:	683a      	ldr	r2, [r7, #0]
 800617c:	429a      	cmp	r2, r3
 800617e:	d001      	beq.n	8006184 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006180:	2301      	movs	r3, #1
 8006182:	e0b0      	b.n	80062e6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f003 0301 	and.w	r3, r3, #1
 800618c:	2b00      	cmp	r3, #0
 800618e:	d04c      	beq.n	800622a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	685b      	ldr	r3, [r3, #4]
 8006194:	2b03      	cmp	r3, #3
 8006196:	d107      	bne.n	80061a8 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006198:	4b56      	ldr	r3, [pc, #344]	; (80062f4 <HAL_RCC_ClockConfig+0x1b4>)
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d121      	bne.n	80061e8 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80061a4:	2301      	movs	r3, #1
 80061a6:	e09e      	b.n	80062e6 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	685b      	ldr	r3, [r3, #4]
 80061ac:	2b02      	cmp	r3, #2
 80061ae:	d107      	bne.n	80061c0 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80061b0:	4b50      	ldr	r3, [pc, #320]	; (80062f4 <HAL_RCC_ClockConfig+0x1b4>)
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d115      	bne.n	80061e8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80061bc:	2301      	movs	r3, #1
 80061be:	e092      	b.n	80062e6 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	685b      	ldr	r3, [r3, #4]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d107      	bne.n	80061d8 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80061c8:	4b4a      	ldr	r3, [pc, #296]	; (80062f4 <HAL_RCC_ClockConfig+0x1b4>)
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f003 0302 	and.w	r3, r3, #2
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d109      	bne.n	80061e8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80061d4:	2301      	movs	r3, #1
 80061d6:	e086      	b.n	80062e6 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80061d8:	4b46      	ldr	r3, [pc, #280]	; (80062f4 <HAL_RCC_ClockConfig+0x1b4>)
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d101      	bne.n	80061e8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80061e4:	2301      	movs	r3, #1
 80061e6:	e07e      	b.n	80062e6 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80061e8:	4b42      	ldr	r3, [pc, #264]	; (80062f4 <HAL_RCC_ClockConfig+0x1b4>)
 80061ea:	689b      	ldr	r3, [r3, #8]
 80061ec:	f023 0203 	bic.w	r2, r3, #3
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	685b      	ldr	r3, [r3, #4]
 80061f4:	493f      	ldr	r1, [pc, #252]	; (80062f4 <HAL_RCC_ClockConfig+0x1b4>)
 80061f6:	4313      	orrs	r3, r2
 80061f8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80061fa:	f7fe fb6d 	bl	80048d8 <HAL_GetTick>
 80061fe:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006200:	e00a      	b.n	8006218 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006202:	f7fe fb69 	bl	80048d8 <HAL_GetTick>
 8006206:	4602      	mov	r2, r0
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	1ad3      	subs	r3, r2, r3
 800620c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006210:	4293      	cmp	r3, r2
 8006212:	d901      	bls.n	8006218 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8006214:	2303      	movs	r3, #3
 8006216:	e066      	b.n	80062e6 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006218:	4b36      	ldr	r3, [pc, #216]	; (80062f4 <HAL_RCC_ClockConfig+0x1b4>)
 800621a:	689b      	ldr	r3, [r3, #8]
 800621c:	f003 020c 	and.w	r2, r3, #12
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	685b      	ldr	r3, [r3, #4]
 8006224:	009b      	lsls	r3, r3, #2
 8006226:	429a      	cmp	r2, r3
 8006228:	d1eb      	bne.n	8006202 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f003 0302 	and.w	r3, r3, #2
 8006232:	2b00      	cmp	r3, #0
 8006234:	d008      	beq.n	8006248 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006236:	4b2f      	ldr	r3, [pc, #188]	; (80062f4 <HAL_RCC_ClockConfig+0x1b4>)
 8006238:	689b      	ldr	r3, [r3, #8]
 800623a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	689b      	ldr	r3, [r3, #8]
 8006242:	492c      	ldr	r1, [pc, #176]	; (80062f4 <HAL_RCC_ClockConfig+0x1b4>)
 8006244:	4313      	orrs	r3, r2
 8006246:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006248:	4b29      	ldr	r3, [pc, #164]	; (80062f0 <HAL_RCC_ClockConfig+0x1b0>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f003 0307 	and.w	r3, r3, #7
 8006250:	683a      	ldr	r2, [r7, #0]
 8006252:	429a      	cmp	r2, r3
 8006254:	d210      	bcs.n	8006278 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006256:	4b26      	ldr	r3, [pc, #152]	; (80062f0 <HAL_RCC_ClockConfig+0x1b0>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f023 0207 	bic.w	r2, r3, #7
 800625e:	4924      	ldr	r1, [pc, #144]	; (80062f0 <HAL_RCC_ClockConfig+0x1b0>)
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	4313      	orrs	r3, r2
 8006264:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006266:	4b22      	ldr	r3, [pc, #136]	; (80062f0 <HAL_RCC_ClockConfig+0x1b0>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f003 0307 	and.w	r3, r3, #7
 800626e:	683a      	ldr	r2, [r7, #0]
 8006270:	429a      	cmp	r2, r3
 8006272:	d001      	beq.n	8006278 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8006274:	2301      	movs	r3, #1
 8006276:	e036      	b.n	80062e6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f003 0304 	and.w	r3, r3, #4
 8006280:	2b00      	cmp	r3, #0
 8006282:	d008      	beq.n	8006296 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006284:	4b1b      	ldr	r3, [pc, #108]	; (80062f4 <HAL_RCC_ClockConfig+0x1b4>)
 8006286:	689b      	ldr	r3, [r3, #8]
 8006288:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	68db      	ldr	r3, [r3, #12]
 8006290:	4918      	ldr	r1, [pc, #96]	; (80062f4 <HAL_RCC_ClockConfig+0x1b4>)
 8006292:	4313      	orrs	r3, r2
 8006294:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f003 0308 	and.w	r3, r3, #8
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d009      	beq.n	80062b6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80062a2:	4b14      	ldr	r3, [pc, #80]	; (80062f4 <HAL_RCC_ClockConfig+0x1b4>)
 80062a4:	689b      	ldr	r3, [r3, #8]
 80062a6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	691b      	ldr	r3, [r3, #16]
 80062ae:	00db      	lsls	r3, r3, #3
 80062b0:	4910      	ldr	r1, [pc, #64]	; (80062f4 <HAL_RCC_ClockConfig+0x1b4>)
 80062b2:	4313      	orrs	r3, r2
 80062b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80062b6:	f000 f825 	bl	8006304 <HAL_RCC_GetSysClockFreq>
 80062ba:	4602      	mov	r2, r0
 80062bc:	4b0d      	ldr	r3, [pc, #52]	; (80062f4 <HAL_RCC_ClockConfig+0x1b4>)
 80062be:	689b      	ldr	r3, [r3, #8]
 80062c0:	091b      	lsrs	r3, r3, #4
 80062c2:	f003 030f 	and.w	r3, r3, #15
 80062c6:	490c      	ldr	r1, [pc, #48]	; (80062f8 <HAL_RCC_ClockConfig+0x1b8>)
 80062c8:	5ccb      	ldrb	r3, [r1, r3]
 80062ca:	f003 031f 	and.w	r3, r3, #31
 80062ce:	fa22 f303 	lsr.w	r3, r2, r3
 80062d2:	4a0a      	ldr	r2, [pc, #40]	; (80062fc <HAL_RCC_ClockConfig+0x1bc>)
 80062d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80062d6:	4b0a      	ldr	r3, [pc, #40]	; (8006300 <HAL_RCC_ClockConfig+0x1c0>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	4618      	mov	r0, r3
 80062dc:	f7fe faac 	bl	8004838 <HAL_InitTick>
 80062e0:	4603      	mov	r3, r0
 80062e2:	72fb      	strb	r3, [r7, #11]

  return status;
 80062e4:	7afb      	ldrb	r3, [r7, #11]
}
 80062e6:	4618      	mov	r0, r3
 80062e8:	3710      	adds	r7, #16
 80062ea:	46bd      	mov	sp, r7
 80062ec:	bd80      	pop	{r7, pc}
 80062ee:	bf00      	nop
 80062f0:	40022000 	.word	0x40022000
 80062f4:	40021000 	.word	0x40021000
 80062f8:	0800c1f8 	.word	0x0800c1f8
 80062fc:	20000068 	.word	0x20000068
 8006300:	20000094 	.word	0x20000094

08006304 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006304:	b480      	push	{r7}
 8006306:	b089      	sub	sp, #36	; 0x24
 8006308:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800630a:	2300      	movs	r3, #0
 800630c:	61fb      	str	r3, [r7, #28]
 800630e:	2300      	movs	r3, #0
 8006310:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006312:	4b3e      	ldr	r3, [pc, #248]	; (800640c <HAL_RCC_GetSysClockFreq+0x108>)
 8006314:	689b      	ldr	r3, [r3, #8]
 8006316:	f003 030c 	and.w	r3, r3, #12
 800631a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800631c:	4b3b      	ldr	r3, [pc, #236]	; (800640c <HAL_RCC_GetSysClockFreq+0x108>)
 800631e:	68db      	ldr	r3, [r3, #12]
 8006320:	f003 0303 	and.w	r3, r3, #3
 8006324:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006326:	693b      	ldr	r3, [r7, #16]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d005      	beq.n	8006338 <HAL_RCC_GetSysClockFreq+0x34>
 800632c:	693b      	ldr	r3, [r7, #16]
 800632e:	2b0c      	cmp	r3, #12
 8006330:	d121      	bne.n	8006376 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	2b01      	cmp	r3, #1
 8006336:	d11e      	bne.n	8006376 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006338:	4b34      	ldr	r3, [pc, #208]	; (800640c <HAL_RCC_GetSysClockFreq+0x108>)
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f003 0308 	and.w	r3, r3, #8
 8006340:	2b00      	cmp	r3, #0
 8006342:	d107      	bne.n	8006354 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006344:	4b31      	ldr	r3, [pc, #196]	; (800640c <HAL_RCC_GetSysClockFreq+0x108>)
 8006346:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800634a:	0a1b      	lsrs	r3, r3, #8
 800634c:	f003 030f 	and.w	r3, r3, #15
 8006350:	61fb      	str	r3, [r7, #28]
 8006352:	e005      	b.n	8006360 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006354:	4b2d      	ldr	r3, [pc, #180]	; (800640c <HAL_RCC_GetSysClockFreq+0x108>)
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	091b      	lsrs	r3, r3, #4
 800635a:	f003 030f 	and.w	r3, r3, #15
 800635e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006360:	4a2b      	ldr	r2, [pc, #172]	; (8006410 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006362:	69fb      	ldr	r3, [r7, #28]
 8006364:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006368:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800636a:	693b      	ldr	r3, [r7, #16]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d10d      	bne.n	800638c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006370:	69fb      	ldr	r3, [r7, #28]
 8006372:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006374:	e00a      	b.n	800638c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8006376:	693b      	ldr	r3, [r7, #16]
 8006378:	2b04      	cmp	r3, #4
 800637a:	d102      	bne.n	8006382 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800637c:	4b25      	ldr	r3, [pc, #148]	; (8006414 <HAL_RCC_GetSysClockFreq+0x110>)
 800637e:	61bb      	str	r3, [r7, #24]
 8006380:	e004      	b.n	800638c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8006382:	693b      	ldr	r3, [r7, #16]
 8006384:	2b08      	cmp	r3, #8
 8006386:	d101      	bne.n	800638c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006388:	4b23      	ldr	r3, [pc, #140]	; (8006418 <HAL_RCC_GetSysClockFreq+0x114>)
 800638a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800638c:	693b      	ldr	r3, [r7, #16]
 800638e:	2b0c      	cmp	r3, #12
 8006390:	d134      	bne.n	80063fc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006392:	4b1e      	ldr	r3, [pc, #120]	; (800640c <HAL_RCC_GetSysClockFreq+0x108>)
 8006394:	68db      	ldr	r3, [r3, #12]
 8006396:	f003 0303 	and.w	r3, r3, #3
 800639a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800639c:	68bb      	ldr	r3, [r7, #8]
 800639e:	2b02      	cmp	r3, #2
 80063a0:	d003      	beq.n	80063aa <HAL_RCC_GetSysClockFreq+0xa6>
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	2b03      	cmp	r3, #3
 80063a6:	d003      	beq.n	80063b0 <HAL_RCC_GetSysClockFreq+0xac>
 80063a8:	e005      	b.n	80063b6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80063aa:	4b1a      	ldr	r3, [pc, #104]	; (8006414 <HAL_RCC_GetSysClockFreq+0x110>)
 80063ac:	617b      	str	r3, [r7, #20]
      break;
 80063ae:	e005      	b.n	80063bc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80063b0:	4b19      	ldr	r3, [pc, #100]	; (8006418 <HAL_RCC_GetSysClockFreq+0x114>)
 80063b2:	617b      	str	r3, [r7, #20]
      break;
 80063b4:	e002      	b.n	80063bc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80063b6:	69fb      	ldr	r3, [r7, #28]
 80063b8:	617b      	str	r3, [r7, #20]
      break;
 80063ba:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80063bc:	4b13      	ldr	r3, [pc, #76]	; (800640c <HAL_RCC_GetSysClockFreq+0x108>)
 80063be:	68db      	ldr	r3, [r3, #12]
 80063c0:	091b      	lsrs	r3, r3, #4
 80063c2:	f003 0307 	and.w	r3, r3, #7
 80063c6:	3301      	adds	r3, #1
 80063c8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80063ca:	4b10      	ldr	r3, [pc, #64]	; (800640c <HAL_RCC_GetSysClockFreq+0x108>)
 80063cc:	68db      	ldr	r3, [r3, #12]
 80063ce:	0a1b      	lsrs	r3, r3, #8
 80063d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80063d4:	697a      	ldr	r2, [r7, #20]
 80063d6:	fb02 f203 	mul.w	r2, r2, r3
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80063e0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80063e2:	4b0a      	ldr	r3, [pc, #40]	; (800640c <HAL_RCC_GetSysClockFreq+0x108>)
 80063e4:	68db      	ldr	r3, [r3, #12]
 80063e6:	0e5b      	lsrs	r3, r3, #25
 80063e8:	f003 0303 	and.w	r3, r3, #3
 80063ec:	3301      	adds	r3, #1
 80063ee:	005b      	lsls	r3, r3, #1
 80063f0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80063f2:	697a      	ldr	r2, [r7, #20]
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80063fa:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80063fc:	69bb      	ldr	r3, [r7, #24]
}
 80063fe:	4618      	mov	r0, r3
 8006400:	3724      	adds	r7, #36	; 0x24
 8006402:	46bd      	mov	sp, r7
 8006404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006408:	4770      	bx	lr
 800640a:	bf00      	nop
 800640c:	40021000 	.word	0x40021000
 8006410:	0800c210 	.word	0x0800c210
 8006414:	00f42400 	.word	0x00f42400
 8006418:	007a1200 	.word	0x007a1200

0800641c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800641c:	b480      	push	{r7}
 800641e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006420:	4b03      	ldr	r3, [pc, #12]	; (8006430 <HAL_RCC_GetHCLKFreq+0x14>)
 8006422:	681b      	ldr	r3, [r3, #0]
}
 8006424:	4618      	mov	r0, r3
 8006426:	46bd      	mov	sp, r7
 8006428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642c:	4770      	bx	lr
 800642e:	bf00      	nop
 8006430:	20000068 	.word	0x20000068

08006434 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006438:	f7ff fff0 	bl	800641c <HAL_RCC_GetHCLKFreq>
 800643c:	4602      	mov	r2, r0
 800643e:	4b06      	ldr	r3, [pc, #24]	; (8006458 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006440:	689b      	ldr	r3, [r3, #8]
 8006442:	0a1b      	lsrs	r3, r3, #8
 8006444:	f003 0307 	and.w	r3, r3, #7
 8006448:	4904      	ldr	r1, [pc, #16]	; (800645c <HAL_RCC_GetPCLK1Freq+0x28>)
 800644a:	5ccb      	ldrb	r3, [r1, r3]
 800644c:	f003 031f 	and.w	r3, r3, #31
 8006450:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006454:	4618      	mov	r0, r3
 8006456:	bd80      	pop	{r7, pc}
 8006458:	40021000 	.word	0x40021000
 800645c:	0800c208 	.word	0x0800c208

08006460 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006464:	f7ff ffda 	bl	800641c <HAL_RCC_GetHCLKFreq>
 8006468:	4602      	mov	r2, r0
 800646a:	4b06      	ldr	r3, [pc, #24]	; (8006484 <HAL_RCC_GetPCLK2Freq+0x24>)
 800646c:	689b      	ldr	r3, [r3, #8]
 800646e:	0adb      	lsrs	r3, r3, #11
 8006470:	f003 0307 	and.w	r3, r3, #7
 8006474:	4904      	ldr	r1, [pc, #16]	; (8006488 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006476:	5ccb      	ldrb	r3, [r1, r3]
 8006478:	f003 031f 	and.w	r3, r3, #31
 800647c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006480:	4618      	mov	r0, r3
 8006482:	bd80      	pop	{r7, pc}
 8006484:	40021000 	.word	0x40021000
 8006488:	0800c208 	.word	0x0800c208

0800648c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b086      	sub	sp, #24
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006494:	2300      	movs	r3, #0
 8006496:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006498:	4b2a      	ldr	r3, [pc, #168]	; (8006544 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800649a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800649c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d003      	beq.n	80064ac <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80064a4:	f7ff f982 	bl	80057ac <HAL_PWREx_GetVoltageRange>
 80064a8:	6178      	str	r0, [r7, #20]
 80064aa:	e014      	b.n	80064d6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80064ac:	4b25      	ldr	r3, [pc, #148]	; (8006544 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80064ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064b0:	4a24      	ldr	r2, [pc, #144]	; (8006544 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80064b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80064b6:	6593      	str	r3, [r2, #88]	; 0x58
 80064b8:	4b22      	ldr	r3, [pc, #136]	; (8006544 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80064ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064c0:	60fb      	str	r3, [r7, #12]
 80064c2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80064c4:	f7ff f972 	bl	80057ac <HAL_PWREx_GetVoltageRange>
 80064c8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80064ca:	4b1e      	ldr	r3, [pc, #120]	; (8006544 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80064cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064ce:	4a1d      	ldr	r2, [pc, #116]	; (8006544 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80064d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80064d4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80064d6:	697b      	ldr	r3, [r7, #20]
 80064d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064dc:	d10b      	bne.n	80064f6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2b80      	cmp	r3, #128	; 0x80
 80064e2:	d919      	bls.n	8006518 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2ba0      	cmp	r3, #160	; 0xa0
 80064e8:	d902      	bls.n	80064f0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80064ea:	2302      	movs	r3, #2
 80064ec:	613b      	str	r3, [r7, #16]
 80064ee:	e013      	b.n	8006518 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80064f0:	2301      	movs	r3, #1
 80064f2:	613b      	str	r3, [r7, #16]
 80064f4:	e010      	b.n	8006518 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	2b80      	cmp	r3, #128	; 0x80
 80064fa:	d902      	bls.n	8006502 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80064fc:	2303      	movs	r3, #3
 80064fe:	613b      	str	r3, [r7, #16]
 8006500:	e00a      	b.n	8006518 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2b80      	cmp	r3, #128	; 0x80
 8006506:	d102      	bne.n	800650e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006508:	2302      	movs	r3, #2
 800650a:	613b      	str	r3, [r7, #16]
 800650c:	e004      	b.n	8006518 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2b70      	cmp	r3, #112	; 0x70
 8006512:	d101      	bne.n	8006518 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006514:	2301      	movs	r3, #1
 8006516:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006518:	4b0b      	ldr	r3, [pc, #44]	; (8006548 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f023 0207 	bic.w	r2, r3, #7
 8006520:	4909      	ldr	r1, [pc, #36]	; (8006548 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006522:	693b      	ldr	r3, [r7, #16]
 8006524:	4313      	orrs	r3, r2
 8006526:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006528:	4b07      	ldr	r3, [pc, #28]	; (8006548 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f003 0307 	and.w	r3, r3, #7
 8006530:	693a      	ldr	r2, [r7, #16]
 8006532:	429a      	cmp	r2, r3
 8006534:	d001      	beq.n	800653a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8006536:	2301      	movs	r3, #1
 8006538:	e000      	b.n	800653c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800653a:	2300      	movs	r3, #0
}
 800653c:	4618      	mov	r0, r3
 800653e:	3718      	adds	r7, #24
 8006540:	46bd      	mov	sp, r7
 8006542:	bd80      	pop	{r7, pc}
 8006544:	40021000 	.word	0x40021000
 8006548:	40022000 	.word	0x40022000

0800654c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800654c:	b580      	push	{r7, lr}
 800654e:	b086      	sub	sp, #24
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006554:	2300      	movs	r3, #0
 8006556:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006558:	2300      	movs	r3, #0
 800655a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006564:	2b00      	cmp	r3, #0
 8006566:	f000 809e 	beq.w	80066a6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800656a:	2300      	movs	r3, #0
 800656c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800656e:	4b46      	ldr	r3, [pc, #280]	; (8006688 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8006570:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006572:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006576:	2b00      	cmp	r3, #0
 8006578:	d101      	bne.n	800657e <HAL_RCCEx_PeriphCLKConfig+0x32>
 800657a:	2301      	movs	r3, #1
 800657c:	e000      	b.n	8006580 <HAL_RCCEx_PeriphCLKConfig+0x34>
 800657e:	2300      	movs	r3, #0
 8006580:	2b00      	cmp	r3, #0
 8006582:	d00d      	beq.n	80065a0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006584:	4b40      	ldr	r3, [pc, #256]	; (8006688 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8006586:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006588:	4a3f      	ldr	r2, [pc, #252]	; (8006688 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800658a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800658e:	6593      	str	r3, [r2, #88]	; 0x58
 8006590:	4b3d      	ldr	r3, [pc, #244]	; (8006688 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8006592:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006594:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006598:	60bb      	str	r3, [r7, #8]
 800659a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800659c:	2301      	movs	r3, #1
 800659e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80065a0:	4b3a      	ldr	r3, [pc, #232]	; (800668c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4a39      	ldr	r2, [pc, #228]	; (800668c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80065a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80065aa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80065ac:	f7fe f994 	bl	80048d8 <HAL_GetTick>
 80065b0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80065b2:	e009      	b.n	80065c8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80065b4:	f7fe f990 	bl	80048d8 <HAL_GetTick>
 80065b8:	4602      	mov	r2, r0
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	1ad3      	subs	r3, r2, r3
 80065be:	2b02      	cmp	r3, #2
 80065c0:	d902      	bls.n	80065c8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 80065c2:	2303      	movs	r3, #3
 80065c4:	74fb      	strb	r3, [r7, #19]
        break;
 80065c6:	e005      	b.n	80065d4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80065c8:	4b30      	ldr	r3, [pc, #192]	; (800668c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d0ef      	beq.n	80065b4 <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 80065d4:	7cfb      	ldrb	r3, [r7, #19]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d15a      	bne.n	8006690 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80065da:	4b2b      	ldr	r3, [pc, #172]	; (8006688 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80065dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065e4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80065e6:	697b      	ldr	r3, [r7, #20]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d01e      	beq.n	800662a <HAL_RCCEx_PeriphCLKConfig+0xde>
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065f0:	697a      	ldr	r2, [r7, #20]
 80065f2:	429a      	cmp	r2, r3
 80065f4:	d019      	beq.n	800662a <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80065f6:	4b24      	ldr	r3, [pc, #144]	; (8006688 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80065f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006600:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006602:	4b21      	ldr	r3, [pc, #132]	; (8006688 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8006604:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006608:	4a1f      	ldr	r2, [pc, #124]	; (8006688 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800660a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800660e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006612:	4b1d      	ldr	r3, [pc, #116]	; (8006688 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8006614:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006618:	4a1b      	ldr	r2, [pc, #108]	; (8006688 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800661a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800661e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006622:	4a19      	ldr	r2, [pc, #100]	; (8006688 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8006624:	697b      	ldr	r3, [r7, #20]
 8006626:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800662a:	697b      	ldr	r3, [r7, #20]
 800662c:	f003 0301 	and.w	r3, r3, #1
 8006630:	2b00      	cmp	r3, #0
 8006632:	d016      	beq.n	8006662 <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006634:	f7fe f950 	bl	80048d8 <HAL_GetTick>
 8006638:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800663a:	e00b      	b.n	8006654 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800663c:	f7fe f94c 	bl	80048d8 <HAL_GetTick>
 8006640:	4602      	mov	r2, r0
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	1ad3      	subs	r3, r2, r3
 8006646:	f241 3288 	movw	r2, #5000	; 0x1388
 800664a:	4293      	cmp	r3, r2
 800664c:	d902      	bls.n	8006654 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 800664e:	2303      	movs	r3, #3
 8006650:	74fb      	strb	r3, [r7, #19]
            break;
 8006652:	e006      	b.n	8006662 <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006654:	4b0c      	ldr	r3, [pc, #48]	; (8006688 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8006656:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800665a:	f003 0302 	and.w	r3, r3, #2
 800665e:	2b00      	cmp	r3, #0
 8006660:	d0ec      	beq.n	800663c <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 8006662:	7cfb      	ldrb	r3, [r7, #19]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d10b      	bne.n	8006680 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006668:	4b07      	ldr	r3, [pc, #28]	; (8006688 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800666a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800666e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006676:	4904      	ldr	r1, [pc, #16]	; (8006688 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8006678:	4313      	orrs	r3, r2
 800667a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800667e:	e009      	b.n	8006694 <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006680:	7cfb      	ldrb	r3, [r7, #19]
 8006682:	74bb      	strb	r3, [r7, #18]
 8006684:	e006      	b.n	8006694 <HAL_RCCEx_PeriphCLKConfig+0x148>
 8006686:	bf00      	nop
 8006688:	40021000 	.word	0x40021000
 800668c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006690:	7cfb      	ldrb	r3, [r7, #19]
 8006692:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006694:	7c7b      	ldrb	r3, [r7, #17]
 8006696:	2b01      	cmp	r3, #1
 8006698:	d105      	bne.n	80066a6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800669a:	4b6e      	ldr	r3, [pc, #440]	; (8006854 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800669c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800669e:	4a6d      	ldr	r2, [pc, #436]	; (8006854 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80066a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80066a4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f003 0301 	and.w	r3, r3, #1
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d00a      	beq.n	80066c8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80066b2:	4b68      	ldr	r3, [pc, #416]	; (8006854 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80066b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066b8:	f023 0203 	bic.w	r2, r3, #3
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	685b      	ldr	r3, [r3, #4]
 80066c0:	4964      	ldr	r1, [pc, #400]	; (8006854 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80066c2:	4313      	orrs	r3, r2
 80066c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f003 0302 	and.w	r3, r3, #2
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d00a      	beq.n	80066ea <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80066d4:	4b5f      	ldr	r3, [pc, #380]	; (8006854 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80066d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066da:	f023 020c 	bic.w	r2, r3, #12
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	689b      	ldr	r3, [r3, #8]
 80066e2:	495c      	ldr	r1, [pc, #368]	; (8006854 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80066e4:	4313      	orrs	r3, r2
 80066e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f003 0304 	and.w	r3, r3, #4
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d00a      	beq.n	800670c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80066f6:	4b57      	ldr	r3, [pc, #348]	; (8006854 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80066f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066fc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	68db      	ldr	r3, [r3, #12]
 8006704:	4953      	ldr	r1, [pc, #332]	; (8006854 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006706:	4313      	orrs	r3, r2
 8006708:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f003 0320 	and.w	r3, r3, #32
 8006714:	2b00      	cmp	r3, #0
 8006716:	d00a      	beq.n	800672e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006718:	4b4e      	ldr	r3, [pc, #312]	; (8006854 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800671a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800671e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	691b      	ldr	r3, [r3, #16]
 8006726:	494b      	ldr	r1, [pc, #300]	; (8006854 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006728:	4313      	orrs	r3, r2
 800672a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006736:	2b00      	cmp	r3, #0
 8006738:	d00a      	beq.n	8006750 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800673a:	4b46      	ldr	r3, [pc, #280]	; (8006854 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800673c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006740:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	6a1b      	ldr	r3, [r3, #32]
 8006748:	4942      	ldr	r1, [pc, #264]	; (8006854 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800674a:	4313      	orrs	r3, r2
 800674c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006758:	2b00      	cmp	r3, #0
 800675a:	d00a      	beq.n	8006772 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800675c:	4b3d      	ldr	r3, [pc, #244]	; (8006854 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800675e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006762:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800676a:	493a      	ldr	r1, [pc, #232]	; (8006854 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800676c:	4313      	orrs	r3, r2
 800676e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800677a:	2b00      	cmp	r3, #0
 800677c:	d00a      	beq.n	8006794 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800677e:	4b35      	ldr	r3, [pc, #212]	; (8006854 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006780:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006784:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	695b      	ldr	r3, [r3, #20]
 800678c:	4931      	ldr	r1, [pc, #196]	; (8006854 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800678e:	4313      	orrs	r3, r2
 8006790:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800679c:	2b00      	cmp	r3, #0
 800679e:	d00a      	beq.n	80067b6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80067a0:	4b2c      	ldr	r3, [pc, #176]	; (8006854 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80067a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067a6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	699b      	ldr	r3, [r3, #24]
 80067ae:	4929      	ldr	r1, [pc, #164]	; (8006854 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80067b0:	4313      	orrs	r3, r2
 80067b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d00a      	beq.n	80067d8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80067c2:	4b24      	ldr	r3, [pc, #144]	; (8006854 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80067c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067c8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	69db      	ldr	r3, [r3, #28]
 80067d0:	4920      	ldr	r1, [pc, #128]	; (8006854 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80067d2:	4313      	orrs	r3, r2
 80067d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d015      	beq.n	8006810 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80067e4:	4b1b      	ldr	r3, [pc, #108]	; (8006854 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80067e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067ea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067f2:	4918      	ldr	r1, [pc, #96]	; (8006854 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80067f4:	4313      	orrs	r3, r2
 80067f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006802:	d105      	bne.n	8006810 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006804:	4b13      	ldr	r3, [pc, #76]	; (8006854 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006806:	68db      	ldr	r3, [r3, #12]
 8006808:	4a12      	ldr	r2, [pc, #72]	; (8006854 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800680a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800680e:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006818:	2b00      	cmp	r3, #0
 800681a:	d015      	beq.n	8006848 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800681c:	4b0d      	ldr	r3, [pc, #52]	; (8006854 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800681e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006822:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800682a:	490a      	ldr	r1, [pc, #40]	; (8006854 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800682c:	4313      	orrs	r3, r2
 800682e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006836:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800683a:	d105      	bne.n	8006848 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800683c:	4b05      	ldr	r3, [pc, #20]	; (8006854 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800683e:	68db      	ldr	r3, [r3, #12]
 8006840:	4a04      	ldr	r2, [pc, #16]	; (8006854 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006842:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006846:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006848:	7cbb      	ldrb	r3, [r7, #18]
}
 800684a:	4618      	mov	r0, r3
 800684c:	3718      	adds	r7, #24
 800684e:	46bd      	mov	sp, r7
 8006850:	bd80      	pop	{r7, pc}
 8006852:	bf00      	nop
 8006854:	40021000 	.word	0x40021000

08006858 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b084      	sub	sp, #16
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d101      	bne.n	800686a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006866:	2301      	movs	r3, #1
 8006868:	e095      	b.n	8006996 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800686e:	2b00      	cmp	r3, #0
 8006870:	d108      	bne.n	8006884 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	685b      	ldr	r3, [r3, #4]
 8006876:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800687a:	d009      	beq.n	8006890 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2200      	movs	r2, #0
 8006880:	61da      	str	r2, [r3, #28]
 8006882:	e005      	b.n	8006890 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2200      	movs	r2, #0
 8006888:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2200      	movs	r2, #0
 800688e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2200      	movs	r2, #0
 8006894:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800689c:	b2db      	uxtb	r3, r3
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d106      	bne.n	80068b0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2200      	movs	r2, #0
 80068a6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80068aa:	6878      	ldr	r0, [r7, #4]
 80068ac:	f7fd f8ee 	bl	8003a8c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2202      	movs	r2, #2
 80068b4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	681a      	ldr	r2, [r3, #0]
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80068c6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	68db      	ldr	r3, [r3, #12]
 80068cc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80068d0:	d902      	bls.n	80068d8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80068d2:	2300      	movs	r3, #0
 80068d4:	60fb      	str	r3, [r7, #12]
 80068d6:	e002      	b.n	80068de <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80068d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80068dc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	68db      	ldr	r3, [r3, #12]
 80068e2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80068e6:	d007      	beq.n	80068f8 <HAL_SPI_Init+0xa0>
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	68db      	ldr	r3, [r3, #12]
 80068ec:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80068f0:	d002      	beq.n	80068f8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2200      	movs	r2, #0
 80068f6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	685b      	ldr	r3, [r3, #4]
 80068fc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	689b      	ldr	r3, [r3, #8]
 8006904:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006908:	431a      	orrs	r2, r3
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	691b      	ldr	r3, [r3, #16]
 800690e:	f003 0302 	and.w	r3, r3, #2
 8006912:	431a      	orrs	r2, r3
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	695b      	ldr	r3, [r3, #20]
 8006918:	f003 0301 	and.w	r3, r3, #1
 800691c:	431a      	orrs	r2, r3
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	699b      	ldr	r3, [r3, #24]
 8006922:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006926:	431a      	orrs	r2, r3
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	69db      	ldr	r3, [r3, #28]
 800692c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006930:	431a      	orrs	r2, r3
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6a1b      	ldr	r3, [r3, #32]
 8006936:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800693a:	ea42 0103 	orr.w	r1, r2, r3
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006942:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	430a      	orrs	r2, r1
 800694c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	699b      	ldr	r3, [r3, #24]
 8006952:	0c1b      	lsrs	r3, r3, #16
 8006954:	f003 0204 	and.w	r2, r3, #4
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800695c:	f003 0310 	and.w	r3, r3, #16
 8006960:	431a      	orrs	r2, r3
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006966:	f003 0308 	and.w	r3, r3, #8
 800696a:	431a      	orrs	r2, r3
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	68db      	ldr	r3, [r3, #12]
 8006970:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006974:	ea42 0103 	orr.w	r1, r2, r3
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	430a      	orrs	r2, r1
 8006984:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2200      	movs	r2, #0
 800698a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2201      	movs	r2, #1
 8006990:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006994:	2300      	movs	r3, #0
}
 8006996:	4618      	mov	r0, r3
 8006998:	3710      	adds	r7, #16
 800699a:	46bd      	mov	sp, r7
 800699c:	bd80      	pop	{r7, pc}

0800699e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800699e:	b580      	push	{r7, lr}
 80069a0:	b088      	sub	sp, #32
 80069a2:	af00      	add	r7, sp, #0
 80069a4:	60f8      	str	r0, [r7, #12]
 80069a6:	60b9      	str	r1, [r7, #8]
 80069a8:	603b      	str	r3, [r7, #0]
 80069aa:	4613      	mov	r3, r2
 80069ac:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80069ae:	2300      	movs	r3, #0
 80069b0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80069b8:	2b01      	cmp	r3, #1
 80069ba:	d101      	bne.n	80069c0 <HAL_SPI_Transmit+0x22>
 80069bc:	2302      	movs	r3, #2
 80069be:	e158      	b.n	8006c72 <HAL_SPI_Transmit+0x2d4>
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	2201      	movs	r2, #1
 80069c4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80069c8:	f7fd ff86 	bl	80048d8 <HAL_GetTick>
 80069cc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80069ce:	88fb      	ldrh	r3, [r7, #6]
 80069d0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80069d8:	b2db      	uxtb	r3, r3
 80069da:	2b01      	cmp	r3, #1
 80069dc:	d002      	beq.n	80069e4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80069de:	2302      	movs	r3, #2
 80069e0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80069e2:	e13d      	b.n	8006c60 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d002      	beq.n	80069f0 <HAL_SPI_Transmit+0x52>
 80069ea:	88fb      	ldrh	r3, [r7, #6]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d102      	bne.n	80069f6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80069f0:	2301      	movs	r3, #1
 80069f2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80069f4:	e134      	b.n	8006c60 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	2203      	movs	r2, #3
 80069fa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	2200      	movs	r2, #0
 8006a02:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	68ba      	ldr	r2, [r7, #8]
 8006a08:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	88fa      	ldrh	r2, [r7, #6]
 8006a0e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	88fa      	ldrh	r2, [r7, #6]
 8006a14:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	2200      	movs	r2, #0
 8006a1a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	2200      	movs	r2, #0
 8006a28:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	2200      	movs	r2, #0
 8006a30:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	2200      	movs	r2, #0
 8006a36:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	689b      	ldr	r3, [r3, #8]
 8006a3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a40:	d10f      	bne.n	8006a62 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	681a      	ldr	r2, [r3, #0]
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a50:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	681a      	ldr	r2, [r3, #0]
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006a60:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a6c:	2b40      	cmp	r3, #64	; 0x40
 8006a6e:	d007      	beq.n	8006a80 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	681a      	ldr	r2, [r3, #0]
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006a7e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	68db      	ldr	r3, [r3, #12]
 8006a84:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006a88:	d94b      	bls.n	8006b22 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	685b      	ldr	r3, [r3, #4]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d002      	beq.n	8006a98 <HAL_SPI_Transmit+0xfa>
 8006a92:	8afb      	ldrh	r3, [r7, #22]
 8006a94:	2b01      	cmp	r3, #1
 8006a96:	d13e      	bne.n	8006b16 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a9c:	881a      	ldrh	r2, [r3, #0]
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aa8:	1c9a      	adds	r2, r3, #2
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ab2:	b29b      	uxth	r3, r3
 8006ab4:	3b01      	subs	r3, #1
 8006ab6:	b29a      	uxth	r2, r3
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006abc:	e02b      	b.n	8006b16 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	689b      	ldr	r3, [r3, #8]
 8006ac4:	f003 0302 	and.w	r3, r3, #2
 8006ac8:	2b02      	cmp	r3, #2
 8006aca:	d112      	bne.n	8006af2 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ad0:	881a      	ldrh	r2, [r3, #0]
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006adc:	1c9a      	adds	r2, r3, #2
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ae6:	b29b      	uxth	r3, r3
 8006ae8:	3b01      	subs	r3, #1
 8006aea:	b29a      	uxth	r2, r3
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006af0:	e011      	b.n	8006b16 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006af2:	f7fd fef1 	bl	80048d8 <HAL_GetTick>
 8006af6:	4602      	mov	r2, r0
 8006af8:	69bb      	ldr	r3, [r7, #24]
 8006afa:	1ad3      	subs	r3, r2, r3
 8006afc:	683a      	ldr	r2, [r7, #0]
 8006afe:	429a      	cmp	r2, r3
 8006b00:	d803      	bhi.n	8006b0a <HAL_SPI_Transmit+0x16c>
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006b08:	d102      	bne.n	8006b10 <HAL_SPI_Transmit+0x172>
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d102      	bne.n	8006b16 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8006b10:	2303      	movs	r3, #3
 8006b12:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006b14:	e0a4      	b.n	8006c60 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b1a:	b29b      	uxth	r3, r3
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d1ce      	bne.n	8006abe <HAL_SPI_Transmit+0x120>
 8006b20:	e07c      	b.n	8006c1c <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	685b      	ldr	r3, [r3, #4]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d002      	beq.n	8006b30 <HAL_SPI_Transmit+0x192>
 8006b2a:	8afb      	ldrh	r3, [r7, #22]
 8006b2c:	2b01      	cmp	r3, #1
 8006b2e:	d170      	bne.n	8006c12 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b34:	b29b      	uxth	r3, r3
 8006b36:	2b01      	cmp	r3, #1
 8006b38:	d912      	bls.n	8006b60 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b3e:	881a      	ldrh	r2, [r3, #0]
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b4a:	1c9a      	adds	r2, r3, #2
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b54:	b29b      	uxth	r3, r3
 8006b56:	3b02      	subs	r3, #2
 8006b58:	b29a      	uxth	r2, r3
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006b5e:	e058      	b.n	8006c12 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	330c      	adds	r3, #12
 8006b6a:	7812      	ldrb	r2, [r2, #0]
 8006b6c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b72:	1c5a      	adds	r2, r3, #1
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b7c:	b29b      	uxth	r3, r3
 8006b7e:	3b01      	subs	r3, #1
 8006b80:	b29a      	uxth	r2, r3
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8006b86:	e044      	b.n	8006c12 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	689b      	ldr	r3, [r3, #8]
 8006b8e:	f003 0302 	and.w	r3, r3, #2
 8006b92:	2b02      	cmp	r3, #2
 8006b94:	d12b      	bne.n	8006bee <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b9a:	b29b      	uxth	r3, r3
 8006b9c:	2b01      	cmp	r3, #1
 8006b9e:	d912      	bls.n	8006bc6 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ba4:	881a      	ldrh	r2, [r3, #0]
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bb0:	1c9a      	adds	r2, r3, #2
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006bba:	b29b      	uxth	r3, r3
 8006bbc:	3b02      	subs	r3, #2
 8006bbe:	b29a      	uxth	r2, r3
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006bc4:	e025      	b.n	8006c12 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	330c      	adds	r3, #12
 8006bd0:	7812      	ldrb	r2, [r2, #0]
 8006bd2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bd8:	1c5a      	adds	r2, r3, #1
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006be2:	b29b      	uxth	r3, r3
 8006be4:	3b01      	subs	r3, #1
 8006be6:	b29a      	uxth	r2, r3
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006bec:	e011      	b.n	8006c12 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006bee:	f7fd fe73 	bl	80048d8 <HAL_GetTick>
 8006bf2:	4602      	mov	r2, r0
 8006bf4:	69bb      	ldr	r3, [r7, #24]
 8006bf6:	1ad3      	subs	r3, r2, r3
 8006bf8:	683a      	ldr	r2, [r7, #0]
 8006bfa:	429a      	cmp	r2, r3
 8006bfc:	d803      	bhi.n	8006c06 <HAL_SPI_Transmit+0x268>
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006c04:	d102      	bne.n	8006c0c <HAL_SPI_Transmit+0x26e>
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d102      	bne.n	8006c12 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8006c0c:	2303      	movs	r3, #3
 8006c0e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006c10:	e026      	b.n	8006c60 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c16:	b29b      	uxth	r3, r3
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d1b5      	bne.n	8006b88 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006c1c:	69ba      	ldr	r2, [r7, #24]
 8006c1e:	6839      	ldr	r1, [r7, #0]
 8006c20:	68f8      	ldr	r0, [r7, #12]
 8006c22:	f000 fcdf 	bl	80075e4 <SPI_EndRxTxTransaction>
 8006c26:	4603      	mov	r3, r0
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d002      	beq.n	8006c32 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	2220      	movs	r2, #32
 8006c30:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	689b      	ldr	r3, [r3, #8]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d10a      	bne.n	8006c50 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	613b      	str	r3, [r7, #16]
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	68db      	ldr	r3, [r3, #12]
 8006c44:	613b      	str	r3, [r7, #16]
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	689b      	ldr	r3, [r3, #8]
 8006c4c:	613b      	str	r3, [r7, #16]
 8006c4e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d002      	beq.n	8006c5e <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8006c58:	2301      	movs	r3, #1
 8006c5a:	77fb      	strb	r3, [r7, #31]
 8006c5c:	e000      	b.n	8006c60 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8006c5e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	2201      	movs	r2, #1
 8006c64:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006c70:	7ffb      	ldrb	r3, [r7, #31]
}
 8006c72:	4618      	mov	r0, r3
 8006c74:	3720      	adds	r7, #32
 8006c76:	46bd      	mov	sp, r7
 8006c78:	bd80      	pop	{r7, pc}

08006c7a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c7a:	b580      	push	{r7, lr}
 8006c7c:	b088      	sub	sp, #32
 8006c7e:	af02      	add	r7, sp, #8
 8006c80:	60f8      	str	r0, [r7, #12]
 8006c82:	60b9      	str	r1, [r7, #8]
 8006c84:	603b      	str	r3, [r7, #0]
 8006c86:	4613      	mov	r3, r2
 8006c88:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	685b      	ldr	r3, [r3, #4]
 8006c92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006c96:	d112      	bne.n	8006cbe <HAL_SPI_Receive+0x44>
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	689b      	ldr	r3, [r3, #8]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d10e      	bne.n	8006cbe <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	2204      	movs	r2, #4
 8006ca4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006ca8:	88fa      	ldrh	r2, [r7, #6]
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	9300      	str	r3, [sp, #0]
 8006cae:	4613      	mov	r3, r2
 8006cb0:	68ba      	ldr	r2, [r7, #8]
 8006cb2:	68b9      	ldr	r1, [r7, #8]
 8006cb4:	68f8      	ldr	r0, [r7, #12]
 8006cb6:	f000 f910 	bl	8006eda <HAL_SPI_TransmitReceive>
 8006cba:	4603      	mov	r3, r0
 8006cbc:	e109      	b.n	8006ed2 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006cc4:	2b01      	cmp	r3, #1
 8006cc6:	d101      	bne.n	8006ccc <HAL_SPI_Receive+0x52>
 8006cc8:	2302      	movs	r3, #2
 8006cca:	e102      	b.n	8006ed2 <HAL_SPI_Receive+0x258>
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	2201      	movs	r2, #1
 8006cd0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006cd4:	f7fd fe00 	bl	80048d8 <HAL_GetTick>
 8006cd8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006ce0:	b2db      	uxtb	r3, r3
 8006ce2:	2b01      	cmp	r3, #1
 8006ce4:	d002      	beq.n	8006cec <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8006ce6:	2302      	movs	r3, #2
 8006ce8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006cea:	e0e9      	b.n	8006ec0 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8006cec:	68bb      	ldr	r3, [r7, #8]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d002      	beq.n	8006cf8 <HAL_SPI_Receive+0x7e>
 8006cf2:	88fb      	ldrh	r3, [r7, #6]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d102      	bne.n	8006cfe <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006cf8:	2301      	movs	r3, #1
 8006cfa:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006cfc:	e0e0      	b.n	8006ec0 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	2204      	movs	r2, #4
 8006d02:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	2200      	movs	r2, #0
 8006d0a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	68ba      	ldr	r2, [r7, #8]
 8006d10:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	88fa      	ldrh	r2, [r7, #6]
 8006d16:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	88fa      	ldrh	r2, [r7, #6]
 8006d1e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	2200      	movs	r2, #0
 8006d26:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	2200      	movs	r2, #0
 8006d32:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	2200      	movs	r2, #0
 8006d38:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	68db      	ldr	r3, [r3, #12]
 8006d44:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006d48:	d908      	bls.n	8006d5c <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	685a      	ldr	r2, [r3, #4]
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006d58:	605a      	str	r2, [r3, #4]
 8006d5a:	e007      	b.n	8006d6c <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	685a      	ldr	r2, [r3, #4]
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006d6a:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	689b      	ldr	r3, [r3, #8]
 8006d70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d74:	d10f      	bne.n	8006d96 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	681a      	ldr	r2, [r3, #0]
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d84:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	681a      	ldr	r2, [r3, #0]
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006d94:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006da0:	2b40      	cmp	r3, #64	; 0x40
 8006da2:	d007      	beq.n	8006db4 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	681a      	ldr	r2, [r3, #0]
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006db2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	68db      	ldr	r3, [r3, #12]
 8006db8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006dbc:	d867      	bhi.n	8006e8e <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006dbe:	e030      	b.n	8006e22 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	689b      	ldr	r3, [r3, #8]
 8006dc6:	f003 0301 	and.w	r3, r3, #1
 8006dca:	2b01      	cmp	r3, #1
 8006dcc:	d117      	bne.n	8006dfe <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f103 020c 	add.w	r2, r3, #12
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dda:	7812      	ldrb	r2, [r2, #0]
 8006ddc:	b2d2      	uxtb	r2, r2
 8006dde:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006de4:	1c5a      	adds	r2, r3, #1
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006df0:	b29b      	uxth	r3, r3
 8006df2:	3b01      	subs	r3, #1
 8006df4:	b29a      	uxth	r2, r3
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8006dfc:	e011      	b.n	8006e22 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006dfe:	f7fd fd6b 	bl	80048d8 <HAL_GetTick>
 8006e02:	4602      	mov	r2, r0
 8006e04:	693b      	ldr	r3, [r7, #16]
 8006e06:	1ad3      	subs	r3, r2, r3
 8006e08:	683a      	ldr	r2, [r7, #0]
 8006e0a:	429a      	cmp	r2, r3
 8006e0c:	d803      	bhi.n	8006e16 <HAL_SPI_Receive+0x19c>
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e14:	d102      	bne.n	8006e1c <HAL_SPI_Receive+0x1a2>
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d102      	bne.n	8006e22 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8006e1c:	2303      	movs	r3, #3
 8006e1e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006e20:	e04e      	b.n	8006ec0 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006e28:	b29b      	uxth	r3, r3
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d1c8      	bne.n	8006dc0 <HAL_SPI_Receive+0x146>
 8006e2e:	e034      	b.n	8006e9a <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	689b      	ldr	r3, [r3, #8]
 8006e36:	f003 0301 	and.w	r3, r3, #1
 8006e3a:	2b01      	cmp	r3, #1
 8006e3c:	d115      	bne.n	8006e6a <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	68da      	ldr	r2, [r3, #12]
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e48:	b292      	uxth	r2, r2
 8006e4a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e50:	1c9a      	adds	r2, r3, #2
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006e5c:	b29b      	uxth	r3, r3
 8006e5e:	3b01      	subs	r3, #1
 8006e60:	b29a      	uxth	r2, r3
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8006e68:	e011      	b.n	8006e8e <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006e6a:	f7fd fd35 	bl	80048d8 <HAL_GetTick>
 8006e6e:	4602      	mov	r2, r0
 8006e70:	693b      	ldr	r3, [r7, #16]
 8006e72:	1ad3      	subs	r3, r2, r3
 8006e74:	683a      	ldr	r2, [r7, #0]
 8006e76:	429a      	cmp	r2, r3
 8006e78:	d803      	bhi.n	8006e82 <HAL_SPI_Receive+0x208>
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e80:	d102      	bne.n	8006e88 <HAL_SPI_Receive+0x20e>
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d102      	bne.n	8006e8e <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8006e88:	2303      	movs	r3, #3
 8006e8a:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006e8c:	e018      	b.n	8006ec0 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006e94:	b29b      	uxth	r3, r3
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d1ca      	bne.n	8006e30 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006e9a:	693a      	ldr	r2, [r7, #16]
 8006e9c:	6839      	ldr	r1, [r7, #0]
 8006e9e:	68f8      	ldr	r0, [r7, #12]
 8006ea0:	f000 fb48 	bl	8007534 <SPI_EndRxTransaction>
 8006ea4:	4603      	mov	r3, r0
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d002      	beq.n	8006eb0 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	2220      	movs	r2, #32
 8006eae:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d002      	beq.n	8006ebe <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8006eb8:	2301      	movs	r3, #1
 8006eba:	75fb      	strb	r3, [r7, #23]
 8006ebc:	e000      	b.n	8006ec0 <HAL_SPI_Receive+0x246>
  }

error :
 8006ebe:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	2201      	movs	r2, #1
 8006ec4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	2200      	movs	r2, #0
 8006ecc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006ed0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	3718      	adds	r7, #24
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	bd80      	pop	{r7, pc}

08006eda <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006eda:	b580      	push	{r7, lr}
 8006edc:	b08a      	sub	sp, #40	; 0x28
 8006ede:	af00      	add	r7, sp, #0
 8006ee0:	60f8      	str	r0, [r7, #12]
 8006ee2:	60b9      	str	r1, [r7, #8]
 8006ee4:	607a      	str	r2, [r7, #4]
 8006ee6:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006ee8:	2301      	movs	r3, #1
 8006eea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006eec:	2300      	movs	r3, #0
 8006eee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006ef8:	2b01      	cmp	r3, #1
 8006efa:	d101      	bne.n	8006f00 <HAL_SPI_TransmitReceive+0x26>
 8006efc:	2302      	movs	r3, #2
 8006efe:	e1fb      	b.n	80072f8 <HAL_SPI_TransmitReceive+0x41e>
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	2201      	movs	r2, #1
 8006f04:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006f08:	f7fd fce6 	bl	80048d8 <HAL_GetTick>
 8006f0c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006f14:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	685b      	ldr	r3, [r3, #4]
 8006f1a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8006f1c:	887b      	ldrh	r3, [r7, #2]
 8006f1e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8006f20:	887b      	ldrh	r3, [r7, #2]
 8006f22:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006f24:	7efb      	ldrb	r3, [r7, #27]
 8006f26:	2b01      	cmp	r3, #1
 8006f28:	d00e      	beq.n	8006f48 <HAL_SPI_TransmitReceive+0x6e>
 8006f2a:	697b      	ldr	r3, [r7, #20]
 8006f2c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006f30:	d106      	bne.n	8006f40 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	689b      	ldr	r3, [r3, #8]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d102      	bne.n	8006f40 <HAL_SPI_TransmitReceive+0x66>
 8006f3a:	7efb      	ldrb	r3, [r7, #27]
 8006f3c:	2b04      	cmp	r3, #4
 8006f3e:	d003      	beq.n	8006f48 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8006f40:	2302      	movs	r3, #2
 8006f42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006f46:	e1cd      	b.n	80072e4 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006f48:	68bb      	ldr	r3, [r7, #8]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d005      	beq.n	8006f5a <HAL_SPI_TransmitReceive+0x80>
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d002      	beq.n	8006f5a <HAL_SPI_TransmitReceive+0x80>
 8006f54:	887b      	ldrh	r3, [r7, #2]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d103      	bne.n	8006f62 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8006f5a:	2301      	movs	r3, #1
 8006f5c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006f60:	e1c0      	b.n	80072e4 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006f68:	b2db      	uxtb	r3, r3
 8006f6a:	2b04      	cmp	r3, #4
 8006f6c:	d003      	beq.n	8006f76 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	2205      	movs	r2, #5
 8006f72:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	2200      	movs	r2, #0
 8006f7a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	687a      	ldr	r2, [r7, #4]
 8006f80:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	887a      	ldrh	r2, [r7, #2]
 8006f86:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	887a      	ldrh	r2, [r7, #2]
 8006f8e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	68ba      	ldr	r2, [r7, #8]
 8006f96:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	887a      	ldrh	r2, [r7, #2]
 8006f9c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	887a      	ldrh	r2, [r7, #2]
 8006fa2:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	2200      	movs	r2, #0
 8006fae:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	68db      	ldr	r3, [r3, #12]
 8006fb4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006fb8:	d802      	bhi.n	8006fc0 <HAL_SPI_TransmitReceive+0xe6>
 8006fba:	8a3b      	ldrh	r3, [r7, #16]
 8006fbc:	2b01      	cmp	r3, #1
 8006fbe:	d908      	bls.n	8006fd2 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	685a      	ldr	r2, [r3, #4]
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006fce:	605a      	str	r2, [r3, #4]
 8006fd0:	e007      	b.n	8006fe2 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	685a      	ldr	r2, [r3, #4]
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006fe0:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fec:	2b40      	cmp	r3, #64	; 0x40
 8006fee:	d007      	beq.n	8007000 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	681a      	ldr	r2, [r3, #0]
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006ffe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	68db      	ldr	r3, [r3, #12]
 8007004:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007008:	d97c      	bls.n	8007104 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	685b      	ldr	r3, [r3, #4]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d002      	beq.n	8007018 <HAL_SPI_TransmitReceive+0x13e>
 8007012:	8a7b      	ldrh	r3, [r7, #18]
 8007014:	2b01      	cmp	r3, #1
 8007016:	d169      	bne.n	80070ec <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800701c:	881a      	ldrh	r2, [r3, #0]
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007028:	1c9a      	adds	r2, r3, #2
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007032:	b29b      	uxth	r3, r3
 8007034:	3b01      	subs	r3, #1
 8007036:	b29a      	uxth	r2, r3
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800703c:	e056      	b.n	80070ec <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	689b      	ldr	r3, [r3, #8]
 8007044:	f003 0302 	and.w	r3, r3, #2
 8007048:	2b02      	cmp	r3, #2
 800704a:	d11b      	bne.n	8007084 <HAL_SPI_TransmitReceive+0x1aa>
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007050:	b29b      	uxth	r3, r3
 8007052:	2b00      	cmp	r3, #0
 8007054:	d016      	beq.n	8007084 <HAL_SPI_TransmitReceive+0x1aa>
 8007056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007058:	2b01      	cmp	r3, #1
 800705a:	d113      	bne.n	8007084 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007060:	881a      	ldrh	r2, [r3, #0]
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800706c:	1c9a      	adds	r2, r3, #2
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007076:	b29b      	uxth	r3, r3
 8007078:	3b01      	subs	r3, #1
 800707a:	b29a      	uxth	r2, r3
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007080:	2300      	movs	r3, #0
 8007082:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	689b      	ldr	r3, [r3, #8]
 800708a:	f003 0301 	and.w	r3, r3, #1
 800708e:	2b01      	cmp	r3, #1
 8007090:	d11c      	bne.n	80070cc <HAL_SPI_TransmitReceive+0x1f2>
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007098:	b29b      	uxth	r3, r3
 800709a:	2b00      	cmp	r3, #0
 800709c:	d016      	beq.n	80070cc <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	68da      	ldr	r2, [r3, #12]
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070a8:	b292      	uxth	r2, r2
 80070aa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070b0:	1c9a      	adds	r2, r3, #2
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80070bc:	b29b      	uxth	r3, r3
 80070be:	3b01      	subs	r3, #1
 80070c0:	b29a      	uxth	r2, r3
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80070c8:	2301      	movs	r3, #1
 80070ca:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80070cc:	f7fd fc04 	bl	80048d8 <HAL_GetTick>
 80070d0:	4602      	mov	r2, r0
 80070d2:	69fb      	ldr	r3, [r7, #28]
 80070d4:	1ad3      	subs	r3, r2, r3
 80070d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80070d8:	429a      	cmp	r2, r3
 80070da:	d807      	bhi.n	80070ec <HAL_SPI_TransmitReceive+0x212>
 80070dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80070e2:	d003      	beq.n	80070ec <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80070e4:	2303      	movs	r3, #3
 80070e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80070ea:	e0fb      	b.n	80072e4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80070f0:	b29b      	uxth	r3, r3
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d1a3      	bne.n	800703e <HAL_SPI_TransmitReceive+0x164>
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80070fc:	b29b      	uxth	r3, r3
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d19d      	bne.n	800703e <HAL_SPI_TransmitReceive+0x164>
 8007102:	e0df      	b.n	80072c4 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	685b      	ldr	r3, [r3, #4]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d003      	beq.n	8007114 <HAL_SPI_TransmitReceive+0x23a>
 800710c:	8a7b      	ldrh	r3, [r7, #18]
 800710e:	2b01      	cmp	r3, #1
 8007110:	f040 80cb 	bne.w	80072aa <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007118:	b29b      	uxth	r3, r3
 800711a:	2b01      	cmp	r3, #1
 800711c:	d912      	bls.n	8007144 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007122:	881a      	ldrh	r2, [r3, #0]
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800712e:	1c9a      	adds	r2, r3, #2
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007138:	b29b      	uxth	r3, r3
 800713a:	3b02      	subs	r3, #2
 800713c:	b29a      	uxth	r2, r3
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007142:	e0b2      	b.n	80072aa <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	330c      	adds	r3, #12
 800714e:	7812      	ldrb	r2, [r2, #0]
 8007150:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007156:	1c5a      	adds	r2, r3, #1
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007160:	b29b      	uxth	r3, r3
 8007162:	3b01      	subs	r3, #1
 8007164:	b29a      	uxth	r2, r3
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800716a:	e09e      	b.n	80072aa <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	689b      	ldr	r3, [r3, #8]
 8007172:	f003 0302 	and.w	r3, r3, #2
 8007176:	2b02      	cmp	r3, #2
 8007178:	d134      	bne.n	80071e4 <HAL_SPI_TransmitReceive+0x30a>
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800717e:	b29b      	uxth	r3, r3
 8007180:	2b00      	cmp	r3, #0
 8007182:	d02f      	beq.n	80071e4 <HAL_SPI_TransmitReceive+0x30a>
 8007184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007186:	2b01      	cmp	r3, #1
 8007188:	d12c      	bne.n	80071e4 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800718e:	b29b      	uxth	r3, r3
 8007190:	2b01      	cmp	r3, #1
 8007192:	d912      	bls.n	80071ba <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007198:	881a      	ldrh	r2, [r3, #0]
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071a4:	1c9a      	adds	r2, r3, #2
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80071ae:	b29b      	uxth	r3, r3
 80071b0:	3b02      	subs	r3, #2
 80071b2:	b29a      	uxth	r2, r3
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80071b8:	e012      	b.n	80071e0 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	330c      	adds	r3, #12
 80071c4:	7812      	ldrb	r2, [r2, #0]
 80071c6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071cc:	1c5a      	adds	r2, r3, #1
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80071d6:	b29b      	uxth	r3, r3
 80071d8:	3b01      	subs	r3, #1
 80071da:	b29a      	uxth	r2, r3
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80071e0:	2300      	movs	r3, #0
 80071e2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	689b      	ldr	r3, [r3, #8]
 80071ea:	f003 0301 	and.w	r3, r3, #1
 80071ee:	2b01      	cmp	r3, #1
 80071f0:	d148      	bne.n	8007284 <HAL_SPI_TransmitReceive+0x3aa>
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80071f8:	b29b      	uxth	r3, r3
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d042      	beq.n	8007284 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007204:	b29b      	uxth	r3, r3
 8007206:	2b01      	cmp	r3, #1
 8007208:	d923      	bls.n	8007252 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	68da      	ldr	r2, [r3, #12]
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007214:	b292      	uxth	r2, r2
 8007216:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800721c:	1c9a      	adds	r2, r3, #2
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007228:	b29b      	uxth	r3, r3
 800722a:	3b02      	subs	r3, #2
 800722c:	b29a      	uxth	r2, r3
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800723a:	b29b      	uxth	r3, r3
 800723c:	2b01      	cmp	r3, #1
 800723e:	d81f      	bhi.n	8007280 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	685a      	ldr	r2, [r3, #4]
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800724e:	605a      	str	r2, [r3, #4]
 8007250:	e016      	b.n	8007280 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f103 020c 	add.w	r2, r3, #12
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800725e:	7812      	ldrb	r2, [r2, #0]
 8007260:	b2d2      	uxtb	r2, r2
 8007262:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007268:	1c5a      	adds	r2, r3, #1
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007274:	b29b      	uxth	r3, r3
 8007276:	3b01      	subs	r3, #1
 8007278:	b29a      	uxth	r2, r3
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007280:	2301      	movs	r3, #1
 8007282:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007284:	f7fd fb28 	bl	80048d8 <HAL_GetTick>
 8007288:	4602      	mov	r2, r0
 800728a:	69fb      	ldr	r3, [r7, #28]
 800728c:	1ad3      	subs	r3, r2, r3
 800728e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007290:	429a      	cmp	r2, r3
 8007292:	d803      	bhi.n	800729c <HAL_SPI_TransmitReceive+0x3c2>
 8007294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007296:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800729a:	d102      	bne.n	80072a2 <HAL_SPI_TransmitReceive+0x3c8>
 800729c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d103      	bne.n	80072aa <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80072a2:	2303      	movs	r3, #3
 80072a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80072a8:	e01c      	b.n	80072e4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80072ae:	b29b      	uxth	r3, r3
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	f47f af5b 	bne.w	800716c <HAL_SPI_TransmitReceive+0x292>
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80072bc:	b29b      	uxth	r3, r3
 80072be:	2b00      	cmp	r3, #0
 80072c0:	f47f af54 	bne.w	800716c <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80072c4:	69fa      	ldr	r2, [r7, #28]
 80072c6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80072c8:	68f8      	ldr	r0, [r7, #12]
 80072ca:	f000 f98b 	bl	80075e4 <SPI_EndRxTxTransaction>
 80072ce:	4603      	mov	r3, r0
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d006      	beq.n	80072e2 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80072d4:	2301      	movs	r3, #1
 80072d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	2220      	movs	r2, #32
 80072de:	661a      	str	r2, [r3, #96]	; 0x60
 80072e0:	e000      	b.n	80072e4 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80072e2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	2201      	movs	r2, #1
 80072e8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	2200      	movs	r2, #0
 80072f0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80072f4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80072f8:	4618      	mov	r0, r3
 80072fa:	3728      	adds	r7, #40	; 0x28
 80072fc:	46bd      	mov	sp, r7
 80072fe:	bd80      	pop	{r7, pc}

08007300 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007300:	b580      	push	{r7, lr}
 8007302:	b088      	sub	sp, #32
 8007304:	af00      	add	r7, sp, #0
 8007306:	60f8      	str	r0, [r7, #12]
 8007308:	60b9      	str	r1, [r7, #8]
 800730a:	603b      	str	r3, [r7, #0]
 800730c:	4613      	mov	r3, r2
 800730e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007310:	f7fd fae2 	bl	80048d8 <HAL_GetTick>
 8007314:	4602      	mov	r2, r0
 8007316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007318:	1a9b      	subs	r3, r3, r2
 800731a:	683a      	ldr	r2, [r7, #0]
 800731c:	4413      	add	r3, r2
 800731e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007320:	f7fd fada 	bl	80048d8 <HAL_GetTick>
 8007324:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007326:	4b39      	ldr	r3, [pc, #228]	; (800740c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	015b      	lsls	r3, r3, #5
 800732c:	0d1b      	lsrs	r3, r3, #20
 800732e:	69fa      	ldr	r2, [r7, #28]
 8007330:	fb02 f303 	mul.w	r3, r2, r3
 8007334:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007336:	e054      	b.n	80073e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800733e:	d050      	beq.n	80073e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007340:	f7fd faca 	bl	80048d8 <HAL_GetTick>
 8007344:	4602      	mov	r2, r0
 8007346:	69bb      	ldr	r3, [r7, #24]
 8007348:	1ad3      	subs	r3, r2, r3
 800734a:	69fa      	ldr	r2, [r7, #28]
 800734c:	429a      	cmp	r2, r3
 800734e:	d902      	bls.n	8007356 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007350:	69fb      	ldr	r3, [r7, #28]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d13d      	bne.n	80073d2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	685a      	ldr	r2, [r3, #4]
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007364:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	685b      	ldr	r3, [r3, #4]
 800736a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800736e:	d111      	bne.n	8007394 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	689b      	ldr	r3, [r3, #8]
 8007374:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007378:	d004      	beq.n	8007384 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	689b      	ldr	r3, [r3, #8]
 800737e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007382:	d107      	bne.n	8007394 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	681a      	ldr	r2, [r3, #0]
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007392:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007398:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800739c:	d10f      	bne.n	80073be <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	681a      	ldr	r2, [r3, #0]
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80073ac:	601a      	str	r2, [r3, #0]
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	681a      	ldr	r2, [r3, #0]
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80073bc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	2201      	movs	r2, #1
 80073c2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	2200      	movs	r2, #0
 80073ca:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80073ce:	2303      	movs	r3, #3
 80073d0:	e017      	b.n	8007402 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80073d2:	697b      	ldr	r3, [r7, #20]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d101      	bne.n	80073dc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80073d8:	2300      	movs	r3, #0
 80073da:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80073dc:	697b      	ldr	r3, [r7, #20]
 80073de:	3b01      	subs	r3, #1
 80073e0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	689a      	ldr	r2, [r3, #8]
 80073e8:	68bb      	ldr	r3, [r7, #8]
 80073ea:	4013      	ands	r3, r2
 80073ec:	68ba      	ldr	r2, [r7, #8]
 80073ee:	429a      	cmp	r2, r3
 80073f0:	bf0c      	ite	eq
 80073f2:	2301      	moveq	r3, #1
 80073f4:	2300      	movne	r3, #0
 80073f6:	b2db      	uxtb	r3, r3
 80073f8:	461a      	mov	r2, r3
 80073fa:	79fb      	ldrb	r3, [r7, #7]
 80073fc:	429a      	cmp	r2, r3
 80073fe:	d19b      	bne.n	8007338 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007400:	2300      	movs	r3, #0
}
 8007402:	4618      	mov	r0, r3
 8007404:	3720      	adds	r7, #32
 8007406:	46bd      	mov	sp, r7
 8007408:	bd80      	pop	{r7, pc}
 800740a:	bf00      	nop
 800740c:	20000068 	.word	0x20000068

08007410 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b088      	sub	sp, #32
 8007414:	af00      	add	r7, sp, #0
 8007416:	60f8      	str	r0, [r7, #12]
 8007418:	60b9      	str	r1, [r7, #8]
 800741a:	607a      	str	r2, [r7, #4]
 800741c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800741e:	f7fd fa5b 	bl	80048d8 <HAL_GetTick>
 8007422:	4602      	mov	r2, r0
 8007424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007426:	1a9b      	subs	r3, r3, r2
 8007428:	683a      	ldr	r2, [r7, #0]
 800742a:	4413      	add	r3, r2
 800742c:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800742e:	f7fd fa53 	bl	80048d8 <HAL_GetTick>
 8007432:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007434:	4b3e      	ldr	r3, [pc, #248]	; (8007530 <SPI_WaitFifoStateUntilTimeout+0x120>)
 8007436:	681a      	ldr	r2, [r3, #0]
 8007438:	4613      	mov	r3, r2
 800743a:	009b      	lsls	r3, r3, #2
 800743c:	4413      	add	r3, r2
 800743e:	00da      	lsls	r2, r3, #3
 8007440:	1ad3      	subs	r3, r2, r3
 8007442:	0d1b      	lsrs	r3, r3, #20
 8007444:	69fa      	ldr	r2, [r7, #28]
 8007446:	fb02 f303 	mul.w	r3, r2, r3
 800744a:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 800744c:	e062      	b.n	8007514 <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800744e:	68bb      	ldr	r3, [r7, #8]
 8007450:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007454:	d109      	bne.n	800746a <SPI_WaitFifoStateUntilTimeout+0x5a>
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d106      	bne.n	800746a <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	330c      	adds	r3, #12
 8007462:	781b      	ldrb	r3, [r3, #0]
 8007464:	b2db      	uxtb	r3, r3
 8007466:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8007468:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007470:	d050      	beq.n	8007514 <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007472:	f7fd fa31 	bl	80048d8 <HAL_GetTick>
 8007476:	4602      	mov	r2, r0
 8007478:	69bb      	ldr	r3, [r7, #24]
 800747a:	1ad3      	subs	r3, r2, r3
 800747c:	69fa      	ldr	r2, [r7, #28]
 800747e:	429a      	cmp	r2, r3
 8007480:	d902      	bls.n	8007488 <SPI_WaitFifoStateUntilTimeout+0x78>
 8007482:	69fb      	ldr	r3, [r7, #28]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d13d      	bne.n	8007504 <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	685a      	ldr	r2, [r3, #4]
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007496:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	685b      	ldr	r3, [r3, #4]
 800749c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80074a0:	d111      	bne.n	80074c6 <SPI_WaitFifoStateUntilTimeout+0xb6>
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	689b      	ldr	r3, [r3, #8]
 80074a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80074aa:	d004      	beq.n	80074b6 <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	689b      	ldr	r3, [r3, #8]
 80074b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80074b4:	d107      	bne.n	80074c6 <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	681a      	ldr	r2, [r3, #0]
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80074c4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80074ce:	d10f      	bne.n	80074f0 <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	681a      	ldr	r2, [r3, #0]
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80074de:	601a      	str	r2, [r3, #0]
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	681a      	ldr	r2, [r3, #0]
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80074ee:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	2201      	movs	r2, #1
 80074f4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	2200      	movs	r2, #0
 80074fc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007500:	2303      	movs	r3, #3
 8007502:	e010      	b.n	8007526 <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8007504:	693b      	ldr	r3, [r7, #16]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d101      	bne.n	800750e <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 800750a:	2300      	movs	r3, #0
 800750c:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 800750e:	693b      	ldr	r3, [r7, #16]
 8007510:	3b01      	subs	r3, #1
 8007512:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	689a      	ldr	r2, [r3, #8]
 800751a:	68bb      	ldr	r3, [r7, #8]
 800751c:	4013      	ands	r3, r2
 800751e:	687a      	ldr	r2, [r7, #4]
 8007520:	429a      	cmp	r2, r3
 8007522:	d194      	bne.n	800744e <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8007524:	2300      	movs	r3, #0
}
 8007526:	4618      	mov	r0, r3
 8007528:	3720      	adds	r7, #32
 800752a:	46bd      	mov	sp, r7
 800752c:	bd80      	pop	{r7, pc}
 800752e:	bf00      	nop
 8007530:	20000068 	.word	0x20000068

08007534 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007534:	b580      	push	{r7, lr}
 8007536:	b086      	sub	sp, #24
 8007538:	af02      	add	r7, sp, #8
 800753a:	60f8      	str	r0, [r7, #12]
 800753c:	60b9      	str	r1, [r7, #8]
 800753e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	685b      	ldr	r3, [r3, #4]
 8007544:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007548:	d111      	bne.n	800756e <SPI_EndRxTransaction+0x3a>
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	689b      	ldr	r3, [r3, #8]
 800754e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007552:	d004      	beq.n	800755e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	689b      	ldr	r3, [r3, #8]
 8007558:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800755c:	d107      	bne.n	800756e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	681a      	ldr	r2, [r3, #0]
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800756c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	9300      	str	r3, [sp, #0]
 8007572:	68bb      	ldr	r3, [r7, #8]
 8007574:	2200      	movs	r2, #0
 8007576:	2180      	movs	r1, #128	; 0x80
 8007578:	68f8      	ldr	r0, [r7, #12]
 800757a:	f7ff fec1 	bl	8007300 <SPI_WaitFlagStateUntilTimeout>
 800757e:	4603      	mov	r3, r0
 8007580:	2b00      	cmp	r3, #0
 8007582:	d007      	beq.n	8007594 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007588:	f043 0220 	orr.w	r2, r3, #32
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007590:	2303      	movs	r3, #3
 8007592:	e023      	b.n	80075dc <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	685b      	ldr	r3, [r3, #4]
 8007598:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800759c:	d11d      	bne.n	80075da <SPI_EndRxTransaction+0xa6>
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	689b      	ldr	r3, [r3, #8]
 80075a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80075a6:	d004      	beq.n	80075b2 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	689b      	ldr	r3, [r3, #8]
 80075ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80075b0:	d113      	bne.n	80075da <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	9300      	str	r3, [sp, #0]
 80075b6:	68bb      	ldr	r3, [r7, #8]
 80075b8:	2200      	movs	r2, #0
 80075ba:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80075be:	68f8      	ldr	r0, [r7, #12]
 80075c0:	f7ff ff26 	bl	8007410 <SPI_WaitFifoStateUntilTimeout>
 80075c4:	4603      	mov	r3, r0
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d007      	beq.n	80075da <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80075ce:	f043 0220 	orr.w	r2, r3, #32
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80075d6:	2303      	movs	r3, #3
 80075d8:	e000      	b.n	80075dc <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80075da:	2300      	movs	r3, #0
}
 80075dc:	4618      	mov	r0, r3
 80075de:	3710      	adds	r7, #16
 80075e0:	46bd      	mov	sp, r7
 80075e2:	bd80      	pop	{r7, pc}

080075e4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b086      	sub	sp, #24
 80075e8:	af02      	add	r7, sp, #8
 80075ea:	60f8      	str	r0, [r7, #12]
 80075ec:	60b9      	str	r1, [r7, #8]
 80075ee:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	9300      	str	r3, [sp, #0]
 80075f4:	68bb      	ldr	r3, [r7, #8]
 80075f6:	2200      	movs	r2, #0
 80075f8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80075fc:	68f8      	ldr	r0, [r7, #12]
 80075fe:	f7ff ff07 	bl	8007410 <SPI_WaitFifoStateUntilTimeout>
 8007602:	4603      	mov	r3, r0
 8007604:	2b00      	cmp	r3, #0
 8007606:	d007      	beq.n	8007618 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800760c:	f043 0220 	orr.w	r2, r3, #32
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007614:	2303      	movs	r3, #3
 8007616:	e027      	b.n	8007668 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	9300      	str	r3, [sp, #0]
 800761c:	68bb      	ldr	r3, [r7, #8]
 800761e:	2200      	movs	r2, #0
 8007620:	2180      	movs	r1, #128	; 0x80
 8007622:	68f8      	ldr	r0, [r7, #12]
 8007624:	f7ff fe6c 	bl	8007300 <SPI_WaitFlagStateUntilTimeout>
 8007628:	4603      	mov	r3, r0
 800762a:	2b00      	cmp	r3, #0
 800762c:	d007      	beq.n	800763e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007632:	f043 0220 	orr.w	r2, r3, #32
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800763a:	2303      	movs	r3, #3
 800763c:	e014      	b.n	8007668 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	9300      	str	r3, [sp, #0]
 8007642:	68bb      	ldr	r3, [r7, #8]
 8007644:	2200      	movs	r2, #0
 8007646:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800764a:	68f8      	ldr	r0, [r7, #12]
 800764c:	f7ff fee0 	bl	8007410 <SPI_WaitFifoStateUntilTimeout>
 8007650:	4603      	mov	r3, r0
 8007652:	2b00      	cmp	r3, #0
 8007654:	d007      	beq.n	8007666 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800765a:	f043 0220 	orr.w	r2, r3, #32
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007662:	2303      	movs	r3, #3
 8007664:	e000      	b.n	8007668 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8007666:	2300      	movs	r3, #0
}
 8007668:	4618      	mov	r0, r3
 800766a:	3710      	adds	r7, #16
 800766c:	46bd      	mov	sp, r7
 800766e:	bd80      	pop	{r7, pc}

08007670 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007670:	b580      	push	{r7, lr}
 8007672:	b082      	sub	sp, #8
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d101      	bne.n	8007682 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800767e:	2301      	movs	r3, #1
 8007680:	e040      	b.n	8007704 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007686:	2b00      	cmp	r3, #0
 8007688:	d106      	bne.n	8007698 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	2200      	movs	r2, #0
 800768e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007692:	6878      	ldr	r0, [r7, #4]
 8007694:	f7fc fa3e 	bl	8003b14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2224      	movs	r2, #36	; 0x24
 800769c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	681a      	ldr	r2, [r3, #0]
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	f022 0201 	bic.w	r2, r2, #1
 80076ac:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80076ae:	6878      	ldr	r0, [r7, #4]
 80076b0:	f000 f91a 	bl	80078e8 <UART_SetConfig>
 80076b4:	4603      	mov	r3, r0
 80076b6:	2b01      	cmp	r3, #1
 80076b8:	d101      	bne.n	80076be <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80076ba:	2301      	movs	r3, #1
 80076bc:	e022      	b.n	8007704 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d002      	beq.n	80076cc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80076c6:	6878      	ldr	r0, [r7, #4]
 80076c8:	f000 fb42 	bl	8007d50 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	685a      	ldr	r2, [r3, #4]
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80076da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	689a      	ldr	r2, [r3, #8]
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80076ea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	681a      	ldr	r2, [r3, #0]
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	f042 0201 	orr.w	r2, r2, #1
 80076fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80076fc:	6878      	ldr	r0, [r7, #4]
 80076fe:	f000 fbc9 	bl	8007e94 <UART_CheckIdleState>
 8007702:	4603      	mov	r3, r0
}
 8007704:	4618      	mov	r0, r3
 8007706:	3708      	adds	r7, #8
 8007708:	46bd      	mov	sp, r7
 800770a:	bd80      	pop	{r7, pc}

0800770c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800770c:	b580      	push	{r7, lr}
 800770e:	b08a      	sub	sp, #40	; 0x28
 8007710:	af02      	add	r7, sp, #8
 8007712:	60f8      	str	r0, [r7, #12]
 8007714:	60b9      	str	r1, [r7, #8]
 8007716:	603b      	str	r3, [r7, #0]
 8007718:	4613      	mov	r3, r2
 800771a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007720:	2b20      	cmp	r3, #32
 8007722:	f040 8082 	bne.w	800782a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007726:	68bb      	ldr	r3, [r7, #8]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d002      	beq.n	8007732 <HAL_UART_Transmit+0x26>
 800772c:	88fb      	ldrh	r3, [r7, #6]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d101      	bne.n	8007736 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007732:	2301      	movs	r3, #1
 8007734:	e07a      	b.n	800782c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800773c:	2b01      	cmp	r3, #1
 800773e:	d101      	bne.n	8007744 <HAL_UART_Transmit+0x38>
 8007740:	2302      	movs	r3, #2
 8007742:	e073      	b.n	800782c <HAL_UART_Transmit+0x120>
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	2201      	movs	r2, #1
 8007748:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	2200      	movs	r2, #0
 8007750:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	2221      	movs	r2, #33	; 0x21
 8007758:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800775a:	f7fd f8bd 	bl	80048d8 <HAL_GetTick>
 800775e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	88fa      	ldrh	r2, [r7, #6]
 8007764:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	88fa      	ldrh	r2, [r7, #6]
 800776c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	689b      	ldr	r3, [r3, #8]
 8007774:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007778:	d108      	bne.n	800778c <HAL_UART_Transmit+0x80>
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	691b      	ldr	r3, [r3, #16]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d104      	bne.n	800778c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8007782:	2300      	movs	r3, #0
 8007784:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007786:	68bb      	ldr	r3, [r7, #8]
 8007788:	61bb      	str	r3, [r7, #24]
 800778a:	e003      	b.n	8007794 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800778c:	68bb      	ldr	r3, [r7, #8]
 800778e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007790:	2300      	movs	r3, #0
 8007792:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	2200      	movs	r2, #0
 8007798:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800779c:	e02d      	b.n	80077fa <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800779e:	683b      	ldr	r3, [r7, #0]
 80077a0:	9300      	str	r3, [sp, #0]
 80077a2:	697b      	ldr	r3, [r7, #20]
 80077a4:	2200      	movs	r2, #0
 80077a6:	2180      	movs	r1, #128	; 0x80
 80077a8:	68f8      	ldr	r0, [r7, #12]
 80077aa:	f000 fbbc 	bl	8007f26 <UART_WaitOnFlagUntilTimeout>
 80077ae:	4603      	mov	r3, r0
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d001      	beq.n	80077b8 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80077b4:	2303      	movs	r3, #3
 80077b6:	e039      	b.n	800782c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80077b8:	69fb      	ldr	r3, [r7, #28]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d10b      	bne.n	80077d6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80077be:	69bb      	ldr	r3, [r7, #24]
 80077c0:	881a      	ldrh	r2, [r3, #0]
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80077ca:	b292      	uxth	r2, r2
 80077cc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80077ce:	69bb      	ldr	r3, [r7, #24]
 80077d0:	3302      	adds	r3, #2
 80077d2:	61bb      	str	r3, [r7, #24]
 80077d4:	e008      	b.n	80077e8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80077d6:	69fb      	ldr	r3, [r7, #28]
 80077d8:	781a      	ldrb	r2, [r3, #0]
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	b292      	uxth	r2, r2
 80077e0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80077e2:	69fb      	ldr	r3, [r7, #28]
 80077e4:	3301      	adds	r3, #1
 80077e6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80077ee:	b29b      	uxth	r3, r3
 80077f0:	3b01      	subs	r3, #1
 80077f2:	b29a      	uxth	r2, r3
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007800:	b29b      	uxth	r3, r3
 8007802:	2b00      	cmp	r3, #0
 8007804:	d1cb      	bne.n	800779e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	9300      	str	r3, [sp, #0]
 800780a:	697b      	ldr	r3, [r7, #20]
 800780c:	2200      	movs	r2, #0
 800780e:	2140      	movs	r1, #64	; 0x40
 8007810:	68f8      	ldr	r0, [r7, #12]
 8007812:	f000 fb88 	bl	8007f26 <UART_WaitOnFlagUntilTimeout>
 8007816:	4603      	mov	r3, r0
 8007818:	2b00      	cmp	r3, #0
 800781a:	d001      	beq.n	8007820 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800781c:	2303      	movs	r3, #3
 800781e:	e005      	b.n	800782c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	2220      	movs	r2, #32
 8007824:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8007826:	2300      	movs	r3, #0
 8007828:	e000      	b.n	800782c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800782a:	2302      	movs	r3, #2
  }
}
 800782c:	4618      	mov	r0, r3
 800782e:	3720      	adds	r7, #32
 8007830:	46bd      	mov	sp, r7
 8007832:	bd80      	pop	{r7, pc}

08007834 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b084      	sub	sp, #16
 8007838:	af00      	add	r7, sp, #0
 800783a:	60f8      	str	r0, [r7, #12]
 800783c:	60b9      	str	r1, [r7, #8]
 800783e:	4613      	mov	r3, r2
 8007840:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007846:	2b20      	cmp	r3, #32
 8007848:	d131      	bne.n	80078ae <HAL_UART_Receive_IT+0x7a>
  {
    if ((pData == NULL) || (Size == 0U))
 800784a:	68bb      	ldr	r3, [r7, #8]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d002      	beq.n	8007856 <HAL_UART_Receive_IT+0x22>
 8007850:	88fb      	ldrh	r3, [r7, #6]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d101      	bne.n	800785a <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8007856:	2301      	movs	r3, #1
 8007858:	e02a      	b.n	80078b0 <HAL_UART_Receive_IT+0x7c>
    }

    __HAL_LOCK(huart);
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8007860:	2b01      	cmp	r3, #1
 8007862:	d101      	bne.n	8007868 <HAL_UART_Receive_IT+0x34>
 8007864:	2302      	movs	r3, #2
 8007866:	e023      	b.n	80078b0 <HAL_UART_Receive_IT+0x7c>
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	2201      	movs	r2, #1
 800786c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	2200      	movs	r2, #0
 8007874:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	4a0f      	ldr	r2, [pc, #60]	; (80078b8 <HAL_UART_Receive_IT+0x84>)
 800787c:	4293      	cmp	r3, r2
 800787e:	d00e      	beq.n	800789e <HAL_UART_Receive_IT+0x6a>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	685b      	ldr	r3, [r3, #4]
 8007886:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800788a:	2b00      	cmp	r3, #0
 800788c:	d007      	beq.n	800789e <HAL_UART_Receive_IT+0x6a>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	681a      	ldr	r2, [r3, #0]
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800789c:	601a      	str	r2, [r3, #0]
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 800789e:	88fb      	ldrh	r3, [r7, #6]
 80078a0:	461a      	mov	r2, r3
 80078a2:	68b9      	ldr	r1, [r7, #8]
 80078a4:	68f8      	ldr	r0, [r7, #12]
 80078a6:	f000 fbbb 	bl	8008020 <UART_Start_Receive_IT>
 80078aa:	4603      	mov	r3, r0
 80078ac:	e000      	b.n	80078b0 <HAL_UART_Receive_IT+0x7c>
  }
  else
  {
    return HAL_BUSY;
 80078ae:	2302      	movs	r3, #2
  }
}
 80078b0:	4618      	mov	r0, r3
 80078b2:	3710      	adds	r7, #16
 80078b4:	46bd      	mov	sp, r7
 80078b6:	bd80      	pop	{r7, pc}
 80078b8:	40008000 	.word	0x40008000

080078bc <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80078bc:	b480      	push	{r7}
 80078be:	b083      	sub	sp, #12
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80078c4:	bf00      	nop
 80078c6:	370c      	adds	r7, #12
 80078c8:	46bd      	mov	sp, r7
 80078ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ce:	4770      	bx	lr

080078d0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80078d0:	b480      	push	{r7}
 80078d2:	b083      	sub	sp, #12
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
 80078d8:	460b      	mov	r3, r1
 80078da:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80078dc:	bf00      	nop
 80078de:	370c      	adds	r7, #12
 80078e0:	46bd      	mov	sp, r7
 80078e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e6:	4770      	bx	lr

080078e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80078e8:	b5b0      	push	{r4, r5, r7, lr}
 80078ea:	b088      	sub	sp, #32
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80078f0:	2300      	movs	r3, #0
 80078f2:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	689a      	ldr	r2, [r3, #8]
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	691b      	ldr	r3, [r3, #16]
 80078fc:	431a      	orrs	r2, r3
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	695b      	ldr	r3, [r3, #20]
 8007902:	431a      	orrs	r2, r3
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	69db      	ldr	r3, [r3, #28]
 8007908:	4313      	orrs	r3, r2
 800790a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	681a      	ldr	r2, [r3, #0]
 8007912:	4baa      	ldr	r3, [pc, #680]	; (8007bbc <UART_SetConfig+0x2d4>)
 8007914:	4013      	ands	r3, r2
 8007916:	687a      	ldr	r2, [r7, #4]
 8007918:	6812      	ldr	r2, [r2, #0]
 800791a:	69f9      	ldr	r1, [r7, #28]
 800791c:	430b      	orrs	r3, r1
 800791e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	685b      	ldr	r3, [r3, #4]
 8007926:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	68da      	ldr	r2, [r3, #12]
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	430a      	orrs	r2, r1
 8007934:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	699b      	ldr	r3, [r3, #24]
 800793a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	4a9f      	ldr	r2, [pc, #636]	; (8007bc0 <UART_SetConfig+0x2d8>)
 8007942:	4293      	cmp	r3, r2
 8007944:	d004      	beq.n	8007950 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	6a1b      	ldr	r3, [r3, #32]
 800794a:	69fa      	ldr	r2, [r7, #28]
 800794c:	4313      	orrs	r3, r2
 800794e:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	689b      	ldr	r3, [r3, #8]
 8007956:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	69fa      	ldr	r2, [r7, #28]
 8007960:	430a      	orrs	r2, r1
 8007962:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	4a96      	ldr	r2, [pc, #600]	; (8007bc4 <UART_SetConfig+0x2dc>)
 800796a:	4293      	cmp	r3, r2
 800796c:	d121      	bne.n	80079b2 <UART_SetConfig+0xca>
 800796e:	4b96      	ldr	r3, [pc, #600]	; (8007bc8 <UART_SetConfig+0x2e0>)
 8007970:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007974:	f003 0303 	and.w	r3, r3, #3
 8007978:	2b03      	cmp	r3, #3
 800797a:	d817      	bhi.n	80079ac <UART_SetConfig+0xc4>
 800797c:	a201      	add	r2, pc, #4	; (adr r2, 8007984 <UART_SetConfig+0x9c>)
 800797e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007982:	bf00      	nop
 8007984:	08007995 	.word	0x08007995
 8007988:	080079a1 	.word	0x080079a1
 800798c:	0800799b 	.word	0x0800799b
 8007990:	080079a7 	.word	0x080079a7
 8007994:	2301      	movs	r3, #1
 8007996:	76fb      	strb	r3, [r7, #27]
 8007998:	e096      	b.n	8007ac8 <UART_SetConfig+0x1e0>
 800799a:	2302      	movs	r3, #2
 800799c:	76fb      	strb	r3, [r7, #27]
 800799e:	e093      	b.n	8007ac8 <UART_SetConfig+0x1e0>
 80079a0:	2304      	movs	r3, #4
 80079a2:	76fb      	strb	r3, [r7, #27]
 80079a4:	e090      	b.n	8007ac8 <UART_SetConfig+0x1e0>
 80079a6:	2308      	movs	r3, #8
 80079a8:	76fb      	strb	r3, [r7, #27]
 80079aa:	e08d      	b.n	8007ac8 <UART_SetConfig+0x1e0>
 80079ac:	2310      	movs	r3, #16
 80079ae:	76fb      	strb	r3, [r7, #27]
 80079b0:	e08a      	b.n	8007ac8 <UART_SetConfig+0x1e0>
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	4a85      	ldr	r2, [pc, #532]	; (8007bcc <UART_SetConfig+0x2e4>)
 80079b8:	4293      	cmp	r3, r2
 80079ba:	d132      	bne.n	8007a22 <UART_SetConfig+0x13a>
 80079bc:	4b82      	ldr	r3, [pc, #520]	; (8007bc8 <UART_SetConfig+0x2e0>)
 80079be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079c2:	f003 030c 	and.w	r3, r3, #12
 80079c6:	2b0c      	cmp	r3, #12
 80079c8:	d828      	bhi.n	8007a1c <UART_SetConfig+0x134>
 80079ca:	a201      	add	r2, pc, #4	; (adr r2, 80079d0 <UART_SetConfig+0xe8>)
 80079cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079d0:	08007a05 	.word	0x08007a05
 80079d4:	08007a1d 	.word	0x08007a1d
 80079d8:	08007a1d 	.word	0x08007a1d
 80079dc:	08007a1d 	.word	0x08007a1d
 80079e0:	08007a11 	.word	0x08007a11
 80079e4:	08007a1d 	.word	0x08007a1d
 80079e8:	08007a1d 	.word	0x08007a1d
 80079ec:	08007a1d 	.word	0x08007a1d
 80079f0:	08007a0b 	.word	0x08007a0b
 80079f4:	08007a1d 	.word	0x08007a1d
 80079f8:	08007a1d 	.word	0x08007a1d
 80079fc:	08007a1d 	.word	0x08007a1d
 8007a00:	08007a17 	.word	0x08007a17
 8007a04:	2300      	movs	r3, #0
 8007a06:	76fb      	strb	r3, [r7, #27]
 8007a08:	e05e      	b.n	8007ac8 <UART_SetConfig+0x1e0>
 8007a0a:	2302      	movs	r3, #2
 8007a0c:	76fb      	strb	r3, [r7, #27]
 8007a0e:	e05b      	b.n	8007ac8 <UART_SetConfig+0x1e0>
 8007a10:	2304      	movs	r3, #4
 8007a12:	76fb      	strb	r3, [r7, #27]
 8007a14:	e058      	b.n	8007ac8 <UART_SetConfig+0x1e0>
 8007a16:	2308      	movs	r3, #8
 8007a18:	76fb      	strb	r3, [r7, #27]
 8007a1a:	e055      	b.n	8007ac8 <UART_SetConfig+0x1e0>
 8007a1c:	2310      	movs	r3, #16
 8007a1e:	76fb      	strb	r3, [r7, #27]
 8007a20:	e052      	b.n	8007ac8 <UART_SetConfig+0x1e0>
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	4a6a      	ldr	r2, [pc, #424]	; (8007bd0 <UART_SetConfig+0x2e8>)
 8007a28:	4293      	cmp	r3, r2
 8007a2a:	d120      	bne.n	8007a6e <UART_SetConfig+0x186>
 8007a2c:	4b66      	ldr	r3, [pc, #408]	; (8007bc8 <UART_SetConfig+0x2e0>)
 8007a2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a32:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007a36:	2b30      	cmp	r3, #48	; 0x30
 8007a38:	d013      	beq.n	8007a62 <UART_SetConfig+0x17a>
 8007a3a:	2b30      	cmp	r3, #48	; 0x30
 8007a3c:	d814      	bhi.n	8007a68 <UART_SetConfig+0x180>
 8007a3e:	2b20      	cmp	r3, #32
 8007a40:	d009      	beq.n	8007a56 <UART_SetConfig+0x16e>
 8007a42:	2b20      	cmp	r3, #32
 8007a44:	d810      	bhi.n	8007a68 <UART_SetConfig+0x180>
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d002      	beq.n	8007a50 <UART_SetConfig+0x168>
 8007a4a:	2b10      	cmp	r3, #16
 8007a4c:	d006      	beq.n	8007a5c <UART_SetConfig+0x174>
 8007a4e:	e00b      	b.n	8007a68 <UART_SetConfig+0x180>
 8007a50:	2300      	movs	r3, #0
 8007a52:	76fb      	strb	r3, [r7, #27]
 8007a54:	e038      	b.n	8007ac8 <UART_SetConfig+0x1e0>
 8007a56:	2302      	movs	r3, #2
 8007a58:	76fb      	strb	r3, [r7, #27]
 8007a5a:	e035      	b.n	8007ac8 <UART_SetConfig+0x1e0>
 8007a5c:	2304      	movs	r3, #4
 8007a5e:	76fb      	strb	r3, [r7, #27]
 8007a60:	e032      	b.n	8007ac8 <UART_SetConfig+0x1e0>
 8007a62:	2308      	movs	r3, #8
 8007a64:	76fb      	strb	r3, [r7, #27]
 8007a66:	e02f      	b.n	8007ac8 <UART_SetConfig+0x1e0>
 8007a68:	2310      	movs	r3, #16
 8007a6a:	76fb      	strb	r3, [r7, #27]
 8007a6c:	e02c      	b.n	8007ac8 <UART_SetConfig+0x1e0>
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	4a53      	ldr	r2, [pc, #332]	; (8007bc0 <UART_SetConfig+0x2d8>)
 8007a74:	4293      	cmp	r3, r2
 8007a76:	d125      	bne.n	8007ac4 <UART_SetConfig+0x1dc>
 8007a78:	4b53      	ldr	r3, [pc, #332]	; (8007bc8 <UART_SetConfig+0x2e0>)
 8007a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a7e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007a82:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007a86:	d017      	beq.n	8007ab8 <UART_SetConfig+0x1d0>
 8007a88:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007a8c:	d817      	bhi.n	8007abe <UART_SetConfig+0x1d6>
 8007a8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007a92:	d00b      	beq.n	8007aac <UART_SetConfig+0x1c4>
 8007a94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007a98:	d811      	bhi.n	8007abe <UART_SetConfig+0x1d6>
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d003      	beq.n	8007aa6 <UART_SetConfig+0x1be>
 8007a9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007aa2:	d006      	beq.n	8007ab2 <UART_SetConfig+0x1ca>
 8007aa4:	e00b      	b.n	8007abe <UART_SetConfig+0x1d6>
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	76fb      	strb	r3, [r7, #27]
 8007aaa:	e00d      	b.n	8007ac8 <UART_SetConfig+0x1e0>
 8007aac:	2302      	movs	r3, #2
 8007aae:	76fb      	strb	r3, [r7, #27]
 8007ab0:	e00a      	b.n	8007ac8 <UART_SetConfig+0x1e0>
 8007ab2:	2304      	movs	r3, #4
 8007ab4:	76fb      	strb	r3, [r7, #27]
 8007ab6:	e007      	b.n	8007ac8 <UART_SetConfig+0x1e0>
 8007ab8:	2308      	movs	r3, #8
 8007aba:	76fb      	strb	r3, [r7, #27]
 8007abc:	e004      	b.n	8007ac8 <UART_SetConfig+0x1e0>
 8007abe:	2310      	movs	r3, #16
 8007ac0:	76fb      	strb	r3, [r7, #27]
 8007ac2:	e001      	b.n	8007ac8 <UART_SetConfig+0x1e0>
 8007ac4:	2310      	movs	r3, #16
 8007ac6:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	4a3c      	ldr	r2, [pc, #240]	; (8007bc0 <UART_SetConfig+0x2d8>)
 8007ace:	4293      	cmp	r3, r2
 8007ad0:	f040 8082 	bne.w	8007bd8 <UART_SetConfig+0x2f0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007ad4:	7efb      	ldrb	r3, [r7, #27]
 8007ad6:	2b08      	cmp	r3, #8
 8007ad8:	d823      	bhi.n	8007b22 <UART_SetConfig+0x23a>
 8007ada:	a201      	add	r2, pc, #4	; (adr r2, 8007ae0 <UART_SetConfig+0x1f8>)
 8007adc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ae0:	08007b05 	.word	0x08007b05
 8007ae4:	08007b23 	.word	0x08007b23
 8007ae8:	08007b0d 	.word	0x08007b0d
 8007aec:	08007b23 	.word	0x08007b23
 8007af0:	08007b13 	.word	0x08007b13
 8007af4:	08007b23 	.word	0x08007b23
 8007af8:	08007b23 	.word	0x08007b23
 8007afc:	08007b23 	.word	0x08007b23
 8007b00:	08007b1b 	.word	0x08007b1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007b04:	f7fe fc96 	bl	8006434 <HAL_RCC_GetPCLK1Freq>
 8007b08:	6178      	str	r0, [r7, #20]
        break;
 8007b0a:	e00f      	b.n	8007b2c <UART_SetConfig+0x244>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007b0c:	4b31      	ldr	r3, [pc, #196]	; (8007bd4 <UART_SetConfig+0x2ec>)
 8007b0e:	617b      	str	r3, [r7, #20]
        break;
 8007b10:	e00c      	b.n	8007b2c <UART_SetConfig+0x244>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007b12:	f7fe fbf7 	bl	8006304 <HAL_RCC_GetSysClockFreq>
 8007b16:	6178      	str	r0, [r7, #20]
        break;
 8007b18:	e008      	b.n	8007b2c <UART_SetConfig+0x244>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007b1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007b1e:	617b      	str	r3, [r7, #20]
        break;
 8007b20:	e004      	b.n	8007b2c <UART_SetConfig+0x244>
      default:
        pclk = 0U;
 8007b22:	2300      	movs	r3, #0
 8007b24:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007b26:	2301      	movs	r3, #1
 8007b28:	76bb      	strb	r3, [r7, #26]
        break;
 8007b2a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007b2c:	697b      	ldr	r3, [r7, #20]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	f000 8100 	beq.w	8007d34 <UART_SetConfig+0x44c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	685a      	ldr	r2, [r3, #4]
 8007b38:	4613      	mov	r3, r2
 8007b3a:	005b      	lsls	r3, r3, #1
 8007b3c:	4413      	add	r3, r2
 8007b3e:	697a      	ldr	r2, [r7, #20]
 8007b40:	429a      	cmp	r2, r3
 8007b42:	d305      	bcc.n	8007b50 <UART_SetConfig+0x268>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	685b      	ldr	r3, [r3, #4]
 8007b48:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007b4a:	697a      	ldr	r2, [r7, #20]
 8007b4c:	429a      	cmp	r2, r3
 8007b4e:	d902      	bls.n	8007b56 <UART_SetConfig+0x26e>
      {
        ret = HAL_ERROR;
 8007b50:	2301      	movs	r3, #1
 8007b52:	76bb      	strb	r3, [r7, #26]
 8007b54:	e0ee      	b.n	8007d34 <UART_SetConfig+0x44c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007b56:	697b      	ldr	r3, [r7, #20]
 8007b58:	4618      	mov	r0, r3
 8007b5a:	f04f 0100 	mov.w	r1, #0
 8007b5e:	f04f 0200 	mov.w	r2, #0
 8007b62:	f04f 0300 	mov.w	r3, #0
 8007b66:	020b      	lsls	r3, r1, #8
 8007b68:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007b6c:	0202      	lsls	r2, r0, #8
 8007b6e:	6879      	ldr	r1, [r7, #4]
 8007b70:	6849      	ldr	r1, [r1, #4]
 8007b72:	0849      	lsrs	r1, r1, #1
 8007b74:	4608      	mov	r0, r1
 8007b76:	f04f 0100 	mov.w	r1, #0
 8007b7a:	1814      	adds	r4, r2, r0
 8007b7c:	eb43 0501 	adc.w	r5, r3, r1
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	685b      	ldr	r3, [r3, #4]
 8007b84:	461a      	mov	r2, r3
 8007b86:	f04f 0300 	mov.w	r3, #0
 8007b8a:	4620      	mov	r0, r4
 8007b8c:	4629      	mov	r1, r5
 8007b8e:	f7f8 fb87 	bl	80002a0 <__aeabi_uldivmod>
 8007b92:	4602      	mov	r2, r0
 8007b94:	460b      	mov	r3, r1
 8007b96:	4613      	mov	r3, r2
 8007b98:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007b9a:	693b      	ldr	r3, [r7, #16]
 8007b9c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007ba0:	d308      	bcc.n	8007bb4 <UART_SetConfig+0x2cc>
 8007ba2:	693b      	ldr	r3, [r7, #16]
 8007ba4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007ba8:	d204      	bcs.n	8007bb4 <UART_SetConfig+0x2cc>
        {
          huart->Instance->BRR = usartdiv;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	693a      	ldr	r2, [r7, #16]
 8007bb0:	60da      	str	r2, [r3, #12]
 8007bb2:	e0bf      	b.n	8007d34 <UART_SetConfig+0x44c>
        }
        else
        {
          ret = HAL_ERROR;
 8007bb4:	2301      	movs	r3, #1
 8007bb6:	76bb      	strb	r3, [r7, #26]
 8007bb8:	e0bc      	b.n	8007d34 <UART_SetConfig+0x44c>
 8007bba:	bf00      	nop
 8007bbc:	efff69f3 	.word	0xefff69f3
 8007bc0:	40008000 	.word	0x40008000
 8007bc4:	40013800 	.word	0x40013800
 8007bc8:	40021000 	.word	0x40021000
 8007bcc:	40004400 	.word	0x40004400
 8007bd0:	40004800 	.word	0x40004800
 8007bd4:	00f42400 	.word	0x00f42400
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	69db      	ldr	r3, [r3, #28]
 8007bdc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007be0:	d15c      	bne.n	8007c9c <UART_SetConfig+0x3b4>
  {
    switch (clocksource)
 8007be2:	7efb      	ldrb	r3, [r7, #27]
 8007be4:	2b08      	cmp	r3, #8
 8007be6:	d828      	bhi.n	8007c3a <UART_SetConfig+0x352>
 8007be8:	a201      	add	r2, pc, #4	; (adr r2, 8007bf0 <UART_SetConfig+0x308>)
 8007bea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bee:	bf00      	nop
 8007bf0:	08007c15 	.word	0x08007c15
 8007bf4:	08007c1d 	.word	0x08007c1d
 8007bf8:	08007c25 	.word	0x08007c25
 8007bfc:	08007c3b 	.word	0x08007c3b
 8007c00:	08007c2b 	.word	0x08007c2b
 8007c04:	08007c3b 	.word	0x08007c3b
 8007c08:	08007c3b 	.word	0x08007c3b
 8007c0c:	08007c3b 	.word	0x08007c3b
 8007c10:	08007c33 	.word	0x08007c33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c14:	f7fe fc0e 	bl	8006434 <HAL_RCC_GetPCLK1Freq>
 8007c18:	6178      	str	r0, [r7, #20]
        break;
 8007c1a:	e013      	b.n	8007c44 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007c1c:	f7fe fc20 	bl	8006460 <HAL_RCC_GetPCLK2Freq>
 8007c20:	6178      	str	r0, [r7, #20]
        break;
 8007c22:	e00f      	b.n	8007c44 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007c24:	4b49      	ldr	r3, [pc, #292]	; (8007d4c <UART_SetConfig+0x464>)
 8007c26:	617b      	str	r3, [r7, #20]
        break;
 8007c28:	e00c      	b.n	8007c44 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007c2a:	f7fe fb6b 	bl	8006304 <HAL_RCC_GetSysClockFreq>
 8007c2e:	6178      	str	r0, [r7, #20]
        break;
 8007c30:	e008      	b.n	8007c44 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007c32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007c36:	617b      	str	r3, [r7, #20]
        break;
 8007c38:	e004      	b.n	8007c44 <UART_SetConfig+0x35c>
      default:
        pclk = 0U;
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007c3e:	2301      	movs	r3, #1
 8007c40:	76bb      	strb	r3, [r7, #26]
        break;
 8007c42:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007c44:	697b      	ldr	r3, [r7, #20]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d074      	beq.n	8007d34 <UART_SetConfig+0x44c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007c4a:	697b      	ldr	r3, [r7, #20]
 8007c4c:	005a      	lsls	r2, r3, #1
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	685b      	ldr	r3, [r3, #4]
 8007c52:	085b      	lsrs	r3, r3, #1
 8007c54:	441a      	add	r2, r3
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	685b      	ldr	r3, [r3, #4]
 8007c5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c5e:	b29b      	uxth	r3, r3
 8007c60:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007c62:	693b      	ldr	r3, [r7, #16]
 8007c64:	2b0f      	cmp	r3, #15
 8007c66:	d916      	bls.n	8007c96 <UART_SetConfig+0x3ae>
 8007c68:	693b      	ldr	r3, [r7, #16]
 8007c6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c6e:	d212      	bcs.n	8007c96 <UART_SetConfig+0x3ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007c70:	693b      	ldr	r3, [r7, #16]
 8007c72:	b29b      	uxth	r3, r3
 8007c74:	f023 030f 	bic.w	r3, r3, #15
 8007c78:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007c7a:	693b      	ldr	r3, [r7, #16]
 8007c7c:	085b      	lsrs	r3, r3, #1
 8007c7e:	b29b      	uxth	r3, r3
 8007c80:	f003 0307 	and.w	r3, r3, #7
 8007c84:	b29a      	uxth	r2, r3
 8007c86:	89fb      	ldrh	r3, [r7, #14]
 8007c88:	4313      	orrs	r3, r2
 8007c8a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	89fa      	ldrh	r2, [r7, #14]
 8007c92:	60da      	str	r2, [r3, #12]
 8007c94:	e04e      	b.n	8007d34 <UART_SetConfig+0x44c>
      }
      else
      {
        ret = HAL_ERROR;
 8007c96:	2301      	movs	r3, #1
 8007c98:	76bb      	strb	r3, [r7, #26]
 8007c9a:	e04b      	b.n	8007d34 <UART_SetConfig+0x44c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007c9c:	7efb      	ldrb	r3, [r7, #27]
 8007c9e:	2b08      	cmp	r3, #8
 8007ca0:	d827      	bhi.n	8007cf2 <UART_SetConfig+0x40a>
 8007ca2:	a201      	add	r2, pc, #4	; (adr r2, 8007ca8 <UART_SetConfig+0x3c0>)
 8007ca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ca8:	08007ccd 	.word	0x08007ccd
 8007cac:	08007cd5 	.word	0x08007cd5
 8007cb0:	08007cdd 	.word	0x08007cdd
 8007cb4:	08007cf3 	.word	0x08007cf3
 8007cb8:	08007ce3 	.word	0x08007ce3
 8007cbc:	08007cf3 	.word	0x08007cf3
 8007cc0:	08007cf3 	.word	0x08007cf3
 8007cc4:	08007cf3 	.word	0x08007cf3
 8007cc8:	08007ceb 	.word	0x08007ceb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007ccc:	f7fe fbb2 	bl	8006434 <HAL_RCC_GetPCLK1Freq>
 8007cd0:	6178      	str	r0, [r7, #20]
        break;
 8007cd2:	e013      	b.n	8007cfc <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007cd4:	f7fe fbc4 	bl	8006460 <HAL_RCC_GetPCLK2Freq>
 8007cd8:	6178      	str	r0, [r7, #20]
        break;
 8007cda:	e00f      	b.n	8007cfc <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007cdc:	4b1b      	ldr	r3, [pc, #108]	; (8007d4c <UART_SetConfig+0x464>)
 8007cde:	617b      	str	r3, [r7, #20]
        break;
 8007ce0:	e00c      	b.n	8007cfc <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007ce2:	f7fe fb0f 	bl	8006304 <HAL_RCC_GetSysClockFreq>
 8007ce6:	6178      	str	r0, [r7, #20]
        break;
 8007ce8:	e008      	b.n	8007cfc <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007cea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007cee:	617b      	str	r3, [r7, #20]
        break;
 8007cf0:	e004      	b.n	8007cfc <UART_SetConfig+0x414>
      default:
        pclk = 0U;
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007cf6:	2301      	movs	r3, #1
 8007cf8:	76bb      	strb	r3, [r7, #26]
        break;
 8007cfa:	bf00      	nop
    }

    if (pclk != 0U)
 8007cfc:	697b      	ldr	r3, [r7, #20]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d018      	beq.n	8007d34 <UART_SetConfig+0x44c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	685b      	ldr	r3, [r3, #4]
 8007d06:	085a      	lsrs	r2, r3, #1
 8007d08:	697b      	ldr	r3, [r7, #20]
 8007d0a:	441a      	add	r2, r3
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	685b      	ldr	r3, [r3, #4]
 8007d10:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d14:	b29b      	uxth	r3, r3
 8007d16:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007d18:	693b      	ldr	r3, [r7, #16]
 8007d1a:	2b0f      	cmp	r3, #15
 8007d1c:	d908      	bls.n	8007d30 <UART_SetConfig+0x448>
 8007d1e:	693b      	ldr	r3, [r7, #16]
 8007d20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d24:	d204      	bcs.n	8007d30 <UART_SetConfig+0x448>
      {
        huart->Instance->BRR = usartdiv;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	693a      	ldr	r2, [r7, #16]
 8007d2c:	60da      	str	r2, [r3, #12]
 8007d2e:	e001      	b.n	8007d34 <UART_SetConfig+0x44c>
      }
      else
      {
        ret = HAL_ERROR;
 8007d30:	2301      	movs	r3, #1
 8007d32:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2200      	movs	r2, #0
 8007d38:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	2200      	movs	r2, #0
 8007d3e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007d40:	7ebb      	ldrb	r3, [r7, #26]
}
 8007d42:	4618      	mov	r0, r3
 8007d44:	3720      	adds	r7, #32
 8007d46:	46bd      	mov	sp, r7
 8007d48:	bdb0      	pop	{r4, r5, r7, pc}
 8007d4a:	bf00      	nop
 8007d4c:	00f42400 	.word	0x00f42400

08007d50 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007d50:	b480      	push	{r7}
 8007d52:	b083      	sub	sp, #12
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d5c:	f003 0301 	and.w	r3, r3, #1
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d00a      	beq.n	8007d7a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	685b      	ldr	r3, [r3, #4]
 8007d6a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	430a      	orrs	r2, r1
 8007d78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d7e:	f003 0302 	and.w	r3, r3, #2
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d00a      	beq.n	8007d9c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	685b      	ldr	r3, [r3, #4]
 8007d8c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	430a      	orrs	r2, r1
 8007d9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007da0:	f003 0304 	and.w	r3, r3, #4
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d00a      	beq.n	8007dbe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	685b      	ldr	r3, [r3, #4]
 8007dae:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	430a      	orrs	r2, r1
 8007dbc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dc2:	f003 0308 	and.w	r3, r3, #8
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d00a      	beq.n	8007de0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	685b      	ldr	r3, [r3, #4]
 8007dd0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	430a      	orrs	r2, r1
 8007dde:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007de4:	f003 0310 	and.w	r3, r3, #16
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d00a      	beq.n	8007e02 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	689b      	ldr	r3, [r3, #8]
 8007df2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	430a      	orrs	r2, r1
 8007e00:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e06:	f003 0320 	and.w	r3, r3, #32
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d00a      	beq.n	8007e24 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	689b      	ldr	r3, [r3, #8]
 8007e14:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	430a      	orrs	r2, r1
 8007e22:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d01a      	beq.n	8007e66 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	685b      	ldr	r3, [r3, #4]
 8007e36:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	430a      	orrs	r2, r1
 8007e44:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007e4e:	d10a      	bne.n	8007e66 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	685b      	ldr	r3, [r3, #4]
 8007e56:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	430a      	orrs	r2, r1
 8007e64:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d00a      	beq.n	8007e88 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	685b      	ldr	r3, [r3, #4]
 8007e78:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	430a      	orrs	r2, r1
 8007e86:	605a      	str	r2, [r3, #4]
  }
}
 8007e88:	bf00      	nop
 8007e8a:	370c      	adds	r7, #12
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e92:	4770      	bx	lr

08007e94 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b086      	sub	sp, #24
 8007e98:	af02      	add	r7, sp, #8
 8007e9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007ea4:	f7fc fd18 	bl	80048d8 <HAL_GetTick>
 8007ea8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	f003 0308 	and.w	r3, r3, #8
 8007eb4:	2b08      	cmp	r3, #8
 8007eb6:	d10e      	bne.n	8007ed6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007eb8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007ebc:	9300      	str	r3, [sp, #0]
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007ec6:	6878      	ldr	r0, [r7, #4]
 8007ec8:	f000 f82d 	bl	8007f26 <UART_WaitOnFlagUntilTimeout>
 8007ecc:	4603      	mov	r3, r0
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d001      	beq.n	8007ed6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007ed2:	2303      	movs	r3, #3
 8007ed4:	e023      	b.n	8007f1e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	f003 0304 	and.w	r3, r3, #4
 8007ee0:	2b04      	cmp	r3, #4
 8007ee2:	d10e      	bne.n	8007f02 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007ee4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007ee8:	9300      	str	r3, [sp, #0]
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	2200      	movs	r2, #0
 8007eee:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007ef2:	6878      	ldr	r0, [r7, #4]
 8007ef4:	f000 f817 	bl	8007f26 <UART_WaitOnFlagUntilTimeout>
 8007ef8:	4603      	mov	r3, r0
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d001      	beq.n	8007f02 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007efe:	2303      	movs	r3, #3
 8007f00:	e00d      	b.n	8007f1e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	2220      	movs	r2, #32
 8007f06:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2220      	movs	r2, #32
 8007f0c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	2200      	movs	r2, #0
 8007f12:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2200      	movs	r2, #0
 8007f18:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007f1c:	2300      	movs	r3, #0
}
 8007f1e:	4618      	mov	r0, r3
 8007f20:	3710      	adds	r7, #16
 8007f22:	46bd      	mov	sp, r7
 8007f24:	bd80      	pop	{r7, pc}

08007f26 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007f26:	b580      	push	{r7, lr}
 8007f28:	b084      	sub	sp, #16
 8007f2a:	af00      	add	r7, sp, #0
 8007f2c:	60f8      	str	r0, [r7, #12]
 8007f2e:	60b9      	str	r1, [r7, #8]
 8007f30:	603b      	str	r3, [r7, #0]
 8007f32:	4613      	mov	r3, r2
 8007f34:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f36:	e05e      	b.n	8007ff6 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007f38:	69bb      	ldr	r3, [r7, #24]
 8007f3a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007f3e:	d05a      	beq.n	8007ff6 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f40:	f7fc fcca 	bl	80048d8 <HAL_GetTick>
 8007f44:	4602      	mov	r2, r0
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	1ad3      	subs	r3, r2, r3
 8007f4a:	69ba      	ldr	r2, [r7, #24]
 8007f4c:	429a      	cmp	r2, r3
 8007f4e:	d302      	bcc.n	8007f56 <UART_WaitOnFlagUntilTimeout+0x30>
 8007f50:	69bb      	ldr	r3, [r7, #24]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d11b      	bne.n	8007f8e <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	681a      	ldr	r2, [r3, #0]
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007f64:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	689a      	ldr	r2, [r3, #8]
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	f022 0201 	bic.w	r2, r2, #1
 8007f74:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	2220      	movs	r2, #32
 8007f7a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	2220      	movs	r2, #32
 8007f80:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	2200      	movs	r2, #0
 8007f86:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8007f8a:	2303      	movs	r3, #3
 8007f8c:	e043      	b.n	8008016 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	f003 0304 	and.w	r3, r3, #4
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d02c      	beq.n	8007ff6 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	69db      	ldr	r3, [r3, #28]
 8007fa2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007fa6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007faa:	d124      	bne.n	8007ff6 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007fb4:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	681a      	ldr	r2, [r3, #0]
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007fc4:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	689a      	ldr	r2, [r3, #8]
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f022 0201 	bic.w	r2, r2, #1
 8007fd4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	2220      	movs	r2, #32
 8007fda:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	2220      	movs	r2, #32
 8007fe0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	2220      	movs	r2, #32
 8007fe6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	2200      	movs	r2, #0
 8007fee:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8007ff2:	2303      	movs	r3, #3
 8007ff4:	e00f      	b.n	8008016 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	69da      	ldr	r2, [r3, #28]
 8007ffc:	68bb      	ldr	r3, [r7, #8]
 8007ffe:	4013      	ands	r3, r2
 8008000:	68ba      	ldr	r2, [r7, #8]
 8008002:	429a      	cmp	r2, r3
 8008004:	bf0c      	ite	eq
 8008006:	2301      	moveq	r3, #1
 8008008:	2300      	movne	r3, #0
 800800a:	b2db      	uxtb	r3, r3
 800800c:	461a      	mov	r2, r3
 800800e:	79fb      	ldrb	r3, [r7, #7]
 8008010:	429a      	cmp	r2, r3
 8008012:	d091      	beq.n	8007f38 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008014:	2300      	movs	r3, #0
}
 8008016:	4618      	mov	r0, r3
 8008018:	3710      	adds	r7, #16
 800801a:	46bd      	mov	sp, r7
 800801c:	bd80      	pop	{r7, pc}
	...

08008020 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008020:	b480      	push	{r7}
 8008022:	b085      	sub	sp, #20
 8008024:	af00      	add	r7, sp, #0
 8008026:	60f8      	str	r0, [r7, #12]
 8008028:	60b9      	str	r1, [r7, #8]
 800802a:	4613      	mov	r3, r2
 800802c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	68ba      	ldr	r2, [r7, #8]
 8008032:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	88fa      	ldrh	r2, [r7, #6]
 8008038:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	88fa      	ldrh	r2, [r7, #6]
 8008040:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	2200      	movs	r2, #0
 8008048:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	689b      	ldr	r3, [r3, #8]
 800804e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008052:	d10e      	bne.n	8008072 <UART_Start_Receive_IT+0x52>
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	691b      	ldr	r3, [r3, #16]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d105      	bne.n	8008068 <UART_Start_Receive_IT+0x48>
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008062:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008066:	e02d      	b.n	80080c4 <UART_Start_Receive_IT+0xa4>
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	22ff      	movs	r2, #255	; 0xff
 800806c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008070:	e028      	b.n	80080c4 <UART_Start_Receive_IT+0xa4>
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	689b      	ldr	r3, [r3, #8]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d10d      	bne.n	8008096 <UART_Start_Receive_IT+0x76>
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	691b      	ldr	r3, [r3, #16]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d104      	bne.n	800808c <UART_Start_Receive_IT+0x6c>
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	22ff      	movs	r2, #255	; 0xff
 8008086:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800808a:	e01b      	b.n	80080c4 <UART_Start_Receive_IT+0xa4>
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	227f      	movs	r2, #127	; 0x7f
 8008090:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008094:	e016      	b.n	80080c4 <UART_Start_Receive_IT+0xa4>
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	689b      	ldr	r3, [r3, #8]
 800809a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800809e:	d10d      	bne.n	80080bc <UART_Start_Receive_IT+0x9c>
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	691b      	ldr	r3, [r3, #16]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d104      	bne.n	80080b2 <UART_Start_Receive_IT+0x92>
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	227f      	movs	r2, #127	; 0x7f
 80080ac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80080b0:	e008      	b.n	80080c4 <UART_Start_Receive_IT+0xa4>
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	223f      	movs	r2, #63	; 0x3f
 80080b6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80080ba:	e003      	b.n	80080c4 <UART_Start_Receive_IT+0xa4>
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	2200      	movs	r2, #0
 80080c0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	2200      	movs	r2, #0
 80080c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	2222      	movs	r2, #34	; 0x22
 80080d0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	689a      	ldr	r2, [r3, #8]
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	f042 0201 	orr.w	r2, r2, #1
 80080e0:	609a      	str	r2, [r3, #8]
    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	689b      	ldr	r3, [r3, #8]
 80080e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080ea:	d107      	bne.n	80080fc <UART_Start_Receive_IT+0xdc>
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	691b      	ldr	r3, [r3, #16]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d103      	bne.n	80080fc <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	4a0c      	ldr	r2, [pc, #48]	; (8008128 <UART_Start_Receive_IT+0x108>)
 80080f8:	665a      	str	r2, [r3, #100]	; 0x64
 80080fa:	e002      	b.n	8008102 <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	4a0b      	ldr	r2, [pc, #44]	; (800812c <UART_Start_Receive_IT+0x10c>)
 8008100:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	2200      	movs	r2, #0
 8008106:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	681a      	ldr	r2, [r3, #0]
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8008118:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800811a:	2300      	movs	r3, #0
}
 800811c:	4618      	mov	r0, r3
 800811e:	3714      	adds	r7, #20
 8008120:	46bd      	mov	sp, r7
 8008122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008126:	4770      	bx	lr
 8008128:	08008209 	.word	0x08008209
 800812c:	08008131 	.word	0x08008131

08008130 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008130:	b580      	push	{r7, lr}
 8008132:	b084      	sub	sp, #16
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800813e:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008144:	2b22      	cmp	r3, #34	; 0x22
 8008146:	d151      	bne.n	80081ec <UART_RxISR_8BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800814e:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008150:	89bb      	ldrh	r3, [r7, #12]
 8008152:	b2d9      	uxtb	r1, r3
 8008154:	89fb      	ldrh	r3, [r7, #14]
 8008156:	b2da      	uxtb	r2, r3
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800815c:	400a      	ands	r2, r1
 800815e:	b2d2      	uxtb	r2, r2
 8008160:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008166:	1c5a      	adds	r2, r3, #1
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008172:	b29b      	uxth	r3, r3
 8008174:	3b01      	subs	r3, #1
 8008176:	b29a      	uxth	r2, r3
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008184:	b29b      	uxth	r3, r3
 8008186:	2b00      	cmp	r3, #0
 8008188:	d13a      	bne.n	8008200 <UART_RxISR_8BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	681a      	ldr	r2, [r3, #0]
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008198:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	689a      	ldr	r2, [r3, #8]
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	f022 0201 	bic.w	r2, r2, #1
 80081a8:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	2220      	movs	r2, #32
 80081ae:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2200      	movs	r2, #0
 80081b4:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80081ba:	2b01      	cmp	r3, #1
 80081bc:	d10f      	bne.n	80081de <UART_RxISR_8BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	681a      	ldr	r2, [r3, #0]
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	f022 0210 	bic.w	r2, r2, #16
 80081cc:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80081d4:	4619      	mov	r1, r3
 80081d6:	6878      	ldr	r0, [r7, #4]
 80081d8:	f7ff fb7a 	bl	80078d0 <HAL_UARTEx_RxEventCallback>
 80081dc:	e002      	b.n	80081e4 <UART_RxISR_8BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80081de:	6878      	ldr	r0, [r7, #4]
 80081e0:	f7ff fb6c 	bl	80078bc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2200      	movs	r2, #0
 80081e8:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80081ea:	e009      	b.n	8008200 <UART_RxISR_8BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	8b1b      	ldrh	r3, [r3, #24]
 80081f2:	b29a      	uxth	r2, r3
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	f042 0208 	orr.w	r2, r2, #8
 80081fc:	b292      	uxth	r2, r2
 80081fe:	831a      	strh	r2, [r3, #24]
}
 8008200:	bf00      	nop
 8008202:	3710      	adds	r7, #16
 8008204:	46bd      	mov	sp, r7
 8008206:	bd80      	pop	{r7, pc}

08008208 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008208:	b580      	push	{r7, lr}
 800820a:	b084      	sub	sp, #16
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008216:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800821c:	2b22      	cmp	r3, #34	; 0x22
 800821e:	d151      	bne.n	80082c4 <UART_RxISR_16BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008226:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800822c:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800822e:	89ba      	ldrh	r2, [r7, #12]
 8008230:	89fb      	ldrh	r3, [r7, #14]
 8008232:	4013      	ands	r3, r2
 8008234:	b29a      	uxth	r2, r3
 8008236:	68bb      	ldr	r3, [r7, #8]
 8008238:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800823e:	1c9a      	adds	r2, r3, #2
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800824a:	b29b      	uxth	r3, r3
 800824c:	3b01      	subs	r3, #1
 800824e:	b29a      	uxth	r2, r3
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800825c:	b29b      	uxth	r3, r3
 800825e:	2b00      	cmp	r3, #0
 8008260:	d13a      	bne.n	80082d8 <UART_RxISR_16BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	681a      	ldr	r2, [r3, #0]
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008270:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	689a      	ldr	r2, [r3, #8]
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	f022 0201 	bic.w	r2, r2, #1
 8008280:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	2220      	movs	r2, #32
 8008286:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2200      	movs	r2, #0
 800828c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008292:	2b01      	cmp	r3, #1
 8008294:	d10f      	bne.n	80082b6 <UART_RxISR_16BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	681a      	ldr	r2, [r3, #0]
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	f022 0210 	bic.w	r2, r2, #16
 80082a4:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80082ac:	4619      	mov	r1, r3
 80082ae:	6878      	ldr	r0, [r7, #4]
 80082b0:	f7ff fb0e 	bl	80078d0 <HAL_UARTEx_RxEventCallback>
 80082b4:	e002      	b.n	80082bc <UART_RxISR_16BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80082b6:	6878      	ldr	r0, [r7, #4]
 80082b8:	f7ff fb00 	bl	80078bc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	2200      	movs	r2, #0
 80082c0:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80082c2:	e009      	b.n	80082d8 <UART_RxISR_16BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	8b1b      	ldrh	r3, [r3, #24]
 80082ca:	b29a      	uxth	r2, r3
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	f042 0208 	orr.w	r2, r2, #8
 80082d4:	b292      	uxth	r2, r2
 80082d6:	831a      	strh	r2, [r3, #24]
}
 80082d8:	bf00      	nop
 80082da:	3710      	adds	r7, #16
 80082dc:	46bd      	mov	sp, r7
 80082de:	bd80      	pop	{r7, pc}

080082e0 <__errno>:
 80082e0:	4b01      	ldr	r3, [pc, #4]	; (80082e8 <__errno+0x8>)
 80082e2:	6818      	ldr	r0, [r3, #0]
 80082e4:	4770      	bx	lr
 80082e6:	bf00      	nop
 80082e8:	2000009c 	.word	0x2000009c

080082ec <__libc_init_array>:
 80082ec:	b570      	push	{r4, r5, r6, lr}
 80082ee:	4d0d      	ldr	r5, [pc, #52]	; (8008324 <__libc_init_array+0x38>)
 80082f0:	4c0d      	ldr	r4, [pc, #52]	; (8008328 <__libc_init_array+0x3c>)
 80082f2:	1b64      	subs	r4, r4, r5
 80082f4:	10a4      	asrs	r4, r4, #2
 80082f6:	2600      	movs	r6, #0
 80082f8:	42a6      	cmp	r6, r4
 80082fa:	d109      	bne.n	8008310 <__libc_init_array+0x24>
 80082fc:	4d0b      	ldr	r5, [pc, #44]	; (800832c <__libc_init_array+0x40>)
 80082fe:	4c0c      	ldr	r4, [pc, #48]	; (8008330 <__libc_init_array+0x44>)
 8008300:	f001 fb1a 	bl	8009938 <_init>
 8008304:	1b64      	subs	r4, r4, r5
 8008306:	10a4      	asrs	r4, r4, #2
 8008308:	2600      	movs	r6, #0
 800830a:	42a6      	cmp	r6, r4
 800830c:	d105      	bne.n	800831a <__libc_init_array+0x2e>
 800830e:	bd70      	pop	{r4, r5, r6, pc}
 8008310:	f855 3b04 	ldr.w	r3, [r5], #4
 8008314:	4798      	blx	r3
 8008316:	3601      	adds	r6, #1
 8008318:	e7ee      	b.n	80082f8 <__libc_init_array+0xc>
 800831a:	f855 3b04 	ldr.w	r3, [r5], #4
 800831e:	4798      	blx	r3
 8008320:	3601      	adds	r6, #1
 8008322:	e7f2      	b.n	800830a <__libc_init_array+0x1e>
 8008324:	0800c394 	.word	0x0800c394
 8008328:	0800c394 	.word	0x0800c394
 800832c:	0800c394 	.word	0x0800c394
 8008330:	0800c398 	.word	0x0800c398

08008334 <malloc>:
 8008334:	4b02      	ldr	r3, [pc, #8]	; (8008340 <malloc+0xc>)
 8008336:	4601      	mov	r1, r0
 8008338:	6818      	ldr	r0, [r3, #0]
 800833a:	f000 b869 	b.w	8008410 <_malloc_r>
 800833e:	bf00      	nop
 8008340:	2000009c 	.word	0x2000009c

08008344 <memcpy>:
 8008344:	440a      	add	r2, r1
 8008346:	4291      	cmp	r1, r2
 8008348:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800834c:	d100      	bne.n	8008350 <memcpy+0xc>
 800834e:	4770      	bx	lr
 8008350:	b510      	push	{r4, lr}
 8008352:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008356:	f803 4f01 	strb.w	r4, [r3, #1]!
 800835a:	4291      	cmp	r1, r2
 800835c:	d1f9      	bne.n	8008352 <memcpy+0xe>
 800835e:	bd10      	pop	{r4, pc}

08008360 <memset>:
 8008360:	4402      	add	r2, r0
 8008362:	4603      	mov	r3, r0
 8008364:	4293      	cmp	r3, r2
 8008366:	d100      	bne.n	800836a <memset+0xa>
 8008368:	4770      	bx	lr
 800836a:	f803 1b01 	strb.w	r1, [r3], #1
 800836e:	e7f9      	b.n	8008364 <memset+0x4>

08008370 <_free_r>:
 8008370:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008372:	2900      	cmp	r1, #0
 8008374:	d048      	beq.n	8008408 <_free_r+0x98>
 8008376:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800837a:	9001      	str	r0, [sp, #4]
 800837c:	2b00      	cmp	r3, #0
 800837e:	f1a1 0404 	sub.w	r4, r1, #4
 8008382:	bfb8      	it	lt
 8008384:	18e4      	addlt	r4, r4, r3
 8008386:	f000 fd41 	bl	8008e0c <__malloc_lock>
 800838a:	4a20      	ldr	r2, [pc, #128]	; (800840c <_free_r+0x9c>)
 800838c:	9801      	ldr	r0, [sp, #4]
 800838e:	6813      	ldr	r3, [r2, #0]
 8008390:	4615      	mov	r5, r2
 8008392:	b933      	cbnz	r3, 80083a2 <_free_r+0x32>
 8008394:	6063      	str	r3, [r4, #4]
 8008396:	6014      	str	r4, [r2, #0]
 8008398:	b003      	add	sp, #12
 800839a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800839e:	f000 bd3b 	b.w	8008e18 <__malloc_unlock>
 80083a2:	42a3      	cmp	r3, r4
 80083a4:	d90b      	bls.n	80083be <_free_r+0x4e>
 80083a6:	6821      	ldr	r1, [r4, #0]
 80083a8:	1862      	adds	r2, r4, r1
 80083aa:	4293      	cmp	r3, r2
 80083ac:	bf04      	itt	eq
 80083ae:	681a      	ldreq	r2, [r3, #0]
 80083b0:	685b      	ldreq	r3, [r3, #4]
 80083b2:	6063      	str	r3, [r4, #4]
 80083b4:	bf04      	itt	eq
 80083b6:	1852      	addeq	r2, r2, r1
 80083b8:	6022      	streq	r2, [r4, #0]
 80083ba:	602c      	str	r4, [r5, #0]
 80083bc:	e7ec      	b.n	8008398 <_free_r+0x28>
 80083be:	461a      	mov	r2, r3
 80083c0:	685b      	ldr	r3, [r3, #4]
 80083c2:	b10b      	cbz	r3, 80083c8 <_free_r+0x58>
 80083c4:	42a3      	cmp	r3, r4
 80083c6:	d9fa      	bls.n	80083be <_free_r+0x4e>
 80083c8:	6811      	ldr	r1, [r2, #0]
 80083ca:	1855      	adds	r5, r2, r1
 80083cc:	42a5      	cmp	r5, r4
 80083ce:	d10b      	bne.n	80083e8 <_free_r+0x78>
 80083d0:	6824      	ldr	r4, [r4, #0]
 80083d2:	4421      	add	r1, r4
 80083d4:	1854      	adds	r4, r2, r1
 80083d6:	42a3      	cmp	r3, r4
 80083d8:	6011      	str	r1, [r2, #0]
 80083da:	d1dd      	bne.n	8008398 <_free_r+0x28>
 80083dc:	681c      	ldr	r4, [r3, #0]
 80083de:	685b      	ldr	r3, [r3, #4]
 80083e0:	6053      	str	r3, [r2, #4]
 80083e2:	4421      	add	r1, r4
 80083e4:	6011      	str	r1, [r2, #0]
 80083e6:	e7d7      	b.n	8008398 <_free_r+0x28>
 80083e8:	d902      	bls.n	80083f0 <_free_r+0x80>
 80083ea:	230c      	movs	r3, #12
 80083ec:	6003      	str	r3, [r0, #0]
 80083ee:	e7d3      	b.n	8008398 <_free_r+0x28>
 80083f0:	6825      	ldr	r5, [r4, #0]
 80083f2:	1961      	adds	r1, r4, r5
 80083f4:	428b      	cmp	r3, r1
 80083f6:	bf04      	itt	eq
 80083f8:	6819      	ldreq	r1, [r3, #0]
 80083fa:	685b      	ldreq	r3, [r3, #4]
 80083fc:	6063      	str	r3, [r4, #4]
 80083fe:	bf04      	itt	eq
 8008400:	1949      	addeq	r1, r1, r5
 8008402:	6021      	streq	r1, [r4, #0]
 8008404:	6054      	str	r4, [r2, #4]
 8008406:	e7c7      	b.n	8008398 <_free_r+0x28>
 8008408:	b003      	add	sp, #12
 800840a:	bd30      	pop	{r4, r5, pc}
 800840c:	20000a20 	.word	0x20000a20

08008410 <_malloc_r>:
 8008410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008412:	1ccd      	adds	r5, r1, #3
 8008414:	f025 0503 	bic.w	r5, r5, #3
 8008418:	3508      	adds	r5, #8
 800841a:	2d0c      	cmp	r5, #12
 800841c:	bf38      	it	cc
 800841e:	250c      	movcc	r5, #12
 8008420:	2d00      	cmp	r5, #0
 8008422:	4606      	mov	r6, r0
 8008424:	db01      	blt.n	800842a <_malloc_r+0x1a>
 8008426:	42a9      	cmp	r1, r5
 8008428:	d903      	bls.n	8008432 <_malloc_r+0x22>
 800842a:	230c      	movs	r3, #12
 800842c:	6033      	str	r3, [r6, #0]
 800842e:	2000      	movs	r0, #0
 8008430:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008432:	f000 fceb 	bl	8008e0c <__malloc_lock>
 8008436:	4921      	ldr	r1, [pc, #132]	; (80084bc <_malloc_r+0xac>)
 8008438:	680a      	ldr	r2, [r1, #0]
 800843a:	4614      	mov	r4, r2
 800843c:	b99c      	cbnz	r4, 8008466 <_malloc_r+0x56>
 800843e:	4f20      	ldr	r7, [pc, #128]	; (80084c0 <_malloc_r+0xb0>)
 8008440:	683b      	ldr	r3, [r7, #0]
 8008442:	b923      	cbnz	r3, 800844e <_malloc_r+0x3e>
 8008444:	4621      	mov	r1, r4
 8008446:	4630      	mov	r0, r6
 8008448:	f000 f8ca 	bl	80085e0 <_sbrk_r>
 800844c:	6038      	str	r0, [r7, #0]
 800844e:	4629      	mov	r1, r5
 8008450:	4630      	mov	r0, r6
 8008452:	f000 f8c5 	bl	80085e0 <_sbrk_r>
 8008456:	1c43      	adds	r3, r0, #1
 8008458:	d123      	bne.n	80084a2 <_malloc_r+0x92>
 800845a:	230c      	movs	r3, #12
 800845c:	6033      	str	r3, [r6, #0]
 800845e:	4630      	mov	r0, r6
 8008460:	f000 fcda 	bl	8008e18 <__malloc_unlock>
 8008464:	e7e3      	b.n	800842e <_malloc_r+0x1e>
 8008466:	6823      	ldr	r3, [r4, #0]
 8008468:	1b5b      	subs	r3, r3, r5
 800846a:	d417      	bmi.n	800849c <_malloc_r+0x8c>
 800846c:	2b0b      	cmp	r3, #11
 800846e:	d903      	bls.n	8008478 <_malloc_r+0x68>
 8008470:	6023      	str	r3, [r4, #0]
 8008472:	441c      	add	r4, r3
 8008474:	6025      	str	r5, [r4, #0]
 8008476:	e004      	b.n	8008482 <_malloc_r+0x72>
 8008478:	6863      	ldr	r3, [r4, #4]
 800847a:	42a2      	cmp	r2, r4
 800847c:	bf0c      	ite	eq
 800847e:	600b      	streq	r3, [r1, #0]
 8008480:	6053      	strne	r3, [r2, #4]
 8008482:	4630      	mov	r0, r6
 8008484:	f000 fcc8 	bl	8008e18 <__malloc_unlock>
 8008488:	f104 000b 	add.w	r0, r4, #11
 800848c:	1d23      	adds	r3, r4, #4
 800848e:	f020 0007 	bic.w	r0, r0, #7
 8008492:	1ac2      	subs	r2, r0, r3
 8008494:	d0cc      	beq.n	8008430 <_malloc_r+0x20>
 8008496:	1a1b      	subs	r3, r3, r0
 8008498:	50a3      	str	r3, [r4, r2]
 800849a:	e7c9      	b.n	8008430 <_malloc_r+0x20>
 800849c:	4622      	mov	r2, r4
 800849e:	6864      	ldr	r4, [r4, #4]
 80084a0:	e7cc      	b.n	800843c <_malloc_r+0x2c>
 80084a2:	1cc4      	adds	r4, r0, #3
 80084a4:	f024 0403 	bic.w	r4, r4, #3
 80084a8:	42a0      	cmp	r0, r4
 80084aa:	d0e3      	beq.n	8008474 <_malloc_r+0x64>
 80084ac:	1a21      	subs	r1, r4, r0
 80084ae:	4630      	mov	r0, r6
 80084b0:	f000 f896 	bl	80085e0 <_sbrk_r>
 80084b4:	3001      	adds	r0, #1
 80084b6:	d1dd      	bne.n	8008474 <_malloc_r+0x64>
 80084b8:	e7cf      	b.n	800845a <_malloc_r+0x4a>
 80084ba:	bf00      	nop
 80084bc:	20000a20 	.word	0x20000a20
 80084c0:	20000a24 	.word	0x20000a24

080084c4 <iprintf>:
 80084c4:	b40f      	push	{r0, r1, r2, r3}
 80084c6:	4b0a      	ldr	r3, [pc, #40]	; (80084f0 <iprintf+0x2c>)
 80084c8:	b513      	push	{r0, r1, r4, lr}
 80084ca:	681c      	ldr	r4, [r3, #0]
 80084cc:	b124      	cbz	r4, 80084d8 <iprintf+0x14>
 80084ce:	69a3      	ldr	r3, [r4, #24]
 80084d0:	b913      	cbnz	r3, 80084d8 <iprintf+0x14>
 80084d2:	4620      	mov	r0, r4
 80084d4:	f000 fb84 	bl	8008be0 <__sinit>
 80084d8:	ab05      	add	r3, sp, #20
 80084da:	9a04      	ldr	r2, [sp, #16]
 80084dc:	68a1      	ldr	r1, [r4, #8]
 80084de:	9301      	str	r3, [sp, #4]
 80084e0:	4620      	mov	r0, r4
 80084e2:	f000 fe25 	bl	8009130 <_vfiprintf_r>
 80084e6:	b002      	add	sp, #8
 80084e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80084ec:	b004      	add	sp, #16
 80084ee:	4770      	bx	lr
 80084f0:	2000009c 	.word	0x2000009c

080084f4 <_puts_r>:
 80084f4:	b570      	push	{r4, r5, r6, lr}
 80084f6:	460e      	mov	r6, r1
 80084f8:	4605      	mov	r5, r0
 80084fa:	b118      	cbz	r0, 8008504 <_puts_r+0x10>
 80084fc:	6983      	ldr	r3, [r0, #24]
 80084fe:	b90b      	cbnz	r3, 8008504 <_puts_r+0x10>
 8008500:	f000 fb6e 	bl	8008be0 <__sinit>
 8008504:	69ab      	ldr	r3, [r5, #24]
 8008506:	68ac      	ldr	r4, [r5, #8]
 8008508:	b913      	cbnz	r3, 8008510 <_puts_r+0x1c>
 800850a:	4628      	mov	r0, r5
 800850c:	f000 fb68 	bl	8008be0 <__sinit>
 8008510:	4b2c      	ldr	r3, [pc, #176]	; (80085c4 <_puts_r+0xd0>)
 8008512:	429c      	cmp	r4, r3
 8008514:	d120      	bne.n	8008558 <_puts_r+0x64>
 8008516:	686c      	ldr	r4, [r5, #4]
 8008518:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800851a:	07db      	lsls	r3, r3, #31
 800851c:	d405      	bmi.n	800852a <_puts_r+0x36>
 800851e:	89a3      	ldrh	r3, [r4, #12]
 8008520:	0598      	lsls	r0, r3, #22
 8008522:	d402      	bmi.n	800852a <_puts_r+0x36>
 8008524:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008526:	f000 fc0b 	bl	8008d40 <__retarget_lock_acquire_recursive>
 800852a:	89a3      	ldrh	r3, [r4, #12]
 800852c:	0719      	lsls	r1, r3, #28
 800852e:	d51d      	bpl.n	800856c <_puts_r+0x78>
 8008530:	6923      	ldr	r3, [r4, #16]
 8008532:	b1db      	cbz	r3, 800856c <_puts_r+0x78>
 8008534:	3e01      	subs	r6, #1
 8008536:	68a3      	ldr	r3, [r4, #8]
 8008538:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800853c:	3b01      	subs	r3, #1
 800853e:	60a3      	str	r3, [r4, #8]
 8008540:	bb39      	cbnz	r1, 8008592 <_puts_r+0x9e>
 8008542:	2b00      	cmp	r3, #0
 8008544:	da38      	bge.n	80085b8 <_puts_r+0xc4>
 8008546:	4622      	mov	r2, r4
 8008548:	210a      	movs	r1, #10
 800854a:	4628      	mov	r0, r5
 800854c:	f000 f950 	bl	80087f0 <__swbuf_r>
 8008550:	3001      	adds	r0, #1
 8008552:	d011      	beq.n	8008578 <_puts_r+0x84>
 8008554:	250a      	movs	r5, #10
 8008556:	e011      	b.n	800857c <_puts_r+0x88>
 8008558:	4b1b      	ldr	r3, [pc, #108]	; (80085c8 <_puts_r+0xd4>)
 800855a:	429c      	cmp	r4, r3
 800855c:	d101      	bne.n	8008562 <_puts_r+0x6e>
 800855e:	68ac      	ldr	r4, [r5, #8]
 8008560:	e7da      	b.n	8008518 <_puts_r+0x24>
 8008562:	4b1a      	ldr	r3, [pc, #104]	; (80085cc <_puts_r+0xd8>)
 8008564:	429c      	cmp	r4, r3
 8008566:	bf08      	it	eq
 8008568:	68ec      	ldreq	r4, [r5, #12]
 800856a:	e7d5      	b.n	8008518 <_puts_r+0x24>
 800856c:	4621      	mov	r1, r4
 800856e:	4628      	mov	r0, r5
 8008570:	f000 f990 	bl	8008894 <__swsetup_r>
 8008574:	2800      	cmp	r0, #0
 8008576:	d0dd      	beq.n	8008534 <_puts_r+0x40>
 8008578:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800857c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800857e:	07da      	lsls	r2, r3, #31
 8008580:	d405      	bmi.n	800858e <_puts_r+0x9a>
 8008582:	89a3      	ldrh	r3, [r4, #12]
 8008584:	059b      	lsls	r3, r3, #22
 8008586:	d402      	bmi.n	800858e <_puts_r+0x9a>
 8008588:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800858a:	f000 fbda 	bl	8008d42 <__retarget_lock_release_recursive>
 800858e:	4628      	mov	r0, r5
 8008590:	bd70      	pop	{r4, r5, r6, pc}
 8008592:	2b00      	cmp	r3, #0
 8008594:	da04      	bge.n	80085a0 <_puts_r+0xac>
 8008596:	69a2      	ldr	r2, [r4, #24]
 8008598:	429a      	cmp	r2, r3
 800859a:	dc06      	bgt.n	80085aa <_puts_r+0xb6>
 800859c:	290a      	cmp	r1, #10
 800859e:	d004      	beq.n	80085aa <_puts_r+0xb6>
 80085a0:	6823      	ldr	r3, [r4, #0]
 80085a2:	1c5a      	adds	r2, r3, #1
 80085a4:	6022      	str	r2, [r4, #0]
 80085a6:	7019      	strb	r1, [r3, #0]
 80085a8:	e7c5      	b.n	8008536 <_puts_r+0x42>
 80085aa:	4622      	mov	r2, r4
 80085ac:	4628      	mov	r0, r5
 80085ae:	f000 f91f 	bl	80087f0 <__swbuf_r>
 80085b2:	3001      	adds	r0, #1
 80085b4:	d1bf      	bne.n	8008536 <_puts_r+0x42>
 80085b6:	e7df      	b.n	8008578 <_puts_r+0x84>
 80085b8:	6823      	ldr	r3, [r4, #0]
 80085ba:	250a      	movs	r5, #10
 80085bc:	1c5a      	adds	r2, r3, #1
 80085be:	6022      	str	r2, [r4, #0]
 80085c0:	701d      	strb	r5, [r3, #0]
 80085c2:	e7db      	b.n	800857c <_puts_r+0x88>
 80085c4:	0800c318 	.word	0x0800c318
 80085c8:	0800c338 	.word	0x0800c338
 80085cc:	0800c2f8 	.word	0x0800c2f8

080085d0 <puts>:
 80085d0:	4b02      	ldr	r3, [pc, #8]	; (80085dc <puts+0xc>)
 80085d2:	4601      	mov	r1, r0
 80085d4:	6818      	ldr	r0, [r3, #0]
 80085d6:	f7ff bf8d 	b.w	80084f4 <_puts_r>
 80085da:	bf00      	nop
 80085dc:	2000009c 	.word	0x2000009c

080085e0 <_sbrk_r>:
 80085e0:	b538      	push	{r3, r4, r5, lr}
 80085e2:	4d06      	ldr	r5, [pc, #24]	; (80085fc <_sbrk_r+0x1c>)
 80085e4:	2300      	movs	r3, #0
 80085e6:	4604      	mov	r4, r0
 80085e8:	4608      	mov	r0, r1
 80085ea:	602b      	str	r3, [r5, #0]
 80085ec:	f7fb fb90 	bl	8003d10 <_sbrk>
 80085f0:	1c43      	adds	r3, r0, #1
 80085f2:	d102      	bne.n	80085fa <_sbrk_r+0x1a>
 80085f4:	682b      	ldr	r3, [r5, #0]
 80085f6:	b103      	cbz	r3, 80085fa <_sbrk_r+0x1a>
 80085f8:	6023      	str	r3, [r4, #0]
 80085fa:	bd38      	pop	{r3, r4, r5, pc}
 80085fc:	20000cf0 	.word	0x20000cf0

08008600 <siprintf>:
 8008600:	b40e      	push	{r1, r2, r3}
 8008602:	b500      	push	{lr}
 8008604:	b09c      	sub	sp, #112	; 0x70
 8008606:	ab1d      	add	r3, sp, #116	; 0x74
 8008608:	9002      	str	r0, [sp, #8]
 800860a:	9006      	str	r0, [sp, #24]
 800860c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008610:	4809      	ldr	r0, [pc, #36]	; (8008638 <siprintf+0x38>)
 8008612:	9107      	str	r1, [sp, #28]
 8008614:	9104      	str	r1, [sp, #16]
 8008616:	4909      	ldr	r1, [pc, #36]	; (800863c <siprintf+0x3c>)
 8008618:	f853 2b04 	ldr.w	r2, [r3], #4
 800861c:	9105      	str	r1, [sp, #20]
 800861e:	6800      	ldr	r0, [r0, #0]
 8008620:	9301      	str	r3, [sp, #4]
 8008622:	a902      	add	r1, sp, #8
 8008624:	f000 fc5a 	bl	8008edc <_svfiprintf_r>
 8008628:	9b02      	ldr	r3, [sp, #8]
 800862a:	2200      	movs	r2, #0
 800862c:	701a      	strb	r2, [r3, #0]
 800862e:	b01c      	add	sp, #112	; 0x70
 8008630:	f85d eb04 	ldr.w	lr, [sp], #4
 8008634:	b003      	add	sp, #12
 8008636:	4770      	bx	lr
 8008638:	2000009c 	.word	0x2000009c
 800863c:	ffff0208 	.word	0xffff0208

08008640 <strcat>:
 8008640:	b510      	push	{r4, lr}
 8008642:	4602      	mov	r2, r0
 8008644:	7814      	ldrb	r4, [r2, #0]
 8008646:	4613      	mov	r3, r2
 8008648:	3201      	adds	r2, #1
 800864a:	2c00      	cmp	r4, #0
 800864c:	d1fa      	bne.n	8008644 <strcat+0x4>
 800864e:	3b01      	subs	r3, #1
 8008650:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008654:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008658:	2a00      	cmp	r2, #0
 800865a:	d1f9      	bne.n	8008650 <strcat+0x10>
 800865c:	bd10      	pop	{r4, pc}

0800865e <strcpy>:
 800865e:	4603      	mov	r3, r0
 8008660:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008664:	f803 2b01 	strb.w	r2, [r3], #1
 8008668:	2a00      	cmp	r2, #0
 800866a:	d1f9      	bne.n	8008660 <strcpy+0x2>
 800866c:	4770      	bx	lr

0800866e <strncpy>:
 800866e:	b510      	push	{r4, lr}
 8008670:	3901      	subs	r1, #1
 8008672:	4603      	mov	r3, r0
 8008674:	b132      	cbz	r2, 8008684 <strncpy+0x16>
 8008676:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800867a:	f803 4b01 	strb.w	r4, [r3], #1
 800867e:	3a01      	subs	r2, #1
 8008680:	2c00      	cmp	r4, #0
 8008682:	d1f7      	bne.n	8008674 <strncpy+0x6>
 8008684:	441a      	add	r2, r3
 8008686:	2100      	movs	r1, #0
 8008688:	4293      	cmp	r3, r2
 800868a:	d100      	bne.n	800868e <strncpy+0x20>
 800868c:	bd10      	pop	{r4, pc}
 800868e:	f803 1b01 	strb.w	r1, [r3], #1
 8008692:	e7f9      	b.n	8008688 <strncpy+0x1a>

08008694 <strstr>:
 8008694:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008696:	780c      	ldrb	r4, [r1, #0]
 8008698:	b164      	cbz	r4, 80086b4 <strstr+0x20>
 800869a:	4603      	mov	r3, r0
 800869c:	781a      	ldrb	r2, [r3, #0]
 800869e:	4618      	mov	r0, r3
 80086a0:	1c5e      	adds	r6, r3, #1
 80086a2:	b90a      	cbnz	r2, 80086a8 <strstr+0x14>
 80086a4:	4610      	mov	r0, r2
 80086a6:	e005      	b.n	80086b4 <strstr+0x20>
 80086a8:	4294      	cmp	r4, r2
 80086aa:	d108      	bne.n	80086be <strstr+0x2a>
 80086ac:	460d      	mov	r5, r1
 80086ae:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 80086b2:	b902      	cbnz	r2, 80086b6 <strstr+0x22>
 80086b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80086b6:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 80086ba:	4297      	cmp	r7, r2
 80086bc:	d0f7      	beq.n	80086ae <strstr+0x1a>
 80086be:	4633      	mov	r3, r6
 80086c0:	e7ec      	b.n	800869c <strstr+0x8>
	...

080086c4 <strtok>:
 80086c4:	4b16      	ldr	r3, [pc, #88]	; (8008720 <strtok+0x5c>)
 80086c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80086c8:	681e      	ldr	r6, [r3, #0]
 80086ca:	6db4      	ldr	r4, [r6, #88]	; 0x58
 80086cc:	4605      	mov	r5, r0
 80086ce:	b9fc      	cbnz	r4, 8008710 <strtok+0x4c>
 80086d0:	2050      	movs	r0, #80	; 0x50
 80086d2:	9101      	str	r1, [sp, #4]
 80086d4:	f7ff fe2e 	bl	8008334 <malloc>
 80086d8:	9901      	ldr	r1, [sp, #4]
 80086da:	65b0      	str	r0, [r6, #88]	; 0x58
 80086dc:	4602      	mov	r2, r0
 80086de:	b920      	cbnz	r0, 80086ea <strtok+0x26>
 80086e0:	4b10      	ldr	r3, [pc, #64]	; (8008724 <strtok+0x60>)
 80086e2:	4811      	ldr	r0, [pc, #68]	; (8008728 <strtok+0x64>)
 80086e4:	2157      	movs	r1, #87	; 0x57
 80086e6:	f000 f943 	bl	8008970 <__assert_func>
 80086ea:	e9c0 4400 	strd	r4, r4, [r0]
 80086ee:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80086f2:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80086f6:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80086fa:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80086fe:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8008702:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8008706:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800870a:	6184      	str	r4, [r0, #24]
 800870c:	7704      	strb	r4, [r0, #28]
 800870e:	6244      	str	r4, [r0, #36]	; 0x24
 8008710:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8008712:	2301      	movs	r3, #1
 8008714:	4628      	mov	r0, r5
 8008716:	b002      	add	sp, #8
 8008718:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800871c:	f000 b806 	b.w	800872c <__strtok_r>
 8008720:	2000009c 	.word	0x2000009c
 8008724:	0800c244 	.word	0x0800c244
 8008728:	0800c25b 	.word	0x0800c25b

0800872c <__strtok_r>:
 800872c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800872e:	b908      	cbnz	r0, 8008734 <__strtok_r+0x8>
 8008730:	6810      	ldr	r0, [r2, #0]
 8008732:	b188      	cbz	r0, 8008758 <__strtok_r+0x2c>
 8008734:	4604      	mov	r4, r0
 8008736:	4620      	mov	r0, r4
 8008738:	f814 5b01 	ldrb.w	r5, [r4], #1
 800873c:	460f      	mov	r7, r1
 800873e:	f817 6b01 	ldrb.w	r6, [r7], #1
 8008742:	b91e      	cbnz	r6, 800874c <__strtok_r+0x20>
 8008744:	b965      	cbnz	r5, 8008760 <__strtok_r+0x34>
 8008746:	6015      	str	r5, [r2, #0]
 8008748:	4628      	mov	r0, r5
 800874a:	e005      	b.n	8008758 <__strtok_r+0x2c>
 800874c:	42b5      	cmp	r5, r6
 800874e:	d1f6      	bne.n	800873e <__strtok_r+0x12>
 8008750:	2b00      	cmp	r3, #0
 8008752:	d1f0      	bne.n	8008736 <__strtok_r+0xa>
 8008754:	6014      	str	r4, [r2, #0]
 8008756:	7003      	strb	r3, [r0, #0]
 8008758:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800875a:	461c      	mov	r4, r3
 800875c:	e00c      	b.n	8008778 <__strtok_r+0x4c>
 800875e:	b915      	cbnz	r5, 8008766 <__strtok_r+0x3a>
 8008760:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008764:	460e      	mov	r6, r1
 8008766:	f816 5b01 	ldrb.w	r5, [r6], #1
 800876a:	42ab      	cmp	r3, r5
 800876c:	d1f7      	bne.n	800875e <__strtok_r+0x32>
 800876e:	2b00      	cmp	r3, #0
 8008770:	d0f3      	beq.n	800875a <__strtok_r+0x2e>
 8008772:	2300      	movs	r3, #0
 8008774:	f804 3c01 	strb.w	r3, [r4, #-1]
 8008778:	6014      	str	r4, [r2, #0]
 800877a:	e7ed      	b.n	8008758 <__strtok_r+0x2c>

0800877c <_vsniprintf_r>:
 800877c:	b530      	push	{r4, r5, lr}
 800877e:	1e14      	subs	r4, r2, #0
 8008780:	4605      	mov	r5, r0
 8008782:	b09b      	sub	sp, #108	; 0x6c
 8008784:	4618      	mov	r0, r3
 8008786:	da05      	bge.n	8008794 <_vsniprintf_r+0x18>
 8008788:	238b      	movs	r3, #139	; 0x8b
 800878a:	602b      	str	r3, [r5, #0]
 800878c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008790:	b01b      	add	sp, #108	; 0x6c
 8008792:	bd30      	pop	{r4, r5, pc}
 8008794:	f44f 7302 	mov.w	r3, #520	; 0x208
 8008798:	f8ad 300c 	strh.w	r3, [sp, #12]
 800879c:	bf14      	ite	ne
 800879e:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 80087a2:	4623      	moveq	r3, r4
 80087a4:	9302      	str	r3, [sp, #8]
 80087a6:	9305      	str	r3, [sp, #20]
 80087a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80087ac:	9100      	str	r1, [sp, #0]
 80087ae:	9104      	str	r1, [sp, #16]
 80087b0:	f8ad 300e 	strh.w	r3, [sp, #14]
 80087b4:	4602      	mov	r2, r0
 80087b6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80087b8:	4669      	mov	r1, sp
 80087ba:	4628      	mov	r0, r5
 80087bc:	f000 fb8e 	bl	8008edc <_svfiprintf_r>
 80087c0:	1c43      	adds	r3, r0, #1
 80087c2:	bfbc      	itt	lt
 80087c4:	238b      	movlt	r3, #139	; 0x8b
 80087c6:	602b      	strlt	r3, [r5, #0]
 80087c8:	2c00      	cmp	r4, #0
 80087ca:	d0e1      	beq.n	8008790 <_vsniprintf_r+0x14>
 80087cc:	9b00      	ldr	r3, [sp, #0]
 80087ce:	2200      	movs	r2, #0
 80087d0:	701a      	strb	r2, [r3, #0]
 80087d2:	e7dd      	b.n	8008790 <_vsniprintf_r+0x14>

080087d4 <vsniprintf>:
 80087d4:	b507      	push	{r0, r1, r2, lr}
 80087d6:	9300      	str	r3, [sp, #0]
 80087d8:	4613      	mov	r3, r2
 80087da:	460a      	mov	r2, r1
 80087dc:	4601      	mov	r1, r0
 80087de:	4803      	ldr	r0, [pc, #12]	; (80087ec <vsniprintf+0x18>)
 80087e0:	6800      	ldr	r0, [r0, #0]
 80087e2:	f7ff ffcb 	bl	800877c <_vsniprintf_r>
 80087e6:	b003      	add	sp, #12
 80087e8:	f85d fb04 	ldr.w	pc, [sp], #4
 80087ec:	2000009c 	.word	0x2000009c

080087f0 <__swbuf_r>:
 80087f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087f2:	460e      	mov	r6, r1
 80087f4:	4614      	mov	r4, r2
 80087f6:	4605      	mov	r5, r0
 80087f8:	b118      	cbz	r0, 8008802 <__swbuf_r+0x12>
 80087fa:	6983      	ldr	r3, [r0, #24]
 80087fc:	b90b      	cbnz	r3, 8008802 <__swbuf_r+0x12>
 80087fe:	f000 f9ef 	bl	8008be0 <__sinit>
 8008802:	4b21      	ldr	r3, [pc, #132]	; (8008888 <__swbuf_r+0x98>)
 8008804:	429c      	cmp	r4, r3
 8008806:	d12b      	bne.n	8008860 <__swbuf_r+0x70>
 8008808:	686c      	ldr	r4, [r5, #4]
 800880a:	69a3      	ldr	r3, [r4, #24]
 800880c:	60a3      	str	r3, [r4, #8]
 800880e:	89a3      	ldrh	r3, [r4, #12]
 8008810:	071a      	lsls	r2, r3, #28
 8008812:	d52f      	bpl.n	8008874 <__swbuf_r+0x84>
 8008814:	6923      	ldr	r3, [r4, #16]
 8008816:	b36b      	cbz	r3, 8008874 <__swbuf_r+0x84>
 8008818:	6923      	ldr	r3, [r4, #16]
 800881a:	6820      	ldr	r0, [r4, #0]
 800881c:	1ac0      	subs	r0, r0, r3
 800881e:	6963      	ldr	r3, [r4, #20]
 8008820:	b2f6      	uxtb	r6, r6
 8008822:	4283      	cmp	r3, r0
 8008824:	4637      	mov	r7, r6
 8008826:	dc04      	bgt.n	8008832 <__swbuf_r+0x42>
 8008828:	4621      	mov	r1, r4
 800882a:	4628      	mov	r0, r5
 800882c:	f000 f944 	bl	8008ab8 <_fflush_r>
 8008830:	bb30      	cbnz	r0, 8008880 <__swbuf_r+0x90>
 8008832:	68a3      	ldr	r3, [r4, #8]
 8008834:	3b01      	subs	r3, #1
 8008836:	60a3      	str	r3, [r4, #8]
 8008838:	6823      	ldr	r3, [r4, #0]
 800883a:	1c5a      	adds	r2, r3, #1
 800883c:	6022      	str	r2, [r4, #0]
 800883e:	701e      	strb	r6, [r3, #0]
 8008840:	6963      	ldr	r3, [r4, #20]
 8008842:	3001      	adds	r0, #1
 8008844:	4283      	cmp	r3, r0
 8008846:	d004      	beq.n	8008852 <__swbuf_r+0x62>
 8008848:	89a3      	ldrh	r3, [r4, #12]
 800884a:	07db      	lsls	r3, r3, #31
 800884c:	d506      	bpl.n	800885c <__swbuf_r+0x6c>
 800884e:	2e0a      	cmp	r6, #10
 8008850:	d104      	bne.n	800885c <__swbuf_r+0x6c>
 8008852:	4621      	mov	r1, r4
 8008854:	4628      	mov	r0, r5
 8008856:	f000 f92f 	bl	8008ab8 <_fflush_r>
 800885a:	b988      	cbnz	r0, 8008880 <__swbuf_r+0x90>
 800885c:	4638      	mov	r0, r7
 800885e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008860:	4b0a      	ldr	r3, [pc, #40]	; (800888c <__swbuf_r+0x9c>)
 8008862:	429c      	cmp	r4, r3
 8008864:	d101      	bne.n	800886a <__swbuf_r+0x7a>
 8008866:	68ac      	ldr	r4, [r5, #8]
 8008868:	e7cf      	b.n	800880a <__swbuf_r+0x1a>
 800886a:	4b09      	ldr	r3, [pc, #36]	; (8008890 <__swbuf_r+0xa0>)
 800886c:	429c      	cmp	r4, r3
 800886e:	bf08      	it	eq
 8008870:	68ec      	ldreq	r4, [r5, #12]
 8008872:	e7ca      	b.n	800880a <__swbuf_r+0x1a>
 8008874:	4621      	mov	r1, r4
 8008876:	4628      	mov	r0, r5
 8008878:	f000 f80c 	bl	8008894 <__swsetup_r>
 800887c:	2800      	cmp	r0, #0
 800887e:	d0cb      	beq.n	8008818 <__swbuf_r+0x28>
 8008880:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8008884:	e7ea      	b.n	800885c <__swbuf_r+0x6c>
 8008886:	bf00      	nop
 8008888:	0800c318 	.word	0x0800c318
 800888c:	0800c338 	.word	0x0800c338
 8008890:	0800c2f8 	.word	0x0800c2f8

08008894 <__swsetup_r>:
 8008894:	4b32      	ldr	r3, [pc, #200]	; (8008960 <__swsetup_r+0xcc>)
 8008896:	b570      	push	{r4, r5, r6, lr}
 8008898:	681d      	ldr	r5, [r3, #0]
 800889a:	4606      	mov	r6, r0
 800889c:	460c      	mov	r4, r1
 800889e:	b125      	cbz	r5, 80088aa <__swsetup_r+0x16>
 80088a0:	69ab      	ldr	r3, [r5, #24]
 80088a2:	b913      	cbnz	r3, 80088aa <__swsetup_r+0x16>
 80088a4:	4628      	mov	r0, r5
 80088a6:	f000 f99b 	bl	8008be0 <__sinit>
 80088aa:	4b2e      	ldr	r3, [pc, #184]	; (8008964 <__swsetup_r+0xd0>)
 80088ac:	429c      	cmp	r4, r3
 80088ae:	d10f      	bne.n	80088d0 <__swsetup_r+0x3c>
 80088b0:	686c      	ldr	r4, [r5, #4]
 80088b2:	89a3      	ldrh	r3, [r4, #12]
 80088b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80088b8:	0719      	lsls	r1, r3, #28
 80088ba:	d42c      	bmi.n	8008916 <__swsetup_r+0x82>
 80088bc:	06dd      	lsls	r5, r3, #27
 80088be:	d411      	bmi.n	80088e4 <__swsetup_r+0x50>
 80088c0:	2309      	movs	r3, #9
 80088c2:	6033      	str	r3, [r6, #0]
 80088c4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80088c8:	81a3      	strh	r3, [r4, #12]
 80088ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80088ce:	e03e      	b.n	800894e <__swsetup_r+0xba>
 80088d0:	4b25      	ldr	r3, [pc, #148]	; (8008968 <__swsetup_r+0xd4>)
 80088d2:	429c      	cmp	r4, r3
 80088d4:	d101      	bne.n	80088da <__swsetup_r+0x46>
 80088d6:	68ac      	ldr	r4, [r5, #8]
 80088d8:	e7eb      	b.n	80088b2 <__swsetup_r+0x1e>
 80088da:	4b24      	ldr	r3, [pc, #144]	; (800896c <__swsetup_r+0xd8>)
 80088dc:	429c      	cmp	r4, r3
 80088de:	bf08      	it	eq
 80088e0:	68ec      	ldreq	r4, [r5, #12]
 80088e2:	e7e6      	b.n	80088b2 <__swsetup_r+0x1e>
 80088e4:	0758      	lsls	r0, r3, #29
 80088e6:	d512      	bpl.n	800890e <__swsetup_r+0x7a>
 80088e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80088ea:	b141      	cbz	r1, 80088fe <__swsetup_r+0x6a>
 80088ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80088f0:	4299      	cmp	r1, r3
 80088f2:	d002      	beq.n	80088fa <__swsetup_r+0x66>
 80088f4:	4630      	mov	r0, r6
 80088f6:	f7ff fd3b 	bl	8008370 <_free_r>
 80088fa:	2300      	movs	r3, #0
 80088fc:	6363      	str	r3, [r4, #52]	; 0x34
 80088fe:	89a3      	ldrh	r3, [r4, #12]
 8008900:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008904:	81a3      	strh	r3, [r4, #12]
 8008906:	2300      	movs	r3, #0
 8008908:	6063      	str	r3, [r4, #4]
 800890a:	6923      	ldr	r3, [r4, #16]
 800890c:	6023      	str	r3, [r4, #0]
 800890e:	89a3      	ldrh	r3, [r4, #12]
 8008910:	f043 0308 	orr.w	r3, r3, #8
 8008914:	81a3      	strh	r3, [r4, #12]
 8008916:	6923      	ldr	r3, [r4, #16]
 8008918:	b94b      	cbnz	r3, 800892e <__swsetup_r+0x9a>
 800891a:	89a3      	ldrh	r3, [r4, #12]
 800891c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008920:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008924:	d003      	beq.n	800892e <__swsetup_r+0x9a>
 8008926:	4621      	mov	r1, r4
 8008928:	4630      	mov	r0, r6
 800892a:	f000 fa2f 	bl	8008d8c <__smakebuf_r>
 800892e:	89a0      	ldrh	r0, [r4, #12]
 8008930:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008934:	f010 0301 	ands.w	r3, r0, #1
 8008938:	d00a      	beq.n	8008950 <__swsetup_r+0xbc>
 800893a:	2300      	movs	r3, #0
 800893c:	60a3      	str	r3, [r4, #8]
 800893e:	6963      	ldr	r3, [r4, #20]
 8008940:	425b      	negs	r3, r3
 8008942:	61a3      	str	r3, [r4, #24]
 8008944:	6923      	ldr	r3, [r4, #16]
 8008946:	b943      	cbnz	r3, 800895a <__swsetup_r+0xc6>
 8008948:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800894c:	d1ba      	bne.n	80088c4 <__swsetup_r+0x30>
 800894e:	bd70      	pop	{r4, r5, r6, pc}
 8008950:	0781      	lsls	r1, r0, #30
 8008952:	bf58      	it	pl
 8008954:	6963      	ldrpl	r3, [r4, #20]
 8008956:	60a3      	str	r3, [r4, #8]
 8008958:	e7f4      	b.n	8008944 <__swsetup_r+0xb0>
 800895a:	2000      	movs	r0, #0
 800895c:	e7f7      	b.n	800894e <__swsetup_r+0xba>
 800895e:	bf00      	nop
 8008960:	2000009c 	.word	0x2000009c
 8008964:	0800c318 	.word	0x0800c318
 8008968:	0800c338 	.word	0x0800c338
 800896c:	0800c2f8 	.word	0x0800c2f8

08008970 <__assert_func>:
 8008970:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008972:	4614      	mov	r4, r2
 8008974:	461a      	mov	r2, r3
 8008976:	4b09      	ldr	r3, [pc, #36]	; (800899c <__assert_func+0x2c>)
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	4605      	mov	r5, r0
 800897c:	68d8      	ldr	r0, [r3, #12]
 800897e:	b14c      	cbz	r4, 8008994 <__assert_func+0x24>
 8008980:	4b07      	ldr	r3, [pc, #28]	; (80089a0 <__assert_func+0x30>)
 8008982:	9100      	str	r1, [sp, #0]
 8008984:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008988:	4906      	ldr	r1, [pc, #24]	; (80089a4 <__assert_func+0x34>)
 800898a:	462b      	mov	r3, r5
 800898c:	f000 f9a6 	bl	8008cdc <fiprintf>
 8008990:	f000 fee8 	bl	8009764 <abort>
 8008994:	4b04      	ldr	r3, [pc, #16]	; (80089a8 <__assert_func+0x38>)
 8008996:	461c      	mov	r4, r3
 8008998:	e7f3      	b.n	8008982 <__assert_func+0x12>
 800899a:	bf00      	nop
 800899c:	2000009c 	.word	0x2000009c
 80089a0:	0800c2bc 	.word	0x0800c2bc
 80089a4:	0800c2c9 	.word	0x0800c2c9
 80089a8:	0800c2f7 	.word	0x0800c2f7

080089ac <__sflush_r>:
 80089ac:	898a      	ldrh	r2, [r1, #12]
 80089ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089b2:	4605      	mov	r5, r0
 80089b4:	0710      	lsls	r0, r2, #28
 80089b6:	460c      	mov	r4, r1
 80089b8:	d458      	bmi.n	8008a6c <__sflush_r+0xc0>
 80089ba:	684b      	ldr	r3, [r1, #4]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	dc05      	bgt.n	80089cc <__sflush_r+0x20>
 80089c0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	dc02      	bgt.n	80089cc <__sflush_r+0x20>
 80089c6:	2000      	movs	r0, #0
 80089c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80089ce:	2e00      	cmp	r6, #0
 80089d0:	d0f9      	beq.n	80089c6 <__sflush_r+0x1a>
 80089d2:	2300      	movs	r3, #0
 80089d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80089d8:	682f      	ldr	r7, [r5, #0]
 80089da:	602b      	str	r3, [r5, #0]
 80089dc:	d032      	beq.n	8008a44 <__sflush_r+0x98>
 80089de:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80089e0:	89a3      	ldrh	r3, [r4, #12]
 80089e2:	075a      	lsls	r2, r3, #29
 80089e4:	d505      	bpl.n	80089f2 <__sflush_r+0x46>
 80089e6:	6863      	ldr	r3, [r4, #4]
 80089e8:	1ac0      	subs	r0, r0, r3
 80089ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80089ec:	b10b      	cbz	r3, 80089f2 <__sflush_r+0x46>
 80089ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80089f0:	1ac0      	subs	r0, r0, r3
 80089f2:	2300      	movs	r3, #0
 80089f4:	4602      	mov	r2, r0
 80089f6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80089f8:	6a21      	ldr	r1, [r4, #32]
 80089fa:	4628      	mov	r0, r5
 80089fc:	47b0      	blx	r6
 80089fe:	1c43      	adds	r3, r0, #1
 8008a00:	89a3      	ldrh	r3, [r4, #12]
 8008a02:	d106      	bne.n	8008a12 <__sflush_r+0x66>
 8008a04:	6829      	ldr	r1, [r5, #0]
 8008a06:	291d      	cmp	r1, #29
 8008a08:	d82c      	bhi.n	8008a64 <__sflush_r+0xb8>
 8008a0a:	4a2a      	ldr	r2, [pc, #168]	; (8008ab4 <__sflush_r+0x108>)
 8008a0c:	40ca      	lsrs	r2, r1
 8008a0e:	07d6      	lsls	r6, r2, #31
 8008a10:	d528      	bpl.n	8008a64 <__sflush_r+0xb8>
 8008a12:	2200      	movs	r2, #0
 8008a14:	6062      	str	r2, [r4, #4]
 8008a16:	04d9      	lsls	r1, r3, #19
 8008a18:	6922      	ldr	r2, [r4, #16]
 8008a1a:	6022      	str	r2, [r4, #0]
 8008a1c:	d504      	bpl.n	8008a28 <__sflush_r+0x7c>
 8008a1e:	1c42      	adds	r2, r0, #1
 8008a20:	d101      	bne.n	8008a26 <__sflush_r+0x7a>
 8008a22:	682b      	ldr	r3, [r5, #0]
 8008a24:	b903      	cbnz	r3, 8008a28 <__sflush_r+0x7c>
 8008a26:	6560      	str	r0, [r4, #84]	; 0x54
 8008a28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008a2a:	602f      	str	r7, [r5, #0]
 8008a2c:	2900      	cmp	r1, #0
 8008a2e:	d0ca      	beq.n	80089c6 <__sflush_r+0x1a>
 8008a30:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008a34:	4299      	cmp	r1, r3
 8008a36:	d002      	beq.n	8008a3e <__sflush_r+0x92>
 8008a38:	4628      	mov	r0, r5
 8008a3a:	f7ff fc99 	bl	8008370 <_free_r>
 8008a3e:	2000      	movs	r0, #0
 8008a40:	6360      	str	r0, [r4, #52]	; 0x34
 8008a42:	e7c1      	b.n	80089c8 <__sflush_r+0x1c>
 8008a44:	6a21      	ldr	r1, [r4, #32]
 8008a46:	2301      	movs	r3, #1
 8008a48:	4628      	mov	r0, r5
 8008a4a:	47b0      	blx	r6
 8008a4c:	1c41      	adds	r1, r0, #1
 8008a4e:	d1c7      	bne.n	80089e0 <__sflush_r+0x34>
 8008a50:	682b      	ldr	r3, [r5, #0]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d0c4      	beq.n	80089e0 <__sflush_r+0x34>
 8008a56:	2b1d      	cmp	r3, #29
 8008a58:	d001      	beq.n	8008a5e <__sflush_r+0xb2>
 8008a5a:	2b16      	cmp	r3, #22
 8008a5c:	d101      	bne.n	8008a62 <__sflush_r+0xb6>
 8008a5e:	602f      	str	r7, [r5, #0]
 8008a60:	e7b1      	b.n	80089c6 <__sflush_r+0x1a>
 8008a62:	89a3      	ldrh	r3, [r4, #12]
 8008a64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a68:	81a3      	strh	r3, [r4, #12]
 8008a6a:	e7ad      	b.n	80089c8 <__sflush_r+0x1c>
 8008a6c:	690f      	ldr	r7, [r1, #16]
 8008a6e:	2f00      	cmp	r7, #0
 8008a70:	d0a9      	beq.n	80089c6 <__sflush_r+0x1a>
 8008a72:	0793      	lsls	r3, r2, #30
 8008a74:	680e      	ldr	r6, [r1, #0]
 8008a76:	bf08      	it	eq
 8008a78:	694b      	ldreq	r3, [r1, #20]
 8008a7a:	600f      	str	r7, [r1, #0]
 8008a7c:	bf18      	it	ne
 8008a7e:	2300      	movne	r3, #0
 8008a80:	eba6 0807 	sub.w	r8, r6, r7
 8008a84:	608b      	str	r3, [r1, #8]
 8008a86:	f1b8 0f00 	cmp.w	r8, #0
 8008a8a:	dd9c      	ble.n	80089c6 <__sflush_r+0x1a>
 8008a8c:	6a21      	ldr	r1, [r4, #32]
 8008a8e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008a90:	4643      	mov	r3, r8
 8008a92:	463a      	mov	r2, r7
 8008a94:	4628      	mov	r0, r5
 8008a96:	47b0      	blx	r6
 8008a98:	2800      	cmp	r0, #0
 8008a9a:	dc06      	bgt.n	8008aaa <__sflush_r+0xfe>
 8008a9c:	89a3      	ldrh	r3, [r4, #12]
 8008a9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008aa2:	81a3      	strh	r3, [r4, #12]
 8008aa4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008aa8:	e78e      	b.n	80089c8 <__sflush_r+0x1c>
 8008aaa:	4407      	add	r7, r0
 8008aac:	eba8 0800 	sub.w	r8, r8, r0
 8008ab0:	e7e9      	b.n	8008a86 <__sflush_r+0xda>
 8008ab2:	bf00      	nop
 8008ab4:	20400001 	.word	0x20400001

08008ab8 <_fflush_r>:
 8008ab8:	b538      	push	{r3, r4, r5, lr}
 8008aba:	690b      	ldr	r3, [r1, #16]
 8008abc:	4605      	mov	r5, r0
 8008abe:	460c      	mov	r4, r1
 8008ac0:	b913      	cbnz	r3, 8008ac8 <_fflush_r+0x10>
 8008ac2:	2500      	movs	r5, #0
 8008ac4:	4628      	mov	r0, r5
 8008ac6:	bd38      	pop	{r3, r4, r5, pc}
 8008ac8:	b118      	cbz	r0, 8008ad2 <_fflush_r+0x1a>
 8008aca:	6983      	ldr	r3, [r0, #24]
 8008acc:	b90b      	cbnz	r3, 8008ad2 <_fflush_r+0x1a>
 8008ace:	f000 f887 	bl	8008be0 <__sinit>
 8008ad2:	4b14      	ldr	r3, [pc, #80]	; (8008b24 <_fflush_r+0x6c>)
 8008ad4:	429c      	cmp	r4, r3
 8008ad6:	d11b      	bne.n	8008b10 <_fflush_r+0x58>
 8008ad8:	686c      	ldr	r4, [r5, #4]
 8008ada:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d0ef      	beq.n	8008ac2 <_fflush_r+0xa>
 8008ae2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008ae4:	07d0      	lsls	r0, r2, #31
 8008ae6:	d404      	bmi.n	8008af2 <_fflush_r+0x3a>
 8008ae8:	0599      	lsls	r1, r3, #22
 8008aea:	d402      	bmi.n	8008af2 <_fflush_r+0x3a>
 8008aec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008aee:	f000 f927 	bl	8008d40 <__retarget_lock_acquire_recursive>
 8008af2:	4628      	mov	r0, r5
 8008af4:	4621      	mov	r1, r4
 8008af6:	f7ff ff59 	bl	80089ac <__sflush_r>
 8008afa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008afc:	07da      	lsls	r2, r3, #31
 8008afe:	4605      	mov	r5, r0
 8008b00:	d4e0      	bmi.n	8008ac4 <_fflush_r+0xc>
 8008b02:	89a3      	ldrh	r3, [r4, #12]
 8008b04:	059b      	lsls	r3, r3, #22
 8008b06:	d4dd      	bmi.n	8008ac4 <_fflush_r+0xc>
 8008b08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008b0a:	f000 f91a 	bl	8008d42 <__retarget_lock_release_recursive>
 8008b0e:	e7d9      	b.n	8008ac4 <_fflush_r+0xc>
 8008b10:	4b05      	ldr	r3, [pc, #20]	; (8008b28 <_fflush_r+0x70>)
 8008b12:	429c      	cmp	r4, r3
 8008b14:	d101      	bne.n	8008b1a <_fflush_r+0x62>
 8008b16:	68ac      	ldr	r4, [r5, #8]
 8008b18:	e7df      	b.n	8008ada <_fflush_r+0x22>
 8008b1a:	4b04      	ldr	r3, [pc, #16]	; (8008b2c <_fflush_r+0x74>)
 8008b1c:	429c      	cmp	r4, r3
 8008b1e:	bf08      	it	eq
 8008b20:	68ec      	ldreq	r4, [r5, #12]
 8008b22:	e7da      	b.n	8008ada <_fflush_r+0x22>
 8008b24:	0800c318 	.word	0x0800c318
 8008b28:	0800c338 	.word	0x0800c338
 8008b2c:	0800c2f8 	.word	0x0800c2f8

08008b30 <std>:
 8008b30:	2300      	movs	r3, #0
 8008b32:	b510      	push	{r4, lr}
 8008b34:	4604      	mov	r4, r0
 8008b36:	e9c0 3300 	strd	r3, r3, [r0]
 8008b3a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008b3e:	6083      	str	r3, [r0, #8]
 8008b40:	8181      	strh	r1, [r0, #12]
 8008b42:	6643      	str	r3, [r0, #100]	; 0x64
 8008b44:	81c2      	strh	r2, [r0, #14]
 8008b46:	6183      	str	r3, [r0, #24]
 8008b48:	4619      	mov	r1, r3
 8008b4a:	2208      	movs	r2, #8
 8008b4c:	305c      	adds	r0, #92	; 0x5c
 8008b4e:	f7ff fc07 	bl	8008360 <memset>
 8008b52:	4b05      	ldr	r3, [pc, #20]	; (8008b68 <std+0x38>)
 8008b54:	6263      	str	r3, [r4, #36]	; 0x24
 8008b56:	4b05      	ldr	r3, [pc, #20]	; (8008b6c <std+0x3c>)
 8008b58:	62a3      	str	r3, [r4, #40]	; 0x28
 8008b5a:	4b05      	ldr	r3, [pc, #20]	; (8008b70 <std+0x40>)
 8008b5c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008b5e:	4b05      	ldr	r3, [pc, #20]	; (8008b74 <std+0x44>)
 8008b60:	6224      	str	r4, [r4, #32]
 8008b62:	6323      	str	r3, [r4, #48]	; 0x30
 8008b64:	bd10      	pop	{r4, pc}
 8008b66:	bf00      	nop
 8008b68:	080096b9 	.word	0x080096b9
 8008b6c:	080096db 	.word	0x080096db
 8008b70:	08009713 	.word	0x08009713
 8008b74:	08009737 	.word	0x08009737

08008b78 <_cleanup_r>:
 8008b78:	4901      	ldr	r1, [pc, #4]	; (8008b80 <_cleanup_r+0x8>)
 8008b7a:	f000 b8c1 	b.w	8008d00 <_fwalk_reent>
 8008b7e:	bf00      	nop
 8008b80:	08008ab9 	.word	0x08008ab9

08008b84 <__sfmoreglue>:
 8008b84:	b570      	push	{r4, r5, r6, lr}
 8008b86:	1e4a      	subs	r2, r1, #1
 8008b88:	2568      	movs	r5, #104	; 0x68
 8008b8a:	4355      	muls	r5, r2
 8008b8c:	460e      	mov	r6, r1
 8008b8e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008b92:	f7ff fc3d 	bl	8008410 <_malloc_r>
 8008b96:	4604      	mov	r4, r0
 8008b98:	b140      	cbz	r0, 8008bac <__sfmoreglue+0x28>
 8008b9a:	2100      	movs	r1, #0
 8008b9c:	e9c0 1600 	strd	r1, r6, [r0]
 8008ba0:	300c      	adds	r0, #12
 8008ba2:	60a0      	str	r0, [r4, #8]
 8008ba4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008ba8:	f7ff fbda 	bl	8008360 <memset>
 8008bac:	4620      	mov	r0, r4
 8008bae:	bd70      	pop	{r4, r5, r6, pc}

08008bb0 <__sfp_lock_acquire>:
 8008bb0:	4801      	ldr	r0, [pc, #4]	; (8008bb8 <__sfp_lock_acquire+0x8>)
 8008bb2:	f000 b8c5 	b.w	8008d40 <__retarget_lock_acquire_recursive>
 8008bb6:	bf00      	nop
 8008bb8:	20000cec 	.word	0x20000cec

08008bbc <__sfp_lock_release>:
 8008bbc:	4801      	ldr	r0, [pc, #4]	; (8008bc4 <__sfp_lock_release+0x8>)
 8008bbe:	f000 b8c0 	b.w	8008d42 <__retarget_lock_release_recursive>
 8008bc2:	bf00      	nop
 8008bc4:	20000cec 	.word	0x20000cec

08008bc8 <__sinit_lock_acquire>:
 8008bc8:	4801      	ldr	r0, [pc, #4]	; (8008bd0 <__sinit_lock_acquire+0x8>)
 8008bca:	f000 b8b9 	b.w	8008d40 <__retarget_lock_acquire_recursive>
 8008bce:	bf00      	nop
 8008bd0:	20000ce7 	.word	0x20000ce7

08008bd4 <__sinit_lock_release>:
 8008bd4:	4801      	ldr	r0, [pc, #4]	; (8008bdc <__sinit_lock_release+0x8>)
 8008bd6:	f000 b8b4 	b.w	8008d42 <__retarget_lock_release_recursive>
 8008bda:	bf00      	nop
 8008bdc:	20000ce7 	.word	0x20000ce7

08008be0 <__sinit>:
 8008be0:	b510      	push	{r4, lr}
 8008be2:	4604      	mov	r4, r0
 8008be4:	f7ff fff0 	bl	8008bc8 <__sinit_lock_acquire>
 8008be8:	69a3      	ldr	r3, [r4, #24]
 8008bea:	b11b      	cbz	r3, 8008bf4 <__sinit+0x14>
 8008bec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008bf0:	f7ff bff0 	b.w	8008bd4 <__sinit_lock_release>
 8008bf4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008bf8:	6523      	str	r3, [r4, #80]	; 0x50
 8008bfa:	4b13      	ldr	r3, [pc, #76]	; (8008c48 <__sinit+0x68>)
 8008bfc:	4a13      	ldr	r2, [pc, #76]	; (8008c4c <__sinit+0x6c>)
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	62a2      	str	r2, [r4, #40]	; 0x28
 8008c02:	42a3      	cmp	r3, r4
 8008c04:	bf04      	itt	eq
 8008c06:	2301      	moveq	r3, #1
 8008c08:	61a3      	streq	r3, [r4, #24]
 8008c0a:	4620      	mov	r0, r4
 8008c0c:	f000 f820 	bl	8008c50 <__sfp>
 8008c10:	6060      	str	r0, [r4, #4]
 8008c12:	4620      	mov	r0, r4
 8008c14:	f000 f81c 	bl	8008c50 <__sfp>
 8008c18:	60a0      	str	r0, [r4, #8]
 8008c1a:	4620      	mov	r0, r4
 8008c1c:	f000 f818 	bl	8008c50 <__sfp>
 8008c20:	2200      	movs	r2, #0
 8008c22:	60e0      	str	r0, [r4, #12]
 8008c24:	2104      	movs	r1, #4
 8008c26:	6860      	ldr	r0, [r4, #4]
 8008c28:	f7ff ff82 	bl	8008b30 <std>
 8008c2c:	68a0      	ldr	r0, [r4, #8]
 8008c2e:	2201      	movs	r2, #1
 8008c30:	2109      	movs	r1, #9
 8008c32:	f7ff ff7d 	bl	8008b30 <std>
 8008c36:	68e0      	ldr	r0, [r4, #12]
 8008c38:	2202      	movs	r2, #2
 8008c3a:	2112      	movs	r1, #18
 8008c3c:	f7ff ff78 	bl	8008b30 <std>
 8008c40:	2301      	movs	r3, #1
 8008c42:	61a3      	str	r3, [r4, #24]
 8008c44:	e7d2      	b.n	8008bec <__sinit+0xc>
 8008c46:	bf00      	nop
 8008c48:	0800c240 	.word	0x0800c240
 8008c4c:	08008b79 	.word	0x08008b79

08008c50 <__sfp>:
 8008c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c52:	4607      	mov	r7, r0
 8008c54:	f7ff ffac 	bl	8008bb0 <__sfp_lock_acquire>
 8008c58:	4b1e      	ldr	r3, [pc, #120]	; (8008cd4 <__sfp+0x84>)
 8008c5a:	681e      	ldr	r6, [r3, #0]
 8008c5c:	69b3      	ldr	r3, [r6, #24]
 8008c5e:	b913      	cbnz	r3, 8008c66 <__sfp+0x16>
 8008c60:	4630      	mov	r0, r6
 8008c62:	f7ff ffbd 	bl	8008be0 <__sinit>
 8008c66:	3648      	adds	r6, #72	; 0x48
 8008c68:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008c6c:	3b01      	subs	r3, #1
 8008c6e:	d503      	bpl.n	8008c78 <__sfp+0x28>
 8008c70:	6833      	ldr	r3, [r6, #0]
 8008c72:	b30b      	cbz	r3, 8008cb8 <__sfp+0x68>
 8008c74:	6836      	ldr	r6, [r6, #0]
 8008c76:	e7f7      	b.n	8008c68 <__sfp+0x18>
 8008c78:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008c7c:	b9d5      	cbnz	r5, 8008cb4 <__sfp+0x64>
 8008c7e:	4b16      	ldr	r3, [pc, #88]	; (8008cd8 <__sfp+0x88>)
 8008c80:	60e3      	str	r3, [r4, #12]
 8008c82:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008c86:	6665      	str	r5, [r4, #100]	; 0x64
 8008c88:	f000 f859 	bl	8008d3e <__retarget_lock_init_recursive>
 8008c8c:	f7ff ff96 	bl	8008bbc <__sfp_lock_release>
 8008c90:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008c94:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008c98:	6025      	str	r5, [r4, #0]
 8008c9a:	61a5      	str	r5, [r4, #24]
 8008c9c:	2208      	movs	r2, #8
 8008c9e:	4629      	mov	r1, r5
 8008ca0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008ca4:	f7ff fb5c 	bl	8008360 <memset>
 8008ca8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008cac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008cb0:	4620      	mov	r0, r4
 8008cb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008cb4:	3468      	adds	r4, #104	; 0x68
 8008cb6:	e7d9      	b.n	8008c6c <__sfp+0x1c>
 8008cb8:	2104      	movs	r1, #4
 8008cba:	4638      	mov	r0, r7
 8008cbc:	f7ff ff62 	bl	8008b84 <__sfmoreglue>
 8008cc0:	4604      	mov	r4, r0
 8008cc2:	6030      	str	r0, [r6, #0]
 8008cc4:	2800      	cmp	r0, #0
 8008cc6:	d1d5      	bne.n	8008c74 <__sfp+0x24>
 8008cc8:	f7ff ff78 	bl	8008bbc <__sfp_lock_release>
 8008ccc:	230c      	movs	r3, #12
 8008cce:	603b      	str	r3, [r7, #0]
 8008cd0:	e7ee      	b.n	8008cb0 <__sfp+0x60>
 8008cd2:	bf00      	nop
 8008cd4:	0800c240 	.word	0x0800c240
 8008cd8:	ffff0001 	.word	0xffff0001

08008cdc <fiprintf>:
 8008cdc:	b40e      	push	{r1, r2, r3}
 8008cde:	b503      	push	{r0, r1, lr}
 8008ce0:	4601      	mov	r1, r0
 8008ce2:	ab03      	add	r3, sp, #12
 8008ce4:	4805      	ldr	r0, [pc, #20]	; (8008cfc <fiprintf+0x20>)
 8008ce6:	f853 2b04 	ldr.w	r2, [r3], #4
 8008cea:	6800      	ldr	r0, [r0, #0]
 8008cec:	9301      	str	r3, [sp, #4]
 8008cee:	f000 fa1f 	bl	8009130 <_vfiprintf_r>
 8008cf2:	b002      	add	sp, #8
 8008cf4:	f85d eb04 	ldr.w	lr, [sp], #4
 8008cf8:	b003      	add	sp, #12
 8008cfa:	4770      	bx	lr
 8008cfc:	2000009c 	.word	0x2000009c

08008d00 <_fwalk_reent>:
 8008d00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d04:	4606      	mov	r6, r0
 8008d06:	4688      	mov	r8, r1
 8008d08:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008d0c:	2700      	movs	r7, #0
 8008d0e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008d12:	f1b9 0901 	subs.w	r9, r9, #1
 8008d16:	d505      	bpl.n	8008d24 <_fwalk_reent+0x24>
 8008d18:	6824      	ldr	r4, [r4, #0]
 8008d1a:	2c00      	cmp	r4, #0
 8008d1c:	d1f7      	bne.n	8008d0e <_fwalk_reent+0xe>
 8008d1e:	4638      	mov	r0, r7
 8008d20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d24:	89ab      	ldrh	r3, [r5, #12]
 8008d26:	2b01      	cmp	r3, #1
 8008d28:	d907      	bls.n	8008d3a <_fwalk_reent+0x3a>
 8008d2a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008d2e:	3301      	adds	r3, #1
 8008d30:	d003      	beq.n	8008d3a <_fwalk_reent+0x3a>
 8008d32:	4629      	mov	r1, r5
 8008d34:	4630      	mov	r0, r6
 8008d36:	47c0      	blx	r8
 8008d38:	4307      	orrs	r7, r0
 8008d3a:	3568      	adds	r5, #104	; 0x68
 8008d3c:	e7e9      	b.n	8008d12 <_fwalk_reent+0x12>

08008d3e <__retarget_lock_init_recursive>:
 8008d3e:	4770      	bx	lr

08008d40 <__retarget_lock_acquire_recursive>:
 8008d40:	4770      	bx	lr

08008d42 <__retarget_lock_release_recursive>:
 8008d42:	4770      	bx	lr

08008d44 <__swhatbuf_r>:
 8008d44:	b570      	push	{r4, r5, r6, lr}
 8008d46:	460e      	mov	r6, r1
 8008d48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d4c:	2900      	cmp	r1, #0
 8008d4e:	b096      	sub	sp, #88	; 0x58
 8008d50:	4614      	mov	r4, r2
 8008d52:	461d      	mov	r5, r3
 8008d54:	da07      	bge.n	8008d66 <__swhatbuf_r+0x22>
 8008d56:	2300      	movs	r3, #0
 8008d58:	602b      	str	r3, [r5, #0]
 8008d5a:	89b3      	ldrh	r3, [r6, #12]
 8008d5c:	061a      	lsls	r2, r3, #24
 8008d5e:	d410      	bmi.n	8008d82 <__swhatbuf_r+0x3e>
 8008d60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008d64:	e00e      	b.n	8008d84 <__swhatbuf_r+0x40>
 8008d66:	466a      	mov	r2, sp
 8008d68:	f000 fd14 	bl	8009794 <_fstat_r>
 8008d6c:	2800      	cmp	r0, #0
 8008d6e:	dbf2      	blt.n	8008d56 <__swhatbuf_r+0x12>
 8008d70:	9a01      	ldr	r2, [sp, #4]
 8008d72:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008d76:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008d7a:	425a      	negs	r2, r3
 8008d7c:	415a      	adcs	r2, r3
 8008d7e:	602a      	str	r2, [r5, #0]
 8008d80:	e7ee      	b.n	8008d60 <__swhatbuf_r+0x1c>
 8008d82:	2340      	movs	r3, #64	; 0x40
 8008d84:	2000      	movs	r0, #0
 8008d86:	6023      	str	r3, [r4, #0]
 8008d88:	b016      	add	sp, #88	; 0x58
 8008d8a:	bd70      	pop	{r4, r5, r6, pc}

08008d8c <__smakebuf_r>:
 8008d8c:	898b      	ldrh	r3, [r1, #12]
 8008d8e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008d90:	079d      	lsls	r5, r3, #30
 8008d92:	4606      	mov	r6, r0
 8008d94:	460c      	mov	r4, r1
 8008d96:	d507      	bpl.n	8008da8 <__smakebuf_r+0x1c>
 8008d98:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008d9c:	6023      	str	r3, [r4, #0]
 8008d9e:	6123      	str	r3, [r4, #16]
 8008da0:	2301      	movs	r3, #1
 8008da2:	6163      	str	r3, [r4, #20]
 8008da4:	b002      	add	sp, #8
 8008da6:	bd70      	pop	{r4, r5, r6, pc}
 8008da8:	ab01      	add	r3, sp, #4
 8008daa:	466a      	mov	r2, sp
 8008dac:	f7ff ffca 	bl	8008d44 <__swhatbuf_r>
 8008db0:	9900      	ldr	r1, [sp, #0]
 8008db2:	4605      	mov	r5, r0
 8008db4:	4630      	mov	r0, r6
 8008db6:	f7ff fb2b 	bl	8008410 <_malloc_r>
 8008dba:	b948      	cbnz	r0, 8008dd0 <__smakebuf_r+0x44>
 8008dbc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008dc0:	059a      	lsls	r2, r3, #22
 8008dc2:	d4ef      	bmi.n	8008da4 <__smakebuf_r+0x18>
 8008dc4:	f023 0303 	bic.w	r3, r3, #3
 8008dc8:	f043 0302 	orr.w	r3, r3, #2
 8008dcc:	81a3      	strh	r3, [r4, #12]
 8008dce:	e7e3      	b.n	8008d98 <__smakebuf_r+0xc>
 8008dd0:	4b0d      	ldr	r3, [pc, #52]	; (8008e08 <__smakebuf_r+0x7c>)
 8008dd2:	62b3      	str	r3, [r6, #40]	; 0x28
 8008dd4:	89a3      	ldrh	r3, [r4, #12]
 8008dd6:	6020      	str	r0, [r4, #0]
 8008dd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ddc:	81a3      	strh	r3, [r4, #12]
 8008dde:	9b00      	ldr	r3, [sp, #0]
 8008de0:	6163      	str	r3, [r4, #20]
 8008de2:	9b01      	ldr	r3, [sp, #4]
 8008de4:	6120      	str	r0, [r4, #16]
 8008de6:	b15b      	cbz	r3, 8008e00 <__smakebuf_r+0x74>
 8008de8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008dec:	4630      	mov	r0, r6
 8008dee:	f000 fce3 	bl	80097b8 <_isatty_r>
 8008df2:	b128      	cbz	r0, 8008e00 <__smakebuf_r+0x74>
 8008df4:	89a3      	ldrh	r3, [r4, #12]
 8008df6:	f023 0303 	bic.w	r3, r3, #3
 8008dfa:	f043 0301 	orr.w	r3, r3, #1
 8008dfe:	81a3      	strh	r3, [r4, #12]
 8008e00:	89a0      	ldrh	r0, [r4, #12]
 8008e02:	4305      	orrs	r5, r0
 8008e04:	81a5      	strh	r5, [r4, #12]
 8008e06:	e7cd      	b.n	8008da4 <__smakebuf_r+0x18>
 8008e08:	08008b79 	.word	0x08008b79

08008e0c <__malloc_lock>:
 8008e0c:	4801      	ldr	r0, [pc, #4]	; (8008e14 <__malloc_lock+0x8>)
 8008e0e:	f7ff bf97 	b.w	8008d40 <__retarget_lock_acquire_recursive>
 8008e12:	bf00      	nop
 8008e14:	20000ce8 	.word	0x20000ce8

08008e18 <__malloc_unlock>:
 8008e18:	4801      	ldr	r0, [pc, #4]	; (8008e20 <__malloc_unlock+0x8>)
 8008e1a:	f7ff bf92 	b.w	8008d42 <__retarget_lock_release_recursive>
 8008e1e:	bf00      	nop
 8008e20:	20000ce8 	.word	0x20000ce8

08008e24 <__ssputs_r>:
 8008e24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e28:	688e      	ldr	r6, [r1, #8]
 8008e2a:	429e      	cmp	r6, r3
 8008e2c:	4682      	mov	sl, r0
 8008e2e:	460c      	mov	r4, r1
 8008e30:	4690      	mov	r8, r2
 8008e32:	461f      	mov	r7, r3
 8008e34:	d838      	bhi.n	8008ea8 <__ssputs_r+0x84>
 8008e36:	898a      	ldrh	r2, [r1, #12]
 8008e38:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008e3c:	d032      	beq.n	8008ea4 <__ssputs_r+0x80>
 8008e3e:	6825      	ldr	r5, [r4, #0]
 8008e40:	6909      	ldr	r1, [r1, #16]
 8008e42:	eba5 0901 	sub.w	r9, r5, r1
 8008e46:	6965      	ldr	r5, [r4, #20]
 8008e48:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008e4c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008e50:	3301      	adds	r3, #1
 8008e52:	444b      	add	r3, r9
 8008e54:	106d      	asrs	r5, r5, #1
 8008e56:	429d      	cmp	r5, r3
 8008e58:	bf38      	it	cc
 8008e5a:	461d      	movcc	r5, r3
 8008e5c:	0553      	lsls	r3, r2, #21
 8008e5e:	d531      	bpl.n	8008ec4 <__ssputs_r+0xa0>
 8008e60:	4629      	mov	r1, r5
 8008e62:	f7ff fad5 	bl	8008410 <_malloc_r>
 8008e66:	4606      	mov	r6, r0
 8008e68:	b950      	cbnz	r0, 8008e80 <__ssputs_r+0x5c>
 8008e6a:	230c      	movs	r3, #12
 8008e6c:	f8ca 3000 	str.w	r3, [sl]
 8008e70:	89a3      	ldrh	r3, [r4, #12]
 8008e72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e76:	81a3      	strh	r3, [r4, #12]
 8008e78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008e7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e80:	6921      	ldr	r1, [r4, #16]
 8008e82:	464a      	mov	r2, r9
 8008e84:	f7ff fa5e 	bl	8008344 <memcpy>
 8008e88:	89a3      	ldrh	r3, [r4, #12]
 8008e8a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008e8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e92:	81a3      	strh	r3, [r4, #12]
 8008e94:	6126      	str	r6, [r4, #16]
 8008e96:	6165      	str	r5, [r4, #20]
 8008e98:	444e      	add	r6, r9
 8008e9a:	eba5 0509 	sub.w	r5, r5, r9
 8008e9e:	6026      	str	r6, [r4, #0]
 8008ea0:	60a5      	str	r5, [r4, #8]
 8008ea2:	463e      	mov	r6, r7
 8008ea4:	42be      	cmp	r6, r7
 8008ea6:	d900      	bls.n	8008eaa <__ssputs_r+0x86>
 8008ea8:	463e      	mov	r6, r7
 8008eaa:	4632      	mov	r2, r6
 8008eac:	6820      	ldr	r0, [r4, #0]
 8008eae:	4641      	mov	r1, r8
 8008eb0:	f000 fca4 	bl	80097fc <memmove>
 8008eb4:	68a3      	ldr	r3, [r4, #8]
 8008eb6:	6822      	ldr	r2, [r4, #0]
 8008eb8:	1b9b      	subs	r3, r3, r6
 8008eba:	4432      	add	r2, r6
 8008ebc:	60a3      	str	r3, [r4, #8]
 8008ebe:	6022      	str	r2, [r4, #0]
 8008ec0:	2000      	movs	r0, #0
 8008ec2:	e7db      	b.n	8008e7c <__ssputs_r+0x58>
 8008ec4:	462a      	mov	r2, r5
 8008ec6:	f000 fcb3 	bl	8009830 <_realloc_r>
 8008eca:	4606      	mov	r6, r0
 8008ecc:	2800      	cmp	r0, #0
 8008ece:	d1e1      	bne.n	8008e94 <__ssputs_r+0x70>
 8008ed0:	6921      	ldr	r1, [r4, #16]
 8008ed2:	4650      	mov	r0, sl
 8008ed4:	f7ff fa4c 	bl	8008370 <_free_r>
 8008ed8:	e7c7      	b.n	8008e6a <__ssputs_r+0x46>
	...

08008edc <_svfiprintf_r>:
 8008edc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ee0:	4698      	mov	r8, r3
 8008ee2:	898b      	ldrh	r3, [r1, #12]
 8008ee4:	061b      	lsls	r3, r3, #24
 8008ee6:	b09d      	sub	sp, #116	; 0x74
 8008ee8:	4607      	mov	r7, r0
 8008eea:	460d      	mov	r5, r1
 8008eec:	4614      	mov	r4, r2
 8008eee:	d50e      	bpl.n	8008f0e <_svfiprintf_r+0x32>
 8008ef0:	690b      	ldr	r3, [r1, #16]
 8008ef2:	b963      	cbnz	r3, 8008f0e <_svfiprintf_r+0x32>
 8008ef4:	2140      	movs	r1, #64	; 0x40
 8008ef6:	f7ff fa8b 	bl	8008410 <_malloc_r>
 8008efa:	6028      	str	r0, [r5, #0]
 8008efc:	6128      	str	r0, [r5, #16]
 8008efe:	b920      	cbnz	r0, 8008f0a <_svfiprintf_r+0x2e>
 8008f00:	230c      	movs	r3, #12
 8008f02:	603b      	str	r3, [r7, #0]
 8008f04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008f08:	e0d1      	b.n	80090ae <_svfiprintf_r+0x1d2>
 8008f0a:	2340      	movs	r3, #64	; 0x40
 8008f0c:	616b      	str	r3, [r5, #20]
 8008f0e:	2300      	movs	r3, #0
 8008f10:	9309      	str	r3, [sp, #36]	; 0x24
 8008f12:	2320      	movs	r3, #32
 8008f14:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008f18:	f8cd 800c 	str.w	r8, [sp, #12]
 8008f1c:	2330      	movs	r3, #48	; 0x30
 8008f1e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80090c8 <_svfiprintf_r+0x1ec>
 8008f22:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008f26:	f04f 0901 	mov.w	r9, #1
 8008f2a:	4623      	mov	r3, r4
 8008f2c:	469a      	mov	sl, r3
 8008f2e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008f32:	b10a      	cbz	r2, 8008f38 <_svfiprintf_r+0x5c>
 8008f34:	2a25      	cmp	r2, #37	; 0x25
 8008f36:	d1f9      	bne.n	8008f2c <_svfiprintf_r+0x50>
 8008f38:	ebba 0b04 	subs.w	fp, sl, r4
 8008f3c:	d00b      	beq.n	8008f56 <_svfiprintf_r+0x7a>
 8008f3e:	465b      	mov	r3, fp
 8008f40:	4622      	mov	r2, r4
 8008f42:	4629      	mov	r1, r5
 8008f44:	4638      	mov	r0, r7
 8008f46:	f7ff ff6d 	bl	8008e24 <__ssputs_r>
 8008f4a:	3001      	adds	r0, #1
 8008f4c:	f000 80aa 	beq.w	80090a4 <_svfiprintf_r+0x1c8>
 8008f50:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008f52:	445a      	add	r2, fp
 8008f54:	9209      	str	r2, [sp, #36]	; 0x24
 8008f56:	f89a 3000 	ldrb.w	r3, [sl]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	f000 80a2 	beq.w	80090a4 <_svfiprintf_r+0x1c8>
 8008f60:	2300      	movs	r3, #0
 8008f62:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008f66:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008f6a:	f10a 0a01 	add.w	sl, sl, #1
 8008f6e:	9304      	str	r3, [sp, #16]
 8008f70:	9307      	str	r3, [sp, #28]
 8008f72:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008f76:	931a      	str	r3, [sp, #104]	; 0x68
 8008f78:	4654      	mov	r4, sl
 8008f7a:	2205      	movs	r2, #5
 8008f7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f80:	4851      	ldr	r0, [pc, #324]	; (80090c8 <_svfiprintf_r+0x1ec>)
 8008f82:	f7f7 f93d 	bl	8000200 <memchr>
 8008f86:	9a04      	ldr	r2, [sp, #16]
 8008f88:	b9d8      	cbnz	r0, 8008fc2 <_svfiprintf_r+0xe6>
 8008f8a:	06d0      	lsls	r0, r2, #27
 8008f8c:	bf44      	itt	mi
 8008f8e:	2320      	movmi	r3, #32
 8008f90:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008f94:	0711      	lsls	r1, r2, #28
 8008f96:	bf44      	itt	mi
 8008f98:	232b      	movmi	r3, #43	; 0x2b
 8008f9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008f9e:	f89a 3000 	ldrb.w	r3, [sl]
 8008fa2:	2b2a      	cmp	r3, #42	; 0x2a
 8008fa4:	d015      	beq.n	8008fd2 <_svfiprintf_r+0xf6>
 8008fa6:	9a07      	ldr	r2, [sp, #28]
 8008fa8:	4654      	mov	r4, sl
 8008faa:	2000      	movs	r0, #0
 8008fac:	f04f 0c0a 	mov.w	ip, #10
 8008fb0:	4621      	mov	r1, r4
 8008fb2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008fb6:	3b30      	subs	r3, #48	; 0x30
 8008fb8:	2b09      	cmp	r3, #9
 8008fba:	d94e      	bls.n	800905a <_svfiprintf_r+0x17e>
 8008fbc:	b1b0      	cbz	r0, 8008fec <_svfiprintf_r+0x110>
 8008fbe:	9207      	str	r2, [sp, #28]
 8008fc0:	e014      	b.n	8008fec <_svfiprintf_r+0x110>
 8008fc2:	eba0 0308 	sub.w	r3, r0, r8
 8008fc6:	fa09 f303 	lsl.w	r3, r9, r3
 8008fca:	4313      	orrs	r3, r2
 8008fcc:	9304      	str	r3, [sp, #16]
 8008fce:	46a2      	mov	sl, r4
 8008fd0:	e7d2      	b.n	8008f78 <_svfiprintf_r+0x9c>
 8008fd2:	9b03      	ldr	r3, [sp, #12]
 8008fd4:	1d19      	adds	r1, r3, #4
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	9103      	str	r1, [sp, #12]
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	bfbb      	ittet	lt
 8008fde:	425b      	neglt	r3, r3
 8008fe0:	f042 0202 	orrlt.w	r2, r2, #2
 8008fe4:	9307      	strge	r3, [sp, #28]
 8008fe6:	9307      	strlt	r3, [sp, #28]
 8008fe8:	bfb8      	it	lt
 8008fea:	9204      	strlt	r2, [sp, #16]
 8008fec:	7823      	ldrb	r3, [r4, #0]
 8008fee:	2b2e      	cmp	r3, #46	; 0x2e
 8008ff0:	d10c      	bne.n	800900c <_svfiprintf_r+0x130>
 8008ff2:	7863      	ldrb	r3, [r4, #1]
 8008ff4:	2b2a      	cmp	r3, #42	; 0x2a
 8008ff6:	d135      	bne.n	8009064 <_svfiprintf_r+0x188>
 8008ff8:	9b03      	ldr	r3, [sp, #12]
 8008ffa:	1d1a      	adds	r2, r3, #4
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	9203      	str	r2, [sp, #12]
 8009000:	2b00      	cmp	r3, #0
 8009002:	bfb8      	it	lt
 8009004:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009008:	3402      	adds	r4, #2
 800900a:	9305      	str	r3, [sp, #20]
 800900c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80090d8 <_svfiprintf_r+0x1fc>
 8009010:	7821      	ldrb	r1, [r4, #0]
 8009012:	2203      	movs	r2, #3
 8009014:	4650      	mov	r0, sl
 8009016:	f7f7 f8f3 	bl	8000200 <memchr>
 800901a:	b140      	cbz	r0, 800902e <_svfiprintf_r+0x152>
 800901c:	2340      	movs	r3, #64	; 0x40
 800901e:	eba0 000a 	sub.w	r0, r0, sl
 8009022:	fa03 f000 	lsl.w	r0, r3, r0
 8009026:	9b04      	ldr	r3, [sp, #16]
 8009028:	4303      	orrs	r3, r0
 800902a:	3401      	adds	r4, #1
 800902c:	9304      	str	r3, [sp, #16]
 800902e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009032:	4826      	ldr	r0, [pc, #152]	; (80090cc <_svfiprintf_r+0x1f0>)
 8009034:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009038:	2206      	movs	r2, #6
 800903a:	f7f7 f8e1 	bl	8000200 <memchr>
 800903e:	2800      	cmp	r0, #0
 8009040:	d038      	beq.n	80090b4 <_svfiprintf_r+0x1d8>
 8009042:	4b23      	ldr	r3, [pc, #140]	; (80090d0 <_svfiprintf_r+0x1f4>)
 8009044:	bb1b      	cbnz	r3, 800908e <_svfiprintf_r+0x1b2>
 8009046:	9b03      	ldr	r3, [sp, #12]
 8009048:	3307      	adds	r3, #7
 800904a:	f023 0307 	bic.w	r3, r3, #7
 800904e:	3308      	adds	r3, #8
 8009050:	9303      	str	r3, [sp, #12]
 8009052:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009054:	4433      	add	r3, r6
 8009056:	9309      	str	r3, [sp, #36]	; 0x24
 8009058:	e767      	b.n	8008f2a <_svfiprintf_r+0x4e>
 800905a:	fb0c 3202 	mla	r2, ip, r2, r3
 800905e:	460c      	mov	r4, r1
 8009060:	2001      	movs	r0, #1
 8009062:	e7a5      	b.n	8008fb0 <_svfiprintf_r+0xd4>
 8009064:	2300      	movs	r3, #0
 8009066:	3401      	adds	r4, #1
 8009068:	9305      	str	r3, [sp, #20]
 800906a:	4619      	mov	r1, r3
 800906c:	f04f 0c0a 	mov.w	ip, #10
 8009070:	4620      	mov	r0, r4
 8009072:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009076:	3a30      	subs	r2, #48	; 0x30
 8009078:	2a09      	cmp	r2, #9
 800907a:	d903      	bls.n	8009084 <_svfiprintf_r+0x1a8>
 800907c:	2b00      	cmp	r3, #0
 800907e:	d0c5      	beq.n	800900c <_svfiprintf_r+0x130>
 8009080:	9105      	str	r1, [sp, #20]
 8009082:	e7c3      	b.n	800900c <_svfiprintf_r+0x130>
 8009084:	fb0c 2101 	mla	r1, ip, r1, r2
 8009088:	4604      	mov	r4, r0
 800908a:	2301      	movs	r3, #1
 800908c:	e7f0      	b.n	8009070 <_svfiprintf_r+0x194>
 800908e:	ab03      	add	r3, sp, #12
 8009090:	9300      	str	r3, [sp, #0]
 8009092:	462a      	mov	r2, r5
 8009094:	4b0f      	ldr	r3, [pc, #60]	; (80090d4 <_svfiprintf_r+0x1f8>)
 8009096:	a904      	add	r1, sp, #16
 8009098:	4638      	mov	r0, r7
 800909a:	f3af 8000 	nop.w
 800909e:	1c42      	adds	r2, r0, #1
 80090a0:	4606      	mov	r6, r0
 80090a2:	d1d6      	bne.n	8009052 <_svfiprintf_r+0x176>
 80090a4:	89ab      	ldrh	r3, [r5, #12]
 80090a6:	065b      	lsls	r3, r3, #25
 80090a8:	f53f af2c 	bmi.w	8008f04 <_svfiprintf_r+0x28>
 80090ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80090ae:	b01d      	add	sp, #116	; 0x74
 80090b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090b4:	ab03      	add	r3, sp, #12
 80090b6:	9300      	str	r3, [sp, #0]
 80090b8:	462a      	mov	r2, r5
 80090ba:	4b06      	ldr	r3, [pc, #24]	; (80090d4 <_svfiprintf_r+0x1f8>)
 80090bc:	a904      	add	r1, sp, #16
 80090be:	4638      	mov	r0, r7
 80090c0:	f000 f9d4 	bl	800946c <_printf_i>
 80090c4:	e7eb      	b.n	800909e <_svfiprintf_r+0x1c2>
 80090c6:	bf00      	nop
 80090c8:	0800c358 	.word	0x0800c358
 80090cc:	0800c362 	.word	0x0800c362
 80090d0:	00000000 	.word	0x00000000
 80090d4:	08008e25 	.word	0x08008e25
 80090d8:	0800c35e 	.word	0x0800c35e

080090dc <__sfputc_r>:
 80090dc:	6893      	ldr	r3, [r2, #8]
 80090de:	3b01      	subs	r3, #1
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	b410      	push	{r4}
 80090e4:	6093      	str	r3, [r2, #8]
 80090e6:	da08      	bge.n	80090fa <__sfputc_r+0x1e>
 80090e8:	6994      	ldr	r4, [r2, #24]
 80090ea:	42a3      	cmp	r3, r4
 80090ec:	db01      	blt.n	80090f2 <__sfputc_r+0x16>
 80090ee:	290a      	cmp	r1, #10
 80090f0:	d103      	bne.n	80090fa <__sfputc_r+0x1e>
 80090f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80090f6:	f7ff bb7b 	b.w	80087f0 <__swbuf_r>
 80090fa:	6813      	ldr	r3, [r2, #0]
 80090fc:	1c58      	adds	r0, r3, #1
 80090fe:	6010      	str	r0, [r2, #0]
 8009100:	7019      	strb	r1, [r3, #0]
 8009102:	4608      	mov	r0, r1
 8009104:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009108:	4770      	bx	lr

0800910a <__sfputs_r>:
 800910a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800910c:	4606      	mov	r6, r0
 800910e:	460f      	mov	r7, r1
 8009110:	4614      	mov	r4, r2
 8009112:	18d5      	adds	r5, r2, r3
 8009114:	42ac      	cmp	r4, r5
 8009116:	d101      	bne.n	800911c <__sfputs_r+0x12>
 8009118:	2000      	movs	r0, #0
 800911a:	e007      	b.n	800912c <__sfputs_r+0x22>
 800911c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009120:	463a      	mov	r2, r7
 8009122:	4630      	mov	r0, r6
 8009124:	f7ff ffda 	bl	80090dc <__sfputc_r>
 8009128:	1c43      	adds	r3, r0, #1
 800912a:	d1f3      	bne.n	8009114 <__sfputs_r+0xa>
 800912c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009130 <_vfiprintf_r>:
 8009130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009134:	460d      	mov	r5, r1
 8009136:	b09d      	sub	sp, #116	; 0x74
 8009138:	4614      	mov	r4, r2
 800913a:	4698      	mov	r8, r3
 800913c:	4606      	mov	r6, r0
 800913e:	b118      	cbz	r0, 8009148 <_vfiprintf_r+0x18>
 8009140:	6983      	ldr	r3, [r0, #24]
 8009142:	b90b      	cbnz	r3, 8009148 <_vfiprintf_r+0x18>
 8009144:	f7ff fd4c 	bl	8008be0 <__sinit>
 8009148:	4b89      	ldr	r3, [pc, #548]	; (8009370 <_vfiprintf_r+0x240>)
 800914a:	429d      	cmp	r5, r3
 800914c:	d11b      	bne.n	8009186 <_vfiprintf_r+0x56>
 800914e:	6875      	ldr	r5, [r6, #4]
 8009150:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009152:	07d9      	lsls	r1, r3, #31
 8009154:	d405      	bmi.n	8009162 <_vfiprintf_r+0x32>
 8009156:	89ab      	ldrh	r3, [r5, #12]
 8009158:	059a      	lsls	r2, r3, #22
 800915a:	d402      	bmi.n	8009162 <_vfiprintf_r+0x32>
 800915c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800915e:	f7ff fdef 	bl	8008d40 <__retarget_lock_acquire_recursive>
 8009162:	89ab      	ldrh	r3, [r5, #12]
 8009164:	071b      	lsls	r3, r3, #28
 8009166:	d501      	bpl.n	800916c <_vfiprintf_r+0x3c>
 8009168:	692b      	ldr	r3, [r5, #16]
 800916a:	b9eb      	cbnz	r3, 80091a8 <_vfiprintf_r+0x78>
 800916c:	4629      	mov	r1, r5
 800916e:	4630      	mov	r0, r6
 8009170:	f7ff fb90 	bl	8008894 <__swsetup_r>
 8009174:	b1c0      	cbz	r0, 80091a8 <_vfiprintf_r+0x78>
 8009176:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009178:	07dc      	lsls	r4, r3, #31
 800917a:	d50e      	bpl.n	800919a <_vfiprintf_r+0x6a>
 800917c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009180:	b01d      	add	sp, #116	; 0x74
 8009182:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009186:	4b7b      	ldr	r3, [pc, #492]	; (8009374 <_vfiprintf_r+0x244>)
 8009188:	429d      	cmp	r5, r3
 800918a:	d101      	bne.n	8009190 <_vfiprintf_r+0x60>
 800918c:	68b5      	ldr	r5, [r6, #8]
 800918e:	e7df      	b.n	8009150 <_vfiprintf_r+0x20>
 8009190:	4b79      	ldr	r3, [pc, #484]	; (8009378 <_vfiprintf_r+0x248>)
 8009192:	429d      	cmp	r5, r3
 8009194:	bf08      	it	eq
 8009196:	68f5      	ldreq	r5, [r6, #12]
 8009198:	e7da      	b.n	8009150 <_vfiprintf_r+0x20>
 800919a:	89ab      	ldrh	r3, [r5, #12]
 800919c:	0598      	lsls	r0, r3, #22
 800919e:	d4ed      	bmi.n	800917c <_vfiprintf_r+0x4c>
 80091a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80091a2:	f7ff fdce 	bl	8008d42 <__retarget_lock_release_recursive>
 80091a6:	e7e9      	b.n	800917c <_vfiprintf_r+0x4c>
 80091a8:	2300      	movs	r3, #0
 80091aa:	9309      	str	r3, [sp, #36]	; 0x24
 80091ac:	2320      	movs	r3, #32
 80091ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80091b2:	f8cd 800c 	str.w	r8, [sp, #12]
 80091b6:	2330      	movs	r3, #48	; 0x30
 80091b8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800937c <_vfiprintf_r+0x24c>
 80091bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80091c0:	f04f 0901 	mov.w	r9, #1
 80091c4:	4623      	mov	r3, r4
 80091c6:	469a      	mov	sl, r3
 80091c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80091cc:	b10a      	cbz	r2, 80091d2 <_vfiprintf_r+0xa2>
 80091ce:	2a25      	cmp	r2, #37	; 0x25
 80091d0:	d1f9      	bne.n	80091c6 <_vfiprintf_r+0x96>
 80091d2:	ebba 0b04 	subs.w	fp, sl, r4
 80091d6:	d00b      	beq.n	80091f0 <_vfiprintf_r+0xc0>
 80091d8:	465b      	mov	r3, fp
 80091da:	4622      	mov	r2, r4
 80091dc:	4629      	mov	r1, r5
 80091de:	4630      	mov	r0, r6
 80091e0:	f7ff ff93 	bl	800910a <__sfputs_r>
 80091e4:	3001      	adds	r0, #1
 80091e6:	f000 80aa 	beq.w	800933e <_vfiprintf_r+0x20e>
 80091ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80091ec:	445a      	add	r2, fp
 80091ee:	9209      	str	r2, [sp, #36]	; 0x24
 80091f0:	f89a 3000 	ldrb.w	r3, [sl]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	f000 80a2 	beq.w	800933e <_vfiprintf_r+0x20e>
 80091fa:	2300      	movs	r3, #0
 80091fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009200:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009204:	f10a 0a01 	add.w	sl, sl, #1
 8009208:	9304      	str	r3, [sp, #16]
 800920a:	9307      	str	r3, [sp, #28]
 800920c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009210:	931a      	str	r3, [sp, #104]	; 0x68
 8009212:	4654      	mov	r4, sl
 8009214:	2205      	movs	r2, #5
 8009216:	f814 1b01 	ldrb.w	r1, [r4], #1
 800921a:	4858      	ldr	r0, [pc, #352]	; (800937c <_vfiprintf_r+0x24c>)
 800921c:	f7f6 fff0 	bl	8000200 <memchr>
 8009220:	9a04      	ldr	r2, [sp, #16]
 8009222:	b9d8      	cbnz	r0, 800925c <_vfiprintf_r+0x12c>
 8009224:	06d1      	lsls	r1, r2, #27
 8009226:	bf44      	itt	mi
 8009228:	2320      	movmi	r3, #32
 800922a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800922e:	0713      	lsls	r3, r2, #28
 8009230:	bf44      	itt	mi
 8009232:	232b      	movmi	r3, #43	; 0x2b
 8009234:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009238:	f89a 3000 	ldrb.w	r3, [sl]
 800923c:	2b2a      	cmp	r3, #42	; 0x2a
 800923e:	d015      	beq.n	800926c <_vfiprintf_r+0x13c>
 8009240:	9a07      	ldr	r2, [sp, #28]
 8009242:	4654      	mov	r4, sl
 8009244:	2000      	movs	r0, #0
 8009246:	f04f 0c0a 	mov.w	ip, #10
 800924a:	4621      	mov	r1, r4
 800924c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009250:	3b30      	subs	r3, #48	; 0x30
 8009252:	2b09      	cmp	r3, #9
 8009254:	d94e      	bls.n	80092f4 <_vfiprintf_r+0x1c4>
 8009256:	b1b0      	cbz	r0, 8009286 <_vfiprintf_r+0x156>
 8009258:	9207      	str	r2, [sp, #28]
 800925a:	e014      	b.n	8009286 <_vfiprintf_r+0x156>
 800925c:	eba0 0308 	sub.w	r3, r0, r8
 8009260:	fa09 f303 	lsl.w	r3, r9, r3
 8009264:	4313      	orrs	r3, r2
 8009266:	9304      	str	r3, [sp, #16]
 8009268:	46a2      	mov	sl, r4
 800926a:	e7d2      	b.n	8009212 <_vfiprintf_r+0xe2>
 800926c:	9b03      	ldr	r3, [sp, #12]
 800926e:	1d19      	adds	r1, r3, #4
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	9103      	str	r1, [sp, #12]
 8009274:	2b00      	cmp	r3, #0
 8009276:	bfbb      	ittet	lt
 8009278:	425b      	neglt	r3, r3
 800927a:	f042 0202 	orrlt.w	r2, r2, #2
 800927e:	9307      	strge	r3, [sp, #28]
 8009280:	9307      	strlt	r3, [sp, #28]
 8009282:	bfb8      	it	lt
 8009284:	9204      	strlt	r2, [sp, #16]
 8009286:	7823      	ldrb	r3, [r4, #0]
 8009288:	2b2e      	cmp	r3, #46	; 0x2e
 800928a:	d10c      	bne.n	80092a6 <_vfiprintf_r+0x176>
 800928c:	7863      	ldrb	r3, [r4, #1]
 800928e:	2b2a      	cmp	r3, #42	; 0x2a
 8009290:	d135      	bne.n	80092fe <_vfiprintf_r+0x1ce>
 8009292:	9b03      	ldr	r3, [sp, #12]
 8009294:	1d1a      	adds	r2, r3, #4
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	9203      	str	r2, [sp, #12]
 800929a:	2b00      	cmp	r3, #0
 800929c:	bfb8      	it	lt
 800929e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80092a2:	3402      	adds	r4, #2
 80092a4:	9305      	str	r3, [sp, #20]
 80092a6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800938c <_vfiprintf_r+0x25c>
 80092aa:	7821      	ldrb	r1, [r4, #0]
 80092ac:	2203      	movs	r2, #3
 80092ae:	4650      	mov	r0, sl
 80092b0:	f7f6 ffa6 	bl	8000200 <memchr>
 80092b4:	b140      	cbz	r0, 80092c8 <_vfiprintf_r+0x198>
 80092b6:	2340      	movs	r3, #64	; 0x40
 80092b8:	eba0 000a 	sub.w	r0, r0, sl
 80092bc:	fa03 f000 	lsl.w	r0, r3, r0
 80092c0:	9b04      	ldr	r3, [sp, #16]
 80092c2:	4303      	orrs	r3, r0
 80092c4:	3401      	adds	r4, #1
 80092c6:	9304      	str	r3, [sp, #16]
 80092c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092cc:	482c      	ldr	r0, [pc, #176]	; (8009380 <_vfiprintf_r+0x250>)
 80092ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80092d2:	2206      	movs	r2, #6
 80092d4:	f7f6 ff94 	bl	8000200 <memchr>
 80092d8:	2800      	cmp	r0, #0
 80092da:	d03f      	beq.n	800935c <_vfiprintf_r+0x22c>
 80092dc:	4b29      	ldr	r3, [pc, #164]	; (8009384 <_vfiprintf_r+0x254>)
 80092de:	bb1b      	cbnz	r3, 8009328 <_vfiprintf_r+0x1f8>
 80092e0:	9b03      	ldr	r3, [sp, #12]
 80092e2:	3307      	adds	r3, #7
 80092e4:	f023 0307 	bic.w	r3, r3, #7
 80092e8:	3308      	adds	r3, #8
 80092ea:	9303      	str	r3, [sp, #12]
 80092ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092ee:	443b      	add	r3, r7
 80092f0:	9309      	str	r3, [sp, #36]	; 0x24
 80092f2:	e767      	b.n	80091c4 <_vfiprintf_r+0x94>
 80092f4:	fb0c 3202 	mla	r2, ip, r2, r3
 80092f8:	460c      	mov	r4, r1
 80092fa:	2001      	movs	r0, #1
 80092fc:	e7a5      	b.n	800924a <_vfiprintf_r+0x11a>
 80092fe:	2300      	movs	r3, #0
 8009300:	3401      	adds	r4, #1
 8009302:	9305      	str	r3, [sp, #20]
 8009304:	4619      	mov	r1, r3
 8009306:	f04f 0c0a 	mov.w	ip, #10
 800930a:	4620      	mov	r0, r4
 800930c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009310:	3a30      	subs	r2, #48	; 0x30
 8009312:	2a09      	cmp	r2, #9
 8009314:	d903      	bls.n	800931e <_vfiprintf_r+0x1ee>
 8009316:	2b00      	cmp	r3, #0
 8009318:	d0c5      	beq.n	80092a6 <_vfiprintf_r+0x176>
 800931a:	9105      	str	r1, [sp, #20]
 800931c:	e7c3      	b.n	80092a6 <_vfiprintf_r+0x176>
 800931e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009322:	4604      	mov	r4, r0
 8009324:	2301      	movs	r3, #1
 8009326:	e7f0      	b.n	800930a <_vfiprintf_r+0x1da>
 8009328:	ab03      	add	r3, sp, #12
 800932a:	9300      	str	r3, [sp, #0]
 800932c:	462a      	mov	r2, r5
 800932e:	4b16      	ldr	r3, [pc, #88]	; (8009388 <_vfiprintf_r+0x258>)
 8009330:	a904      	add	r1, sp, #16
 8009332:	4630      	mov	r0, r6
 8009334:	f3af 8000 	nop.w
 8009338:	4607      	mov	r7, r0
 800933a:	1c78      	adds	r0, r7, #1
 800933c:	d1d6      	bne.n	80092ec <_vfiprintf_r+0x1bc>
 800933e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009340:	07d9      	lsls	r1, r3, #31
 8009342:	d405      	bmi.n	8009350 <_vfiprintf_r+0x220>
 8009344:	89ab      	ldrh	r3, [r5, #12]
 8009346:	059a      	lsls	r2, r3, #22
 8009348:	d402      	bmi.n	8009350 <_vfiprintf_r+0x220>
 800934a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800934c:	f7ff fcf9 	bl	8008d42 <__retarget_lock_release_recursive>
 8009350:	89ab      	ldrh	r3, [r5, #12]
 8009352:	065b      	lsls	r3, r3, #25
 8009354:	f53f af12 	bmi.w	800917c <_vfiprintf_r+0x4c>
 8009358:	9809      	ldr	r0, [sp, #36]	; 0x24
 800935a:	e711      	b.n	8009180 <_vfiprintf_r+0x50>
 800935c:	ab03      	add	r3, sp, #12
 800935e:	9300      	str	r3, [sp, #0]
 8009360:	462a      	mov	r2, r5
 8009362:	4b09      	ldr	r3, [pc, #36]	; (8009388 <_vfiprintf_r+0x258>)
 8009364:	a904      	add	r1, sp, #16
 8009366:	4630      	mov	r0, r6
 8009368:	f000 f880 	bl	800946c <_printf_i>
 800936c:	e7e4      	b.n	8009338 <_vfiprintf_r+0x208>
 800936e:	bf00      	nop
 8009370:	0800c318 	.word	0x0800c318
 8009374:	0800c338 	.word	0x0800c338
 8009378:	0800c2f8 	.word	0x0800c2f8
 800937c:	0800c358 	.word	0x0800c358
 8009380:	0800c362 	.word	0x0800c362
 8009384:	00000000 	.word	0x00000000
 8009388:	0800910b 	.word	0x0800910b
 800938c:	0800c35e 	.word	0x0800c35e

08009390 <_printf_common>:
 8009390:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009394:	4616      	mov	r6, r2
 8009396:	4699      	mov	r9, r3
 8009398:	688a      	ldr	r2, [r1, #8]
 800939a:	690b      	ldr	r3, [r1, #16]
 800939c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80093a0:	4293      	cmp	r3, r2
 80093a2:	bfb8      	it	lt
 80093a4:	4613      	movlt	r3, r2
 80093a6:	6033      	str	r3, [r6, #0]
 80093a8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80093ac:	4607      	mov	r7, r0
 80093ae:	460c      	mov	r4, r1
 80093b0:	b10a      	cbz	r2, 80093b6 <_printf_common+0x26>
 80093b2:	3301      	adds	r3, #1
 80093b4:	6033      	str	r3, [r6, #0]
 80093b6:	6823      	ldr	r3, [r4, #0]
 80093b8:	0699      	lsls	r1, r3, #26
 80093ba:	bf42      	ittt	mi
 80093bc:	6833      	ldrmi	r3, [r6, #0]
 80093be:	3302      	addmi	r3, #2
 80093c0:	6033      	strmi	r3, [r6, #0]
 80093c2:	6825      	ldr	r5, [r4, #0]
 80093c4:	f015 0506 	ands.w	r5, r5, #6
 80093c8:	d106      	bne.n	80093d8 <_printf_common+0x48>
 80093ca:	f104 0a19 	add.w	sl, r4, #25
 80093ce:	68e3      	ldr	r3, [r4, #12]
 80093d0:	6832      	ldr	r2, [r6, #0]
 80093d2:	1a9b      	subs	r3, r3, r2
 80093d4:	42ab      	cmp	r3, r5
 80093d6:	dc26      	bgt.n	8009426 <_printf_common+0x96>
 80093d8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80093dc:	1e13      	subs	r3, r2, #0
 80093de:	6822      	ldr	r2, [r4, #0]
 80093e0:	bf18      	it	ne
 80093e2:	2301      	movne	r3, #1
 80093e4:	0692      	lsls	r2, r2, #26
 80093e6:	d42b      	bmi.n	8009440 <_printf_common+0xb0>
 80093e8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80093ec:	4649      	mov	r1, r9
 80093ee:	4638      	mov	r0, r7
 80093f0:	47c0      	blx	r8
 80093f2:	3001      	adds	r0, #1
 80093f4:	d01e      	beq.n	8009434 <_printf_common+0xa4>
 80093f6:	6823      	ldr	r3, [r4, #0]
 80093f8:	68e5      	ldr	r5, [r4, #12]
 80093fa:	6832      	ldr	r2, [r6, #0]
 80093fc:	f003 0306 	and.w	r3, r3, #6
 8009400:	2b04      	cmp	r3, #4
 8009402:	bf08      	it	eq
 8009404:	1aad      	subeq	r5, r5, r2
 8009406:	68a3      	ldr	r3, [r4, #8]
 8009408:	6922      	ldr	r2, [r4, #16]
 800940a:	bf0c      	ite	eq
 800940c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009410:	2500      	movne	r5, #0
 8009412:	4293      	cmp	r3, r2
 8009414:	bfc4      	itt	gt
 8009416:	1a9b      	subgt	r3, r3, r2
 8009418:	18ed      	addgt	r5, r5, r3
 800941a:	2600      	movs	r6, #0
 800941c:	341a      	adds	r4, #26
 800941e:	42b5      	cmp	r5, r6
 8009420:	d11a      	bne.n	8009458 <_printf_common+0xc8>
 8009422:	2000      	movs	r0, #0
 8009424:	e008      	b.n	8009438 <_printf_common+0xa8>
 8009426:	2301      	movs	r3, #1
 8009428:	4652      	mov	r2, sl
 800942a:	4649      	mov	r1, r9
 800942c:	4638      	mov	r0, r7
 800942e:	47c0      	blx	r8
 8009430:	3001      	adds	r0, #1
 8009432:	d103      	bne.n	800943c <_printf_common+0xac>
 8009434:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009438:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800943c:	3501      	adds	r5, #1
 800943e:	e7c6      	b.n	80093ce <_printf_common+0x3e>
 8009440:	18e1      	adds	r1, r4, r3
 8009442:	1c5a      	adds	r2, r3, #1
 8009444:	2030      	movs	r0, #48	; 0x30
 8009446:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800944a:	4422      	add	r2, r4
 800944c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009450:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009454:	3302      	adds	r3, #2
 8009456:	e7c7      	b.n	80093e8 <_printf_common+0x58>
 8009458:	2301      	movs	r3, #1
 800945a:	4622      	mov	r2, r4
 800945c:	4649      	mov	r1, r9
 800945e:	4638      	mov	r0, r7
 8009460:	47c0      	blx	r8
 8009462:	3001      	adds	r0, #1
 8009464:	d0e6      	beq.n	8009434 <_printf_common+0xa4>
 8009466:	3601      	adds	r6, #1
 8009468:	e7d9      	b.n	800941e <_printf_common+0x8e>
	...

0800946c <_printf_i>:
 800946c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009470:	460c      	mov	r4, r1
 8009472:	4691      	mov	r9, r2
 8009474:	7e27      	ldrb	r7, [r4, #24]
 8009476:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009478:	2f78      	cmp	r7, #120	; 0x78
 800947a:	4680      	mov	r8, r0
 800947c:	469a      	mov	sl, r3
 800947e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009482:	d807      	bhi.n	8009494 <_printf_i+0x28>
 8009484:	2f62      	cmp	r7, #98	; 0x62
 8009486:	d80a      	bhi.n	800949e <_printf_i+0x32>
 8009488:	2f00      	cmp	r7, #0
 800948a:	f000 80d8 	beq.w	800963e <_printf_i+0x1d2>
 800948e:	2f58      	cmp	r7, #88	; 0x58
 8009490:	f000 80a3 	beq.w	80095da <_printf_i+0x16e>
 8009494:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009498:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800949c:	e03a      	b.n	8009514 <_printf_i+0xa8>
 800949e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80094a2:	2b15      	cmp	r3, #21
 80094a4:	d8f6      	bhi.n	8009494 <_printf_i+0x28>
 80094a6:	a001      	add	r0, pc, #4	; (adr r0, 80094ac <_printf_i+0x40>)
 80094a8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80094ac:	08009505 	.word	0x08009505
 80094b0:	08009519 	.word	0x08009519
 80094b4:	08009495 	.word	0x08009495
 80094b8:	08009495 	.word	0x08009495
 80094bc:	08009495 	.word	0x08009495
 80094c0:	08009495 	.word	0x08009495
 80094c4:	08009519 	.word	0x08009519
 80094c8:	08009495 	.word	0x08009495
 80094cc:	08009495 	.word	0x08009495
 80094d0:	08009495 	.word	0x08009495
 80094d4:	08009495 	.word	0x08009495
 80094d8:	08009625 	.word	0x08009625
 80094dc:	08009549 	.word	0x08009549
 80094e0:	08009607 	.word	0x08009607
 80094e4:	08009495 	.word	0x08009495
 80094e8:	08009495 	.word	0x08009495
 80094ec:	08009647 	.word	0x08009647
 80094f0:	08009495 	.word	0x08009495
 80094f4:	08009549 	.word	0x08009549
 80094f8:	08009495 	.word	0x08009495
 80094fc:	08009495 	.word	0x08009495
 8009500:	0800960f 	.word	0x0800960f
 8009504:	680b      	ldr	r3, [r1, #0]
 8009506:	1d1a      	adds	r2, r3, #4
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	600a      	str	r2, [r1, #0]
 800950c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009510:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009514:	2301      	movs	r3, #1
 8009516:	e0a3      	b.n	8009660 <_printf_i+0x1f4>
 8009518:	6825      	ldr	r5, [r4, #0]
 800951a:	6808      	ldr	r0, [r1, #0]
 800951c:	062e      	lsls	r6, r5, #24
 800951e:	f100 0304 	add.w	r3, r0, #4
 8009522:	d50a      	bpl.n	800953a <_printf_i+0xce>
 8009524:	6805      	ldr	r5, [r0, #0]
 8009526:	600b      	str	r3, [r1, #0]
 8009528:	2d00      	cmp	r5, #0
 800952a:	da03      	bge.n	8009534 <_printf_i+0xc8>
 800952c:	232d      	movs	r3, #45	; 0x2d
 800952e:	426d      	negs	r5, r5
 8009530:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009534:	485e      	ldr	r0, [pc, #376]	; (80096b0 <_printf_i+0x244>)
 8009536:	230a      	movs	r3, #10
 8009538:	e019      	b.n	800956e <_printf_i+0x102>
 800953a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800953e:	6805      	ldr	r5, [r0, #0]
 8009540:	600b      	str	r3, [r1, #0]
 8009542:	bf18      	it	ne
 8009544:	b22d      	sxthne	r5, r5
 8009546:	e7ef      	b.n	8009528 <_printf_i+0xbc>
 8009548:	680b      	ldr	r3, [r1, #0]
 800954a:	6825      	ldr	r5, [r4, #0]
 800954c:	1d18      	adds	r0, r3, #4
 800954e:	6008      	str	r0, [r1, #0]
 8009550:	0628      	lsls	r0, r5, #24
 8009552:	d501      	bpl.n	8009558 <_printf_i+0xec>
 8009554:	681d      	ldr	r5, [r3, #0]
 8009556:	e002      	b.n	800955e <_printf_i+0xf2>
 8009558:	0669      	lsls	r1, r5, #25
 800955a:	d5fb      	bpl.n	8009554 <_printf_i+0xe8>
 800955c:	881d      	ldrh	r5, [r3, #0]
 800955e:	4854      	ldr	r0, [pc, #336]	; (80096b0 <_printf_i+0x244>)
 8009560:	2f6f      	cmp	r7, #111	; 0x6f
 8009562:	bf0c      	ite	eq
 8009564:	2308      	moveq	r3, #8
 8009566:	230a      	movne	r3, #10
 8009568:	2100      	movs	r1, #0
 800956a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800956e:	6866      	ldr	r6, [r4, #4]
 8009570:	60a6      	str	r6, [r4, #8]
 8009572:	2e00      	cmp	r6, #0
 8009574:	bfa2      	ittt	ge
 8009576:	6821      	ldrge	r1, [r4, #0]
 8009578:	f021 0104 	bicge.w	r1, r1, #4
 800957c:	6021      	strge	r1, [r4, #0]
 800957e:	b90d      	cbnz	r5, 8009584 <_printf_i+0x118>
 8009580:	2e00      	cmp	r6, #0
 8009582:	d04d      	beq.n	8009620 <_printf_i+0x1b4>
 8009584:	4616      	mov	r6, r2
 8009586:	fbb5 f1f3 	udiv	r1, r5, r3
 800958a:	fb03 5711 	mls	r7, r3, r1, r5
 800958e:	5dc7      	ldrb	r7, [r0, r7]
 8009590:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009594:	462f      	mov	r7, r5
 8009596:	42bb      	cmp	r3, r7
 8009598:	460d      	mov	r5, r1
 800959a:	d9f4      	bls.n	8009586 <_printf_i+0x11a>
 800959c:	2b08      	cmp	r3, #8
 800959e:	d10b      	bne.n	80095b8 <_printf_i+0x14c>
 80095a0:	6823      	ldr	r3, [r4, #0]
 80095a2:	07df      	lsls	r7, r3, #31
 80095a4:	d508      	bpl.n	80095b8 <_printf_i+0x14c>
 80095a6:	6923      	ldr	r3, [r4, #16]
 80095a8:	6861      	ldr	r1, [r4, #4]
 80095aa:	4299      	cmp	r1, r3
 80095ac:	bfde      	ittt	le
 80095ae:	2330      	movle	r3, #48	; 0x30
 80095b0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80095b4:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 80095b8:	1b92      	subs	r2, r2, r6
 80095ba:	6122      	str	r2, [r4, #16]
 80095bc:	f8cd a000 	str.w	sl, [sp]
 80095c0:	464b      	mov	r3, r9
 80095c2:	aa03      	add	r2, sp, #12
 80095c4:	4621      	mov	r1, r4
 80095c6:	4640      	mov	r0, r8
 80095c8:	f7ff fee2 	bl	8009390 <_printf_common>
 80095cc:	3001      	adds	r0, #1
 80095ce:	d14c      	bne.n	800966a <_printf_i+0x1fe>
 80095d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80095d4:	b004      	add	sp, #16
 80095d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095da:	4835      	ldr	r0, [pc, #212]	; (80096b0 <_printf_i+0x244>)
 80095dc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80095e0:	6823      	ldr	r3, [r4, #0]
 80095e2:	680e      	ldr	r6, [r1, #0]
 80095e4:	061f      	lsls	r7, r3, #24
 80095e6:	f856 5b04 	ldr.w	r5, [r6], #4
 80095ea:	600e      	str	r6, [r1, #0]
 80095ec:	d514      	bpl.n	8009618 <_printf_i+0x1ac>
 80095ee:	07d9      	lsls	r1, r3, #31
 80095f0:	bf44      	itt	mi
 80095f2:	f043 0320 	orrmi.w	r3, r3, #32
 80095f6:	6023      	strmi	r3, [r4, #0]
 80095f8:	b91d      	cbnz	r5, 8009602 <_printf_i+0x196>
 80095fa:	6823      	ldr	r3, [r4, #0]
 80095fc:	f023 0320 	bic.w	r3, r3, #32
 8009600:	6023      	str	r3, [r4, #0]
 8009602:	2310      	movs	r3, #16
 8009604:	e7b0      	b.n	8009568 <_printf_i+0xfc>
 8009606:	6823      	ldr	r3, [r4, #0]
 8009608:	f043 0320 	orr.w	r3, r3, #32
 800960c:	6023      	str	r3, [r4, #0]
 800960e:	2378      	movs	r3, #120	; 0x78
 8009610:	4828      	ldr	r0, [pc, #160]	; (80096b4 <_printf_i+0x248>)
 8009612:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009616:	e7e3      	b.n	80095e0 <_printf_i+0x174>
 8009618:	065e      	lsls	r6, r3, #25
 800961a:	bf48      	it	mi
 800961c:	b2ad      	uxthmi	r5, r5
 800961e:	e7e6      	b.n	80095ee <_printf_i+0x182>
 8009620:	4616      	mov	r6, r2
 8009622:	e7bb      	b.n	800959c <_printf_i+0x130>
 8009624:	680b      	ldr	r3, [r1, #0]
 8009626:	6826      	ldr	r6, [r4, #0]
 8009628:	6960      	ldr	r0, [r4, #20]
 800962a:	1d1d      	adds	r5, r3, #4
 800962c:	600d      	str	r5, [r1, #0]
 800962e:	0635      	lsls	r5, r6, #24
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	d501      	bpl.n	8009638 <_printf_i+0x1cc>
 8009634:	6018      	str	r0, [r3, #0]
 8009636:	e002      	b.n	800963e <_printf_i+0x1d2>
 8009638:	0671      	lsls	r1, r6, #25
 800963a:	d5fb      	bpl.n	8009634 <_printf_i+0x1c8>
 800963c:	8018      	strh	r0, [r3, #0]
 800963e:	2300      	movs	r3, #0
 8009640:	6123      	str	r3, [r4, #16]
 8009642:	4616      	mov	r6, r2
 8009644:	e7ba      	b.n	80095bc <_printf_i+0x150>
 8009646:	680b      	ldr	r3, [r1, #0]
 8009648:	1d1a      	adds	r2, r3, #4
 800964a:	600a      	str	r2, [r1, #0]
 800964c:	681e      	ldr	r6, [r3, #0]
 800964e:	6862      	ldr	r2, [r4, #4]
 8009650:	2100      	movs	r1, #0
 8009652:	4630      	mov	r0, r6
 8009654:	f7f6 fdd4 	bl	8000200 <memchr>
 8009658:	b108      	cbz	r0, 800965e <_printf_i+0x1f2>
 800965a:	1b80      	subs	r0, r0, r6
 800965c:	6060      	str	r0, [r4, #4]
 800965e:	6863      	ldr	r3, [r4, #4]
 8009660:	6123      	str	r3, [r4, #16]
 8009662:	2300      	movs	r3, #0
 8009664:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009668:	e7a8      	b.n	80095bc <_printf_i+0x150>
 800966a:	6923      	ldr	r3, [r4, #16]
 800966c:	4632      	mov	r2, r6
 800966e:	4649      	mov	r1, r9
 8009670:	4640      	mov	r0, r8
 8009672:	47d0      	blx	sl
 8009674:	3001      	adds	r0, #1
 8009676:	d0ab      	beq.n	80095d0 <_printf_i+0x164>
 8009678:	6823      	ldr	r3, [r4, #0]
 800967a:	079b      	lsls	r3, r3, #30
 800967c:	d413      	bmi.n	80096a6 <_printf_i+0x23a>
 800967e:	68e0      	ldr	r0, [r4, #12]
 8009680:	9b03      	ldr	r3, [sp, #12]
 8009682:	4298      	cmp	r0, r3
 8009684:	bfb8      	it	lt
 8009686:	4618      	movlt	r0, r3
 8009688:	e7a4      	b.n	80095d4 <_printf_i+0x168>
 800968a:	2301      	movs	r3, #1
 800968c:	4632      	mov	r2, r6
 800968e:	4649      	mov	r1, r9
 8009690:	4640      	mov	r0, r8
 8009692:	47d0      	blx	sl
 8009694:	3001      	adds	r0, #1
 8009696:	d09b      	beq.n	80095d0 <_printf_i+0x164>
 8009698:	3501      	adds	r5, #1
 800969a:	68e3      	ldr	r3, [r4, #12]
 800969c:	9903      	ldr	r1, [sp, #12]
 800969e:	1a5b      	subs	r3, r3, r1
 80096a0:	42ab      	cmp	r3, r5
 80096a2:	dcf2      	bgt.n	800968a <_printf_i+0x21e>
 80096a4:	e7eb      	b.n	800967e <_printf_i+0x212>
 80096a6:	2500      	movs	r5, #0
 80096a8:	f104 0619 	add.w	r6, r4, #25
 80096ac:	e7f5      	b.n	800969a <_printf_i+0x22e>
 80096ae:	bf00      	nop
 80096b0:	0800c369 	.word	0x0800c369
 80096b4:	0800c37a 	.word	0x0800c37a

080096b8 <__sread>:
 80096b8:	b510      	push	{r4, lr}
 80096ba:	460c      	mov	r4, r1
 80096bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80096c0:	f000 f8dc 	bl	800987c <_read_r>
 80096c4:	2800      	cmp	r0, #0
 80096c6:	bfab      	itete	ge
 80096c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80096ca:	89a3      	ldrhlt	r3, [r4, #12]
 80096cc:	181b      	addge	r3, r3, r0
 80096ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80096d2:	bfac      	ite	ge
 80096d4:	6563      	strge	r3, [r4, #84]	; 0x54
 80096d6:	81a3      	strhlt	r3, [r4, #12]
 80096d8:	bd10      	pop	{r4, pc}

080096da <__swrite>:
 80096da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096de:	461f      	mov	r7, r3
 80096e0:	898b      	ldrh	r3, [r1, #12]
 80096e2:	05db      	lsls	r3, r3, #23
 80096e4:	4605      	mov	r5, r0
 80096e6:	460c      	mov	r4, r1
 80096e8:	4616      	mov	r6, r2
 80096ea:	d505      	bpl.n	80096f8 <__swrite+0x1e>
 80096ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80096f0:	2302      	movs	r3, #2
 80096f2:	2200      	movs	r2, #0
 80096f4:	f000 f870 	bl	80097d8 <_lseek_r>
 80096f8:	89a3      	ldrh	r3, [r4, #12]
 80096fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80096fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009702:	81a3      	strh	r3, [r4, #12]
 8009704:	4632      	mov	r2, r6
 8009706:	463b      	mov	r3, r7
 8009708:	4628      	mov	r0, r5
 800970a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800970e:	f000 b817 	b.w	8009740 <_write_r>

08009712 <__sseek>:
 8009712:	b510      	push	{r4, lr}
 8009714:	460c      	mov	r4, r1
 8009716:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800971a:	f000 f85d 	bl	80097d8 <_lseek_r>
 800971e:	1c43      	adds	r3, r0, #1
 8009720:	89a3      	ldrh	r3, [r4, #12]
 8009722:	bf15      	itete	ne
 8009724:	6560      	strne	r0, [r4, #84]	; 0x54
 8009726:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800972a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800972e:	81a3      	strheq	r3, [r4, #12]
 8009730:	bf18      	it	ne
 8009732:	81a3      	strhne	r3, [r4, #12]
 8009734:	bd10      	pop	{r4, pc}

08009736 <__sclose>:
 8009736:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800973a:	f000 b81b 	b.w	8009774 <_close_r>
	...

08009740 <_write_r>:
 8009740:	b538      	push	{r3, r4, r5, lr}
 8009742:	4d07      	ldr	r5, [pc, #28]	; (8009760 <_write_r+0x20>)
 8009744:	4604      	mov	r4, r0
 8009746:	4608      	mov	r0, r1
 8009748:	4611      	mov	r1, r2
 800974a:	2200      	movs	r2, #0
 800974c:	602a      	str	r2, [r5, #0]
 800974e:	461a      	mov	r2, r3
 8009750:	f7fa fa8d 	bl	8003c6e <_write>
 8009754:	1c43      	adds	r3, r0, #1
 8009756:	d102      	bne.n	800975e <_write_r+0x1e>
 8009758:	682b      	ldr	r3, [r5, #0]
 800975a:	b103      	cbz	r3, 800975e <_write_r+0x1e>
 800975c:	6023      	str	r3, [r4, #0]
 800975e:	bd38      	pop	{r3, r4, r5, pc}
 8009760:	20000cf0 	.word	0x20000cf0

08009764 <abort>:
 8009764:	b508      	push	{r3, lr}
 8009766:	2006      	movs	r0, #6
 8009768:	f000 f8c2 	bl	80098f0 <raise>
 800976c:	2001      	movs	r0, #1
 800976e:	f7fa fa57 	bl	8003c20 <_exit>
	...

08009774 <_close_r>:
 8009774:	b538      	push	{r3, r4, r5, lr}
 8009776:	4d06      	ldr	r5, [pc, #24]	; (8009790 <_close_r+0x1c>)
 8009778:	2300      	movs	r3, #0
 800977a:	4604      	mov	r4, r0
 800977c:	4608      	mov	r0, r1
 800977e:	602b      	str	r3, [r5, #0]
 8009780:	f7fa fa91 	bl	8003ca6 <_close>
 8009784:	1c43      	adds	r3, r0, #1
 8009786:	d102      	bne.n	800978e <_close_r+0x1a>
 8009788:	682b      	ldr	r3, [r5, #0]
 800978a:	b103      	cbz	r3, 800978e <_close_r+0x1a>
 800978c:	6023      	str	r3, [r4, #0]
 800978e:	bd38      	pop	{r3, r4, r5, pc}
 8009790:	20000cf0 	.word	0x20000cf0

08009794 <_fstat_r>:
 8009794:	b538      	push	{r3, r4, r5, lr}
 8009796:	4d07      	ldr	r5, [pc, #28]	; (80097b4 <_fstat_r+0x20>)
 8009798:	2300      	movs	r3, #0
 800979a:	4604      	mov	r4, r0
 800979c:	4608      	mov	r0, r1
 800979e:	4611      	mov	r1, r2
 80097a0:	602b      	str	r3, [r5, #0]
 80097a2:	f7fa fa8c 	bl	8003cbe <_fstat>
 80097a6:	1c43      	adds	r3, r0, #1
 80097a8:	d102      	bne.n	80097b0 <_fstat_r+0x1c>
 80097aa:	682b      	ldr	r3, [r5, #0]
 80097ac:	b103      	cbz	r3, 80097b0 <_fstat_r+0x1c>
 80097ae:	6023      	str	r3, [r4, #0]
 80097b0:	bd38      	pop	{r3, r4, r5, pc}
 80097b2:	bf00      	nop
 80097b4:	20000cf0 	.word	0x20000cf0

080097b8 <_isatty_r>:
 80097b8:	b538      	push	{r3, r4, r5, lr}
 80097ba:	4d06      	ldr	r5, [pc, #24]	; (80097d4 <_isatty_r+0x1c>)
 80097bc:	2300      	movs	r3, #0
 80097be:	4604      	mov	r4, r0
 80097c0:	4608      	mov	r0, r1
 80097c2:	602b      	str	r3, [r5, #0]
 80097c4:	f7fa fa8b 	bl	8003cde <_isatty>
 80097c8:	1c43      	adds	r3, r0, #1
 80097ca:	d102      	bne.n	80097d2 <_isatty_r+0x1a>
 80097cc:	682b      	ldr	r3, [r5, #0]
 80097ce:	b103      	cbz	r3, 80097d2 <_isatty_r+0x1a>
 80097d0:	6023      	str	r3, [r4, #0]
 80097d2:	bd38      	pop	{r3, r4, r5, pc}
 80097d4:	20000cf0 	.word	0x20000cf0

080097d8 <_lseek_r>:
 80097d8:	b538      	push	{r3, r4, r5, lr}
 80097da:	4d07      	ldr	r5, [pc, #28]	; (80097f8 <_lseek_r+0x20>)
 80097dc:	4604      	mov	r4, r0
 80097de:	4608      	mov	r0, r1
 80097e0:	4611      	mov	r1, r2
 80097e2:	2200      	movs	r2, #0
 80097e4:	602a      	str	r2, [r5, #0]
 80097e6:	461a      	mov	r2, r3
 80097e8:	f7fa fa84 	bl	8003cf4 <_lseek>
 80097ec:	1c43      	adds	r3, r0, #1
 80097ee:	d102      	bne.n	80097f6 <_lseek_r+0x1e>
 80097f0:	682b      	ldr	r3, [r5, #0]
 80097f2:	b103      	cbz	r3, 80097f6 <_lseek_r+0x1e>
 80097f4:	6023      	str	r3, [r4, #0]
 80097f6:	bd38      	pop	{r3, r4, r5, pc}
 80097f8:	20000cf0 	.word	0x20000cf0

080097fc <memmove>:
 80097fc:	4288      	cmp	r0, r1
 80097fe:	b510      	push	{r4, lr}
 8009800:	eb01 0402 	add.w	r4, r1, r2
 8009804:	d902      	bls.n	800980c <memmove+0x10>
 8009806:	4284      	cmp	r4, r0
 8009808:	4623      	mov	r3, r4
 800980a:	d807      	bhi.n	800981c <memmove+0x20>
 800980c:	1e43      	subs	r3, r0, #1
 800980e:	42a1      	cmp	r1, r4
 8009810:	d008      	beq.n	8009824 <memmove+0x28>
 8009812:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009816:	f803 2f01 	strb.w	r2, [r3, #1]!
 800981a:	e7f8      	b.n	800980e <memmove+0x12>
 800981c:	4402      	add	r2, r0
 800981e:	4601      	mov	r1, r0
 8009820:	428a      	cmp	r2, r1
 8009822:	d100      	bne.n	8009826 <memmove+0x2a>
 8009824:	bd10      	pop	{r4, pc}
 8009826:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800982a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800982e:	e7f7      	b.n	8009820 <memmove+0x24>

08009830 <_realloc_r>:
 8009830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009832:	4607      	mov	r7, r0
 8009834:	4614      	mov	r4, r2
 8009836:	460e      	mov	r6, r1
 8009838:	b921      	cbnz	r1, 8009844 <_realloc_r+0x14>
 800983a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800983e:	4611      	mov	r1, r2
 8009840:	f7fe bde6 	b.w	8008410 <_malloc_r>
 8009844:	b922      	cbnz	r2, 8009850 <_realloc_r+0x20>
 8009846:	f7fe fd93 	bl	8008370 <_free_r>
 800984a:	4625      	mov	r5, r4
 800984c:	4628      	mov	r0, r5
 800984e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009850:	f000 f86a 	bl	8009928 <_malloc_usable_size_r>
 8009854:	42a0      	cmp	r0, r4
 8009856:	d20f      	bcs.n	8009878 <_realloc_r+0x48>
 8009858:	4621      	mov	r1, r4
 800985a:	4638      	mov	r0, r7
 800985c:	f7fe fdd8 	bl	8008410 <_malloc_r>
 8009860:	4605      	mov	r5, r0
 8009862:	2800      	cmp	r0, #0
 8009864:	d0f2      	beq.n	800984c <_realloc_r+0x1c>
 8009866:	4631      	mov	r1, r6
 8009868:	4622      	mov	r2, r4
 800986a:	f7fe fd6b 	bl	8008344 <memcpy>
 800986e:	4631      	mov	r1, r6
 8009870:	4638      	mov	r0, r7
 8009872:	f7fe fd7d 	bl	8008370 <_free_r>
 8009876:	e7e9      	b.n	800984c <_realloc_r+0x1c>
 8009878:	4635      	mov	r5, r6
 800987a:	e7e7      	b.n	800984c <_realloc_r+0x1c>

0800987c <_read_r>:
 800987c:	b538      	push	{r3, r4, r5, lr}
 800987e:	4d07      	ldr	r5, [pc, #28]	; (800989c <_read_r+0x20>)
 8009880:	4604      	mov	r4, r0
 8009882:	4608      	mov	r0, r1
 8009884:	4611      	mov	r1, r2
 8009886:	2200      	movs	r2, #0
 8009888:	602a      	str	r2, [r5, #0]
 800988a:	461a      	mov	r2, r3
 800988c:	f7fa f9d2 	bl	8003c34 <_read>
 8009890:	1c43      	adds	r3, r0, #1
 8009892:	d102      	bne.n	800989a <_read_r+0x1e>
 8009894:	682b      	ldr	r3, [r5, #0]
 8009896:	b103      	cbz	r3, 800989a <_read_r+0x1e>
 8009898:	6023      	str	r3, [r4, #0]
 800989a:	bd38      	pop	{r3, r4, r5, pc}
 800989c:	20000cf0 	.word	0x20000cf0

080098a0 <_raise_r>:
 80098a0:	291f      	cmp	r1, #31
 80098a2:	b538      	push	{r3, r4, r5, lr}
 80098a4:	4604      	mov	r4, r0
 80098a6:	460d      	mov	r5, r1
 80098a8:	d904      	bls.n	80098b4 <_raise_r+0x14>
 80098aa:	2316      	movs	r3, #22
 80098ac:	6003      	str	r3, [r0, #0]
 80098ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80098b2:	bd38      	pop	{r3, r4, r5, pc}
 80098b4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80098b6:	b112      	cbz	r2, 80098be <_raise_r+0x1e>
 80098b8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80098bc:	b94b      	cbnz	r3, 80098d2 <_raise_r+0x32>
 80098be:	4620      	mov	r0, r4
 80098c0:	f000 f830 	bl	8009924 <_getpid_r>
 80098c4:	462a      	mov	r2, r5
 80098c6:	4601      	mov	r1, r0
 80098c8:	4620      	mov	r0, r4
 80098ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80098ce:	f000 b817 	b.w	8009900 <_kill_r>
 80098d2:	2b01      	cmp	r3, #1
 80098d4:	d00a      	beq.n	80098ec <_raise_r+0x4c>
 80098d6:	1c59      	adds	r1, r3, #1
 80098d8:	d103      	bne.n	80098e2 <_raise_r+0x42>
 80098da:	2316      	movs	r3, #22
 80098dc:	6003      	str	r3, [r0, #0]
 80098de:	2001      	movs	r0, #1
 80098e0:	e7e7      	b.n	80098b2 <_raise_r+0x12>
 80098e2:	2400      	movs	r4, #0
 80098e4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80098e8:	4628      	mov	r0, r5
 80098ea:	4798      	blx	r3
 80098ec:	2000      	movs	r0, #0
 80098ee:	e7e0      	b.n	80098b2 <_raise_r+0x12>

080098f0 <raise>:
 80098f0:	4b02      	ldr	r3, [pc, #8]	; (80098fc <raise+0xc>)
 80098f2:	4601      	mov	r1, r0
 80098f4:	6818      	ldr	r0, [r3, #0]
 80098f6:	f7ff bfd3 	b.w	80098a0 <_raise_r>
 80098fa:	bf00      	nop
 80098fc:	2000009c 	.word	0x2000009c

08009900 <_kill_r>:
 8009900:	b538      	push	{r3, r4, r5, lr}
 8009902:	4d07      	ldr	r5, [pc, #28]	; (8009920 <_kill_r+0x20>)
 8009904:	2300      	movs	r3, #0
 8009906:	4604      	mov	r4, r0
 8009908:	4608      	mov	r0, r1
 800990a:	4611      	mov	r1, r2
 800990c:	602b      	str	r3, [r5, #0]
 800990e:	f7fa f977 	bl	8003c00 <_kill>
 8009912:	1c43      	adds	r3, r0, #1
 8009914:	d102      	bne.n	800991c <_kill_r+0x1c>
 8009916:	682b      	ldr	r3, [r5, #0]
 8009918:	b103      	cbz	r3, 800991c <_kill_r+0x1c>
 800991a:	6023      	str	r3, [r4, #0]
 800991c:	bd38      	pop	{r3, r4, r5, pc}
 800991e:	bf00      	nop
 8009920:	20000cf0 	.word	0x20000cf0

08009924 <_getpid_r>:
 8009924:	f7fa b964 	b.w	8003bf0 <_getpid>

08009928 <_malloc_usable_size_r>:
 8009928:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800992c:	1f18      	subs	r0, r3, #4
 800992e:	2b00      	cmp	r3, #0
 8009930:	bfbc      	itt	lt
 8009932:	580b      	ldrlt	r3, [r1, r0]
 8009934:	18c0      	addlt	r0, r0, r3
 8009936:	4770      	bx	lr

08009938 <_init>:
 8009938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800993a:	bf00      	nop
 800993c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800993e:	bc08      	pop	{r3}
 8009940:	469e      	mov	lr, r3
 8009942:	4770      	bx	lr

08009944 <_fini>:
 8009944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009946:	bf00      	nop
 8009948:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800994a:	bc08      	pop	{r3}
 800994c:	469e      	mov	lr, r3
 800994e:	4770      	bx	lr
