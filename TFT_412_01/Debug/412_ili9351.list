
412_ili9351.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000488c  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002bc  08004a18  08004a18  00014a18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004cd4  08004cd4  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08004cd4  08004cd4  00014cd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004cdc  08004cdc  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004cdc  08004cdc  00014cdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ce0  08004ce0  00014ce0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004ce4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e0  20000010  08004cf4  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001f0  08004cf4  000201f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012902  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002732  00000000  00000000  00032942  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f38  00000000  00000000  00035078  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e40  00000000  00000000  00035fb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a346  00000000  00000000  00036df0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000125dd  00000000  00000000  00051136  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a4275  00000000  00000000  00063713  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00107988  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f04  00000000  00000000  001079dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000010 	.word	0x20000010
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08004a00 	.word	0x08004a00

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000014 	.word	0x20000014
 80001c8:	08004a00 	.word	0x08004a00

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e0:	f000 b96e 	b.w	80004c0 <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9d08      	ldr	r5, [sp, #32]
 8000202:	4604      	mov	r4, r0
 8000204:	468c      	mov	ip, r1
 8000206:	2b00      	cmp	r3, #0
 8000208:	f040 8083 	bne.w	8000312 <__udivmoddi4+0x116>
 800020c:	428a      	cmp	r2, r1
 800020e:	4617      	mov	r7, r2
 8000210:	d947      	bls.n	80002a2 <__udivmoddi4+0xa6>
 8000212:	fab2 f282 	clz	r2, r2
 8000216:	b142      	cbz	r2, 800022a <__udivmoddi4+0x2e>
 8000218:	f1c2 0020 	rsb	r0, r2, #32
 800021c:	fa24 f000 	lsr.w	r0, r4, r0
 8000220:	4091      	lsls	r1, r2
 8000222:	4097      	lsls	r7, r2
 8000224:	ea40 0c01 	orr.w	ip, r0, r1
 8000228:	4094      	lsls	r4, r2
 800022a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022e:	0c23      	lsrs	r3, r4, #16
 8000230:	fbbc f6f8 	udiv	r6, ip, r8
 8000234:	fa1f fe87 	uxth.w	lr, r7
 8000238:	fb08 c116 	mls	r1, r8, r6, ip
 800023c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000240:	fb06 f10e 	mul.w	r1, r6, lr
 8000244:	4299      	cmp	r1, r3
 8000246:	d909      	bls.n	800025c <__udivmoddi4+0x60>
 8000248:	18fb      	adds	r3, r7, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800024e:	f080 8119 	bcs.w	8000484 <__udivmoddi4+0x288>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 8116 	bls.w	8000484 <__udivmoddi4+0x288>
 8000258:	3e02      	subs	r6, #2
 800025a:	443b      	add	r3, r7
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000270:	45a6      	cmp	lr, r4
 8000272:	d909      	bls.n	8000288 <__udivmoddi4+0x8c>
 8000274:	193c      	adds	r4, r7, r4
 8000276:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800027a:	f080 8105 	bcs.w	8000488 <__udivmoddi4+0x28c>
 800027e:	45a6      	cmp	lr, r4
 8000280:	f240 8102 	bls.w	8000488 <__udivmoddi4+0x28c>
 8000284:	3802      	subs	r0, #2
 8000286:	443c      	add	r4, r7
 8000288:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028c:	eba4 040e 	sub.w	r4, r4, lr
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa0>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	b902      	cbnz	r2, 80002a6 <__udivmoddi4+0xaa>
 80002a4:	deff      	udf	#255	; 0xff
 80002a6:	fab2 f282 	clz	r2, r2
 80002aa:	2a00      	cmp	r2, #0
 80002ac:	d150      	bne.n	8000350 <__udivmoddi4+0x154>
 80002ae:	1bcb      	subs	r3, r1, r7
 80002b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b4:	fa1f f887 	uxth.w	r8, r7
 80002b8:	2601      	movs	r6, #1
 80002ba:	fbb3 fcfe 	udiv	ip, r3, lr
 80002be:	0c21      	lsrs	r1, r4, #16
 80002c0:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c8:	fb08 f30c 	mul.w	r3, r8, ip
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d907      	bls.n	80002e0 <__udivmoddi4+0xe4>
 80002d0:	1879      	adds	r1, r7, r1
 80002d2:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002d6:	d202      	bcs.n	80002de <__udivmoddi4+0xe2>
 80002d8:	428b      	cmp	r3, r1
 80002da:	f200 80e9 	bhi.w	80004b0 <__udivmoddi4+0x2b4>
 80002de:	4684      	mov	ip, r0
 80002e0:	1ac9      	subs	r1, r1, r3
 80002e2:	b2a3      	uxth	r3, r4
 80002e4:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e8:	fb0e 1110 	mls	r1, lr, r0, r1
 80002ec:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f0:	fb08 f800 	mul.w	r8, r8, r0
 80002f4:	45a0      	cmp	r8, r4
 80002f6:	d907      	bls.n	8000308 <__udivmoddi4+0x10c>
 80002f8:	193c      	adds	r4, r7, r4
 80002fa:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002fe:	d202      	bcs.n	8000306 <__udivmoddi4+0x10a>
 8000300:	45a0      	cmp	r8, r4
 8000302:	f200 80d9 	bhi.w	80004b8 <__udivmoddi4+0x2bc>
 8000306:	4618      	mov	r0, r3
 8000308:	eba4 0408 	sub.w	r4, r4, r8
 800030c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000310:	e7bf      	b.n	8000292 <__udivmoddi4+0x96>
 8000312:	428b      	cmp	r3, r1
 8000314:	d909      	bls.n	800032a <__udivmoddi4+0x12e>
 8000316:	2d00      	cmp	r5, #0
 8000318:	f000 80b1 	beq.w	800047e <__udivmoddi4+0x282>
 800031c:	2600      	movs	r6, #0
 800031e:	e9c5 0100 	strd	r0, r1, [r5]
 8000322:	4630      	mov	r0, r6
 8000324:	4631      	mov	r1, r6
 8000326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032a:	fab3 f683 	clz	r6, r3
 800032e:	2e00      	cmp	r6, #0
 8000330:	d14a      	bne.n	80003c8 <__udivmoddi4+0x1cc>
 8000332:	428b      	cmp	r3, r1
 8000334:	d302      	bcc.n	800033c <__udivmoddi4+0x140>
 8000336:	4282      	cmp	r2, r0
 8000338:	f200 80b8 	bhi.w	80004ac <__udivmoddi4+0x2b0>
 800033c:	1a84      	subs	r4, r0, r2
 800033e:	eb61 0103 	sbc.w	r1, r1, r3
 8000342:	2001      	movs	r0, #1
 8000344:	468c      	mov	ip, r1
 8000346:	2d00      	cmp	r5, #0
 8000348:	d0a8      	beq.n	800029c <__udivmoddi4+0xa0>
 800034a:	e9c5 4c00 	strd	r4, ip, [r5]
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0xa0>
 8000350:	f1c2 0320 	rsb	r3, r2, #32
 8000354:	fa20 f603 	lsr.w	r6, r0, r3
 8000358:	4097      	lsls	r7, r2
 800035a:	fa01 f002 	lsl.w	r0, r1, r2
 800035e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000362:	40d9      	lsrs	r1, r3
 8000364:	4330      	orrs	r0, r6
 8000366:	0c03      	lsrs	r3, r0, #16
 8000368:	fbb1 f6fe 	udiv	r6, r1, lr
 800036c:	fa1f f887 	uxth.w	r8, r7
 8000370:	fb0e 1116 	mls	r1, lr, r6, r1
 8000374:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000378:	fb06 f108 	mul.w	r1, r6, r8
 800037c:	4299      	cmp	r1, r3
 800037e:	fa04 f402 	lsl.w	r4, r4, r2
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x19c>
 8000384:	18fb      	adds	r3, r7, r3
 8000386:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800038a:	f080 808d 	bcs.w	80004a8 <__udivmoddi4+0x2ac>
 800038e:	4299      	cmp	r1, r3
 8000390:	f240 808a 	bls.w	80004a8 <__udivmoddi4+0x2ac>
 8000394:	3e02      	subs	r6, #2
 8000396:	443b      	add	r3, r7
 8000398:	1a5b      	subs	r3, r3, r1
 800039a:	b281      	uxth	r1, r0
 800039c:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a0:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a8:	fb00 f308 	mul.w	r3, r0, r8
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d907      	bls.n	80003c0 <__udivmoddi4+0x1c4>
 80003b0:	1879      	adds	r1, r7, r1
 80003b2:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003b6:	d273      	bcs.n	80004a0 <__udivmoddi4+0x2a4>
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d971      	bls.n	80004a0 <__udivmoddi4+0x2a4>
 80003bc:	3802      	subs	r0, #2
 80003be:	4439      	add	r1, r7
 80003c0:	1acb      	subs	r3, r1, r3
 80003c2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c6:	e778      	b.n	80002ba <__udivmoddi4+0xbe>
 80003c8:	f1c6 0c20 	rsb	ip, r6, #32
 80003cc:	fa03 f406 	lsl.w	r4, r3, r6
 80003d0:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d4:	431c      	orrs	r4, r3
 80003d6:	fa20 f70c 	lsr.w	r7, r0, ip
 80003da:	fa01 f306 	lsl.w	r3, r1, r6
 80003de:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003e2:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e6:	431f      	orrs	r7, r3
 80003e8:	0c3b      	lsrs	r3, r7, #16
 80003ea:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ee:	fa1f f884 	uxth.w	r8, r4
 80003f2:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003fa:	fb09 fa08 	mul.w	sl, r9, r8
 80003fe:	458a      	cmp	sl, r1
 8000400:	fa02 f206 	lsl.w	r2, r2, r6
 8000404:	fa00 f306 	lsl.w	r3, r0, r6
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x220>
 800040a:	1861      	adds	r1, r4, r1
 800040c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000410:	d248      	bcs.n	80004a4 <__udivmoddi4+0x2a8>
 8000412:	458a      	cmp	sl, r1
 8000414:	d946      	bls.n	80004a4 <__udivmoddi4+0x2a8>
 8000416:	f1a9 0902 	sub.w	r9, r9, #2
 800041a:	4421      	add	r1, r4
 800041c:	eba1 010a 	sub.w	r1, r1, sl
 8000420:	b2bf      	uxth	r7, r7
 8000422:	fbb1 f0fe 	udiv	r0, r1, lr
 8000426:	fb0e 1110 	mls	r1, lr, r0, r1
 800042a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042e:	fb00 f808 	mul.w	r8, r0, r8
 8000432:	45b8      	cmp	r8, r7
 8000434:	d907      	bls.n	8000446 <__udivmoddi4+0x24a>
 8000436:	19e7      	adds	r7, r4, r7
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800043c:	d22e      	bcs.n	800049c <__udivmoddi4+0x2a0>
 800043e:	45b8      	cmp	r8, r7
 8000440:	d92c      	bls.n	800049c <__udivmoddi4+0x2a0>
 8000442:	3802      	subs	r0, #2
 8000444:	4427      	add	r7, r4
 8000446:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800044a:	eba7 0708 	sub.w	r7, r7, r8
 800044e:	fba0 8902 	umull	r8, r9, r0, r2
 8000452:	454f      	cmp	r7, r9
 8000454:	46c6      	mov	lr, r8
 8000456:	4649      	mov	r1, r9
 8000458:	d31a      	bcc.n	8000490 <__udivmoddi4+0x294>
 800045a:	d017      	beq.n	800048c <__udivmoddi4+0x290>
 800045c:	b15d      	cbz	r5, 8000476 <__udivmoddi4+0x27a>
 800045e:	ebb3 020e 	subs.w	r2, r3, lr
 8000462:	eb67 0701 	sbc.w	r7, r7, r1
 8000466:	fa07 fc0c 	lsl.w	ip, r7, ip
 800046a:	40f2      	lsrs	r2, r6
 800046c:	ea4c 0202 	orr.w	r2, ip, r2
 8000470:	40f7      	lsrs	r7, r6
 8000472:	e9c5 2700 	strd	r2, r7, [r5]
 8000476:	2600      	movs	r6, #0
 8000478:	4631      	mov	r1, r6
 800047a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047e:	462e      	mov	r6, r5
 8000480:	4628      	mov	r0, r5
 8000482:	e70b      	b.n	800029c <__udivmoddi4+0xa0>
 8000484:	4606      	mov	r6, r0
 8000486:	e6e9      	b.n	800025c <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fd      	b.n	8000288 <__udivmoddi4+0x8c>
 800048c:	4543      	cmp	r3, r8
 800048e:	d2e5      	bcs.n	800045c <__udivmoddi4+0x260>
 8000490:	ebb8 0e02 	subs.w	lr, r8, r2
 8000494:	eb69 0104 	sbc.w	r1, r9, r4
 8000498:	3801      	subs	r0, #1
 800049a:	e7df      	b.n	800045c <__udivmoddi4+0x260>
 800049c:	4608      	mov	r0, r1
 800049e:	e7d2      	b.n	8000446 <__udivmoddi4+0x24a>
 80004a0:	4660      	mov	r0, ip
 80004a2:	e78d      	b.n	80003c0 <__udivmoddi4+0x1c4>
 80004a4:	4681      	mov	r9, r0
 80004a6:	e7b9      	b.n	800041c <__udivmoddi4+0x220>
 80004a8:	4666      	mov	r6, ip
 80004aa:	e775      	b.n	8000398 <__udivmoddi4+0x19c>
 80004ac:	4630      	mov	r0, r6
 80004ae:	e74a      	b.n	8000346 <__udivmoddi4+0x14a>
 80004b0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b4:	4439      	add	r1, r7
 80004b6:	e713      	b.n	80002e0 <__udivmoddi4+0xe4>
 80004b8:	3802      	subs	r0, #2
 80004ba:	443c      	add	r4, r7
 80004bc:	e724      	b.n	8000308 <__udivmoddi4+0x10c>
 80004be:	bf00      	nop

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <ILI9341_Draw_Hollow_Circle>:

extern SPI_HandleTypeDef hspi1;

/*Draw hollow circle at X,Y location with specified radius and colour. X and Y represent circles center */
void ILI9341_Draw_Hollow_Circle(uint16_t X, uint16_t Y, uint16_t Radius, uint16_t Colour)
{
 80004c4:	b590      	push	{r4, r7, lr}
 80004c6:	b089      	sub	sp, #36	; 0x24
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	4604      	mov	r4, r0
 80004cc:	4608      	mov	r0, r1
 80004ce:	4611      	mov	r1, r2
 80004d0:	461a      	mov	r2, r3
 80004d2:	4623      	mov	r3, r4
 80004d4:	80fb      	strh	r3, [r7, #6]
 80004d6:	4603      	mov	r3, r0
 80004d8:	80bb      	strh	r3, [r7, #4]
 80004da:	460b      	mov	r3, r1
 80004dc:	807b      	strh	r3, [r7, #2]
 80004de:	4613      	mov	r3, r2
 80004e0:	803b      	strh	r3, [r7, #0]
	int x = Radius-1;
 80004e2:	887b      	ldrh	r3, [r7, #2]
 80004e4:	3b01      	subs	r3, #1
 80004e6:	61fb      	str	r3, [r7, #28]
    int y = 0;
 80004e8:	2300      	movs	r3, #0
 80004ea:	61bb      	str	r3, [r7, #24]
    int dx = 1;
 80004ec:	2301      	movs	r3, #1
 80004ee:	617b      	str	r3, [r7, #20]
    int dy = 1;
 80004f0:	2301      	movs	r3, #1
 80004f2:	613b      	str	r3, [r7, #16]
    int err = dx - (Radius << 1);
 80004f4:	887b      	ldrh	r3, [r7, #2]
 80004f6:	005b      	lsls	r3, r3, #1
 80004f8:	697a      	ldr	r2, [r7, #20]
 80004fa:	1ad3      	subs	r3, r2, r3
 80004fc:	60fb      	str	r3, [r7, #12]

    while (x >= y)
 80004fe:	e08d      	b.n	800061c <ILI9341_Draw_Hollow_Circle+0x158>
    {
        ILI9341_Draw_Pixel(X + x, Y + y, Colour);
 8000500:	69fb      	ldr	r3, [r7, #28]
 8000502:	b29a      	uxth	r2, r3
 8000504:	88fb      	ldrh	r3, [r7, #6]
 8000506:	4413      	add	r3, r2
 8000508:	b298      	uxth	r0, r3
 800050a:	69bb      	ldr	r3, [r7, #24]
 800050c:	b29a      	uxth	r2, r3
 800050e:	88bb      	ldrh	r3, [r7, #4]
 8000510:	4413      	add	r3, r2
 8000512:	b29b      	uxth	r3, r3
 8000514:	883a      	ldrh	r2, [r7, #0]
 8000516:	4619      	mov	r1, r3
 8000518:	f000 fdaa 	bl	8001070 <ILI9341_Draw_Pixel>
        ILI9341_Draw_Pixel(X + y, Y + x, Colour);
 800051c:	69bb      	ldr	r3, [r7, #24]
 800051e:	b29a      	uxth	r2, r3
 8000520:	88fb      	ldrh	r3, [r7, #6]
 8000522:	4413      	add	r3, r2
 8000524:	b298      	uxth	r0, r3
 8000526:	69fb      	ldr	r3, [r7, #28]
 8000528:	b29a      	uxth	r2, r3
 800052a:	88bb      	ldrh	r3, [r7, #4]
 800052c:	4413      	add	r3, r2
 800052e:	b29b      	uxth	r3, r3
 8000530:	883a      	ldrh	r2, [r7, #0]
 8000532:	4619      	mov	r1, r3
 8000534:	f000 fd9c 	bl	8001070 <ILI9341_Draw_Pixel>
        ILI9341_Draw_Pixel(X - y, Y + x, Colour);
 8000538:	69bb      	ldr	r3, [r7, #24]
 800053a:	b29b      	uxth	r3, r3
 800053c:	88fa      	ldrh	r2, [r7, #6]
 800053e:	1ad3      	subs	r3, r2, r3
 8000540:	b298      	uxth	r0, r3
 8000542:	69fb      	ldr	r3, [r7, #28]
 8000544:	b29a      	uxth	r2, r3
 8000546:	88bb      	ldrh	r3, [r7, #4]
 8000548:	4413      	add	r3, r2
 800054a:	b29b      	uxth	r3, r3
 800054c:	883a      	ldrh	r2, [r7, #0]
 800054e:	4619      	mov	r1, r3
 8000550:	f000 fd8e 	bl	8001070 <ILI9341_Draw_Pixel>
        ILI9341_Draw_Pixel(X - x, Y + y, Colour);
 8000554:	69fb      	ldr	r3, [r7, #28]
 8000556:	b29b      	uxth	r3, r3
 8000558:	88fa      	ldrh	r2, [r7, #6]
 800055a:	1ad3      	subs	r3, r2, r3
 800055c:	b298      	uxth	r0, r3
 800055e:	69bb      	ldr	r3, [r7, #24]
 8000560:	b29a      	uxth	r2, r3
 8000562:	88bb      	ldrh	r3, [r7, #4]
 8000564:	4413      	add	r3, r2
 8000566:	b29b      	uxth	r3, r3
 8000568:	883a      	ldrh	r2, [r7, #0]
 800056a:	4619      	mov	r1, r3
 800056c:	f000 fd80 	bl	8001070 <ILI9341_Draw_Pixel>
        ILI9341_Draw_Pixel(X - x, Y - y, Colour);
 8000570:	69fb      	ldr	r3, [r7, #28]
 8000572:	b29b      	uxth	r3, r3
 8000574:	88fa      	ldrh	r2, [r7, #6]
 8000576:	1ad3      	subs	r3, r2, r3
 8000578:	b298      	uxth	r0, r3
 800057a:	69bb      	ldr	r3, [r7, #24]
 800057c:	b29b      	uxth	r3, r3
 800057e:	88ba      	ldrh	r2, [r7, #4]
 8000580:	1ad3      	subs	r3, r2, r3
 8000582:	b29b      	uxth	r3, r3
 8000584:	883a      	ldrh	r2, [r7, #0]
 8000586:	4619      	mov	r1, r3
 8000588:	f000 fd72 	bl	8001070 <ILI9341_Draw_Pixel>
        ILI9341_Draw_Pixel(X - y, Y - x, Colour);
 800058c:	69bb      	ldr	r3, [r7, #24]
 800058e:	b29b      	uxth	r3, r3
 8000590:	88fa      	ldrh	r2, [r7, #6]
 8000592:	1ad3      	subs	r3, r2, r3
 8000594:	b298      	uxth	r0, r3
 8000596:	69fb      	ldr	r3, [r7, #28]
 8000598:	b29b      	uxth	r3, r3
 800059a:	88ba      	ldrh	r2, [r7, #4]
 800059c:	1ad3      	subs	r3, r2, r3
 800059e:	b29b      	uxth	r3, r3
 80005a0:	883a      	ldrh	r2, [r7, #0]
 80005a2:	4619      	mov	r1, r3
 80005a4:	f000 fd64 	bl	8001070 <ILI9341_Draw_Pixel>
        ILI9341_Draw_Pixel(X + y, Y - x, Colour);
 80005a8:	69bb      	ldr	r3, [r7, #24]
 80005aa:	b29a      	uxth	r2, r3
 80005ac:	88fb      	ldrh	r3, [r7, #6]
 80005ae:	4413      	add	r3, r2
 80005b0:	b298      	uxth	r0, r3
 80005b2:	69fb      	ldr	r3, [r7, #28]
 80005b4:	b29b      	uxth	r3, r3
 80005b6:	88ba      	ldrh	r2, [r7, #4]
 80005b8:	1ad3      	subs	r3, r2, r3
 80005ba:	b29b      	uxth	r3, r3
 80005bc:	883a      	ldrh	r2, [r7, #0]
 80005be:	4619      	mov	r1, r3
 80005c0:	f000 fd56 	bl	8001070 <ILI9341_Draw_Pixel>
        ILI9341_Draw_Pixel(X + x, Y - y, Colour);
 80005c4:	69fb      	ldr	r3, [r7, #28]
 80005c6:	b29a      	uxth	r2, r3
 80005c8:	88fb      	ldrh	r3, [r7, #6]
 80005ca:	4413      	add	r3, r2
 80005cc:	b298      	uxth	r0, r3
 80005ce:	69bb      	ldr	r3, [r7, #24]
 80005d0:	b29b      	uxth	r3, r3
 80005d2:	88ba      	ldrh	r2, [r7, #4]
 80005d4:	1ad3      	subs	r3, r2, r3
 80005d6:	b29b      	uxth	r3, r3
 80005d8:	883a      	ldrh	r2, [r7, #0]
 80005da:	4619      	mov	r1, r3
 80005dc:	f000 fd48 	bl	8001070 <ILI9341_Draw_Pixel>

        if (err <= 0)
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	dc09      	bgt.n	80005fa <ILI9341_Draw_Hollow_Circle+0x136>
        {
            y++;
 80005e6:	69bb      	ldr	r3, [r7, #24]
 80005e8:	3301      	adds	r3, #1
 80005ea:	61bb      	str	r3, [r7, #24]
            err += dy;
 80005ec:	68fa      	ldr	r2, [r7, #12]
 80005ee:	693b      	ldr	r3, [r7, #16]
 80005f0:	4413      	add	r3, r2
 80005f2:	60fb      	str	r3, [r7, #12]
            dy += 2;
 80005f4:	693b      	ldr	r3, [r7, #16]
 80005f6:	3302      	adds	r3, #2
 80005f8:	613b      	str	r3, [r7, #16]
        }
        if (err > 0)
 80005fa:	68fb      	ldr	r3, [r7, #12]
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	dd0d      	ble.n	800061c <ILI9341_Draw_Hollow_Circle+0x158>
        {
            x--;
 8000600:	69fb      	ldr	r3, [r7, #28]
 8000602:	3b01      	subs	r3, #1
 8000604:	61fb      	str	r3, [r7, #28]
            dx += 2;
 8000606:	697b      	ldr	r3, [r7, #20]
 8000608:	3302      	adds	r3, #2
 800060a:	617b      	str	r3, [r7, #20]
            err += (-Radius << 1) + dx;
 800060c:	887b      	ldrh	r3, [r7, #2]
 800060e:	425b      	negs	r3, r3
 8000610:	005a      	lsls	r2, r3, #1
 8000612:	697b      	ldr	r3, [r7, #20]
 8000614:	4413      	add	r3, r2
 8000616:	68fa      	ldr	r2, [r7, #12]
 8000618:	4413      	add	r3, r2
 800061a:	60fb      	str	r3, [r7, #12]
    while (x >= y)
 800061c:	69fa      	ldr	r2, [r7, #28]
 800061e:	69bb      	ldr	r3, [r7, #24]
 8000620:	429a      	cmp	r2, r3
 8000622:	f6bf af6d 	bge.w	8000500 <ILI9341_Draw_Hollow_Circle+0x3c>
        }
    }
}
 8000626:	bf00      	nop
 8000628:	bf00      	nop
 800062a:	3724      	adds	r7, #36	; 0x24
 800062c:	46bd      	mov	sp, r7
 800062e:	bd90      	pop	{r4, r7, pc}

08000630 <ILI9341_Draw_Filled_Circle>:

/*Draw filled circle at X,Y location with specified radius and colour. X and Y represent circles center */
void ILI9341_Draw_Filled_Circle(uint16_t X, uint16_t Y, uint16_t Radius, uint16_t Colour)
{
 8000630:	b590      	push	{r4, r7, lr}
 8000632:	b08b      	sub	sp, #44	; 0x2c
 8000634:	af00      	add	r7, sp, #0
 8000636:	4604      	mov	r4, r0
 8000638:	4608      	mov	r0, r1
 800063a:	4611      	mov	r1, r2
 800063c:	461a      	mov	r2, r3
 800063e:	4623      	mov	r3, r4
 8000640:	80fb      	strh	r3, [r7, #6]
 8000642:	4603      	mov	r3, r0
 8000644:	80bb      	strh	r3, [r7, #4]
 8000646:	460b      	mov	r3, r1
 8000648:	807b      	strh	r3, [r7, #2]
 800064a:	4613      	mov	r3, r2
 800064c:	803b      	strh	r3, [r7, #0]
	
		int x = Radius;
 800064e:	887b      	ldrh	r3, [r7, #2]
 8000650:	627b      	str	r3, [r7, #36]	; 0x24
    int y = 0;
 8000652:	2300      	movs	r3, #0
 8000654:	623b      	str	r3, [r7, #32]
    int xChange = 1 - (Radius << 1);
 8000656:	887b      	ldrh	r3, [r7, #2]
 8000658:	005b      	lsls	r3, r3, #1
 800065a:	f1c3 0301 	rsb	r3, r3, #1
 800065e:	61fb      	str	r3, [r7, #28]
    int yChange = 0;
 8000660:	2300      	movs	r3, #0
 8000662:	61bb      	str	r3, [r7, #24]
    int radiusError = 0;
 8000664:	2300      	movs	r3, #0
 8000666:	617b      	str	r3, [r7, #20]

    while (x >= y)
 8000668:	e061      	b.n	800072e <ILI9341_Draw_Filled_Circle+0xfe>
    {
        for (int i = X - x; i <= X + x; i++)
 800066a:	88fa      	ldrh	r2, [r7, #6]
 800066c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800066e:	1ad3      	subs	r3, r2, r3
 8000670:	613b      	str	r3, [r7, #16]
 8000672:	e018      	b.n	80006a6 <ILI9341_Draw_Filled_Circle+0x76>
        {
            ILI9341_Draw_Pixel(i, Y + y,Colour);
 8000674:	693b      	ldr	r3, [r7, #16]
 8000676:	b298      	uxth	r0, r3
 8000678:	6a3b      	ldr	r3, [r7, #32]
 800067a:	b29a      	uxth	r2, r3
 800067c:	88bb      	ldrh	r3, [r7, #4]
 800067e:	4413      	add	r3, r2
 8000680:	b29b      	uxth	r3, r3
 8000682:	883a      	ldrh	r2, [r7, #0]
 8000684:	4619      	mov	r1, r3
 8000686:	f000 fcf3 	bl	8001070 <ILI9341_Draw_Pixel>
            ILI9341_Draw_Pixel(i, Y - y,Colour);
 800068a:	693b      	ldr	r3, [r7, #16]
 800068c:	b298      	uxth	r0, r3
 800068e:	6a3b      	ldr	r3, [r7, #32]
 8000690:	b29b      	uxth	r3, r3
 8000692:	88ba      	ldrh	r2, [r7, #4]
 8000694:	1ad3      	subs	r3, r2, r3
 8000696:	b29b      	uxth	r3, r3
 8000698:	883a      	ldrh	r2, [r7, #0]
 800069a:	4619      	mov	r1, r3
 800069c:	f000 fce8 	bl	8001070 <ILI9341_Draw_Pixel>
        for (int i = X - x; i <= X + x; i++)
 80006a0:	693b      	ldr	r3, [r7, #16]
 80006a2:	3301      	adds	r3, #1
 80006a4:	613b      	str	r3, [r7, #16]
 80006a6:	88fa      	ldrh	r2, [r7, #6]
 80006a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006aa:	4413      	add	r3, r2
 80006ac:	693a      	ldr	r2, [r7, #16]
 80006ae:	429a      	cmp	r2, r3
 80006b0:	dde0      	ble.n	8000674 <ILI9341_Draw_Filled_Circle+0x44>
        }
        for (int i = X - y; i <= X + y; i++)
 80006b2:	88fa      	ldrh	r2, [r7, #6]
 80006b4:	6a3b      	ldr	r3, [r7, #32]
 80006b6:	1ad3      	subs	r3, r2, r3
 80006b8:	60fb      	str	r3, [r7, #12]
 80006ba:	e018      	b.n	80006ee <ILI9341_Draw_Filled_Circle+0xbe>
        {
            ILI9341_Draw_Pixel(i, Y + x,Colour);
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	b298      	uxth	r0, r3
 80006c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006c2:	b29a      	uxth	r2, r3
 80006c4:	88bb      	ldrh	r3, [r7, #4]
 80006c6:	4413      	add	r3, r2
 80006c8:	b29b      	uxth	r3, r3
 80006ca:	883a      	ldrh	r2, [r7, #0]
 80006cc:	4619      	mov	r1, r3
 80006ce:	f000 fccf 	bl	8001070 <ILI9341_Draw_Pixel>
            ILI9341_Draw_Pixel(i, Y - x,Colour);
 80006d2:	68fb      	ldr	r3, [r7, #12]
 80006d4:	b298      	uxth	r0, r3
 80006d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006d8:	b29b      	uxth	r3, r3
 80006da:	88ba      	ldrh	r2, [r7, #4]
 80006dc:	1ad3      	subs	r3, r2, r3
 80006de:	b29b      	uxth	r3, r3
 80006e0:	883a      	ldrh	r2, [r7, #0]
 80006e2:	4619      	mov	r1, r3
 80006e4:	f000 fcc4 	bl	8001070 <ILI9341_Draw_Pixel>
        for (int i = X - y; i <= X + y; i++)
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	3301      	adds	r3, #1
 80006ec:	60fb      	str	r3, [r7, #12]
 80006ee:	88fa      	ldrh	r2, [r7, #6]
 80006f0:	6a3b      	ldr	r3, [r7, #32]
 80006f2:	4413      	add	r3, r2
 80006f4:	68fa      	ldr	r2, [r7, #12]
 80006f6:	429a      	cmp	r2, r3
 80006f8:	dde0      	ble.n	80006bc <ILI9341_Draw_Filled_Circle+0x8c>
        }

        y++;
 80006fa:	6a3b      	ldr	r3, [r7, #32]
 80006fc:	3301      	adds	r3, #1
 80006fe:	623b      	str	r3, [r7, #32]
        radiusError += yChange;
 8000700:	697a      	ldr	r2, [r7, #20]
 8000702:	69bb      	ldr	r3, [r7, #24]
 8000704:	4413      	add	r3, r2
 8000706:	617b      	str	r3, [r7, #20]
        yChange += 2;
 8000708:	69bb      	ldr	r3, [r7, #24]
 800070a:	3302      	adds	r3, #2
 800070c:	61bb      	str	r3, [r7, #24]
        if (((radiusError << 1) + xChange) > 0)
 800070e:	697b      	ldr	r3, [r7, #20]
 8000710:	005a      	lsls	r2, r3, #1
 8000712:	69fb      	ldr	r3, [r7, #28]
 8000714:	4413      	add	r3, r2
 8000716:	2b00      	cmp	r3, #0
 8000718:	dd09      	ble.n	800072e <ILI9341_Draw_Filled_Circle+0xfe>
        {
            x--;
 800071a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800071c:	3b01      	subs	r3, #1
 800071e:	627b      	str	r3, [r7, #36]	; 0x24
            radiusError += xChange;
 8000720:	697a      	ldr	r2, [r7, #20]
 8000722:	69fb      	ldr	r3, [r7, #28]
 8000724:	4413      	add	r3, r2
 8000726:	617b      	str	r3, [r7, #20]
            xChange += 2;
 8000728:	69fb      	ldr	r3, [r7, #28]
 800072a:	3302      	adds	r3, #2
 800072c:	61fb      	str	r3, [r7, #28]
    while (x >= y)
 800072e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000730:	6a3b      	ldr	r3, [r7, #32]
 8000732:	429a      	cmp	r2, r3
 8000734:	da99      	bge.n	800066a <ILI9341_Draw_Filled_Circle+0x3a>
        }
    }
		//Really slow implementation, will require future overhaul
		//TODO:	https://stackoverflow.com/questions/1201200/fast-algorithm-for-drawing-filled-circles	
}
 8000736:	bf00      	nop
 8000738:	bf00      	nop
 800073a:	372c      	adds	r7, #44	; 0x2c
 800073c:	46bd      	mov	sp, r7
 800073e:	bd90      	pop	{r4, r7, pc}

08000740 <ILI9341_Draw_Hollow_Rectangle_Coord>:

/*Draw a hollow rectangle between positions X0,Y0 and X1,Y1 with specified colour*/
void ILI9341_Draw_Hollow_Rectangle_Coord(uint16_t X0, uint16_t Y0, uint16_t X1, uint16_t Y1, uint16_t Colour)
{
 8000740:	b590      	push	{r4, r7, lr}
 8000742:	b087      	sub	sp, #28
 8000744:	af00      	add	r7, sp, #0
 8000746:	4604      	mov	r4, r0
 8000748:	4608      	mov	r0, r1
 800074a:	4611      	mov	r1, r2
 800074c:	461a      	mov	r2, r3
 800074e:	4623      	mov	r3, r4
 8000750:	80fb      	strh	r3, [r7, #6]
 8000752:	4603      	mov	r3, r0
 8000754:	80bb      	strh	r3, [r7, #4]
 8000756:	460b      	mov	r3, r1
 8000758:	807b      	strh	r3, [r7, #2]
 800075a:	4613      	mov	r3, r2
 800075c:	803b      	strh	r3, [r7, #0]
	uint16_t 	X_length = 0;
 800075e:	2300      	movs	r3, #0
 8000760:	82fb      	strh	r3, [r7, #22]
	uint16_t 	Y_length = 0;
 8000762:	2300      	movs	r3, #0
 8000764:	82bb      	strh	r3, [r7, #20]
	uint8_t		Negative_X = 0;
 8000766:	2300      	movs	r3, #0
 8000768:	74fb      	strb	r3, [r7, #19]
	uint8_t 	Negative_Y = 0;
 800076a:	2300      	movs	r3, #0
 800076c:	74bb      	strb	r3, [r7, #18]
	float 		Calc_Negative = 0;
 800076e:	f04f 0300 	mov.w	r3, #0
 8000772:	60fb      	str	r3, [r7, #12]
	
	Calc_Negative = X1 - X0;
 8000774:	887a      	ldrh	r2, [r7, #2]
 8000776:	88fb      	ldrh	r3, [r7, #6]
 8000778:	1ad3      	subs	r3, r2, r3
 800077a:	ee07 3a90 	vmov	s15, r3
 800077e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000782:	edc7 7a03 	vstr	s15, [r7, #12]
	if(Calc_Negative < 0) Negative_X = 1;
 8000786:	edd7 7a03 	vldr	s15, [r7, #12]
 800078a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800078e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000792:	d501      	bpl.n	8000798 <ILI9341_Draw_Hollow_Rectangle_Coord+0x58>
 8000794:	2301      	movs	r3, #1
 8000796:	74fb      	strb	r3, [r7, #19]
	Calc_Negative = 0;
 8000798:	f04f 0300 	mov.w	r3, #0
 800079c:	60fb      	str	r3, [r7, #12]
	
	Calc_Negative = Y1 - Y0;
 800079e:	883a      	ldrh	r2, [r7, #0]
 80007a0:	88bb      	ldrh	r3, [r7, #4]
 80007a2:	1ad3      	subs	r3, r2, r3
 80007a4:	ee07 3a90 	vmov	s15, r3
 80007a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80007ac:	edc7 7a03 	vstr	s15, [r7, #12]
	if(Calc_Negative < 0) Negative_Y = 1;
 80007b0:	edd7 7a03 	vldr	s15, [r7, #12]
 80007b4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80007b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007bc:	d501      	bpl.n	80007c2 <ILI9341_Draw_Hollow_Rectangle_Coord+0x82>
 80007be:	2301      	movs	r3, #1
 80007c0:	74bb      	strb	r3, [r7, #18]
	
	
	//DRAW HORIZONTAL!
	if(!Negative_X)
 80007c2:	7cfb      	ldrb	r3, [r7, #19]
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d104      	bne.n	80007d2 <ILI9341_Draw_Hollow_Rectangle_Coord+0x92>
	{
		X_length = X1 - X0;		
 80007c8:	887a      	ldrh	r2, [r7, #2]
 80007ca:	88fb      	ldrh	r3, [r7, #6]
 80007cc:	1ad3      	subs	r3, r2, r3
 80007ce:	82fb      	strh	r3, [r7, #22]
 80007d0:	e003      	b.n	80007da <ILI9341_Draw_Hollow_Rectangle_Coord+0x9a>
	}
	else
	{
		X_length = X0 - X1;		
 80007d2:	88fa      	ldrh	r2, [r7, #6]
 80007d4:	887b      	ldrh	r3, [r7, #2]
 80007d6:	1ad3      	subs	r3, r2, r3
 80007d8:	82fb      	strh	r3, [r7, #22]
	}
	ILI9341_Draw_Horizontal_Line(X0, Y0, X_length, Colour);
 80007da:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80007dc:	8afa      	ldrh	r2, [r7, #22]
 80007de:	88b9      	ldrh	r1, [r7, #4]
 80007e0:	88f8      	ldrh	r0, [r7, #6]
 80007e2:	f000 fd79 	bl	80012d8 <ILI9341_Draw_Horizontal_Line>
	ILI9341_Draw_Horizontal_Line(X0, Y1, X_length, Colour);
 80007e6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80007e8:	8afa      	ldrh	r2, [r7, #22]
 80007ea:	8839      	ldrh	r1, [r7, #0]
 80007ec:	88f8      	ldrh	r0, [r7, #6]
 80007ee:	f000 fd73 	bl	80012d8 <ILI9341_Draw_Horizontal_Line>
	
	
	
	//DRAW VERTICAL!
	if(!Negative_Y)
 80007f2:	7cbb      	ldrb	r3, [r7, #18]
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d104      	bne.n	8000802 <ILI9341_Draw_Hollow_Rectangle_Coord+0xc2>
	{
		Y_length = Y1 - Y0;		
 80007f8:	883a      	ldrh	r2, [r7, #0]
 80007fa:	88bb      	ldrh	r3, [r7, #4]
 80007fc:	1ad3      	subs	r3, r2, r3
 80007fe:	82bb      	strh	r3, [r7, #20]
 8000800:	e003      	b.n	800080a <ILI9341_Draw_Hollow_Rectangle_Coord+0xca>
	}
	else
	{
		Y_length = Y0 - Y1;		
 8000802:	88ba      	ldrh	r2, [r7, #4]
 8000804:	883b      	ldrh	r3, [r7, #0]
 8000806:	1ad3      	subs	r3, r2, r3
 8000808:	82bb      	strh	r3, [r7, #20]
	}
	ILI9341_Draw_Vertical_Line(X0, Y0, Y_length, Colour);
 800080a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800080c:	8aba      	ldrh	r2, [r7, #20]
 800080e:	88b9      	ldrh	r1, [r7, #4]
 8000810:	88f8      	ldrh	r0, [r7, #6]
 8000812:	f000 fda5 	bl	8001360 <ILI9341_Draw_Vertical_Line>
	ILI9341_Draw_Vertical_Line(X1, Y0, Y_length, Colour);
 8000816:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000818:	8aba      	ldrh	r2, [r7, #20]
 800081a:	88b9      	ldrh	r1, [r7, #4]
 800081c:	8878      	ldrh	r0, [r7, #2]
 800081e:	f000 fd9f 	bl	8001360 <ILI9341_Draw_Vertical_Line>
	
	if((X_length > 0)||(Y_length > 0)) 
 8000822:	8afb      	ldrh	r3, [r7, #22]
 8000824:	2b00      	cmp	r3, #0
 8000826:	d102      	bne.n	800082e <ILI9341_Draw_Hollow_Rectangle_Coord+0xee>
 8000828:	8abb      	ldrh	r3, [r7, #20]
 800082a:	2b00      	cmp	r3, #0
 800082c:	d005      	beq.n	800083a <ILI9341_Draw_Hollow_Rectangle_Coord+0xfa>
	{
		ILI9341_Draw_Pixel(X1, Y1, Colour);
 800082e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000830:	8839      	ldrh	r1, [r7, #0]
 8000832:	887b      	ldrh	r3, [r7, #2]
 8000834:	4618      	mov	r0, r3
 8000836:	f000 fc1b 	bl	8001070 <ILI9341_Draw_Pixel>
	}
	
}
 800083a:	bf00      	nop
 800083c:	371c      	adds	r7, #28
 800083e:	46bd      	mov	sp, r7
 8000840:	bd90      	pop	{r4, r7, pc}

08000842 <ILI9341_Draw_Filled_Rectangle_Coord>:

/*Draw a filled rectangle between positions X0,Y0 and X1,Y1 with specified colour*/
void ILI9341_Draw_Filled_Rectangle_Coord(uint16_t X0, uint16_t Y0, uint16_t X1, uint16_t Y1, uint16_t Colour)
{
 8000842:	b590      	push	{r4, r7, lr}
 8000844:	b089      	sub	sp, #36	; 0x24
 8000846:	af02      	add	r7, sp, #8
 8000848:	4604      	mov	r4, r0
 800084a:	4608      	mov	r0, r1
 800084c:	4611      	mov	r1, r2
 800084e:	461a      	mov	r2, r3
 8000850:	4623      	mov	r3, r4
 8000852:	80fb      	strh	r3, [r7, #6]
 8000854:	4603      	mov	r3, r0
 8000856:	80bb      	strh	r3, [r7, #4]
 8000858:	460b      	mov	r3, r1
 800085a:	807b      	strh	r3, [r7, #2]
 800085c:	4613      	mov	r3, r2
 800085e:	803b      	strh	r3, [r7, #0]
	uint16_t 	X_length = 0;
 8000860:	2300      	movs	r3, #0
 8000862:	82fb      	strh	r3, [r7, #22]
	uint16_t 	Y_length = 0;
 8000864:	2300      	movs	r3, #0
 8000866:	82bb      	strh	r3, [r7, #20]
	uint8_t		Negative_X = 0;
 8000868:	2300      	movs	r3, #0
 800086a:	74fb      	strb	r3, [r7, #19]
	uint8_t 	Negative_Y = 0;
 800086c:	2300      	movs	r3, #0
 800086e:	74bb      	strb	r3, [r7, #18]
	int32_t 	Calc_Negative = 0;
 8000870:	2300      	movs	r3, #0
 8000872:	60bb      	str	r3, [r7, #8]
	
	uint16_t X0_true = 0;
 8000874:	2300      	movs	r3, #0
 8000876:	823b      	strh	r3, [r7, #16]
	uint16_t Y0_true = 0;
 8000878:	2300      	movs	r3, #0
 800087a:	81fb      	strh	r3, [r7, #14]
	
	Calc_Negative = X1 - X0;
 800087c:	887a      	ldrh	r2, [r7, #2]
 800087e:	88fb      	ldrh	r3, [r7, #6]
 8000880:	1ad3      	subs	r3, r2, r3
 8000882:	60bb      	str	r3, [r7, #8]
	if(Calc_Negative < 0) Negative_X = 1;
 8000884:	68bb      	ldr	r3, [r7, #8]
 8000886:	2b00      	cmp	r3, #0
 8000888:	da01      	bge.n	800088e <ILI9341_Draw_Filled_Rectangle_Coord+0x4c>
 800088a:	2301      	movs	r3, #1
 800088c:	74fb      	strb	r3, [r7, #19]
	Calc_Negative = 0;
 800088e:	2300      	movs	r3, #0
 8000890:	60bb      	str	r3, [r7, #8]
	
	Calc_Negative = Y1 - Y0;
 8000892:	883a      	ldrh	r2, [r7, #0]
 8000894:	88bb      	ldrh	r3, [r7, #4]
 8000896:	1ad3      	subs	r3, r2, r3
 8000898:	60bb      	str	r3, [r7, #8]
	if(Calc_Negative < 0) Negative_Y = 1;
 800089a:	68bb      	ldr	r3, [r7, #8]
 800089c:	2b00      	cmp	r3, #0
 800089e:	da01      	bge.n	80008a4 <ILI9341_Draw_Filled_Rectangle_Coord+0x62>
 80008a0:	2301      	movs	r3, #1
 80008a2:	74bb      	strb	r3, [r7, #18]
	
	
	//DRAW HORIZONTAL!
	if(!Negative_X)
 80008a4:	7cfb      	ldrb	r3, [r7, #19]
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d106      	bne.n	80008b8 <ILI9341_Draw_Filled_Rectangle_Coord+0x76>
	{
		X_length = X1 - X0;
 80008aa:	887a      	ldrh	r2, [r7, #2]
 80008ac:	88fb      	ldrh	r3, [r7, #6]
 80008ae:	1ad3      	subs	r3, r2, r3
 80008b0:	82fb      	strh	r3, [r7, #22]
		X0_true = X0;
 80008b2:	88fb      	ldrh	r3, [r7, #6]
 80008b4:	823b      	strh	r3, [r7, #16]
 80008b6:	e005      	b.n	80008c4 <ILI9341_Draw_Filled_Rectangle_Coord+0x82>
	}
	else
	{
		X_length = X0 - X1;
 80008b8:	88fa      	ldrh	r2, [r7, #6]
 80008ba:	887b      	ldrh	r3, [r7, #2]
 80008bc:	1ad3      	subs	r3, r2, r3
 80008be:	82fb      	strh	r3, [r7, #22]
		X0_true = X1;
 80008c0:	887b      	ldrh	r3, [r7, #2]
 80008c2:	823b      	strh	r3, [r7, #16]
	}
	
	//DRAW VERTICAL!
	if(!Negative_Y)
 80008c4:	7cbb      	ldrb	r3, [r7, #18]
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d106      	bne.n	80008d8 <ILI9341_Draw_Filled_Rectangle_Coord+0x96>
	{
		Y_length = Y1 - Y0;
 80008ca:	883a      	ldrh	r2, [r7, #0]
 80008cc:	88bb      	ldrh	r3, [r7, #4]
 80008ce:	1ad3      	subs	r3, r2, r3
 80008d0:	82bb      	strh	r3, [r7, #20]
		Y0_true = Y0;		
 80008d2:	88bb      	ldrh	r3, [r7, #4]
 80008d4:	81fb      	strh	r3, [r7, #14]
 80008d6:	e005      	b.n	80008e4 <ILI9341_Draw_Filled_Rectangle_Coord+0xa2>
	}
	else
	{
		Y_length = Y0 - Y1;
 80008d8:	88ba      	ldrh	r2, [r7, #4]
 80008da:	883b      	ldrh	r3, [r7, #0]
 80008dc:	1ad3      	subs	r3, r2, r3
 80008de:	82bb      	strh	r3, [r7, #20]
		Y0_true = Y1;	
 80008e0:	883b      	ldrh	r3, [r7, #0]
 80008e2:	81fb      	strh	r3, [r7, #14]
	}
	
	ILI9341_Draw_Rectangle(X0_true, Y0_true, X_length, Y_length, Colour);	
 80008e4:	8abc      	ldrh	r4, [r7, #20]
 80008e6:	8afa      	ldrh	r2, [r7, #22]
 80008e8:	89f9      	ldrh	r1, [r7, #14]
 80008ea:	8a38      	ldrh	r0, [r7, #16]
 80008ec:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80008ee:	9300      	str	r3, [sp, #0]
 80008f0:	4623      	mov	r3, r4
 80008f2:	f000 fc95 	bl	8001220 <ILI9341_Draw_Rectangle>
}
 80008f6:	bf00      	nop
 80008f8:	371c      	adds	r7, #28
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd90      	pop	{r4, r7, pc}
	...

08000900 <ILI9341_Draw_Char>:

/*Draws a character (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Char(char Character, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour) 
{
 8000900:	b590      	push	{r4, r7, lr}
 8000902:	b089      	sub	sp, #36	; 0x24
 8000904:	af02      	add	r7, sp, #8
 8000906:	4604      	mov	r4, r0
 8000908:	4608      	mov	r0, r1
 800090a:	4611      	mov	r1, r2
 800090c:	461a      	mov	r2, r3
 800090e:	4623      	mov	r3, r4
 8000910:	71fb      	strb	r3, [r7, #7]
 8000912:	4603      	mov	r3, r0
 8000914:	71bb      	strb	r3, [r7, #6]
 8000916:	460b      	mov	r3, r1
 8000918:	717b      	strb	r3, [r7, #5]
 800091a:	4613      	mov	r3, r2
 800091c:	807b      	strh	r3, [r7, #2]
		uint8_t 	function_char;
    uint8_t 	i,j;
		
		function_char = Character;
 800091e:	79fb      	ldrb	r3, [r7, #7]
 8000920:	75fb      	strb	r3, [r7, #23]
		
    if (function_char < ' ') {
 8000922:	7dfb      	ldrb	r3, [r7, #23]
 8000924:	2b1f      	cmp	r3, #31
 8000926:	d802      	bhi.n	800092e <ILI9341_Draw_Char+0x2e>
        Character = 0;
 8000928:	2300      	movs	r3, #0
 800092a:	71fb      	strb	r3, [r7, #7]
 800092c:	e002      	b.n	8000934 <ILI9341_Draw_Char+0x34>
    } else {
        function_char -= 32;
 800092e:	7dfb      	ldrb	r3, [r7, #23]
 8000930:	3b20      	subs	r3, #32
 8000932:	75fb      	strb	r3, [r7, #23]
		}
   	
		char temp[CHAR_WIDTH];
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 8000934:	2300      	movs	r3, #0
 8000936:	753b      	strb	r3, [r7, #20]
 8000938:	e012      	b.n	8000960 <ILI9341_Draw_Char+0x60>
		{
		temp[k] = font[function_char][k];
 800093a:	7dfa      	ldrb	r2, [r7, #23]
 800093c:	7d38      	ldrb	r0, [r7, #20]
 800093e:	7d39      	ldrb	r1, [r7, #20]
 8000940:	4c3c      	ldr	r4, [pc, #240]	; (8000a34 <ILI9341_Draw_Char+0x134>)
 8000942:	4613      	mov	r3, r2
 8000944:	005b      	lsls	r3, r3, #1
 8000946:	4413      	add	r3, r2
 8000948:	005b      	lsls	r3, r3, #1
 800094a:	4423      	add	r3, r4
 800094c:	4403      	add	r3, r0
 800094e:	781a      	ldrb	r2, [r3, #0]
 8000950:	f107 0318 	add.w	r3, r7, #24
 8000954:	440b      	add	r3, r1
 8000956:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 800095a:	7d3b      	ldrb	r3, [r7, #20]
 800095c:	3301      	adds	r3, #1
 800095e:	753b      	strb	r3, [r7, #20]
 8000960:	7d3b      	ldrb	r3, [r7, #20]
 8000962:	2b05      	cmp	r3, #5
 8000964:	d9e9      	bls.n	800093a <ILI9341_Draw_Char+0x3a>
		}
		
    // Draw pixels
		ILI9341_Draw_Rectangle(X, Y, CHAR_WIDTH*Size, CHAR_HEIGHT*Size, Background_Colour);
 8000966:	79bb      	ldrb	r3, [r7, #6]
 8000968:	b298      	uxth	r0, r3
 800096a:	797b      	ldrb	r3, [r7, #5]
 800096c:	b299      	uxth	r1, r3
 800096e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000970:	461a      	mov	r2, r3
 8000972:	0052      	lsls	r2, r2, #1
 8000974:	4413      	add	r3, r2
 8000976:	005b      	lsls	r3, r3, #1
 8000978:	b29a      	uxth	r2, r3
 800097a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800097c:	00db      	lsls	r3, r3, #3
 800097e:	b29c      	uxth	r4, r3
 8000980:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000982:	9300      	str	r3, [sp, #0]
 8000984:	4623      	mov	r3, r4
 8000986:	f000 fc4b 	bl	8001220 <ILI9341_Draw_Rectangle>
    for (j=0; j<CHAR_WIDTH; j++) {
 800098a:	2300      	movs	r3, #0
 800098c:	757b      	strb	r3, [r7, #21]
 800098e:	e048      	b.n	8000a22 <ILI9341_Draw_Char+0x122>
        for (i=0; i<CHAR_HEIGHT; i++) {
 8000990:	2300      	movs	r3, #0
 8000992:	75bb      	strb	r3, [r7, #22]
 8000994:	e03f      	b.n	8000a16 <ILI9341_Draw_Char+0x116>
            if (temp[j] & (1<<i)) {			
 8000996:	7d7b      	ldrb	r3, [r7, #21]
 8000998:	f107 0218 	add.w	r2, r7, #24
 800099c:	4413      	add	r3, r2
 800099e:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80009a2:	461a      	mov	r2, r3
 80009a4:	7dbb      	ldrb	r3, [r7, #22]
 80009a6:	fa42 f303 	asr.w	r3, r2, r3
 80009aa:	f003 0301 	and.w	r3, r3, #1
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d02e      	beq.n	8000a10 <ILI9341_Draw_Char+0x110>
							if(Size == 1)
 80009b2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80009b4:	2b01      	cmp	r3, #1
 80009b6:	d110      	bne.n	80009da <ILI9341_Draw_Char+0xda>
							{
              ILI9341_Draw_Pixel(X+j, Y+i, Colour);
 80009b8:	79bb      	ldrb	r3, [r7, #6]
 80009ba:	b29a      	uxth	r2, r3
 80009bc:	7d7b      	ldrb	r3, [r7, #21]
 80009be:	b29b      	uxth	r3, r3
 80009c0:	4413      	add	r3, r2
 80009c2:	b298      	uxth	r0, r3
 80009c4:	797b      	ldrb	r3, [r7, #5]
 80009c6:	b29a      	uxth	r2, r3
 80009c8:	7dbb      	ldrb	r3, [r7, #22]
 80009ca:	b29b      	uxth	r3, r3
 80009cc:	4413      	add	r3, r2
 80009ce:	b29b      	uxth	r3, r3
 80009d0:	887a      	ldrh	r2, [r7, #2]
 80009d2:	4619      	mov	r1, r3
 80009d4:	f000 fb4c 	bl	8001070 <ILI9341_Draw_Pixel>
 80009d8:	e01a      	b.n	8000a10 <ILI9341_Draw_Char+0x110>
							}
							else
							{
							ILI9341_Draw_Rectangle(X+(j*Size), Y+(i*Size), Size, Size, Colour);
 80009da:	79bb      	ldrb	r3, [r7, #6]
 80009dc:	b29a      	uxth	r2, r3
 80009de:	7d7b      	ldrb	r3, [r7, #21]
 80009e0:	b29b      	uxth	r3, r3
 80009e2:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 80009e4:	fb11 f303 	smulbb	r3, r1, r3
 80009e8:	b29b      	uxth	r3, r3
 80009ea:	4413      	add	r3, r2
 80009ec:	b298      	uxth	r0, r3
 80009ee:	797b      	ldrb	r3, [r7, #5]
 80009f0:	b29a      	uxth	r2, r3
 80009f2:	7dbb      	ldrb	r3, [r7, #22]
 80009f4:	b29b      	uxth	r3, r3
 80009f6:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 80009f8:	fb11 f303 	smulbb	r3, r1, r3
 80009fc:	b29b      	uxth	r3, r3
 80009fe:	4413      	add	r3, r2
 8000a00:	b299      	uxth	r1, r3
 8000a02:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 8000a04:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000a06:	887b      	ldrh	r3, [r7, #2]
 8000a08:	9300      	str	r3, [sp, #0]
 8000a0a:	4623      	mov	r3, r4
 8000a0c:	f000 fc08 	bl	8001220 <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++) {
 8000a10:	7dbb      	ldrb	r3, [r7, #22]
 8000a12:	3301      	adds	r3, #1
 8000a14:	75bb      	strb	r3, [r7, #22]
 8000a16:	7dbb      	ldrb	r3, [r7, #22]
 8000a18:	2b07      	cmp	r3, #7
 8000a1a:	d9bc      	bls.n	8000996 <ILI9341_Draw_Char+0x96>
    for (j=0; j<CHAR_WIDTH; j++) {
 8000a1c:	7d7b      	ldrb	r3, [r7, #21]
 8000a1e:	3301      	adds	r3, #1
 8000a20:	757b      	strb	r3, [r7, #21]
 8000a22:	7d7b      	ldrb	r3, [r7, #21]
 8000a24:	2b05      	cmp	r3, #5
 8000a26:	d9b3      	bls.n	8000990 <ILI9341_Draw_Char+0x90>
							}
            }						
        }
    }
}
 8000a28:	bf00      	nop
 8000a2a:	bf00      	nop
 8000a2c:	371c      	adds	r7, #28
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd90      	pop	{r4, r7, pc}
 8000a32:	bf00      	nop
 8000a34:	08004a4c 	.word	0x08004a4c

08000a38 <ILI9341_Draw_Text>:

/*Draws an array of characters (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Text(const char* Text, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour)
{
 8000a38:	b590      	push	{r4, r7, lr}
 8000a3a:	b085      	sub	sp, #20
 8000a3c:	af02      	add	r7, sp, #8
 8000a3e:	6078      	str	r0, [r7, #4]
 8000a40:	4608      	mov	r0, r1
 8000a42:	4611      	mov	r1, r2
 8000a44:	461a      	mov	r2, r3
 8000a46:	4603      	mov	r3, r0
 8000a48:	70fb      	strb	r3, [r7, #3]
 8000a4a:	460b      	mov	r3, r1
 8000a4c:	70bb      	strb	r3, [r7, #2]
 8000a4e:	4613      	mov	r3, r2
 8000a50:	803b      	strh	r3, [r7, #0]
    while (*Text) {
 8000a52:	e017      	b.n	8000a84 <ILI9341_Draw_Text+0x4c>
        ILI9341_Draw_Char(*Text++, X, Y, Colour, Size, Background_Colour);
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	1c5a      	adds	r2, r3, #1
 8000a58:	607a      	str	r2, [r7, #4]
 8000a5a:	7818      	ldrb	r0, [r3, #0]
 8000a5c:	883c      	ldrh	r4, [r7, #0]
 8000a5e:	78ba      	ldrb	r2, [r7, #2]
 8000a60:	78f9      	ldrb	r1, [r7, #3]
 8000a62:	8bbb      	ldrh	r3, [r7, #28]
 8000a64:	9301      	str	r3, [sp, #4]
 8000a66:	8b3b      	ldrh	r3, [r7, #24]
 8000a68:	9300      	str	r3, [sp, #0]
 8000a6a:	4623      	mov	r3, r4
 8000a6c:	f7ff ff48 	bl	8000900 <ILI9341_Draw_Char>
        X += CHAR_WIDTH*Size;
 8000a70:	8b3b      	ldrh	r3, [r7, #24]
 8000a72:	b2db      	uxtb	r3, r3
 8000a74:	461a      	mov	r2, r3
 8000a76:	0052      	lsls	r2, r2, #1
 8000a78:	4413      	add	r3, r2
 8000a7a:	005b      	lsls	r3, r3, #1
 8000a7c:	b2da      	uxtb	r2, r3
 8000a7e:	78fb      	ldrb	r3, [r7, #3]
 8000a80:	4413      	add	r3, r2
 8000a82:	70fb      	strb	r3, [r7, #3]
    while (*Text) {
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d1e3      	bne.n	8000a54 <ILI9341_Draw_Text+0x1c>
    }
}
 8000a8c:	bf00      	nop
 8000a8e:	bf00      	nop
 8000a90:	370c      	adds	r7, #12
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd90      	pop	{r4, r7, pc}

08000a96 <ILI9341_SPI_Init>:
volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

/* Initialize SPI */
void ILI9341_SPI_Init(void)
{																						//GPIO INIT
 8000a96:	b580      	push	{r7, lr}
 8000a98:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//CS OFF
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	2104      	movs	r1, #4
 8000a9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aa2:	f001 fc07 	bl	80022b4 <HAL_GPIO_WritePin>
}
 8000aa6:	bf00      	nop
 8000aa8:	bd80      	pop	{r7, pc}
	...

08000aac <ILI9341_SPI_Send>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	71fb      	strb	r3, [r7, #7]
HAL_SPI_Transmit(HSPI_INSTANCE, &SPI_Data, 1, 1);
 8000ab6:	1df9      	adds	r1, r7, #7
 8000ab8:	2301      	movs	r3, #1
 8000aba:	2201      	movs	r2, #1
 8000abc:	4803      	ldr	r0, [pc, #12]	; (8000acc <ILI9341_SPI_Send+0x20>)
 8000abe:	f002 fe30 	bl	8003722 <HAL_SPI_Transmit>
}
 8000ac2:	bf00      	nop
 8000ac4:	3708      	adds	r7, #8
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	20000150 	.word	0x20000150

08000ad0 <ILI9341_Write_Command>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000ada:	2200      	movs	r2, #0
 8000adc:	2104      	movs	r1, #4
 8000ade:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ae2:	f001 fbe7 	bl	80022b4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	2108      	movs	r1, #8
 8000aea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aee:	f001 fbe1 	bl	80022b4 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Command);
 8000af2:	79fb      	ldrb	r3, [r7, #7]
 8000af4:	4618      	mov	r0, r3
 8000af6:	f7ff ffd9 	bl	8000aac <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 8000afa:	2201      	movs	r2, #1
 8000afc:	2104      	movs	r1, #4
 8000afe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b02:	f001 fbd7 	bl	80022b4 <HAL_GPIO_WritePin>
}
 8000b06:	bf00      	nop
 8000b08:	3708      	adds	r7, #8
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}

08000b0e <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 8000b0e:	b580      	push	{r7, lr}
 8000b10:	b082      	sub	sp, #8
 8000b12:	af00      	add	r7, sp, #0
 8000b14:	4603      	mov	r3, r0
 8000b16:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8000b18:	2201      	movs	r2, #1
 8000b1a:	2108      	movs	r1, #8
 8000b1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b20:	f001 fbc8 	bl	80022b4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000b24:	2200      	movs	r2, #0
 8000b26:	2104      	movs	r1, #4
 8000b28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b2c:	f001 fbc2 	bl	80022b4 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Data);	
 8000b30:	79fb      	ldrb	r3, [r7, #7]
 8000b32:	4618      	mov	r0, r3
 8000b34:	f7ff ffba 	bl	8000aac <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000b38:	2201      	movs	r2, #1
 8000b3a:	2104      	movs	r1, #4
 8000b3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b40:	f001 fbb8 	bl	80022b4 <HAL_GPIO_WritePin>
}
 8000b44:	bf00      	nop
 8000b46:	3708      	adds	r7, #8
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}

08000b4c <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 8000b4c:	b590      	push	{r4, r7, lr}
 8000b4e:	b083      	sub	sp, #12
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	4604      	mov	r4, r0
 8000b54:	4608      	mov	r0, r1
 8000b56:	4611      	mov	r1, r2
 8000b58:	461a      	mov	r2, r3
 8000b5a:	4623      	mov	r3, r4
 8000b5c:	80fb      	strh	r3, [r7, #6]
 8000b5e:	4603      	mov	r3, r0
 8000b60:	80bb      	strh	r3, [r7, #4]
 8000b62:	460b      	mov	r3, r1
 8000b64:	807b      	strh	r3, [r7, #2]
 8000b66:	4613      	mov	r3, r2
 8000b68:	803b      	strh	r3, [r7, #0]
ILI9341_Write_Command(0x2A);
 8000b6a:	202a      	movs	r0, #42	; 0x2a
 8000b6c:	f7ff ffb0 	bl	8000ad0 <ILI9341_Write_Command>
ILI9341_Write_Data(X1>>8);
 8000b70:	88fb      	ldrh	r3, [r7, #6]
 8000b72:	0a1b      	lsrs	r3, r3, #8
 8000b74:	b29b      	uxth	r3, r3
 8000b76:	b2db      	uxtb	r3, r3
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f7ff ffc8 	bl	8000b0e <ILI9341_Write_Data>
ILI9341_Write_Data(X1);
 8000b7e:	88fb      	ldrh	r3, [r7, #6]
 8000b80:	b2db      	uxtb	r3, r3
 8000b82:	4618      	mov	r0, r3
 8000b84:	f7ff ffc3 	bl	8000b0e <ILI9341_Write_Data>
ILI9341_Write_Data(X2>>8);
 8000b88:	887b      	ldrh	r3, [r7, #2]
 8000b8a:	0a1b      	lsrs	r3, r3, #8
 8000b8c:	b29b      	uxth	r3, r3
 8000b8e:	b2db      	uxtb	r3, r3
 8000b90:	4618      	mov	r0, r3
 8000b92:	f7ff ffbc 	bl	8000b0e <ILI9341_Write_Data>
ILI9341_Write_Data(X2);
 8000b96:	887b      	ldrh	r3, [r7, #2]
 8000b98:	b2db      	uxtb	r3, r3
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f7ff ffb7 	bl	8000b0e <ILI9341_Write_Data>

ILI9341_Write_Command(0x2B);
 8000ba0:	202b      	movs	r0, #43	; 0x2b
 8000ba2:	f7ff ff95 	bl	8000ad0 <ILI9341_Write_Command>
ILI9341_Write_Data(Y1>>8);
 8000ba6:	88bb      	ldrh	r3, [r7, #4]
 8000ba8:	0a1b      	lsrs	r3, r3, #8
 8000baa:	b29b      	uxth	r3, r3
 8000bac:	b2db      	uxtb	r3, r3
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f7ff ffad 	bl	8000b0e <ILI9341_Write_Data>
ILI9341_Write_Data(Y1);
 8000bb4:	88bb      	ldrh	r3, [r7, #4]
 8000bb6:	b2db      	uxtb	r3, r3
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f7ff ffa8 	bl	8000b0e <ILI9341_Write_Data>
ILI9341_Write_Data(Y2>>8);
 8000bbe:	883b      	ldrh	r3, [r7, #0]
 8000bc0:	0a1b      	lsrs	r3, r3, #8
 8000bc2:	b29b      	uxth	r3, r3
 8000bc4:	b2db      	uxtb	r3, r3
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f7ff ffa1 	bl	8000b0e <ILI9341_Write_Data>
ILI9341_Write_Data(Y2);
 8000bcc:	883b      	ldrh	r3, [r7, #0]
 8000bce:	b2db      	uxtb	r3, r3
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f7ff ff9c 	bl	8000b0e <ILI9341_Write_Data>

ILI9341_Write_Command(0x2C);
 8000bd6:	202c      	movs	r0, #44	; 0x2c
 8000bd8:	f7ff ff7a 	bl	8000ad0 <ILI9341_Write_Command>
}
 8000bdc:	bf00      	nop
 8000bde:	370c      	adds	r7, #12
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd90      	pop	{r4, r7, pc}

08000be4 <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);
 8000be8:	2200      	movs	r2, #0
 8000bea:	2101      	movs	r1, #1
 8000bec:	480a      	ldr	r0, [pc, #40]	; (8000c18 <ILI9341_Reset+0x34>)
 8000bee:	f001 fb61 	bl	80022b4 <HAL_GPIO_WritePin>
HAL_Delay(200);
 8000bf2:	20c8      	movs	r0, #200	; 0xc8
 8000bf4:	f001 f838 	bl	8001c68 <HAL_Delay>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	2104      	movs	r1, #4
 8000bfc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c00:	f001 fb58 	bl	80022b4 <HAL_GPIO_WritePin>
HAL_Delay(200);
 8000c04:	20c8      	movs	r0, #200	; 0xc8
 8000c06:	f001 f82f 	bl	8001c68 <HAL_Delay>
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);	
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	2101      	movs	r1, #1
 8000c0e:	4802      	ldr	r0, [pc, #8]	; (8000c18 <ILI9341_Reset+0x34>)
 8000c10:	f001 fb50 	bl	80022b4 <HAL_GPIO_WritePin>
}
 8000c14:	bf00      	nop
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	48000400 	.word	0x48000400

08000c1c <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation) 
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b084      	sub	sp, #16
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	4603      	mov	r3, r0
 8000c24:	71fb      	strb	r3, [r7, #7]
	
uint8_t screen_rotation = Rotation;
 8000c26:	79fb      	ldrb	r3, [r7, #7]
 8000c28:	73fb      	strb	r3, [r7, #15]

ILI9341_Write_Command(0x36);
 8000c2a:	2036      	movs	r0, #54	; 0x36
 8000c2c:	f7ff ff50 	bl	8000ad0 <ILI9341_Write_Command>
HAL_Delay(1);
 8000c30:	2001      	movs	r0, #1
 8000c32:	f001 f819 	bl	8001c68 <HAL_Delay>
	
switch(screen_rotation) 
 8000c36:	7bfb      	ldrb	r3, [r7, #15]
 8000c38:	2b03      	cmp	r3, #3
 8000c3a:	d837      	bhi.n	8000cac <ILI9341_Set_Rotation+0x90>
 8000c3c:	a201      	add	r2, pc, #4	; (adr r2, 8000c44 <ILI9341_Set_Rotation+0x28>)
 8000c3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c42:	bf00      	nop
 8000c44:	08000c55 	.word	0x08000c55
 8000c48:	08000c6b 	.word	0x08000c6b
 8000c4c:	08000c81 	.word	0x08000c81
 8000c50:	08000c97 	.word	0x08000c97
	{
		case SCREEN_VERTICAL_1:
			ILI9341_Write_Data(0x40|0x08);
 8000c54:	2048      	movs	r0, #72	; 0x48
 8000c56:	f7ff ff5a 	bl	8000b0e <ILI9341_Write_Data>
			LCD_WIDTH = 240;
 8000c5a:	4b17      	ldr	r3, [pc, #92]	; (8000cb8 <ILI9341_Set_Rotation+0x9c>)
 8000c5c:	22f0      	movs	r2, #240	; 0xf0
 8000c5e:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8000c60:	4b16      	ldr	r3, [pc, #88]	; (8000cbc <ILI9341_Set_Rotation+0xa0>)
 8000c62:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000c66:	801a      	strh	r2, [r3, #0]
			break;
 8000c68:	e021      	b.n	8000cae <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_1:
			ILI9341_Write_Data(0x20|0x08);
 8000c6a:	2028      	movs	r0, #40	; 0x28
 8000c6c:	f7ff ff4f 	bl	8000b0e <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8000c70:	4b11      	ldr	r3, [pc, #68]	; (8000cb8 <ILI9341_Set_Rotation+0x9c>)
 8000c72:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000c76:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8000c78:	4b10      	ldr	r3, [pc, #64]	; (8000cbc <ILI9341_Set_Rotation+0xa0>)
 8000c7a:	22f0      	movs	r2, #240	; 0xf0
 8000c7c:	801a      	strh	r2, [r3, #0]
			break;
 8000c7e:	e016      	b.n	8000cae <ILI9341_Set_Rotation+0x92>
		case SCREEN_VERTICAL_2:
			ILI9341_Write_Data(0x80|0x08);
 8000c80:	2088      	movs	r0, #136	; 0x88
 8000c82:	f7ff ff44 	bl	8000b0e <ILI9341_Write_Data>
			LCD_WIDTH  = 240;
 8000c86:	4b0c      	ldr	r3, [pc, #48]	; (8000cb8 <ILI9341_Set_Rotation+0x9c>)
 8000c88:	22f0      	movs	r2, #240	; 0xf0
 8000c8a:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8000c8c:	4b0b      	ldr	r3, [pc, #44]	; (8000cbc <ILI9341_Set_Rotation+0xa0>)
 8000c8e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000c92:	801a      	strh	r2, [r3, #0]
			break;
 8000c94:	e00b      	b.n	8000cae <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_2:
			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 8000c96:	20e8      	movs	r0, #232	; 0xe8
 8000c98:	f7ff ff39 	bl	8000b0e <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8000c9c:	4b06      	ldr	r3, [pc, #24]	; (8000cb8 <ILI9341_Set_Rotation+0x9c>)
 8000c9e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000ca2:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8000ca4:	4b05      	ldr	r3, [pc, #20]	; (8000cbc <ILI9341_Set_Rotation+0xa0>)
 8000ca6:	22f0      	movs	r2, #240	; 0xf0
 8000ca8:	801a      	strh	r2, [r3, #0]
			break;
 8000caa:	e000      	b.n	8000cae <ILI9341_Set_Rotation+0x92>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 8000cac:	bf00      	nop
	}
}
 8000cae:	bf00      	nop
 8000cb0:	3710      	adds	r7, #16
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	20000002 	.word	0x20000002
 8000cbc:	20000000 	.word	0x20000000

08000cc0 <ILI9341_Enable>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	2101      	movs	r1, #1
 8000cc8:	4802      	ldr	r0, [pc, #8]	; (8000cd4 <ILI9341_Enable+0x14>)
 8000cca:	f001 faf3 	bl	80022b4 <HAL_GPIO_WritePin>
}
 8000cce:	bf00      	nop
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	48000400 	.word	0x48000400

08000cd8 <ILI9341_Init>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0

ILI9341_Enable();
 8000cdc:	f7ff fff0 	bl	8000cc0 <ILI9341_Enable>
ILI9341_SPI_Init();
 8000ce0:	f7ff fed9 	bl	8000a96 <ILI9341_SPI_Init>
ILI9341_Reset();
 8000ce4:	f7ff ff7e 	bl	8000be4 <ILI9341_Reset>

//SOFTWARE RESET
ILI9341_Write_Command(0x01);
 8000ce8:	2001      	movs	r0, #1
 8000cea:	f7ff fef1 	bl	8000ad0 <ILI9341_Write_Command>
HAL_Delay(1000);
 8000cee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cf2:	f000 ffb9 	bl	8001c68 <HAL_Delay>
	
//POWER CONTROL A
ILI9341_Write_Command(0xCB);
 8000cf6:	20cb      	movs	r0, #203	; 0xcb
 8000cf8:	f7ff feea 	bl	8000ad0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x39);
 8000cfc:	2039      	movs	r0, #57	; 0x39
 8000cfe:	f7ff ff06 	bl	8000b0e <ILI9341_Write_Data>
ILI9341_Write_Data(0x2C);
 8000d02:	202c      	movs	r0, #44	; 0x2c
 8000d04:	f7ff ff03 	bl	8000b0e <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8000d08:	2000      	movs	r0, #0
 8000d0a:	f7ff ff00 	bl	8000b0e <ILI9341_Write_Data>
ILI9341_Write_Data(0x34);
 8000d0e:	2034      	movs	r0, #52	; 0x34
 8000d10:	f7ff fefd 	bl	8000b0e <ILI9341_Write_Data>
ILI9341_Write_Data(0x02);
 8000d14:	2002      	movs	r0, #2
 8000d16:	f7ff fefa 	bl	8000b0e <ILI9341_Write_Data>

//POWER CONTROL B
ILI9341_Write_Command(0xCF);
 8000d1a:	20cf      	movs	r0, #207	; 0xcf
 8000d1c:	f7ff fed8 	bl	8000ad0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8000d20:	2000      	movs	r0, #0
 8000d22:	f7ff fef4 	bl	8000b0e <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 8000d26:	20c1      	movs	r0, #193	; 0xc1
 8000d28:	f7ff fef1 	bl	8000b0e <ILI9341_Write_Data>
ILI9341_Write_Data(0x30);
 8000d2c:	2030      	movs	r0, #48	; 0x30
 8000d2e:	f7ff feee 	bl	8000b0e <ILI9341_Write_Data>

//DRIVER TIMING CONTROL A
ILI9341_Write_Command(0xE8);
 8000d32:	20e8      	movs	r0, #232	; 0xe8
 8000d34:	f7ff fecc 	bl	8000ad0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x85);
 8000d38:	2085      	movs	r0, #133	; 0x85
 8000d3a:	f7ff fee8 	bl	8000b0e <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8000d3e:	2000      	movs	r0, #0
 8000d40:	f7ff fee5 	bl	8000b0e <ILI9341_Write_Data>
ILI9341_Write_Data(0x78);
 8000d44:	2078      	movs	r0, #120	; 0x78
 8000d46:	f7ff fee2 	bl	8000b0e <ILI9341_Write_Data>

//DRIVER TIMING CONTROL B
ILI9341_Write_Command(0xEA);
 8000d4a:	20ea      	movs	r0, #234	; 0xea
 8000d4c:	f7ff fec0 	bl	8000ad0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8000d50:	2000      	movs	r0, #0
 8000d52:	f7ff fedc 	bl	8000b0e <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8000d56:	2000      	movs	r0, #0
 8000d58:	f7ff fed9 	bl	8000b0e <ILI9341_Write_Data>

//POWER ON SEQUENCE CONTROL
ILI9341_Write_Command(0xED);
 8000d5c:	20ed      	movs	r0, #237	; 0xed
 8000d5e:	f7ff feb7 	bl	8000ad0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x64);
 8000d62:	2064      	movs	r0, #100	; 0x64
 8000d64:	f7ff fed3 	bl	8000b0e <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8000d68:	2003      	movs	r0, #3
 8000d6a:	f7ff fed0 	bl	8000b0e <ILI9341_Write_Data>
ILI9341_Write_Data(0x12);
 8000d6e:	2012      	movs	r0, #18
 8000d70:	f7ff fecd 	bl	8000b0e <ILI9341_Write_Data>
ILI9341_Write_Data(0x81);
 8000d74:	2081      	movs	r0, #129	; 0x81
 8000d76:	f7ff feca 	bl	8000b0e <ILI9341_Write_Data>

//PUMP RATIO CONTROL
ILI9341_Write_Command(0xF7);
 8000d7a:	20f7      	movs	r0, #247	; 0xf7
 8000d7c:	f7ff fea8 	bl	8000ad0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x20);
 8000d80:	2020      	movs	r0, #32
 8000d82:	f7ff fec4 	bl	8000b0e <ILI9341_Write_Data>

//POWER CONTROL,VRH[5:0]
ILI9341_Write_Command(0xC0);
 8000d86:	20c0      	movs	r0, #192	; 0xc0
 8000d88:	f7ff fea2 	bl	8000ad0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x23);
 8000d8c:	2023      	movs	r0, #35	; 0x23
 8000d8e:	f7ff febe 	bl	8000b0e <ILI9341_Write_Data>

//POWER CONTROL,SAP[2:0];BT[3:0]
ILI9341_Write_Command(0xC1);
 8000d92:	20c1      	movs	r0, #193	; 0xc1
 8000d94:	f7ff fe9c 	bl	8000ad0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x10);
 8000d98:	2010      	movs	r0, #16
 8000d9a:	f7ff feb8 	bl	8000b0e <ILI9341_Write_Data>

//VCM CONTROL
ILI9341_Write_Command(0xC5);
 8000d9e:	20c5      	movs	r0, #197	; 0xc5
 8000da0:	f7ff fe96 	bl	8000ad0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x3E);
 8000da4:	203e      	movs	r0, #62	; 0x3e
 8000da6:	f7ff feb2 	bl	8000b0e <ILI9341_Write_Data>
ILI9341_Write_Data(0x28);
 8000daa:	2028      	movs	r0, #40	; 0x28
 8000dac:	f7ff feaf 	bl	8000b0e <ILI9341_Write_Data>

//VCM CONTROL 2
ILI9341_Write_Command(0xC7);
 8000db0:	20c7      	movs	r0, #199	; 0xc7
 8000db2:	f7ff fe8d 	bl	8000ad0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x86);
 8000db6:	2086      	movs	r0, #134	; 0x86
 8000db8:	f7ff fea9 	bl	8000b0e <ILI9341_Write_Data>

//MEMORY ACCESS CONTROL
ILI9341_Write_Command(0x36);
 8000dbc:	2036      	movs	r0, #54	; 0x36
 8000dbe:	f7ff fe87 	bl	8000ad0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x48);
 8000dc2:	2048      	movs	r0, #72	; 0x48
 8000dc4:	f7ff fea3 	bl	8000b0e <ILI9341_Write_Data>

//PIXEL FORMAT
ILI9341_Write_Command(0x3A);
 8000dc8:	203a      	movs	r0, #58	; 0x3a
 8000dca:	f7ff fe81 	bl	8000ad0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x55);
 8000dce:	2055      	movs	r0, #85	; 0x55
 8000dd0:	f7ff fe9d 	bl	8000b0e <ILI9341_Write_Data>

//FRAME RATIO CONTROL, STANDARD RGB COLOR
ILI9341_Write_Command(0xB1);
 8000dd4:	20b1      	movs	r0, #177	; 0xb1
 8000dd6:	f7ff fe7b 	bl	8000ad0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8000dda:	2000      	movs	r0, #0
 8000ddc:	f7ff fe97 	bl	8000b0e <ILI9341_Write_Data>
ILI9341_Write_Data(0x18);
 8000de0:	2018      	movs	r0, #24
 8000de2:	f7ff fe94 	bl	8000b0e <ILI9341_Write_Data>

//DISPLAY FUNCTION CONTROL
ILI9341_Write_Command(0xB6);
 8000de6:	20b6      	movs	r0, #182	; 0xb6
 8000de8:	f7ff fe72 	bl	8000ad0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x08);
 8000dec:	2008      	movs	r0, #8
 8000dee:	f7ff fe8e 	bl	8000b0e <ILI9341_Write_Data>
ILI9341_Write_Data(0x82);
 8000df2:	2082      	movs	r0, #130	; 0x82
 8000df4:	f7ff fe8b 	bl	8000b0e <ILI9341_Write_Data>
ILI9341_Write_Data(0x27);
 8000df8:	2027      	movs	r0, #39	; 0x27
 8000dfa:	f7ff fe88 	bl	8000b0e <ILI9341_Write_Data>

//3GAMMA FUNCTION DISABLE
ILI9341_Write_Command(0xF2);
 8000dfe:	20f2      	movs	r0, #242	; 0xf2
 8000e00:	f7ff fe66 	bl	8000ad0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8000e04:	2000      	movs	r0, #0
 8000e06:	f7ff fe82 	bl	8000b0e <ILI9341_Write_Data>

//GAMMA CURVE SELECTED
ILI9341_Write_Command(0x26);
 8000e0a:	2026      	movs	r0, #38	; 0x26
 8000e0c:	f7ff fe60 	bl	8000ad0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x01);
 8000e10:	2001      	movs	r0, #1
 8000e12:	f7ff fe7c 	bl	8000b0e <ILI9341_Write_Data>

//POSITIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE0);
 8000e16:	20e0      	movs	r0, #224	; 0xe0
 8000e18:	f7ff fe5a 	bl	8000ad0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x0F);
 8000e1c:	200f      	movs	r0, #15
 8000e1e:	f7ff fe76 	bl	8000b0e <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8000e22:	2031      	movs	r0, #49	; 0x31
 8000e24:	f7ff fe73 	bl	8000b0e <ILI9341_Write_Data>
ILI9341_Write_Data(0x2B);
 8000e28:	202b      	movs	r0, #43	; 0x2b
 8000e2a:	f7ff fe70 	bl	8000b0e <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 8000e2e:	200c      	movs	r0, #12
 8000e30:	f7ff fe6d 	bl	8000b0e <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8000e34:	200e      	movs	r0, #14
 8000e36:	f7ff fe6a 	bl	8000b0e <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 8000e3a:	2008      	movs	r0, #8
 8000e3c:	f7ff fe67 	bl	8000b0e <ILI9341_Write_Data>
ILI9341_Write_Data(0x4E);
 8000e40:	204e      	movs	r0, #78	; 0x4e
 8000e42:	f7ff fe64 	bl	8000b0e <ILI9341_Write_Data>
ILI9341_Write_Data(0xF1);
 8000e46:	20f1      	movs	r0, #241	; 0xf1
 8000e48:	f7ff fe61 	bl	8000b0e <ILI9341_Write_Data>
ILI9341_Write_Data(0x37);
 8000e4c:	2037      	movs	r0, #55	; 0x37
 8000e4e:	f7ff fe5e 	bl	8000b0e <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8000e52:	2007      	movs	r0, #7
 8000e54:	f7ff fe5b 	bl	8000b0e <ILI9341_Write_Data>
ILI9341_Write_Data(0x10);
 8000e58:	2010      	movs	r0, #16
 8000e5a:	f7ff fe58 	bl	8000b0e <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8000e5e:	2003      	movs	r0, #3
 8000e60:	f7ff fe55 	bl	8000b0e <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8000e64:	200e      	movs	r0, #14
 8000e66:	f7ff fe52 	bl	8000b0e <ILI9341_Write_Data>
ILI9341_Write_Data(0x09);
 8000e6a:	2009      	movs	r0, #9
 8000e6c:	f7ff fe4f 	bl	8000b0e <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8000e70:	2000      	movs	r0, #0
 8000e72:	f7ff fe4c 	bl	8000b0e <ILI9341_Write_Data>

//NEGATIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE1);
 8000e76:	20e1      	movs	r0, #225	; 0xe1
 8000e78:	f7ff fe2a 	bl	8000ad0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8000e7c:	2000      	movs	r0, #0
 8000e7e:	f7ff fe46 	bl	8000b0e <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8000e82:	200e      	movs	r0, #14
 8000e84:	f7ff fe43 	bl	8000b0e <ILI9341_Write_Data>
ILI9341_Write_Data(0x14);
 8000e88:	2014      	movs	r0, #20
 8000e8a:	f7ff fe40 	bl	8000b0e <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8000e8e:	2003      	movs	r0, #3
 8000e90:	f7ff fe3d 	bl	8000b0e <ILI9341_Write_Data>
ILI9341_Write_Data(0x11);
 8000e94:	2011      	movs	r0, #17
 8000e96:	f7ff fe3a 	bl	8000b0e <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8000e9a:	2007      	movs	r0, #7
 8000e9c:	f7ff fe37 	bl	8000b0e <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8000ea0:	2031      	movs	r0, #49	; 0x31
 8000ea2:	f7ff fe34 	bl	8000b0e <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 8000ea6:	20c1      	movs	r0, #193	; 0xc1
 8000ea8:	f7ff fe31 	bl	8000b0e <ILI9341_Write_Data>
ILI9341_Write_Data(0x48);
 8000eac:	2048      	movs	r0, #72	; 0x48
 8000eae:	f7ff fe2e 	bl	8000b0e <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 8000eb2:	2008      	movs	r0, #8
 8000eb4:	f7ff fe2b 	bl	8000b0e <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8000eb8:	200f      	movs	r0, #15
 8000eba:	f7ff fe28 	bl	8000b0e <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 8000ebe:	200c      	movs	r0, #12
 8000ec0:	f7ff fe25 	bl	8000b0e <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8000ec4:	2031      	movs	r0, #49	; 0x31
 8000ec6:	f7ff fe22 	bl	8000b0e <ILI9341_Write_Data>
ILI9341_Write_Data(0x36);
 8000eca:	2036      	movs	r0, #54	; 0x36
 8000ecc:	f7ff fe1f 	bl	8000b0e <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8000ed0:	200f      	movs	r0, #15
 8000ed2:	f7ff fe1c 	bl	8000b0e <ILI9341_Write_Data>

//EXIT SLEEP
ILI9341_Write_Command(0x11);
 8000ed6:	2011      	movs	r0, #17
 8000ed8:	f7ff fdfa 	bl	8000ad0 <ILI9341_Write_Command>
HAL_Delay(120);
 8000edc:	2078      	movs	r0, #120	; 0x78
 8000ede:	f000 fec3 	bl	8001c68 <HAL_Delay>

//TURN ON DISPLAY
ILI9341_Write_Command(0x29);
 8000ee2:	2029      	movs	r0, #41	; 0x29
 8000ee4:	f7ff fdf4 	bl	8000ad0 <ILI9341_Write_Command>

//STARTING ROTATION
ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 8000ee8:	2000      	movs	r0, #0
 8000eea:	f7ff fe97 	bl	8000c1c <ILI9341_Set_Rotation>
}
 8000eee:	bf00      	nop
 8000ef0:	bd80      	pop	{r7, pc}
	...

08000ef4 <ILI9341_Draw_Colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 8000ef4:	b5b0      	push	{r4, r5, r7, lr}
 8000ef6:	b08c      	sub	sp, #48	; 0x30
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	4603      	mov	r3, r0
 8000efc:	6039      	str	r1, [r7, #0]
 8000efe:	80fb      	strh	r3, [r7, #6]
 8000f00:	466b      	mov	r3, sp
 8000f02:	461d      	mov	r5, r3
//SENDS COLOUR
uint32_t Buffer_Size = 0;
 8000f04:	2300      	movs	r3, #0
 8000f06:	627b      	str	r3, [r7, #36]	; 0x24
if((Size*2) < BURST_MAX_SIZE)
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	005b      	lsls	r3, r3, #1
 8000f0c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000f10:	d202      	bcs.n	8000f18 <ILI9341_Draw_Colour_Burst+0x24>
{
	Buffer_Size = Size;
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	627b      	str	r3, [r7, #36]	; 0x24
 8000f16:	e002      	b.n	8000f1e <ILI9341_Draw_Colour_Burst+0x2a>
}
else
{
	Buffer_Size = BURST_MAX_SIZE;
 8000f18:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000f1c:	627b      	str	r3, [r7, #36]	; 0x24
}
	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8000f1e:	2201      	movs	r2, #1
 8000f20:	2108      	movs	r1, #8
 8000f22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f26:	f001 f9c5 	bl	80022b4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	2104      	movs	r1, #4
 8000f2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f32:	f001 f9bf 	bl	80022b4 <HAL_GPIO_WritePin>

unsigned char chifted = 	Colour>>8;;
 8000f36:	88fb      	ldrh	r3, [r7, #6]
 8000f38:	0a1b      	lsrs	r3, r3, #8
 8000f3a:	b29b      	uxth	r3, r3
 8000f3c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
unsigned char burst_buffer[Buffer_Size];
 8000f40:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8000f42:	4623      	mov	r3, r4
 8000f44:	3b01      	subs	r3, #1
 8000f46:	61fb      	str	r3, [r7, #28]
 8000f48:	4620      	mov	r0, r4
 8000f4a:	f04f 0100 	mov.w	r1, #0
 8000f4e:	f04f 0200 	mov.w	r2, #0
 8000f52:	f04f 0300 	mov.w	r3, #0
 8000f56:	00cb      	lsls	r3, r1, #3
 8000f58:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000f5c:	00c2      	lsls	r2, r0, #3
 8000f5e:	4620      	mov	r0, r4
 8000f60:	f04f 0100 	mov.w	r1, #0
 8000f64:	f04f 0200 	mov.w	r2, #0
 8000f68:	f04f 0300 	mov.w	r3, #0
 8000f6c:	00cb      	lsls	r3, r1, #3
 8000f6e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000f72:	00c2      	lsls	r2, r0, #3
 8000f74:	1de3      	adds	r3, r4, #7
 8000f76:	08db      	lsrs	r3, r3, #3
 8000f78:	00db      	lsls	r3, r3, #3
 8000f7a:	ebad 0d03 	sub.w	sp, sp, r3
 8000f7e:	466b      	mov	r3, sp
 8000f80:	3300      	adds	r3, #0
 8000f82:	61bb      	str	r3, [r7, #24]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8000f84:	2300      	movs	r3, #0
 8000f86:	62bb      	str	r3, [r7, #40]	; 0x28
 8000f88:	e00e      	b.n	8000fa8 <ILI9341_Draw_Colour_Burst+0xb4>
	{
		burst_buffer[j] = 	chifted;
 8000f8a:	69ba      	ldr	r2, [r7, #24]
 8000f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f8e:	4413      	add	r3, r2
 8000f90:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000f94:	701a      	strb	r2, [r3, #0]
		burst_buffer[j+1] = Colour;
 8000f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f98:	3301      	adds	r3, #1
 8000f9a:	88fa      	ldrh	r2, [r7, #6]
 8000f9c:	b2d1      	uxtb	r1, r2
 8000f9e:	69ba      	ldr	r2, [r7, #24]
 8000fa0:	54d1      	strb	r1, [r2, r3]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8000fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fa4:	3302      	adds	r3, #2
 8000fa6:	62bb      	str	r3, [r7, #40]	; 0x28
 8000fa8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fac:	429a      	cmp	r2, r3
 8000fae:	d3ec      	bcc.n	8000f8a <ILI9341_Draw_Colour_Burst+0x96>
	}

uint32_t Sending_Size = Size*2;
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	005b      	lsls	r3, r3, #1
 8000fb4:	617b      	str	r3, [r7, #20]
uint32_t Sending_in_Block = Sending_Size/Buffer_Size;
 8000fb6:	697a      	ldr	r2, [r7, #20]
 8000fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fba:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fbe:	613b      	str	r3, [r7, #16]
uint32_t Remainder_from_block = Sending_Size%Buffer_Size;
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000fc4:	fbb3 f2f2 	udiv	r2, r3, r2
 8000fc8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000fca:	fb01 f202 	mul.w	r2, r1, r2
 8000fce:	1a9b      	subs	r3, r3, r2
 8000fd0:	60fb      	str	r3, [r7, #12]

if(Sending_in_Block != 0)
 8000fd2:	693b      	ldr	r3, [r7, #16]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d010      	beq.n	8000ffa <ILI9341_Draw_Colour_Burst+0x106>
{
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8000fd8:	2300      	movs	r3, #0
 8000fda:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000fdc:	e009      	b.n	8000ff2 <ILI9341_Draw_Colour_Burst+0xfe>
		{
		HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Buffer_Size, 10);	
 8000fde:	69b9      	ldr	r1, [r7, #24]
 8000fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fe2:	b29a      	uxth	r2, r3
 8000fe4:	230a      	movs	r3, #10
 8000fe6:	480e      	ldr	r0, [pc, #56]	; (8001020 <ILI9341_Draw_Colour_Burst+0x12c>)
 8000fe8:	f002 fb9b 	bl	8003722 <HAL_SPI_Transmit>
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8000fec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fee:	3301      	adds	r3, #1
 8000ff0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000ff2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000ff4:	693b      	ldr	r3, [r7, #16]
 8000ff6:	429a      	cmp	r2, r3
 8000ff8:	d3f1      	bcc.n	8000fde <ILI9341_Draw_Colour_Burst+0xea>
		}
}

//REMAINDER!
HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Remainder_from_block, 10);	
 8000ffa:	69b9      	ldr	r1, [r7, #24]
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	b29a      	uxth	r2, r3
 8001000:	230a      	movs	r3, #10
 8001002:	4807      	ldr	r0, [pc, #28]	; (8001020 <ILI9341_Draw_Colour_Burst+0x12c>)
 8001004:	f002 fb8d 	bl	8003722 <HAL_SPI_Transmit>
	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8001008:	2201      	movs	r2, #1
 800100a:	2104      	movs	r1, #4
 800100c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001010:	f001 f950 	bl	80022b4 <HAL_GPIO_WritePin>
 8001014:	46ad      	mov	sp, r5
}
 8001016:	bf00      	nop
 8001018:	3730      	adds	r7, #48	; 0x30
 800101a:	46bd      	mov	sp, r7
 800101c:	bdb0      	pop	{r4, r5, r7, pc}
 800101e:	bf00      	nop
 8001020:	20000150 	.word	0x20000150

08001024 <ILI9341_Fill_Screen>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends Height*Width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t Colour)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	4603      	mov	r3, r0
 800102c:	80fb      	strh	r3, [r7, #6]
ILI9341_Set_Address(0,0,LCD_WIDTH,LCD_HEIGHT);	
 800102e:	4b0e      	ldr	r3, [pc, #56]	; (8001068 <ILI9341_Fill_Screen+0x44>)
 8001030:	881b      	ldrh	r3, [r3, #0]
 8001032:	b29a      	uxth	r2, r3
 8001034:	4b0d      	ldr	r3, [pc, #52]	; (800106c <ILI9341_Fill_Screen+0x48>)
 8001036:	881b      	ldrh	r3, [r3, #0]
 8001038:	b29b      	uxth	r3, r3
 800103a:	2100      	movs	r1, #0
 800103c:	2000      	movs	r0, #0
 800103e:	f7ff fd85 	bl	8000b4c <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, LCD_WIDTH*LCD_HEIGHT);	
 8001042:	4b09      	ldr	r3, [pc, #36]	; (8001068 <ILI9341_Fill_Screen+0x44>)
 8001044:	881b      	ldrh	r3, [r3, #0]
 8001046:	b29b      	uxth	r3, r3
 8001048:	461a      	mov	r2, r3
 800104a:	4b08      	ldr	r3, [pc, #32]	; (800106c <ILI9341_Fill_Screen+0x48>)
 800104c:	881b      	ldrh	r3, [r3, #0]
 800104e:	b29b      	uxth	r3, r3
 8001050:	fb03 f302 	mul.w	r3, r3, r2
 8001054:	461a      	mov	r2, r3
 8001056:	88fb      	ldrh	r3, [r7, #6]
 8001058:	4611      	mov	r1, r2
 800105a:	4618      	mov	r0, r3
 800105c:	f7ff ff4a 	bl	8000ef4 <ILI9341_Draw_Colour_Burst>
}
 8001060:	bf00      	nop
 8001062:	3708      	adds	r7, #8
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	20000002 	.word	0x20000002
 800106c:	20000000 	.word	0x20000000

08001070 <ILI9341_Draw_Pixel>:
//Location is dependant on screen orientation. x0 and y0 locations change with orientations.
//Using pixels to draw big simple structures is not recommended as it is really slow
//Try using either rectangles or lines if possible
//
void ILI9341_Draw_Pixel(uint16_t X,uint16_t Y,uint16_t Colour) 
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b086      	sub	sp, #24
 8001074:	af00      	add	r7, sp, #0
 8001076:	4603      	mov	r3, r0
 8001078:	80fb      	strh	r3, [r7, #6]
 800107a:	460b      	mov	r3, r1
 800107c:	80bb      	strh	r3, [r7, #4]
 800107e:	4613      	mov	r3, r2
 8001080:	807b      	strh	r3, [r7, #2]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8001082:	4b64      	ldr	r3, [pc, #400]	; (8001214 <ILI9341_Draw_Pixel+0x1a4>)
 8001084:	881b      	ldrh	r3, [r3, #0]
 8001086:	b29b      	uxth	r3, r3
 8001088:	88fa      	ldrh	r2, [r7, #6]
 800108a:	429a      	cmp	r2, r3
 800108c:	f080 80be 	bcs.w	800120c <ILI9341_Draw_Pixel+0x19c>
 8001090:	4b61      	ldr	r3, [pc, #388]	; (8001218 <ILI9341_Draw_Pixel+0x1a8>)
 8001092:	881b      	ldrh	r3, [r3, #0]
 8001094:	b29b      	uxth	r3, r3
 8001096:	88ba      	ldrh	r2, [r7, #4]
 8001098:	429a      	cmp	r2, r3
 800109a:	f080 80b7 	bcs.w	800120c <ILI9341_Draw_Pixel+0x19c>
	
//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 800109e:	2200      	movs	r2, #0
 80010a0:	2108      	movs	r1, #8
 80010a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010a6:	f001 f905 	bl	80022b4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80010aa:	2200      	movs	r2, #0
 80010ac:	2104      	movs	r1, #4
 80010ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010b2:	f001 f8ff 	bl	80022b4 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2A);
 80010b6:	202a      	movs	r0, #42	; 0x2a
 80010b8:	f7ff fcf8 	bl	8000aac <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 80010bc:	2201      	movs	r2, #1
 80010be:	2108      	movs	r1, #8
 80010c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010c4:	f001 f8f6 	bl	80022b4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 80010c8:	2201      	movs	r2, #1
 80010ca:	2104      	movs	r1, #4
 80010cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010d0:	f001 f8f0 	bl	80022b4 <HAL_GPIO_WritePin>

//XDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 80010d4:	2200      	movs	r2, #0
 80010d6:	2104      	movs	r1, #4
 80010d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010dc:	f001 f8ea 	bl	80022b4 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer[4] = {X>>8,X, (X+1)>>8, (X+1)};
 80010e0:	88fb      	ldrh	r3, [r7, #6]
 80010e2:	0a1b      	lsrs	r3, r3, #8
 80010e4:	b29b      	uxth	r3, r3
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	753b      	strb	r3, [r7, #20]
 80010ea:	88fb      	ldrh	r3, [r7, #6]
 80010ec:	b2db      	uxtb	r3, r3
 80010ee:	757b      	strb	r3, [r7, #21]
 80010f0:	88fb      	ldrh	r3, [r7, #6]
 80010f2:	3301      	adds	r3, #1
 80010f4:	121b      	asrs	r3, r3, #8
 80010f6:	b2db      	uxtb	r3, r3
 80010f8:	75bb      	strb	r3, [r7, #22]
 80010fa:	88fb      	ldrh	r3, [r7, #6]
 80010fc:	b2db      	uxtb	r3, r3
 80010fe:	3301      	adds	r3, #1
 8001100:	b2db      	uxtb	r3, r3
 8001102:	75fb      	strb	r3, [r7, #23]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1);
 8001104:	f107 0114 	add.w	r1, r7, #20
 8001108:	2301      	movs	r3, #1
 800110a:	2204      	movs	r2, #4
 800110c:	4843      	ldr	r0, [pc, #268]	; (800121c <ILI9341_Draw_Pixel+0x1ac>)
 800110e:	f002 fb08 	bl	8003722 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8001112:	2201      	movs	r2, #1
 8001114:	2104      	movs	r1, #4
 8001116:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800111a:	f001 f8cb 	bl	80022b4 <HAL_GPIO_WritePin>

//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 800111e:	2200      	movs	r2, #0
 8001120:	2108      	movs	r1, #8
 8001122:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001126:	f001 f8c5 	bl	80022b4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 800112a:	2200      	movs	r2, #0
 800112c:	2104      	movs	r1, #4
 800112e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001132:	f001 f8bf 	bl	80022b4 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2B);
 8001136:	202b      	movs	r0, #43	; 0x2b
 8001138:	f7ff fcb8 	bl	8000aac <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 800113c:	2201      	movs	r2, #1
 800113e:	2108      	movs	r1, #8
 8001140:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001144:	f001 f8b6 	bl	80022b4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 8001148:	2201      	movs	r2, #1
 800114a:	2104      	movs	r1, #4
 800114c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001150:	f001 f8b0 	bl	80022b4 <HAL_GPIO_WritePin>

//YDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001154:	2200      	movs	r2, #0
 8001156:	2104      	movs	r1, #4
 8001158:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800115c:	f001 f8aa 	bl	80022b4 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer1[4] = {Y>>8,Y, (Y+1)>>8, (Y+1)};
 8001160:	88bb      	ldrh	r3, [r7, #4]
 8001162:	0a1b      	lsrs	r3, r3, #8
 8001164:	b29b      	uxth	r3, r3
 8001166:	b2db      	uxtb	r3, r3
 8001168:	743b      	strb	r3, [r7, #16]
 800116a:	88bb      	ldrh	r3, [r7, #4]
 800116c:	b2db      	uxtb	r3, r3
 800116e:	747b      	strb	r3, [r7, #17]
 8001170:	88bb      	ldrh	r3, [r7, #4]
 8001172:	3301      	adds	r3, #1
 8001174:	121b      	asrs	r3, r3, #8
 8001176:	b2db      	uxtb	r3, r3
 8001178:	74bb      	strb	r3, [r7, #18]
 800117a:	88bb      	ldrh	r3, [r7, #4]
 800117c:	b2db      	uxtb	r3, r3
 800117e:	3301      	adds	r3, #1
 8001180:	b2db      	uxtb	r3, r3
 8001182:	74fb      	strb	r3, [r7, #19]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1);
 8001184:	f107 0110 	add.w	r1, r7, #16
 8001188:	2301      	movs	r3, #1
 800118a:	2204      	movs	r2, #4
 800118c:	4823      	ldr	r0, [pc, #140]	; (800121c <ILI9341_Draw_Pixel+0x1ac>)
 800118e:	f002 fac8 	bl	8003722 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8001192:	2201      	movs	r2, #1
 8001194:	2104      	movs	r1, #4
 8001196:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800119a:	f001 f88b 	bl	80022b4 <HAL_GPIO_WritePin>

//ADDRESS	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 800119e:	2200      	movs	r2, #0
 80011a0:	2108      	movs	r1, #8
 80011a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011a6:	f001 f885 	bl	80022b4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 80011aa:	2200      	movs	r2, #0
 80011ac:	2104      	movs	r1, #4
 80011ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011b2:	f001 f87f 	bl	80022b4 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2C);
 80011b6:	202c      	movs	r0, #44	; 0x2c
 80011b8:	f7ff fc78 	bl	8000aac <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 80011bc:	2201      	movs	r2, #1
 80011be:	2108      	movs	r1, #8
 80011c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011c4:	f001 f876 	bl	80022b4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 80011c8:	2201      	movs	r2, #1
 80011ca:	2104      	movs	r1, #4
 80011cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011d0:	f001 f870 	bl	80022b4 <HAL_GPIO_WritePin>

//COLOUR	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80011d4:	2200      	movs	r2, #0
 80011d6:	2104      	movs	r1, #4
 80011d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011dc:	f001 f86a 	bl	80022b4 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer2[2] = {Colour>>8, Colour};
 80011e0:	887b      	ldrh	r3, [r7, #2]
 80011e2:	0a1b      	lsrs	r3, r3, #8
 80011e4:	b29b      	uxth	r3, r3
 80011e6:	b2db      	uxtb	r3, r3
 80011e8:	733b      	strb	r3, [r7, #12]
 80011ea:	887b      	ldrh	r3, [r7, #2]
 80011ec:	b2db      	uxtb	r3, r3
 80011ee:	737b      	strb	r3, [r7, #13]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1);
 80011f0:	f107 010c 	add.w	r1, r7, #12
 80011f4:	2301      	movs	r3, #1
 80011f6:	2202      	movs	r2, #2
 80011f8:	4808      	ldr	r0, [pc, #32]	; (800121c <ILI9341_Draw_Pixel+0x1ac>)
 80011fa:	f002 fa92 	bl	8003722 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80011fe:	2201      	movs	r2, #1
 8001200:	2104      	movs	r1, #4
 8001202:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001206:	f001 f855 	bl	80022b4 <HAL_GPIO_WritePin>
 800120a:	e000      	b.n	800120e <ILI9341_Draw_Pixel+0x19e>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 800120c:	bf00      	nop
	
}
 800120e:	3718      	adds	r7, #24
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	20000002 	.word	0x20000002
 8001218:	20000000 	.word	0x20000000
 800121c:	20000150 	.word	0x20000150

08001220 <ILI9341_Draw_Rectangle>:
//Rectangle is hollow. X and Y positions mark the upper left corner of rectangle
//As with all other draw calls x0 and y0 locations dependant on screen orientation
//

void ILI9341_Draw_Rectangle(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Height, uint16_t Colour)
{
 8001220:	b590      	push	{r4, r7, lr}
 8001222:	b083      	sub	sp, #12
 8001224:	af00      	add	r7, sp, #0
 8001226:	4604      	mov	r4, r0
 8001228:	4608      	mov	r0, r1
 800122a:	4611      	mov	r1, r2
 800122c:	461a      	mov	r2, r3
 800122e:	4623      	mov	r3, r4
 8001230:	80fb      	strh	r3, [r7, #6]
 8001232:	4603      	mov	r3, r0
 8001234:	80bb      	strh	r3, [r7, #4]
 8001236:	460b      	mov	r3, r1
 8001238:	807b      	strh	r3, [r7, #2]
 800123a:	4613      	mov	r3, r2
 800123c:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 800123e:	4b24      	ldr	r3, [pc, #144]	; (80012d0 <ILI9341_Draw_Rectangle+0xb0>)
 8001240:	881b      	ldrh	r3, [r3, #0]
 8001242:	b29b      	uxth	r3, r3
 8001244:	88fa      	ldrh	r2, [r7, #6]
 8001246:	429a      	cmp	r2, r3
 8001248:	d23d      	bcs.n	80012c6 <ILI9341_Draw_Rectangle+0xa6>
 800124a:	4b22      	ldr	r3, [pc, #136]	; (80012d4 <ILI9341_Draw_Rectangle+0xb4>)
 800124c:	881b      	ldrh	r3, [r3, #0]
 800124e:	b29b      	uxth	r3, r3
 8001250:	88ba      	ldrh	r2, [r7, #4]
 8001252:	429a      	cmp	r2, r3
 8001254:	d237      	bcs.n	80012c6 <ILI9341_Draw_Rectangle+0xa6>
if((X+Width-1)>=LCD_WIDTH)
 8001256:	88fa      	ldrh	r2, [r7, #6]
 8001258:	887b      	ldrh	r3, [r7, #2]
 800125a:	4413      	add	r3, r2
 800125c:	4a1c      	ldr	r2, [pc, #112]	; (80012d0 <ILI9341_Draw_Rectangle+0xb0>)
 800125e:	8812      	ldrh	r2, [r2, #0]
 8001260:	b292      	uxth	r2, r2
 8001262:	4293      	cmp	r3, r2
 8001264:	dd05      	ble.n	8001272 <ILI9341_Draw_Rectangle+0x52>
	{
		Width=LCD_WIDTH-X;
 8001266:	4b1a      	ldr	r3, [pc, #104]	; (80012d0 <ILI9341_Draw_Rectangle+0xb0>)
 8001268:	881b      	ldrh	r3, [r3, #0]
 800126a:	b29a      	uxth	r2, r3
 800126c:	88fb      	ldrh	r3, [r7, #6]
 800126e:	1ad3      	subs	r3, r2, r3
 8001270:	807b      	strh	r3, [r7, #2]
	}
if((Y+Height-1)>=LCD_HEIGHT)
 8001272:	88ba      	ldrh	r2, [r7, #4]
 8001274:	883b      	ldrh	r3, [r7, #0]
 8001276:	4413      	add	r3, r2
 8001278:	4a16      	ldr	r2, [pc, #88]	; (80012d4 <ILI9341_Draw_Rectangle+0xb4>)
 800127a:	8812      	ldrh	r2, [r2, #0]
 800127c:	b292      	uxth	r2, r2
 800127e:	4293      	cmp	r3, r2
 8001280:	dd05      	ble.n	800128e <ILI9341_Draw_Rectangle+0x6e>
	{
		Height=LCD_HEIGHT-Y;
 8001282:	4b14      	ldr	r3, [pc, #80]	; (80012d4 <ILI9341_Draw_Rectangle+0xb4>)
 8001284:	881b      	ldrh	r3, [r3, #0]
 8001286:	b29a      	uxth	r2, r3
 8001288:	88bb      	ldrh	r3, [r7, #4]
 800128a:	1ad3      	subs	r3, r2, r3
 800128c:	803b      	strh	r3, [r7, #0]
	}
ILI9341_Set_Address(X, Y, X+Width-1, Y+Height-1);
 800128e:	88fa      	ldrh	r2, [r7, #6]
 8001290:	887b      	ldrh	r3, [r7, #2]
 8001292:	4413      	add	r3, r2
 8001294:	b29b      	uxth	r3, r3
 8001296:	3b01      	subs	r3, #1
 8001298:	b29c      	uxth	r4, r3
 800129a:	88ba      	ldrh	r2, [r7, #4]
 800129c:	883b      	ldrh	r3, [r7, #0]
 800129e:	4413      	add	r3, r2
 80012a0:	b29b      	uxth	r3, r3
 80012a2:	3b01      	subs	r3, #1
 80012a4:	b29b      	uxth	r3, r3
 80012a6:	88b9      	ldrh	r1, [r7, #4]
 80012a8:	88f8      	ldrh	r0, [r7, #6]
 80012aa:	4622      	mov	r2, r4
 80012ac:	f7ff fc4e 	bl	8000b4c <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Height*Width);
 80012b0:	883b      	ldrh	r3, [r7, #0]
 80012b2:	887a      	ldrh	r2, [r7, #2]
 80012b4:	fb02 f303 	mul.w	r3, r2, r3
 80012b8:	461a      	mov	r2, r3
 80012ba:	8b3b      	ldrh	r3, [r7, #24]
 80012bc:	4611      	mov	r1, r2
 80012be:	4618      	mov	r0, r3
 80012c0:	f7ff fe18 	bl	8000ef4 <ILI9341_Draw_Colour_Burst>
 80012c4:	e000      	b.n	80012c8 <ILI9341_Draw_Rectangle+0xa8>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 80012c6:	bf00      	nop
}
 80012c8:	370c      	adds	r7, #12
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd90      	pop	{r4, r7, pc}
 80012ce:	bf00      	nop
 80012d0:	20000002 	.word	0x20000002
 80012d4:	20000000 	.word	0x20000000

080012d8 <ILI9341_Draw_Horizontal_Line>:

//DRAW LINE FROM X,Y LOCATION to X+Width,Y LOCATION
void ILI9341_Draw_Horizontal_Line(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Colour)
{
 80012d8:	b590      	push	{r4, r7, lr}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0
 80012de:	4604      	mov	r4, r0
 80012e0:	4608      	mov	r0, r1
 80012e2:	4611      	mov	r1, r2
 80012e4:	461a      	mov	r2, r3
 80012e6:	4623      	mov	r3, r4
 80012e8:	80fb      	strh	r3, [r7, #6]
 80012ea:	4603      	mov	r3, r0
 80012ec:	80bb      	strh	r3, [r7, #4]
 80012ee:	460b      	mov	r3, r1
 80012f0:	807b      	strh	r3, [r7, #2]
 80012f2:	4613      	mov	r3, r2
 80012f4:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 80012f6:	4b18      	ldr	r3, [pc, #96]	; (8001358 <ILI9341_Draw_Horizontal_Line+0x80>)
 80012f8:	881b      	ldrh	r3, [r3, #0]
 80012fa:	b29b      	uxth	r3, r3
 80012fc:	88fa      	ldrh	r2, [r7, #6]
 80012fe:	429a      	cmp	r2, r3
 8001300:	d225      	bcs.n	800134e <ILI9341_Draw_Horizontal_Line+0x76>
 8001302:	4b16      	ldr	r3, [pc, #88]	; (800135c <ILI9341_Draw_Horizontal_Line+0x84>)
 8001304:	881b      	ldrh	r3, [r3, #0]
 8001306:	b29b      	uxth	r3, r3
 8001308:	88ba      	ldrh	r2, [r7, #4]
 800130a:	429a      	cmp	r2, r3
 800130c:	d21f      	bcs.n	800134e <ILI9341_Draw_Horizontal_Line+0x76>
if((X+Width-1)>=LCD_WIDTH)
 800130e:	88fa      	ldrh	r2, [r7, #6]
 8001310:	887b      	ldrh	r3, [r7, #2]
 8001312:	4413      	add	r3, r2
 8001314:	4a10      	ldr	r2, [pc, #64]	; (8001358 <ILI9341_Draw_Horizontal_Line+0x80>)
 8001316:	8812      	ldrh	r2, [r2, #0]
 8001318:	b292      	uxth	r2, r2
 800131a:	4293      	cmp	r3, r2
 800131c:	dd05      	ble.n	800132a <ILI9341_Draw_Horizontal_Line+0x52>
	{
		Width=LCD_WIDTH-X;
 800131e:	4b0e      	ldr	r3, [pc, #56]	; (8001358 <ILI9341_Draw_Horizontal_Line+0x80>)
 8001320:	881b      	ldrh	r3, [r3, #0]
 8001322:	b29a      	uxth	r2, r3
 8001324:	88fb      	ldrh	r3, [r7, #6]
 8001326:	1ad3      	subs	r3, r2, r3
 8001328:	807b      	strh	r3, [r7, #2]
	}
ILI9341_Set_Address(X, Y, X+Width-1, Y);
 800132a:	88fa      	ldrh	r2, [r7, #6]
 800132c:	887b      	ldrh	r3, [r7, #2]
 800132e:	4413      	add	r3, r2
 8001330:	b29b      	uxth	r3, r3
 8001332:	3b01      	subs	r3, #1
 8001334:	b29a      	uxth	r2, r3
 8001336:	88bb      	ldrh	r3, [r7, #4]
 8001338:	88b9      	ldrh	r1, [r7, #4]
 800133a:	88f8      	ldrh	r0, [r7, #6]
 800133c:	f7ff fc06 	bl	8000b4c <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Width);
 8001340:	887a      	ldrh	r2, [r7, #2]
 8001342:	883b      	ldrh	r3, [r7, #0]
 8001344:	4611      	mov	r1, r2
 8001346:	4618      	mov	r0, r3
 8001348:	f7ff fdd4 	bl	8000ef4 <ILI9341_Draw_Colour_Burst>
 800134c:	e000      	b.n	8001350 <ILI9341_Draw_Horizontal_Line+0x78>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 800134e:	bf00      	nop
}
 8001350:	370c      	adds	r7, #12
 8001352:	46bd      	mov	sp, r7
 8001354:	bd90      	pop	{r4, r7, pc}
 8001356:	bf00      	nop
 8001358:	20000002 	.word	0x20000002
 800135c:	20000000 	.word	0x20000000

08001360 <ILI9341_Draw_Vertical_Line>:

//DRAW LINE FROM X,Y LOCATION to X,Y+Height LOCATION
void ILI9341_Draw_Vertical_Line(uint16_t X, uint16_t Y, uint16_t Height, uint16_t Colour)
{
 8001360:	b590      	push	{r4, r7, lr}
 8001362:	b083      	sub	sp, #12
 8001364:	af00      	add	r7, sp, #0
 8001366:	4604      	mov	r4, r0
 8001368:	4608      	mov	r0, r1
 800136a:	4611      	mov	r1, r2
 800136c:	461a      	mov	r2, r3
 800136e:	4623      	mov	r3, r4
 8001370:	80fb      	strh	r3, [r7, #6]
 8001372:	4603      	mov	r3, r0
 8001374:	80bb      	strh	r3, [r7, #4]
 8001376:	460b      	mov	r3, r1
 8001378:	807b      	strh	r3, [r7, #2]
 800137a:	4613      	mov	r3, r2
 800137c:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 800137e:	4b18      	ldr	r3, [pc, #96]	; (80013e0 <ILI9341_Draw_Vertical_Line+0x80>)
 8001380:	881b      	ldrh	r3, [r3, #0]
 8001382:	b29b      	uxth	r3, r3
 8001384:	88fa      	ldrh	r2, [r7, #6]
 8001386:	429a      	cmp	r2, r3
 8001388:	d225      	bcs.n	80013d6 <ILI9341_Draw_Vertical_Line+0x76>
 800138a:	4b16      	ldr	r3, [pc, #88]	; (80013e4 <ILI9341_Draw_Vertical_Line+0x84>)
 800138c:	881b      	ldrh	r3, [r3, #0]
 800138e:	b29b      	uxth	r3, r3
 8001390:	88ba      	ldrh	r2, [r7, #4]
 8001392:	429a      	cmp	r2, r3
 8001394:	d21f      	bcs.n	80013d6 <ILI9341_Draw_Vertical_Line+0x76>
if((Y+Height-1)>=LCD_HEIGHT)
 8001396:	88ba      	ldrh	r2, [r7, #4]
 8001398:	887b      	ldrh	r3, [r7, #2]
 800139a:	4413      	add	r3, r2
 800139c:	4a11      	ldr	r2, [pc, #68]	; (80013e4 <ILI9341_Draw_Vertical_Line+0x84>)
 800139e:	8812      	ldrh	r2, [r2, #0]
 80013a0:	b292      	uxth	r2, r2
 80013a2:	4293      	cmp	r3, r2
 80013a4:	dd05      	ble.n	80013b2 <ILI9341_Draw_Vertical_Line+0x52>
	{
		Height=LCD_HEIGHT-Y;
 80013a6:	4b0f      	ldr	r3, [pc, #60]	; (80013e4 <ILI9341_Draw_Vertical_Line+0x84>)
 80013a8:	881b      	ldrh	r3, [r3, #0]
 80013aa:	b29a      	uxth	r2, r3
 80013ac:	88bb      	ldrh	r3, [r7, #4]
 80013ae:	1ad3      	subs	r3, r2, r3
 80013b0:	807b      	strh	r3, [r7, #2]
	}
ILI9341_Set_Address(X, Y, X, Y+Height-1);
 80013b2:	88ba      	ldrh	r2, [r7, #4]
 80013b4:	887b      	ldrh	r3, [r7, #2]
 80013b6:	4413      	add	r3, r2
 80013b8:	b29b      	uxth	r3, r3
 80013ba:	3b01      	subs	r3, #1
 80013bc:	b29b      	uxth	r3, r3
 80013be:	88fa      	ldrh	r2, [r7, #6]
 80013c0:	88b9      	ldrh	r1, [r7, #4]
 80013c2:	88f8      	ldrh	r0, [r7, #6]
 80013c4:	f7ff fbc2 	bl	8000b4c <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Height);
 80013c8:	887a      	ldrh	r2, [r7, #2]
 80013ca:	883b      	ldrh	r3, [r7, #0]
 80013cc:	4611      	mov	r1, r2
 80013ce:	4618      	mov	r0, r3
 80013d0:	f7ff fd90 	bl	8000ef4 <ILI9341_Draw_Colour_Burst>
 80013d4:	e000      	b.n	80013d8 <ILI9341_Draw_Vertical_Line+0x78>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 80013d6:	bf00      	nop
}
 80013d8:	370c      	adds	r7, #12
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd90      	pop	{r4, r7, pc}
 80013de:	bf00      	nop
 80013e0:	20000002 	.word	0x20000002
 80013e4:	20000000 	.word	0x20000000

080013e8 <main>:

//************************************************************************************************
//        main
//************************************************************************************************
int main(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b086      	sub	sp, #24
 80013ec:	af02      	add	r7, sp, #8

  HAL_Init();
 80013ee:	f000 fbc6 	bl	8001b7e <HAL_Init>
  SystemClock_Config();
 80013f2:	f000 f8bf 	bl	8001574 <SystemClock_Config>
  MX_GPIO_Init();
 80013f6:	f000 f9d5 	bl	80017a4 <MX_GPIO_Init>
  MX_I2C1_Init();
 80013fa:	f000 f925 	bl	8001648 <MX_I2C1_Init>
  MX_SPI1_Init();
 80013fe:	f000 f963 	bl	80016c8 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8001402:	f000 f99f 	bl	8001744 <MX_USART1_UART_Init>

  ILI9341_Init();
 8001406:	f7ff fc67 	bl	8000cd8 <ILI9341_Init>
//       loop
//************************************************************************************************
  while (1)
  {

		ILI9341_Fill_Screen(BLACK);
 800140a:	2000      	movs	r0, #0
 800140c:	f7ff fe0a 	bl	8001024 <ILI9341_Fill_Screen>
		ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 8001410:	2003      	movs	r0, #3
 8001412:	f7ff fc03 	bl	8000c1c <ILI9341_Set_Rotation>
		ILI9341_Draw_Text("TESTE spi ili9341", 10, 10, WHITE, 2, BLACK);
 8001416:	2300      	movs	r3, #0
 8001418:	9301      	str	r3, [sp, #4]
 800141a:	2302      	movs	r3, #2
 800141c:	9300      	str	r3, [sp, #0]
 800141e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001422:	220a      	movs	r2, #10
 8001424:	210a      	movs	r1, #10
 8001426:	484f      	ldr	r0, [pc, #316]	; (8001564 <main+0x17c>)
 8001428:	f7ff fb06 	bl	8000a38 <ILI9341_Draw_Text>
		HAL_Delay(2000);
 800142c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001430:	f000 fc1a 	bl	8001c68 <HAL_Delay>
		ILI9341_Fill_Screen(BLACK);
 8001434:	2000      	movs	r0, #0
 8001436:	f7ff fdf5 	bl	8001024 <ILI9341_Fill_Screen>

		ILI9341_Draw_Hollow_Rectangle_Coord(50, 50, 100, 100, RED);
 800143a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800143e:	9300      	str	r3, [sp, #0]
 8001440:	2364      	movs	r3, #100	; 0x64
 8001442:	2264      	movs	r2, #100	; 0x64
 8001444:	2132      	movs	r1, #50	; 0x32
 8001446:	2032      	movs	r0, #50	; 0x32
 8001448:	f7ff f97a 	bl	8000740 <ILI9341_Draw_Hollow_Rectangle_Coord>
		ILI9341_Draw_Filled_Rectangle_Coord(20, 20, 50, 50, RED);
 800144c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001450:	9300      	str	r3, [sp, #0]
 8001452:	2332      	movs	r3, #50	; 0x32
 8001454:	2232      	movs	r2, #50	; 0x32
 8001456:	2114      	movs	r1, #20
 8001458:	2014      	movs	r0, #20
 800145a:	f7ff f9f2 	bl	8000842 <ILI9341_Draw_Filled_Rectangle_Coord>
		ILI9341_Draw_Hollow_Rectangle_Coord(10, 10, 19, 19, RED);
 800145e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001462:	9300      	str	r3, [sp, #0]
 8001464:	2313      	movs	r3, #19
 8001466:	2213      	movs	r2, #19
 8001468:	210a      	movs	r1, #10
 800146a:	200a      	movs	r0, #10
 800146c:	f7ff f968 	bl	8000740 <ILI9341_Draw_Hollow_Rectangle_Coord>
		HAL_Delay(2000);
 8001470:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001474:	f000 fbf8 	bl	8001c68 <HAL_Delay>
		ILI9341_Fill_Screen(BLACK);
 8001478:	2000      	movs	r0, #0
 800147a:	f7ff fdd3 	bl	8001024 <ILI9341_Fill_Screen>
		ILI9341_Draw_Hollow_Circle(100, 100, 100, BLUE);
 800147e:	231f      	movs	r3, #31
 8001480:	2264      	movs	r2, #100	; 0x64
 8001482:	2164      	movs	r1, #100	; 0x64
 8001484:	2064      	movs	r0, #100	; 0x64
 8001486:	f7ff f81d 	bl	80004c4 <ILI9341_Draw_Hollow_Circle>
		ILI9341_Draw_Filled_Circle(100, 100, 50, BLUE);
 800148a:	231f      	movs	r3, #31
 800148c:	2232      	movs	r2, #50	; 0x32
 800148e:	2164      	movs	r1, #100	; 0x64
 8001490:	2064      	movs	r0, #100	; 0x64
 8001492:	f7ff f8cd 	bl	8000630 <ILI9341_Draw_Filled_Circle>
		HAL_Delay(2000);
 8001496:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800149a:	f000 fbe5 	bl	8001c68 <HAL_Delay>
		ILI9341_Fill_Screen(BLACK);
 800149e:	2000      	movs	r0, #0
 80014a0:	f7ff fdc0 	bl	8001024 <ILI9341_Fill_Screen>

		ILI9341_Fill_Screen(WHITE);
 80014a4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80014a8:	f7ff fdbc 	bl	8001024 <ILI9341_Fill_Screen>
		ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 80014ac:	2003      	movs	r0, #3
 80014ae:	f7ff fbb5 	bl	8000c1c <ILI9341_Set_Rotation>
		ILI9341_Draw_Text("Colour gradient", 10, 10, BLACK, 1, WHITE);
 80014b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80014b6:	9301      	str	r3, [sp, #4]
 80014b8:	2301      	movs	r3, #1
 80014ba:	9300      	str	r3, [sp, #0]
 80014bc:	2300      	movs	r3, #0
 80014be:	220a      	movs	r2, #10
 80014c0:	210a      	movs	r1, #10
 80014c2:	4829      	ldr	r0, [pc, #164]	; (8001568 <main+0x180>)
 80014c4:	f7ff fab8 	bl	8000a38 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("Grayscale", 10, 20, BLACK, 1, WHITE);
 80014c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80014cc:	9301      	str	r3, [sp, #4]
 80014ce:	2301      	movs	r3, #1
 80014d0:	9300      	str	r3, [sp, #0]
 80014d2:	2300      	movs	r3, #0
 80014d4:	2214      	movs	r2, #20
 80014d6:	210a      	movs	r1, #10
 80014d8:	4824      	ldr	r0, [pc, #144]	; (800156c <main+0x184>)
 80014da:	f7ff faad 	bl	8000a38 <ILI9341_Draw_Text>
		HAL_Delay(2000);
 80014de:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80014e2:	f000 fbc1 	bl	8001c68 <HAL_Delay>


		for(uint16_t i = 0; i <= (320); i++)
 80014e6:	2300      	movs	r3, #0
 80014e8:	81fb      	strh	r3, [r7, #14]
 80014ea:	e031      	b.n	8001550 <main+0x168>
		{
			uint16_t Red = 0;
 80014ec:	2300      	movs	r3, #0
 80014ee:	81bb      	strh	r3, [r7, #12]
			uint16_t Green = 0;
 80014f0:	2300      	movs	r3, #0
 80014f2:	817b      	strh	r3, [r7, #10]
			uint16_t Blue = 0;
 80014f4:	2300      	movs	r3, #0
 80014f6:	813b      	strh	r3, [r7, #8]
			uint16_t x = 10;
 80014f8:	230a      	movs	r3, #10
 80014fa:	80fb      	strh	r3, [r7, #6]

			Red = i/(10);
 80014fc:	89fb      	ldrh	r3, [r7, #14]
 80014fe:	4a1c      	ldr	r2, [pc, #112]	; (8001570 <main+0x188>)
 8001500:	fba2 2303 	umull	r2, r3, r2, r3
 8001504:	08db      	lsrs	r3, r3, #3
 8001506:	81bb      	strh	r3, [r7, #12]
			Red <<= 11;
 8001508:	89bb      	ldrh	r3, [r7, #12]
 800150a:	02db      	lsls	r3, r3, #11
 800150c:	81bb      	strh	r3, [r7, #12]
			Green = i/(5);
 800150e:	89fb      	ldrh	r3, [r7, #14]
 8001510:	4a17      	ldr	r2, [pc, #92]	; (8001570 <main+0x188>)
 8001512:	fba2 2303 	umull	r2, r3, r2, r3
 8001516:	089b      	lsrs	r3, r3, #2
 8001518:	817b      	strh	r3, [r7, #10]
			Green <<= 5;
 800151a:	897b      	ldrh	r3, [r7, #10]
 800151c:	015b      	lsls	r3, r3, #5
 800151e:	817b      	strh	r3, [r7, #10]
			Blue = i/(10);
 8001520:	89fb      	ldrh	r3, [r7, #14]
 8001522:	4a13      	ldr	r2, [pc, #76]	; (8001570 <main+0x188>)
 8001524:	fba2 2303 	umull	r2, r3, r2, r3
 8001528:	08db      	lsrs	r3, r3, #3
 800152a:	813b      	strh	r3, [r7, #8]

			uint16_t RGB_color = Red + Green + Blue;
 800152c:	89ba      	ldrh	r2, [r7, #12]
 800152e:	897b      	ldrh	r3, [r7, #10]
 8001530:	4413      	add	r3, r2
 8001532:	b29a      	uxth	r2, r3
 8001534:	893b      	ldrh	r3, [r7, #8]
 8001536:	4413      	add	r3, r2
 8001538:	80bb      	strh	r3, [r7, #4]
			ILI9341_Draw_Rectangle(i, x, 1, 240, RGB_color);
 800153a:	88f9      	ldrh	r1, [r7, #6]
 800153c:	89f8      	ldrh	r0, [r7, #14]
 800153e:	88bb      	ldrh	r3, [r7, #4]
 8001540:	9300      	str	r3, [sp, #0]
 8001542:	23f0      	movs	r3, #240	; 0xf0
 8001544:	2201      	movs	r2, #1
 8001546:	f7ff fe6b 	bl	8001220 <ILI9341_Draw_Rectangle>
		for(uint16_t i = 0; i <= (320); i++)
 800154a:	89fb      	ldrh	r3, [r7, #14]
 800154c:	3301      	adds	r3, #1
 800154e:	81fb      	strh	r3, [r7, #14]
 8001550:	89fb      	ldrh	r3, [r7, #14]
 8001552:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001556:	d9c9      	bls.n	80014ec <main+0x104>

		}
		HAL_Delay(2000);
 8001558:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800155c:	f000 fb84 	bl	8001c68 <HAL_Delay>
		ILI9341_Fill_Screen(BLACK);
 8001560:	e753      	b.n	800140a <main+0x22>
 8001562:	bf00      	nop
 8001564:	08004a1c 	.word	0x08004a1c
 8001568:	08004a30 	.word	0x08004a30
 800156c:	08004a40 	.word	0x08004a40
 8001570:	cccccccd 	.word	0xcccccccd

08001574 <SystemClock_Config>:




void SystemClock_Config(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b0a4      	sub	sp, #144	; 0x90
 8001578:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800157a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800157e:	2244      	movs	r2, #68	; 0x44
 8001580:	2100      	movs	r1, #0
 8001582:	4618      	mov	r0, r3
 8001584:	f003 fa34 	bl	80049f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001588:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800158c:	2200      	movs	r2, #0
 800158e:	601a      	str	r2, [r3, #0]
 8001590:	605a      	str	r2, [r3, #4]
 8001592:	609a      	str	r2, [r3, #8]
 8001594:	60da      	str	r2, [r3, #12]
 8001596:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001598:	1d3b      	adds	r3, r7, #4
 800159a:	2234      	movs	r2, #52	; 0x34
 800159c:	2100      	movs	r1, #0
 800159e:	4618      	mov	r0, r3
 80015a0:	f003 fa26 	bl	80049f0 <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80015a4:	f44f 7000 	mov.w	r0, #512	; 0x200
 80015a8:	f000 ffd0 	bl	800254c <HAL_PWREx_ControlVoltageScaling>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d001      	beq.n	80015b6 <SystemClock_Config+0x42>
  {
    Error_Handler();
 80015b2:	f000 f957 	bl	8001864 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80015b6:	2302      	movs	r3, #2
 80015b8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015be:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015c0:	2340      	movs	r3, #64	; 0x40
 80015c2:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015c4:	2302      	movs	r3, #2
 80015c6:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80015c8:	2302      	movs	r3, #2
 80015ca:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80015cc:	2301      	movs	r3, #1
 80015ce:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLN = 8;
 80015d2:	2308      	movs	r3, #8
 80015d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80015d8:	2302      	movs	r3, #2
 80015da:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80015de:	2302      	movs	r3, #2
 80015e0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015e4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80015e8:	4618      	mov	r0, r3
 80015ea:	f001 f805 	bl	80025f8 <HAL_RCC_OscConfig>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d001      	beq.n	80015f8 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80015f4:	f000 f936 	bl	8001864 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015f8:	230f      	movs	r3, #15
 80015fa:	63bb      	str	r3, [r7, #56]	; 0x38
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015fc:	2303      	movs	r3, #3
 80015fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001600:	2300      	movs	r3, #0
 8001602:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001604:	2300      	movs	r3, #0
 8001606:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001608:	2300      	movs	r3, #0
 800160a:	64bb      	str	r3, [r7, #72]	; 0x48

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800160c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001610:	2103      	movs	r1, #3
 8001612:	4618      	mov	r0, r3
 8001614:	f001 fc56 	bl	8002ec4 <HAL_RCC_ClockConfig>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d001      	beq.n	8001622 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800161e:	f000 f921 	bl	8001864 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8001622:	2341      	movs	r3, #65	; 0x41
 8001624:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001626:	2300      	movs	r3, #0
 8001628:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800162a:	2300      	movs	r3, #0
 800162c:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800162e:	1d3b      	adds	r3, r7, #4
 8001630:	4618      	mov	r0, r3
 8001632:	f001 fe4d 	bl	80032d0 <HAL_RCCEx_PeriphCLKConfig>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d001      	beq.n	8001640 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 800163c:	f000 f912 	bl	8001864 <Error_Handler>
  }
}
 8001640:	bf00      	nop
 8001642:	3790      	adds	r7, #144	; 0x90
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}

08001648 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800164c:	4b1b      	ldr	r3, [pc, #108]	; (80016bc <MX_I2C1_Init+0x74>)
 800164e:	4a1c      	ldr	r2, [pc, #112]	; (80016c0 <MX_I2C1_Init+0x78>)
 8001650:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00602173;
 8001652:	4b1a      	ldr	r3, [pc, #104]	; (80016bc <MX_I2C1_Init+0x74>)
 8001654:	4a1b      	ldr	r2, [pc, #108]	; (80016c4 <MX_I2C1_Init+0x7c>)
 8001656:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001658:	4b18      	ldr	r3, [pc, #96]	; (80016bc <MX_I2C1_Init+0x74>)
 800165a:	2200      	movs	r2, #0
 800165c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800165e:	4b17      	ldr	r3, [pc, #92]	; (80016bc <MX_I2C1_Init+0x74>)
 8001660:	2201      	movs	r2, #1
 8001662:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001664:	4b15      	ldr	r3, [pc, #84]	; (80016bc <MX_I2C1_Init+0x74>)
 8001666:	2200      	movs	r2, #0
 8001668:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800166a:	4b14      	ldr	r3, [pc, #80]	; (80016bc <MX_I2C1_Init+0x74>)
 800166c:	2200      	movs	r2, #0
 800166e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001670:	4b12      	ldr	r3, [pc, #72]	; (80016bc <MX_I2C1_Init+0x74>)
 8001672:	2200      	movs	r2, #0
 8001674:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001676:	4b11      	ldr	r3, [pc, #68]	; (80016bc <MX_I2C1_Init+0x74>)
 8001678:	2200      	movs	r2, #0
 800167a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800167c:	4b0f      	ldr	r3, [pc, #60]	; (80016bc <MX_I2C1_Init+0x74>)
 800167e:	2200      	movs	r2, #0
 8001680:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001682:	480e      	ldr	r0, [pc, #56]	; (80016bc <MX_I2C1_Init+0x74>)
 8001684:	f000 fe2e 	bl	80022e4 <HAL_I2C_Init>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800168e:	f000 f8e9 	bl	8001864 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001692:	2100      	movs	r1, #0
 8001694:	4809      	ldr	r0, [pc, #36]	; (80016bc <MX_I2C1_Init+0x74>)
 8001696:	f000 feb4 	bl	8002402 <HAL_I2CEx_ConfigAnalogFilter>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d001      	beq.n	80016a4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80016a0:	f000 f8e0 	bl	8001864 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80016a4:	2100      	movs	r1, #0
 80016a6:	4805      	ldr	r0, [pc, #20]	; (80016bc <MX_I2C1_Init+0x74>)
 80016a8:	f000 fef6 	bl	8002498 <HAL_I2CEx_ConfigDigitalFilter>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80016b2:	f000 f8d7 	bl	8001864 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80016b6:	bf00      	nop
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	2000006c 	.word	0x2000006c
 80016c0:	40005400 	.word	0x40005400
 80016c4:	00602173 	.word	0x00602173

080016c8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80016cc:	4b1b      	ldr	r3, [pc, #108]	; (800173c <MX_SPI1_Init+0x74>)
 80016ce:	4a1c      	ldr	r2, [pc, #112]	; (8001740 <MX_SPI1_Init+0x78>)
 80016d0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80016d2:	4b1a      	ldr	r3, [pc, #104]	; (800173c <MX_SPI1_Init+0x74>)
 80016d4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80016d8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80016da:	4b18      	ldr	r3, [pc, #96]	; (800173c <MX_SPI1_Init+0x74>)
 80016dc:	2200      	movs	r2, #0
 80016de:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80016e0:	4b16      	ldr	r3, [pc, #88]	; (800173c <MX_SPI1_Init+0x74>)
 80016e2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80016e6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80016e8:	4b14      	ldr	r3, [pc, #80]	; (800173c <MX_SPI1_Init+0x74>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016ee:	4b13      	ldr	r3, [pc, #76]	; (800173c <MX_SPI1_Init+0x74>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80016f4:	4b11      	ldr	r3, [pc, #68]	; (800173c <MX_SPI1_Init+0x74>)
 80016f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016fa:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80016fc:	4b0f      	ldr	r3, [pc, #60]	; (800173c <MX_SPI1_Init+0x74>)
 80016fe:	2210      	movs	r2, #16
 8001700:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001702:	4b0e      	ldr	r3, [pc, #56]	; (800173c <MX_SPI1_Init+0x74>)
 8001704:	2200      	movs	r2, #0
 8001706:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001708:	4b0c      	ldr	r3, [pc, #48]	; (800173c <MX_SPI1_Init+0x74>)
 800170a:	2200      	movs	r2, #0
 800170c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800170e:	4b0b      	ldr	r3, [pc, #44]	; (800173c <MX_SPI1_Init+0x74>)
 8001710:	2200      	movs	r2, #0
 8001712:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001714:	4b09      	ldr	r3, [pc, #36]	; (800173c <MX_SPI1_Init+0x74>)
 8001716:	2207      	movs	r2, #7
 8001718:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800171a:	4b08      	ldr	r3, [pc, #32]	; (800173c <MX_SPI1_Init+0x74>)
 800171c:	2200      	movs	r2, #0
 800171e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001720:	4b06      	ldr	r3, [pc, #24]	; (800173c <MX_SPI1_Init+0x74>)
 8001722:	2208      	movs	r2, #8
 8001724:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001726:	4805      	ldr	r0, [pc, #20]	; (800173c <MX_SPI1_Init+0x74>)
 8001728:	f001 ff58 	bl	80035dc <HAL_SPI_Init>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d001      	beq.n	8001736 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001732:	f000 f897 	bl	8001864 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001736:	bf00      	nop
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	20000150 	.word	0x20000150
 8001740:	40013000 	.word	0x40013000

08001744 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001748:	4b14      	ldr	r3, [pc, #80]	; (800179c <MX_USART1_UART_Init+0x58>)
 800174a:	4a15      	ldr	r2, [pc, #84]	; (80017a0 <MX_USART1_UART_Init+0x5c>)
 800174c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800174e:	4b13      	ldr	r3, [pc, #76]	; (800179c <MX_USART1_UART_Init+0x58>)
 8001750:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001754:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001756:	4b11      	ldr	r3, [pc, #68]	; (800179c <MX_USART1_UART_Init+0x58>)
 8001758:	2200      	movs	r2, #0
 800175a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800175c:	4b0f      	ldr	r3, [pc, #60]	; (800179c <MX_USART1_UART_Init+0x58>)
 800175e:	2200      	movs	r2, #0
 8001760:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001762:	4b0e      	ldr	r3, [pc, #56]	; (800179c <MX_USART1_UART_Init+0x58>)
 8001764:	2200      	movs	r2, #0
 8001766:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001768:	4b0c      	ldr	r3, [pc, #48]	; (800179c <MX_USART1_UART_Init+0x58>)
 800176a:	220c      	movs	r2, #12
 800176c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800176e:	4b0b      	ldr	r3, [pc, #44]	; (800179c <MX_USART1_UART_Init+0x58>)
 8001770:	2200      	movs	r2, #0
 8001772:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001774:	4b09      	ldr	r3, [pc, #36]	; (800179c <MX_USART1_UART_Init+0x58>)
 8001776:	2200      	movs	r2, #0
 8001778:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800177a:	4b08      	ldr	r3, [pc, #32]	; (800179c <MX_USART1_UART_Init+0x58>)
 800177c:	2200      	movs	r2, #0
 800177e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001780:	4b06      	ldr	r3, [pc, #24]	; (800179c <MX_USART1_UART_Init+0x58>)
 8001782:	2200      	movs	r2, #0
 8001784:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001786:	4805      	ldr	r0, [pc, #20]	; (800179c <MX_USART1_UART_Init+0x58>)
 8001788:	f002 fa9a 	bl	8003cc0 <HAL_UART_Init>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d001      	beq.n	8001796 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001792:	f000 f867 	bl	8001864 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001796:	bf00      	nop
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	200000c8 	.word	0x200000c8
 80017a0:	40013800 	.word	0x40013800

080017a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b088      	sub	sp, #32
 80017a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017aa:	f107 030c 	add.w	r3, r7, #12
 80017ae:	2200      	movs	r2, #0
 80017b0:	601a      	str	r2, [r3, #0]
 80017b2:	605a      	str	r2, [r3, #4]
 80017b4:	609a      	str	r2, [r3, #8]
 80017b6:	60da      	str	r2, [r3, #12]
 80017b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ba:	4b28      	ldr	r3, [pc, #160]	; (800185c <MX_GPIO_Init+0xb8>)
 80017bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017be:	4a27      	ldr	r2, [pc, #156]	; (800185c <MX_GPIO_Init+0xb8>)
 80017c0:	f043 0301 	orr.w	r3, r3, #1
 80017c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017c6:	4b25      	ldr	r3, [pc, #148]	; (800185c <MX_GPIO_Init+0xb8>)
 80017c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ca:	f003 0301 	and.w	r3, r3, #1
 80017ce:	60bb      	str	r3, [r7, #8]
 80017d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017d2:	4b22      	ldr	r3, [pc, #136]	; (800185c <MX_GPIO_Init+0xb8>)
 80017d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017d6:	4a21      	ldr	r2, [pc, #132]	; (800185c <MX_GPIO_Init+0xb8>)
 80017d8:	f043 0302 	orr.w	r3, r3, #2
 80017dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017de:	4b1f      	ldr	r3, [pc, #124]	; (800185c <MX_GPIO_Init+0xb8>)
 80017e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017e2:	f003 0302 	and.w	r3, r3, #2
 80017e6:	607b      	str	r3, [r7, #4]
 80017e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 80017ea:	2200      	movs	r2, #0
 80017ec:	210c      	movs	r1, #12
 80017ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017f2:	f000 fd5f 	bl	80022b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 80017f6:	2200      	movs	r2, #0
 80017f8:	2119      	movs	r1, #25
 80017fa:	4819      	ldr	r0, [pc, #100]	; (8001860 <MX_GPIO_Init+0xbc>)
 80017fc:	f000 fd5a 	bl	80022b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001800:	230c      	movs	r3, #12
 8001802:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001804:	2301      	movs	r3, #1
 8001806:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001808:	2300      	movs	r3, #0
 800180a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800180c:	2300      	movs	r3, #0
 800180e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001810:	f107 030c 	add.w	r3, r7, #12
 8001814:	4619      	mov	r1, r3
 8001816:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800181a:	f000 fbd9 	bl	8001fd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800181e:	23c0      	movs	r3, #192	; 0xc0
 8001820:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001822:	2300      	movs	r3, #0
 8001824:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001826:	2301      	movs	r3, #1
 8001828:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800182a:	f107 030c 	add.w	r3, r7, #12
 800182e:	4619      	mov	r1, r3
 8001830:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001834:	f000 fbcc 	bl	8001fd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB3 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4;
 8001838:	2319      	movs	r3, #25
 800183a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800183c:	2301      	movs	r3, #1
 800183e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001840:	2300      	movs	r3, #0
 8001842:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001844:	2300      	movs	r3, #0
 8001846:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001848:	f107 030c 	add.w	r3, r7, #12
 800184c:	4619      	mov	r1, r3
 800184e:	4804      	ldr	r0, [pc, #16]	; (8001860 <MX_GPIO_Init+0xbc>)
 8001850:	f000 fbbe 	bl	8001fd0 <HAL_GPIO_Init>

}
 8001854:	bf00      	nop
 8001856:	3720      	adds	r7, #32
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	40021000 	.word	0x40021000
 8001860:	48000400 	.word	0x48000400

08001864 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001868:	b672      	cpsid	i
}
 800186a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800186c:	e7fe      	b.n	800186c <Error_Handler+0x8>
	...

08001870 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001870:	b480      	push	{r7}
 8001872:	b083      	sub	sp, #12
 8001874:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001876:	4b0f      	ldr	r3, [pc, #60]	; (80018b4 <HAL_MspInit+0x44>)
 8001878:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800187a:	4a0e      	ldr	r2, [pc, #56]	; (80018b4 <HAL_MspInit+0x44>)
 800187c:	f043 0301 	orr.w	r3, r3, #1
 8001880:	6613      	str	r3, [r2, #96]	; 0x60
 8001882:	4b0c      	ldr	r3, [pc, #48]	; (80018b4 <HAL_MspInit+0x44>)
 8001884:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001886:	f003 0301 	and.w	r3, r3, #1
 800188a:	607b      	str	r3, [r7, #4]
 800188c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800188e:	4b09      	ldr	r3, [pc, #36]	; (80018b4 <HAL_MspInit+0x44>)
 8001890:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001892:	4a08      	ldr	r2, [pc, #32]	; (80018b4 <HAL_MspInit+0x44>)
 8001894:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001898:	6593      	str	r3, [r2, #88]	; 0x58
 800189a:	4b06      	ldr	r3, [pc, #24]	; (80018b4 <HAL_MspInit+0x44>)
 800189c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800189e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018a2:	603b      	str	r3, [r7, #0]
 80018a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018a6:	bf00      	nop
 80018a8:	370c      	adds	r7, #12
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop
 80018b4:	40021000 	.word	0x40021000

080018b8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b08a      	sub	sp, #40	; 0x28
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018c0:	f107 0314 	add.w	r3, r7, #20
 80018c4:	2200      	movs	r2, #0
 80018c6:	601a      	str	r2, [r3, #0]
 80018c8:	605a      	str	r2, [r3, #4]
 80018ca:	609a      	str	r2, [r3, #8]
 80018cc:	60da      	str	r2, [r3, #12]
 80018ce:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a17      	ldr	r2, [pc, #92]	; (8001934 <HAL_I2C_MspInit+0x7c>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d127      	bne.n	800192a <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018da:	4b17      	ldr	r3, [pc, #92]	; (8001938 <HAL_I2C_MspInit+0x80>)
 80018dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018de:	4a16      	ldr	r2, [pc, #88]	; (8001938 <HAL_I2C_MspInit+0x80>)
 80018e0:	f043 0302 	orr.w	r3, r3, #2
 80018e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018e6:	4b14      	ldr	r3, [pc, #80]	; (8001938 <HAL_I2C_MspInit+0x80>)
 80018e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ea:	f003 0302 	and.w	r3, r3, #2
 80018ee:	613b      	str	r3, [r7, #16]
 80018f0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80018f2:	23c0      	movs	r3, #192	; 0xc0
 80018f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018f6:	2312      	movs	r3, #18
 80018f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018fa:	2301      	movs	r3, #1
 80018fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018fe:	2303      	movs	r3, #3
 8001900:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001902:	2304      	movs	r3, #4
 8001904:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001906:	f107 0314 	add.w	r3, r7, #20
 800190a:	4619      	mov	r1, r3
 800190c:	480b      	ldr	r0, [pc, #44]	; (800193c <HAL_I2C_MspInit+0x84>)
 800190e:	f000 fb5f 	bl	8001fd0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001912:	4b09      	ldr	r3, [pc, #36]	; (8001938 <HAL_I2C_MspInit+0x80>)
 8001914:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001916:	4a08      	ldr	r2, [pc, #32]	; (8001938 <HAL_I2C_MspInit+0x80>)
 8001918:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800191c:	6593      	str	r3, [r2, #88]	; 0x58
 800191e:	4b06      	ldr	r3, [pc, #24]	; (8001938 <HAL_I2C_MspInit+0x80>)
 8001920:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001922:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001926:	60fb      	str	r3, [r7, #12]
 8001928:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800192a:	bf00      	nop
 800192c:	3728      	adds	r7, #40	; 0x28
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	40005400 	.word	0x40005400
 8001938:	40021000 	.word	0x40021000
 800193c:	48000400 	.word	0x48000400

08001940 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b08a      	sub	sp, #40	; 0x28
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001948:	f107 0314 	add.w	r3, r7, #20
 800194c:	2200      	movs	r2, #0
 800194e:	601a      	str	r2, [r3, #0]
 8001950:	605a      	str	r2, [r3, #4]
 8001952:	609a      	str	r2, [r3, #8]
 8001954:	60da      	str	r2, [r3, #12]
 8001956:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a18      	ldr	r2, [pc, #96]	; (80019c0 <HAL_SPI_MspInit+0x80>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d129      	bne.n	80019b6 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001962:	4b18      	ldr	r3, [pc, #96]	; (80019c4 <HAL_SPI_MspInit+0x84>)
 8001964:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001966:	4a17      	ldr	r2, [pc, #92]	; (80019c4 <HAL_SPI_MspInit+0x84>)
 8001968:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800196c:	6613      	str	r3, [r2, #96]	; 0x60
 800196e:	4b15      	ldr	r3, [pc, #84]	; (80019c4 <HAL_SPI_MspInit+0x84>)
 8001970:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001972:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001976:	613b      	str	r3, [r7, #16]
 8001978:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800197a:	4b12      	ldr	r3, [pc, #72]	; (80019c4 <HAL_SPI_MspInit+0x84>)
 800197c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800197e:	4a11      	ldr	r2, [pc, #68]	; (80019c4 <HAL_SPI_MspInit+0x84>)
 8001980:	f043 0301 	orr.w	r3, r3, #1
 8001984:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001986:	4b0f      	ldr	r3, [pc, #60]	; (80019c4 <HAL_SPI_MspInit+0x84>)
 8001988:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800198a:	f003 0301 	and.w	r3, r3, #1
 800198e:	60fb      	str	r3, [r7, #12]
 8001990:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA11     ------> SPI1_MISO
    PA12     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_12;
 8001992:	f641 0302 	movw	r3, #6146	; 0x1802
 8001996:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001998:	2302      	movs	r3, #2
 800199a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199c:	2300      	movs	r3, #0
 800199e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019a0:	2303      	movs	r3, #3
 80019a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80019a4:	2305      	movs	r3, #5
 80019a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019a8:	f107 0314 	add.w	r3, r7, #20
 80019ac:	4619      	mov	r1, r3
 80019ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019b2:	f000 fb0d 	bl	8001fd0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80019b6:	bf00      	nop
 80019b8:	3728      	adds	r7, #40	; 0x28
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	40013000 	.word	0x40013000
 80019c4:	40021000 	.word	0x40021000

080019c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b08a      	sub	sp, #40	; 0x28
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019d0:	f107 0314 	add.w	r3, r7, #20
 80019d4:	2200      	movs	r2, #0
 80019d6:	601a      	str	r2, [r3, #0]
 80019d8:	605a      	str	r2, [r3, #4]
 80019da:	609a      	str	r2, [r3, #8]
 80019dc:	60da      	str	r2, [r3, #12]
 80019de:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a1c      	ldr	r2, [pc, #112]	; (8001a58 <HAL_UART_MspInit+0x90>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d131      	bne.n	8001a4e <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80019ea:	4b1c      	ldr	r3, [pc, #112]	; (8001a5c <HAL_UART_MspInit+0x94>)
 80019ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019ee:	4a1b      	ldr	r2, [pc, #108]	; (8001a5c <HAL_UART_MspInit+0x94>)
 80019f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019f4:	6613      	str	r3, [r2, #96]	; 0x60
 80019f6:	4b19      	ldr	r3, [pc, #100]	; (8001a5c <HAL_UART_MspInit+0x94>)
 80019f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019fe:	613b      	str	r3, [r7, #16]
 8001a00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a02:	4b16      	ldr	r3, [pc, #88]	; (8001a5c <HAL_UART_MspInit+0x94>)
 8001a04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a06:	4a15      	ldr	r2, [pc, #84]	; (8001a5c <HAL_UART_MspInit+0x94>)
 8001a08:	f043 0301 	orr.w	r3, r3, #1
 8001a0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a0e:	4b13      	ldr	r3, [pc, #76]	; (8001a5c <HAL_UART_MspInit+0x94>)
 8001a10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a12:	f003 0301 	and.w	r3, r3, #1
 8001a16:	60fb      	str	r3, [r7, #12]
 8001a18:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001a1a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001a1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a20:	2302      	movs	r3, #2
 8001a22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a24:	2300      	movs	r3, #0
 8001a26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a28:	2303      	movs	r3, #3
 8001a2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001a2c:	2307      	movs	r3, #7
 8001a2e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a30:	f107 0314 	add.w	r3, r7, #20
 8001a34:	4619      	mov	r1, r3
 8001a36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a3a:	f000 fac9 	bl	8001fd0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001a3e:	2200      	movs	r2, #0
 8001a40:	2100      	movs	r1, #0
 8001a42:	2025      	movs	r0, #37	; 0x25
 8001a44:	f000 fa0f 	bl	8001e66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001a48:	2025      	movs	r0, #37	; 0x25
 8001a4a:	f000 fa28 	bl	8001e9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001a4e:	bf00      	nop
 8001a50:	3728      	adds	r7, #40	; 0x28
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	40013800 	.word	0x40013800
 8001a5c:	40021000 	.word	0x40021000

08001a60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a64:	e7fe      	b.n	8001a64 <NMI_Handler+0x4>

08001a66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a66:	b480      	push	{r7}
 8001a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a6a:	e7fe      	b.n	8001a6a <HardFault_Handler+0x4>

08001a6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a70:	e7fe      	b.n	8001a70 <MemManage_Handler+0x4>

08001a72 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a72:	b480      	push	{r7}
 8001a74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a76:	e7fe      	b.n	8001a76 <BusFault_Handler+0x4>

08001a78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a7c:	e7fe      	b.n	8001a7c <UsageFault_Handler+0x4>

08001a7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a7e:	b480      	push	{r7}
 8001a80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a82:	bf00      	nop
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr

08001a8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a90:	bf00      	nop
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr

08001a9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a9a:	b480      	push	{r7}
 8001a9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a9e:	bf00      	nop
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr

08001aa8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001aac:	f000 f8bc 	bl	8001c28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ab0:	bf00      	nop
 8001ab2:	bd80      	pop	{r7, pc}

08001ab4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001ab8:	4802      	ldr	r0, [pc, #8]	; (8001ac4 <USART1_IRQHandler+0x10>)
 8001aba:	f002 f94f 	bl	8003d5c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001abe:	bf00      	nop
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	200000c8 	.word	0x200000c8

08001ac8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001acc:	4b15      	ldr	r3, [pc, #84]	; (8001b24 <SystemInit+0x5c>)
 8001ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ad2:	4a14      	ldr	r2, [pc, #80]	; (8001b24 <SystemInit+0x5c>)
 8001ad4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ad8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001adc:	4b12      	ldr	r3, [pc, #72]	; (8001b28 <SystemInit+0x60>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a11      	ldr	r2, [pc, #68]	; (8001b28 <SystemInit+0x60>)
 8001ae2:	f043 0301 	orr.w	r3, r3, #1
 8001ae6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001ae8:	4b0f      	ldr	r3, [pc, #60]	; (8001b28 <SystemInit+0x60>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001aee:	4b0e      	ldr	r3, [pc, #56]	; (8001b28 <SystemInit+0x60>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a0d      	ldr	r2, [pc, #52]	; (8001b28 <SystemInit+0x60>)
 8001af4:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001af8:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001afc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001afe:	4b0a      	ldr	r3, [pc, #40]	; (8001b28 <SystemInit+0x60>)
 8001b00:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001b04:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001b06:	4b08      	ldr	r3, [pc, #32]	; (8001b28 <SystemInit+0x60>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a07      	ldr	r2, [pc, #28]	; (8001b28 <SystemInit+0x60>)
 8001b0c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b10:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001b12:	4b05      	ldr	r3, [pc, #20]	; (8001b28 <SystemInit+0x60>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	619a      	str	r2, [r3, #24]
}
 8001b18:	bf00      	nop
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr
 8001b22:	bf00      	nop
 8001b24:	e000ed00 	.word	0xe000ed00
 8001b28:	40021000 	.word	0x40021000

08001b2c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001b2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b64 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b30:	f7ff ffca 	bl	8001ac8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001b34:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001b36:	e003      	b.n	8001b40 <LoopCopyDataInit>

08001b38 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001b38:	4b0b      	ldr	r3, [pc, #44]	; (8001b68 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001b3a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001b3c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001b3e:	3104      	adds	r1, #4

08001b40 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001b40:	480a      	ldr	r0, [pc, #40]	; (8001b6c <LoopForever+0xa>)
	ldr	r3, =_edata
 8001b42:	4b0b      	ldr	r3, [pc, #44]	; (8001b70 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001b44:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001b46:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001b48:	d3f6      	bcc.n	8001b38 <CopyDataInit>
	ldr	r2, =_sbss
 8001b4a:	4a0a      	ldr	r2, [pc, #40]	; (8001b74 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001b4c:	e002      	b.n	8001b54 <LoopFillZerobss>

08001b4e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001b4e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001b50:	f842 3b04 	str.w	r3, [r2], #4

08001b54 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001b54:	4b08      	ldr	r3, [pc, #32]	; (8001b78 <LoopForever+0x16>)
	cmp	r2, r3
 8001b56:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001b58:	d3f9      	bcc.n	8001b4e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b5a:	f002 ff25 	bl	80049a8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001b5e:	f7ff fc43 	bl	80013e8 <main>

08001b62 <LoopForever>:

LoopForever:
    b LoopForever
 8001b62:	e7fe      	b.n	8001b62 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001b64:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 8001b68:	08004ce4 	.word	0x08004ce4
	ldr	r0, =_sdata
 8001b6c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001b70:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 8001b74:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 8001b78:	200001f0 	.word	0x200001f0

08001b7c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001b7c:	e7fe      	b.n	8001b7c <ADC1_2_IRQHandler>

08001b7e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b7e:	b580      	push	{r7, lr}
 8001b80:	b082      	sub	sp, #8
 8001b82:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001b84:	2300      	movs	r3, #0
 8001b86:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b88:	2003      	movs	r0, #3
 8001b8a:	f000 f961 	bl	8001e50 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b8e:	2000      	movs	r0, #0
 8001b90:	f000 f80e 	bl	8001bb0 <HAL_InitTick>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d002      	beq.n	8001ba0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	71fb      	strb	r3, [r7, #7]
 8001b9e:	e001      	b.n	8001ba4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001ba0:	f7ff fe66 	bl	8001870 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001ba4:	79fb      	ldrb	r3, [r7, #7]
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	3708      	adds	r7, #8
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
	...

08001bb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b084      	sub	sp, #16
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001bbc:	4b17      	ldr	r3, [pc, #92]	; (8001c1c <HAL_InitTick+0x6c>)
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d023      	beq.n	8001c0c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001bc4:	4b16      	ldr	r3, [pc, #88]	; (8001c20 <HAL_InitTick+0x70>)
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	4b14      	ldr	r3, [pc, #80]	; (8001c1c <HAL_InitTick+0x6c>)
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	4619      	mov	r1, r3
 8001bce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f000 f96d 	bl	8001eba <HAL_SYSTICK_Config>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d10f      	bne.n	8001c06 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2b0f      	cmp	r3, #15
 8001bea:	d809      	bhi.n	8001c00 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bec:	2200      	movs	r2, #0
 8001bee:	6879      	ldr	r1, [r7, #4]
 8001bf0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001bf4:	f000 f937 	bl	8001e66 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001bf8:	4a0a      	ldr	r2, [pc, #40]	; (8001c24 <HAL_InitTick+0x74>)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6013      	str	r3, [r2, #0]
 8001bfe:	e007      	b.n	8001c10 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001c00:	2301      	movs	r3, #1
 8001c02:	73fb      	strb	r3, [r7, #15]
 8001c04:	e004      	b.n	8001c10 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	73fb      	strb	r3, [r7, #15]
 8001c0a:	e001      	b.n	8001c10 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001c10:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	3710      	adds	r7, #16
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	2000000c 	.word	0x2000000c
 8001c20:	20000004 	.word	0x20000004
 8001c24:	20000008 	.word	0x20000008

08001c28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c2c:	4b06      	ldr	r3, [pc, #24]	; (8001c48 <HAL_IncTick+0x20>)
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	461a      	mov	r2, r3
 8001c32:	4b06      	ldr	r3, [pc, #24]	; (8001c4c <HAL_IncTick+0x24>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4413      	add	r3, r2
 8001c38:	4a04      	ldr	r2, [pc, #16]	; (8001c4c <HAL_IncTick+0x24>)
 8001c3a:	6013      	str	r3, [r2, #0]
}
 8001c3c:	bf00      	nop
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr
 8001c46:	bf00      	nop
 8001c48:	2000000c 	.word	0x2000000c
 8001c4c:	200001ec 	.word	0x200001ec

08001c50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
  return uwTick;
 8001c54:	4b03      	ldr	r3, [pc, #12]	; (8001c64 <HAL_GetTick+0x14>)
 8001c56:	681b      	ldr	r3, [r3, #0]
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr
 8001c62:	bf00      	nop
 8001c64:	200001ec 	.word	0x200001ec

08001c68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b084      	sub	sp, #16
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c70:	f7ff ffee 	bl	8001c50 <HAL_GetTick>
 8001c74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001c80:	d005      	beq.n	8001c8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001c82:	4b0a      	ldr	r3, [pc, #40]	; (8001cac <HAL_Delay+0x44>)
 8001c84:	781b      	ldrb	r3, [r3, #0]
 8001c86:	461a      	mov	r2, r3
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	4413      	add	r3, r2
 8001c8c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c8e:	bf00      	nop
 8001c90:	f7ff ffde 	bl	8001c50 <HAL_GetTick>
 8001c94:	4602      	mov	r2, r0
 8001c96:	68bb      	ldr	r3, [r7, #8]
 8001c98:	1ad3      	subs	r3, r2, r3
 8001c9a:	68fa      	ldr	r2, [r7, #12]
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d8f7      	bhi.n	8001c90 <HAL_Delay+0x28>
  {
  }
}
 8001ca0:	bf00      	nop
 8001ca2:	bf00      	nop
 8001ca4:	3710      	adds	r7, #16
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	2000000c 	.word	0x2000000c

08001cb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b085      	sub	sp, #20
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	f003 0307 	and.w	r3, r3, #7
 8001cbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cc0:	4b0c      	ldr	r3, [pc, #48]	; (8001cf4 <__NVIC_SetPriorityGrouping+0x44>)
 8001cc2:	68db      	ldr	r3, [r3, #12]
 8001cc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cc6:	68ba      	ldr	r2, [r7, #8]
 8001cc8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ccc:	4013      	ands	r3, r2
 8001cce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cd8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001cdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ce0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ce2:	4a04      	ldr	r2, [pc, #16]	; (8001cf4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	60d3      	str	r3, [r2, #12]
}
 8001ce8:	bf00      	nop
 8001cea:	3714      	adds	r7, #20
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr
 8001cf4:	e000ed00 	.word	0xe000ed00

08001cf8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cfc:	4b04      	ldr	r3, [pc, #16]	; (8001d10 <__NVIC_GetPriorityGrouping+0x18>)
 8001cfe:	68db      	ldr	r3, [r3, #12]
 8001d00:	0a1b      	lsrs	r3, r3, #8
 8001d02:	f003 0307 	and.w	r3, r3, #7
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr
 8001d10:	e000ed00 	.word	0xe000ed00

08001d14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b083      	sub	sp, #12
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	db0b      	blt.n	8001d3e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d26:	79fb      	ldrb	r3, [r7, #7]
 8001d28:	f003 021f 	and.w	r2, r3, #31
 8001d2c:	4907      	ldr	r1, [pc, #28]	; (8001d4c <__NVIC_EnableIRQ+0x38>)
 8001d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d32:	095b      	lsrs	r3, r3, #5
 8001d34:	2001      	movs	r0, #1
 8001d36:	fa00 f202 	lsl.w	r2, r0, r2
 8001d3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d3e:	bf00      	nop
 8001d40:	370c      	adds	r7, #12
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr
 8001d4a:	bf00      	nop
 8001d4c:	e000e100 	.word	0xe000e100

08001d50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	4603      	mov	r3, r0
 8001d58:	6039      	str	r1, [r7, #0]
 8001d5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	db0a      	blt.n	8001d7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	b2da      	uxtb	r2, r3
 8001d68:	490c      	ldr	r1, [pc, #48]	; (8001d9c <__NVIC_SetPriority+0x4c>)
 8001d6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d6e:	0112      	lsls	r2, r2, #4
 8001d70:	b2d2      	uxtb	r2, r2
 8001d72:	440b      	add	r3, r1
 8001d74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d78:	e00a      	b.n	8001d90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	b2da      	uxtb	r2, r3
 8001d7e:	4908      	ldr	r1, [pc, #32]	; (8001da0 <__NVIC_SetPriority+0x50>)
 8001d80:	79fb      	ldrb	r3, [r7, #7]
 8001d82:	f003 030f 	and.w	r3, r3, #15
 8001d86:	3b04      	subs	r3, #4
 8001d88:	0112      	lsls	r2, r2, #4
 8001d8a:	b2d2      	uxtb	r2, r2
 8001d8c:	440b      	add	r3, r1
 8001d8e:	761a      	strb	r2, [r3, #24]
}
 8001d90:	bf00      	nop
 8001d92:	370c      	adds	r7, #12
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr
 8001d9c:	e000e100 	.word	0xe000e100
 8001da0:	e000ed00 	.word	0xe000ed00

08001da4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b089      	sub	sp, #36	; 0x24
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	60f8      	str	r0, [r7, #12]
 8001dac:	60b9      	str	r1, [r7, #8]
 8001dae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	f003 0307 	and.w	r3, r3, #7
 8001db6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001db8:	69fb      	ldr	r3, [r7, #28]
 8001dba:	f1c3 0307 	rsb	r3, r3, #7
 8001dbe:	2b04      	cmp	r3, #4
 8001dc0:	bf28      	it	cs
 8001dc2:	2304      	movcs	r3, #4
 8001dc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	3304      	adds	r3, #4
 8001dca:	2b06      	cmp	r3, #6
 8001dcc:	d902      	bls.n	8001dd4 <NVIC_EncodePriority+0x30>
 8001dce:	69fb      	ldr	r3, [r7, #28]
 8001dd0:	3b03      	subs	r3, #3
 8001dd2:	e000      	b.n	8001dd6 <NVIC_EncodePriority+0x32>
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dd8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001ddc:	69bb      	ldr	r3, [r7, #24]
 8001dde:	fa02 f303 	lsl.w	r3, r2, r3
 8001de2:	43da      	mvns	r2, r3
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	401a      	ands	r2, r3
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001dec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	fa01 f303 	lsl.w	r3, r1, r3
 8001df6:	43d9      	mvns	r1, r3
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dfc:	4313      	orrs	r3, r2
         );
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	3724      	adds	r7, #36	; 0x24
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr
	...

08001e0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b082      	sub	sp, #8
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	3b01      	subs	r3, #1
 8001e18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e1c:	d301      	bcc.n	8001e22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e00f      	b.n	8001e42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e22:	4a0a      	ldr	r2, [pc, #40]	; (8001e4c <SysTick_Config+0x40>)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	3b01      	subs	r3, #1
 8001e28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e2a:	210f      	movs	r1, #15
 8001e2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e30:	f7ff ff8e 	bl	8001d50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e34:	4b05      	ldr	r3, [pc, #20]	; (8001e4c <SysTick_Config+0x40>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e3a:	4b04      	ldr	r3, [pc, #16]	; (8001e4c <SysTick_Config+0x40>)
 8001e3c:	2207      	movs	r2, #7
 8001e3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e40:	2300      	movs	r3, #0
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	3708      	adds	r7, #8
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	e000e010 	.word	0xe000e010

08001e50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b082      	sub	sp, #8
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e58:	6878      	ldr	r0, [r7, #4]
 8001e5a:	f7ff ff29 	bl	8001cb0 <__NVIC_SetPriorityGrouping>
}
 8001e5e:	bf00      	nop
 8001e60:	3708      	adds	r7, #8
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}

08001e66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e66:	b580      	push	{r7, lr}
 8001e68:	b086      	sub	sp, #24
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	60b9      	str	r1, [r7, #8]
 8001e70:	607a      	str	r2, [r7, #4]
 8001e72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001e74:	2300      	movs	r3, #0
 8001e76:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001e78:	f7ff ff3e 	bl	8001cf8 <__NVIC_GetPriorityGrouping>
 8001e7c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e7e:	687a      	ldr	r2, [r7, #4]
 8001e80:	68b9      	ldr	r1, [r7, #8]
 8001e82:	6978      	ldr	r0, [r7, #20]
 8001e84:	f7ff ff8e 	bl	8001da4 <NVIC_EncodePriority>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e8e:	4611      	mov	r1, r2
 8001e90:	4618      	mov	r0, r3
 8001e92:	f7ff ff5d 	bl	8001d50 <__NVIC_SetPriority>
}
 8001e96:	bf00      	nop
 8001e98:	3718      	adds	r7, #24
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}

08001e9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e9e:	b580      	push	{r7, lr}
 8001ea0:	b082      	sub	sp, #8
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ea8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eac:	4618      	mov	r0, r3
 8001eae:	f7ff ff31 	bl	8001d14 <__NVIC_EnableIRQ>
}
 8001eb2:	bf00      	nop
 8001eb4:	3708      	adds	r7, #8
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}

08001eba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001eba:	b580      	push	{r7, lr}
 8001ebc:	b082      	sub	sp, #8
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	f7ff ffa2 	bl	8001e0c <SysTick_Config>
 8001ec8:	4603      	mov	r3, r0
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3708      	adds	r7, #8
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}

08001ed2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001ed2:	b480      	push	{r7}
 8001ed4:	b085      	sub	sp, #20
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001eda:	2300      	movs	r3, #0
 8001edc:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	2b02      	cmp	r3, #2
 8001ee8:	d008      	beq.n	8001efc <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2204      	movs	r2, #4
 8001eee:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e022      	b.n	8001f42 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f022 020e 	bic.w	r2, r2, #14
 8001f0a:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f022 0201 	bic.w	r2, r2, #1
 8001f1a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f20:	f003 021c 	and.w	r2, r3, #28
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f28:	2101      	movs	r1, #1
 8001f2a:	fa01 f202 	lsl.w	r2, r1, r2
 8001f2e:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2201      	movs	r2, #1
 8001f34:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001f40:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	3714      	adds	r7, #20
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr

08001f4e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f4e:	b580      	push	{r7, lr}
 8001f50:	b084      	sub	sp, #16
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f56:	2300      	movs	r3, #0
 8001f58:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	2b02      	cmp	r3, #2
 8001f64:	d005      	beq.n	8001f72 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2204      	movs	r2, #4
 8001f6a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	73fb      	strb	r3, [r7, #15]
 8001f70:	e029      	b.n	8001fc6 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f022 020e 	bic.w	r2, r2, #14
 8001f80:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	681a      	ldr	r2, [r3, #0]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f022 0201 	bic.w	r2, r2, #1
 8001f90:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f96:	f003 021c 	and.w	r2, r3, #28
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f9e:	2101      	movs	r1, #1
 8001fa0:	fa01 f202 	lsl.w	r2, r1, r2
 8001fa4:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2201      	movs	r2, #1
 8001faa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d003      	beq.n	8001fc6 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fc2:	6878      	ldr	r0, [r7, #4]
 8001fc4:	4798      	blx	r3
    }
  }
  return status;
 8001fc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	3710      	adds	r7, #16
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}

08001fd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b087      	sub	sp, #28
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
 8001fd8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fde:	e14e      	b.n	800227e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	2101      	movs	r1, #1
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	fa01 f303 	lsl.w	r3, r1, r3
 8001fec:	4013      	ands	r3, r2
 8001fee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	f000 8140 	beq.w	8002278 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	2b01      	cmp	r3, #1
 8001ffe:	d00b      	beq.n	8002018 <HAL_GPIO_Init+0x48>
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	2b02      	cmp	r3, #2
 8002006:	d007      	beq.n	8002018 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800200c:	2b11      	cmp	r3, #17
 800200e:	d003      	beq.n	8002018 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	2b12      	cmp	r3, #18
 8002016:	d130      	bne.n	800207a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	005b      	lsls	r3, r3, #1
 8002022:	2203      	movs	r2, #3
 8002024:	fa02 f303 	lsl.w	r3, r2, r3
 8002028:	43db      	mvns	r3, r3
 800202a:	693a      	ldr	r2, [r7, #16]
 800202c:	4013      	ands	r3, r2
 800202e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	68da      	ldr	r2, [r3, #12]
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	005b      	lsls	r3, r3, #1
 8002038:	fa02 f303 	lsl.w	r3, r2, r3
 800203c:	693a      	ldr	r2, [r7, #16]
 800203e:	4313      	orrs	r3, r2
 8002040:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	693a      	ldr	r2, [r7, #16]
 8002046:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800204e:	2201      	movs	r2, #1
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	fa02 f303 	lsl.w	r3, r2, r3
 8002056:	43db      	mvns	r3, r3
 8002058:	693a      	ldr	r2, [r7, #16]
 800205a:	4013      	ands	r3, r2
 800205c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	091b      	lsrs	r3, r3, #4
 8002064:	f003 0201 	and.w	r2, r3, #1
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	fa02 f303 	lsl.w	r3, r2, r3
 800206e:	693a      	ldr	r2, [r7, #16]
 8002070:	4313      	orrs	r3, r2
 8002072:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	693a      	ldr	r2, [r7, #16]
 8002078:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	68db      	ldr	r3, [r3, #12]
 800207e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	005b      	lsls	r3, r3, #1
 8002084:	2203      	movs	r2, #3
 8002086:	fa02 f303 	lsl.w	r3, r2, r3
 800208a:	43db      	mvns	r3, r3
 800208c:	693a      	ldr	r2, [r7, #16]
 800208e:	4013      	ands	r3, r2
 8002090:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	689a      	ldr	r2, [r3, #8]
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	005b      	lsls	r3, r3, #1
 800209a:	fa02 f303 	lsl.w	r3, r2, r3
 800209e:	693a      	ldr	r2, [r7, #16]
 80020a0:	4313      	orrs	r3, r2
 80020a2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	693a      	ldr	r2, [r7, #16]
 80020a8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	2b02      	cmp	r3, #2
 80020b0:	d003      	beq.n	80020ba <HAL_GPIO_Init+0xea>
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	2b12      	cmp	r3, #18
 80020b8:	d123      	bne.n	8002102 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	08da      	lsrs	r2, r3, #3
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	3208      	adds	r2, #8
 80020c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	f003 0307 	and.w	r3, r3, #7
 80020ce:	009b      	lsls	r3, r3, #2
 80020d0:	220f      	movs	r2, #15
 80020d2:	fa02 f303 	lsl.w	r3, r2, r3
 80020d6:	43db      	mvns	r3, r3
 80020d8:	693a      	ldr	r2, [r7, #16]
 80020da:	4013      	ands	r3, r2
 80020dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	691a      	ldr	r2, [r3, #16]
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	f003 0307 	and.w	r3, r3, #7
 80020e8:	009b      	lsls	r3, r3, #2
 80020ea:	fa02 f303 	lsl.w	r3, r2, r3
 80020ee:	693a      	ldr	r2, [r7, #16]
 80020f0:	4313      	orrs	r3, r2
 80020f2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	08da      	lsrs	r2, r3, #3
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	3208      	adds	r2, #8
 80020fc:	6939      	ldr	r1, [r7, #16]
 80020fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	005b      	lsls	r3, r3, #1
 800210c:	2203      	movs	r2, #3
 800210e:	fa02 f303 	lsl.w	r3, r2, r3
 8002112:	43db      	mvns	r3, r3
 8002114:	693a      	ldr	r2, [r7, #16]
 8002116:	4013      	ands	r3, r2
 8002118:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	f003 0203 	and.w	r2, r3, #3
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	005b      	lsls	r3, r3, #1
 8002126:	fa02 f303 	lsl.w	r3, r2, r3
 800212a:	693a      	ldr	r2, [r7, #16]
 800212c:	4313      	orrs	r3, r2
 800212e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	693a      	ldr	r2, [r7, #16]
 8002134:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800213e:	2b00      	cmp	r3, #0
 8002140:	f000 809a 	beq.w	8002278 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002144:	4b55      	ldr	r3, [pc, #340]	; (800229c <HAL_GPIO_Init+0x2cc>)
 8002146:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002148:	4a54      	ldr	r2, [pc, #336]	; (800229c <HAL_GPIO_Init+0x2cc>)
 800214a:	f043 0301 	orr.w	r3, r3, #1
 800214e:	6613      	str	r3, [r2, #96]	; 0x60
 8002150:	4b52      	ldr	r3, [pc, #328]	; (800229c <HAL_GPIO_Init+0x2cc>)
 8002152:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002154:	f003 0301 	and.w	r3, r3, #1
 8002158:	60bb      	str	r3, [r7, #8]
 800215a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800215c:	4a50      	ldr	r2, [pc, #320]	; (80022a0 <HAL_GPIO_Init+0x2d0>)
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	089b      	lsrs	r3, r3, #2
 8002162:	3302      	adds	r3, #2
 8002164:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002168:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	f003 0303 	and.w	r3, r3, #3
 8002170:	009b      	lsls	r3, r3, #2
 8002172:	220f      	movs	r2, #15
 8002174:	fa02 f303 	lsl.w	r3, r2, r3
 8002178:	43db      	mvns	r3, r3
 800217a:	693a      	ldr	r2, [r7, #16]
 800217c:	4013      	ands	r3, r2
 800217e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002186:	d013      	beq.n	80021b0 <HAL_GPIO_Init+0x1e0>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	4a46      	ldr	r2, [pc, #280]	; (80022a4 <HAL_GPIO_Init+0x2d4>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d00d      	beq.n	80021ac <HAL_GPIO_Init+0x1dc>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	4a45      	ldr	r2, [pc, #276]	; (80022a8 <HAL_GPIO_Init+0x2d8>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d007      	beq.n	80021a8 <HAL_GPIO_Init+0x1d8>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	4a44      	ldr	r2, [pc, #272]	; (80022ac <HAL_GPIO_Init+0x2dc>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d101      	bne.n	80021a4 <HAL_GPIO_Init+0x1d4>
 80021a0:	2303      	movs	r3, #3
 80021a2:	e006      	b.n	80021b2 <HAL_GPIO_Init+0x1e2>
 80021a4:	2307      	movs	r3, #7
 80021a6:	e004      	b.n	80021b2 <HAL_GPIO_Init+0x1e2>
 80021a8:	2302      	movs	r3, #2
 80021aa:	e002      	b.n	80021b2 <HAL_GPIO_Init+0x1e2>
 80021ac:	2301      	movs	r3, #1
 80021ae:	e000      	b.n	80021b2 <HAL_GPIO_Init+0x1e2>
 80021b0:	2300      	movs	r3, #0
 80021b2:	697a      	ldr	r2, [r7, #20]
 80021b4:	f002 0203 	and.w	r2, r2, #3
 80021b8:	0092      	lsls	r2, r2, #2
 80021ba:	4093      	lsls	r3, r2
 80021bc:	693a      	ldr	r2, [r7, #16]
 80021be:	4313      	orrs	r3, r2
 80021c0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80021c2:	4937      	ldr	r1, [pc, #220]	; (80022a0 <HAL_GPIO_Init+0x2d0>)
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	089b      	lsrs	r3, r3, #2
 80021c8:	3302      	adds	r3, #2
 80021ca:	693a      	ldr	r2, [r7, #16]
 80021cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80021d0:	4b37      	ldr	r3, [pc, #220]	; (80022b0 <HAL_GPIO_Init+0x2e0>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	43db      	mvns	r3, r3
 80021da:	693a      	ldr	r2, [r7, #16]
 80021dc:	4013      	ands	r3, r2
 80021de:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d003      	beq.n	80021f4 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80021ec:	693a      	ldr	r2, [r7, #16]
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	4313      	orrs	r3, r2
 80021f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80021f4:	4a2e      	ldr	r2, [pc, #184]	; (80022b0 <HAL_GPIO_Init+0x2e0>)
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80021fa:	4b2d      	ldr	r3, [pc, #180]	; (80022b0 <HAL_GPIO_Init+0x2e0>)
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	43db      	mvns	r3, r3
 8002204:	693a      	ldr	r2, [r7, #16]
 8002206:	4013      	ands	r3, r2
 8002208:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002212:	2b00      	cmp	r3, #0
 8002214:	d003      	beq.n	800221e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002216:	693a      	ldr	r2, [r7, #16]
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	4313      	orrs	r3, r2
 800221c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800221e:	4a24      	ldr	r2, [pc, #144]	; (80022b0 <HAL_GPIO_Init+0x2e0>)
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002224:	4b22      	ldr	r3, [pc, #136]	; (80022b0 <HAL_GPIO_Init+0x2e0>)
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	43db      	mvns	r3, r3
 800222e:	693a      	ldr	r2, [r7, #16]
 8002230:	4013      	ands	r3, r2
 8002232:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800223c:	2b00      	cmp	r3, #0
 800223e:	d003      	beq.n	8002248 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002240:	693a      	ldr	r2, [r7, #16]
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	4313      	orrs	r3, r2
 8002246:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002248:	4a19      	ldr	r2, [pc, #100]	; (80022b0 <HAL_GPIO_Init+0x2e0>)
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800224e:	4b18      	ldr	r3, [pc, #96]	; (80022b0 <HAL_GPIO_Init+0x2e0>)
 8002250:	68db      	ldr	r3, [r3, #12]
 8002252:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	43db      	mvns	r3, r3
 8002258:	693a      	ldr	r2, [r7, #16]
 800225a:	4013      	ands	r3, r2
 800225c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002266:	2b00      	cmp	r3, #0
 8002268:	d003      	beq.n	8002272 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800226a:	693a      	ldr	r2, [r7, #16]
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	4313      	orrs	r3, r2
 8002270:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002272:	4a0f      	ldr	r2, [pc, #60]	; (80022b0 <HAL_GPIO_Init+0x2e0>)
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	3301      	adds	r3, #1
 800227c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	fa22 f303 	lsr.w	r3, r2, r3
 8002288:	2b00      	cmp	r3, #0
 800228a:	f47f aea9 	bne.w	8001fe0 <HAL_GPIO_Init+0x10>
  }
}
 800228e:	bf00      	nop
 8002290:	bf00      	nop
 8002292:	371c      	adds	r7, #28
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr
 800229c:	40021000 	.word	0x40021000
 80022a0:	40010000 	.word	0x40010000
 80022a4:	48000400 	.word	0x48000400
 80022a8:	48000800 	.word	0x48000800
 80022ac:	48000c00 	.word	0x48000c00
 80022b0:	40010400 	.word	0x40010400

080022b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b083      	sub	sp, #12
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
 80022bc:	460b      	mov	r3, r1
 80022be:	807b      	strh	r3, [r7, #2]
 80022c0:	4613      	mov	r3, r2
 80022c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80022c4:	787b      	ldrb	r3, [r7, #1]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d003      	beq.n	80022d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80022ca:	887a      	ldrh	r2, [r7, #2]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80022d0:	e002      	b.n	80022d8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80022d2:	887a      	ldrh	r2, [r7, #2]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80022d8:	bf00      	nop
 80022da:	370c      	adds	r7, #12
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr

080022e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b082      	sub	sp, #8
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d101      	bne.n	80022f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e081      	b.n	80023fa <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d106      	bne.n	8002310 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2200      	movs	r2, #0
 8002306:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f7ff fad4 	bl	80018b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2224      	movs	r2, #36	; 0x24
 8002314:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f022 0201 	bic.w	r2, r2, #1
 8002326:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	685a      	ldr	r2, [r3, #4]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002334:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	689a      	ldr	r2, [r3, #8]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002344:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	68db      	ldr	r3, [r3, #12]
 800234a:	2b01      	cmp	r3, #1
 800234c:	d107      	bne.n	800235e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	689a      	ldr	r2, [r3, #8]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800235a:	609a      	str	r2, [r3, #8]
 800235c:	e006      	b.n	800236c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	689a      	ldr	r2, [r3, #8]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800236a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	68db      	ldr	r3, [r3, #12]
 8002370:	2b02      	cmp	r3, #2
 8002372:	d104      	bne.n	800237e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800237c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	687a      	ldr	r2, [r7, #4]
 8002386:	6812      	ldr	r2, [r2, #0]
 8002388:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800238c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002390:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	68da      	ldr	r2, [r3, #12]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80023a0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	691a      	ldr	r2, [r3, #16]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	695b      	ldr	r3, [r3, #20]
 80023aa:	ea42 0103 	orr.w	r1, r2, r3
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	699b      	ldr	r3, [r3, #24]
 80023b2:	021a      	lsls	r2, r3, #8
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	430a      	orrs	r2, r1
 80023ba:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	69d9      	ldr	r1, [r3, #28]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6a1a      	ldr	r2, [r3, #32]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	430a      	orrs	r2, r1
 80023ca:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f042 0201 	orr.w	r2, r2, #1
 80023da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2200      	movs	r2, #0
 80023e0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2220      	movs	r2, #32
 80023e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2200      	movs	r2, #0
 80023ee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2200      	movs	r2, #0
 80023f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80023f8:	2300      	movs	r3, #0
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3708      	adds	r7, #8
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}

08002402 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002402:	b480      	push	{r7}
 8002404:	b083      	sub	sp, #12
 8002406:	af00      	add	r7, sp, #0
 8002408:	6078      	str	r0, [r7, #4]
 800240a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002412:	b2db      	uxtb	r3, r3
 8002414:	2b20      	cmp	r3, #32
 8002416:	d138      	bne.n	800248a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800241e:	2b01      	cmp	r3, #1
 8002420:	d101      	bne.n	8002426 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002422:	2302      	movs	r3, #2
 8002424:	e032      	b.n	800248c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2201      	movs	r2, #1
 800242a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2224      	movs	r2, #36	; 0x24
 8002432:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f022 0201 	bic.w	r2, r2, #1
 8002444:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002454:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	6819      	ldr	r1, [r3, #0]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	683a      	ldr	r2, [r7, #0]
 8002462:	430a      	orrs	r2, r1
 8002464:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f042 0201 	orr.w	r2, r2, #1
 8002474:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2220      	movs	r2, #32
 800247a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2200      	movs	r2, #0
 8002482:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002486:	2300      	movs	r3, #0
 8002488:	e000      	b.n	800248c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800248a:	2302      	movs	r3, #2
  }
}
 800248c:	4618      	mov	r0, r3
 800248e:	370c      	adds	r7, #12
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr

08002498 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002498:	b480      	push	{r7}
 800249a:	b085      	sub	sp, #20
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
 80024a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	2b20      	cmp	r3, #32
 80024ac:	d139      	bne.n	8002522 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	d101      	bne.n	80024bc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80024b8:	2302      	movs	r3, #2
 80024ba:	e033      	b.n	8002524 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2201      	movs	r2, #1
 80024c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2224      	movs	r2, #36	; 0x24
 80024c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f022 0201 	bic.w	r2, r2, #1
 80024da:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80024ea:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	021b      	lsls	r3, r3, #8
 80024f0:	68fa      	ldr	r2, [r7, #12]
 80024f2:	4313      	orrs	r3, r2
 80024f4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	68fa      	ldr	r2, [r7, #12]
 80024fc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	681a      	ldr	r2, [r3, #0]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f042 0201 	orr.w	r2, r2, #1
 800250c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2220      	movs	r2, #32
 8002512:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2200      	movs	r2, #0
 800251a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800251e:	2300      	movs	r3, #0
 8002520:	e000      	b.n	8002524 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002522:	2302      	movs	r3, #2
  }
}
 8002524:	4618      	mov	r0, r3
 8002526:	3714      	adds	r7, #20
 8002528:	46bd      	mov	sp, r7
 800252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252e:	4770      	bx	lr

08002530 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002530:	b480      	push	{r7}
 8002532:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002534:	4b04      	ldr	r3, [pc, #16]	; (8002548 <HAL_PWREx_GetVoltageRange+0x18>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800253c:	4618      	mov	r0, r3
 800253e:	46bd      	mov	sp, r7
 8002540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002544:	4770      	bx	lr
 8002546:	bf00      	nop
 8002548:	40007000 	.word	0x40007000

0800254c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800254c:	b480      	push	{r7}
 800254e:	b085      	sub	sp, #20
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800255a:	d130      	bne.n	80025be <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800255c:	4b23      	ldr	r3, [pc, #140]	; (80025ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002564:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002568:	d038      	beq.n	80025dc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800256a:	4b20      	ldr	r3, [pc, #128]	; (80025ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002572:	4a1e      	ldr	r2, [pc, #120]	; (80025ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002574:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002578:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800257a:	4b1d      	ldr	r3, [pc, #116]	; (80025f0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	2232      	movs	r2, #50	; 0x32
 8002580:	fb02 f303 	mul.w	r3, r2, r3
 8002584:	4a1b      	ldr	r2, [pc, #108]	; (80025f4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002586:	fba2 2303 	umull	r2, r3, r2, r3
 800258a:	0c9b      	lsrs	r3, r3, #18
 800258c:	3301      	adds	r3, #1
 800258e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002590:	e002      	b.n	8002598 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	3b01      	subs	r3, #1
 8002596:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002598:	4b14      	ldr	r3, [pc, #80]	; (80025ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800259a:	695b      	ldr	r3, [r3, #20]
 800259c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025a4:	d102      	bne.n	80025ac <HAL_PWREx_ControlVoltageScaling+0x60>
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d1f2      	bne.n	8002592 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80025ac:	4b0f      	ldr	r3, [pc, #60]	; (80025ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025ae:	695b      	ldr	r3, [r3, #20]
 80025b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025b8:	d110      	bne.n	80025dc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80025ba:	2303      	movs	r3, #3
 80025bc:	e00f      	b.n	80025de <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80025be:	4b0b      	ldr	r3, [pc, #44]	; (80025ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80025c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025ca:	d007      	beq.n	80025dc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80025cc:	4b07      	ldr	r3, [pc, #28]	; (80025ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80025d4:	4a05      	ldr	r2, [pc, #20]	; (80025ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80025da:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80025dc:	2300      	movs	r3, #0
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3714      	adds	r7, #20
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr
 80025ea:	bf00      	nop
 80025ec:	40007000 	.word	0x40007000
 80025f0:	20000004 	.word	0x20000004
 80025f4:	431bde83 	.word	0x431bde83

080025f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b08a      	sub	sp, #40	; 0x28
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d102      	bne.n	800260c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	f000 bc56 	b.w	8002eb8 <HAL_RCC_OscConfig+0x8c0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800260c:	4ba1      	ldr	r3, [pc, #644]	; (8002894 <HAL_RCC_OscConfig+0x29c>)
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	f003 030c 	and.w	r3, r3, #12
 8002614:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002616:	4b9f      	ldr	r3, [pc, #636]	; (8002894 <HAL_RCC_OscConfig+0x29c>)
 8002618:	68db      	ldr	r3, [r3, #12]
 800261a:	f003 0303 	and.w	r3, r3, #3
 800261e:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f003 0310 	and.w	r3, r3, #16
 8002628:	2b00      	cmp	r3, #0
 800262a:	f000 80e6 	beq.w	80027fa <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800262e:	6a3b      	ldr	r3, [r7, #32]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d007      	beq.n	8002644 <HAL_RCC_OscConfig+0x4c>
 8002634:	6a3b      	ldr	r3, [r7, #32]
 8002636:	2b0c      	cmp	r3, #12
 8002638:	f040 808d 	bne.w	8002756 <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800263c:	69fb      	ldr	r3, [r7, #28]
 800263e:	2b01      	cmp	r3, #1
 8002640:	f040 8089 	bne.w	8002756 <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002644:	4b93      	ldr	r3, [pc, #588]	; (8002894 <HAL_RCC_OscConfig+0x29c>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f003 0302 	and.w	r3, r3, #2
 800264c:	2b00      	cmp	r3, #0
 800264e:	d006      	beq.n	800265e <HAL_RCC_OscConfig+0x66>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	69db      	ldr	r3, [r3, #28]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d102      	bne.n	800265e <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	f000 bc2d 	b.w	8002eb8 <HAL_RCC_OscConfig+0x8c0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002662:	4b8c      	ldr	r3, [pc, #560]	; (8002894 <HAL_RCC_OscConfig+0x29c>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 0308 	and.w	r3, r3, #8
 800266a:	2b00      	cmp	r3, #0
 800266c:	d004      	beq.n	8002678 <HAL_RCC_OscConfig+0x80>
 800266e:	4b89      	ldr	r3, [pc, #548]	; (8002894 <HAL_RCC_OscConfig+0x29c>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002676:	e005      	b.n	8002684 <HAL_RCC_OscConfig+0x8c>
 8002678:	4b86      	ldr	r3, [pc, #536]	; (8002894 <HAL_RCC_OscConfig+0x29c>)
 800267a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800267e:	091b      	lsrs	r3, r3, #4
 8002680:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002684:	4293      	cmp	r3, r2
 8002686:	d224      	bcs.n	80026d2 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800268c:	4618      	mov	r0, r3
 800268e:	f000 fdbf 	bl	8003210 <RCC_SetFlashLatencyFromMSIRange>
 8002692:	4603      	mov	r3, r0
 8002694:	2b00      	cmp	r3, #0
 8002696:	d002      	beq.n	800269e <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	f000 bc0d 	b.w	8002eb8 <HAL_RCC_OscConfig+0x8c0>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800269e:	4b7d      	ldr	r3, [pc, #500]	; (8002894 <HAL_RCC_OscConfig+0x29c>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a7c      	ldr	r2, [pc, #496]	; (8002894 <HAL_RCC_OscConfig+0x29c>)
 80026a4:	f043 0308 	orr.w	r3, r3, #8
 80026a8:	6013      	str	r3, [r2, #0]
 80026aa:	4b7a      	ldr	r3, [pc, #488]	; (8002894 <HAL_RCC_OscConfig+0x29c>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b6:	4977      	ldr	r1, [pc, #476]	; (8002894 <HAL_RCC_OscConfig+0x29c>)
 80026b8:	4313      	orrs	r3, r2
 80026ba:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026bc:	4b75      	ldr	r3, [pc, #468]	; (8002894 <HAL_RCC_OscConfig+0x29c>)
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6a1b      	ldr	r3, [r3, #32]
 80026c8:	021b      	lsls	r3, r3, #8
 80026ca:	4972      	ldr	r1, [pc, #456]	; (8002894 <HAL_RCC_OscConfig+0x29c>)
 80026cc:	4313      	orrs	r3, r2
 80026ce:	604b      	str	r3, [r1, #4]
 80026d0:	e025      	b.n	800271e <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80026d2:	4b70      	ldr	r3, [pc, #448]	; (8002894 <HAL_RCC_OscConfig+0x29c>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a6f      	ldr	r2, [pc, #444]	; (8002894 <HAL_RCC_OscConfig+0x29c>)
 80026d8:	f043 0308 	orr.w	r3, r3, #8
 80026dc:	6013      	str	r3, [r2, #0]
 80026de:	4b6d      	ldr	r3, [pc, #436]	; (8002894 <HAL_RCC_OscConfig+0x29c>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ea:	496a      	ldr	r1, [pc, #424]	; (8002894 <HAL_RCC_OscConfig+0x29c>)
 80026ec:	4313      	orrs	r3, r2
 80026ee:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026f0:	4b68      	ldr	r3, [pc, #416]	; (8002894 <HAL_RCC_OscConfig+0x29c>)
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6a1b      	ldr	r3, [r3, #32]
 80026fc:	021b      	lsls	r3, r3, #8
 80026fe:	4965      	ldr	r1, [pc, #404]	; (8002894 <HAL_RCC_OscConfig+0x29c>)
 8002700:	4313      	orrs	r3, r2
 8002702:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002704:	6a3b      	ldr	r3, [r7, #32]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d109      	bne.n	800271e <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800270e:	4618      	mov	r0, r3
 8002710:	f000 fd7e 	bl	8003210 <RCC_SetFlashLatencyFromMSIRange>
 8002714:	4603      	mov	r3, r0
 8002716:	2b00      	cmp	r3, #0
 8002718:	d001      	beq.n	800271e <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e3cc      	b.n	8002eb8 <HAL_RCC_OscConfig+0x8c0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800271e:	f000 fcb3 	bl	8003088 <HAL_RCC_GetSysClockFreq>
 8002722:	4602      	mov	r2, r0
 8002724:	4b5b      	ldr	r3, [pc, #364]	; (8002894 <HAL_RCC_OscConfig+0x29c>)
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	091b      	lsrs	r3, r3, #4
 800272a:	f003 030f 	and.w	r3, r3, #15
 800272e:	495a      	ldr	r1, [pc, #360]	; (8002898 <HAL_RCC_OscConfig+0x2a0>)
 8002730:	5ccb      	ldrb	r3, [r1, r3]
 8002732:	f003 031f 	and.w	r3, r3, #31
 8002736:	fa22 f303 	lsr.w	r3, r2, r3
 800273a:	4a58      	ldr	r2, [pc, #352]	; (800289c <HAL_RCC_OscConfig+0x2a4>)
 800273c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800273e:	4b58      	ldr	r3, [pc, #352]	; (80028a0 <HAL_RCC_OscConfig+0x2a8>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4618      	mov	r0, r3
 8002744:	f7ff fa34 	bl	8001bb0 <HAL_InitTick>
 8002748:	4603      	mov	r3, r0
 800274a:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 800274c:	7dfb      	ldrb	r3, [r7, #23]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d052      	beq.n	80027f8 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8002752:	7dfb      	ldrb	r3, [r7, #23]
 8002754:	e3b0      	b.n	8002eb8 <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	69db      	ldr	r3, [r3, #28]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d032      	beq.n	80027c4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800275e:	4b4d      	ldr	r3, [pc, #308]	; (8002894 <HAL_RCC_OscConfig+0x29c>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a4c      	ldr	r2, [pc, #304]	; (8002894 <HAL_RCC_OscConfig+0x29c>)
 8002764:	f043 0301 	orr.w	r3, r3, #1
 8002768:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800276a:	f7ff fa71 	bl	8001c50 <HAL_GetTick>
 800276e:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002770:	e008      	b.n	8002784 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002772:	f7ff fa6d 	bl	8001c50 <HAL_GetTick>
 8002776:	4602      	mov	r2, r0
 8002778:	69bb      	ldr	r3, [r7, #24]
 800277a:	1ad3      	subs	r3, r2, r3
 800277c:	2b02      	cmp	r3, #2
 800277e:	d901      	bls.n	8002784 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8002780:	2303      	movs	r3, #3
 8002782:	e399      	b.n	8002eb8 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002784:	4b43      	ldr	r3, [pc, #268]	; (8002894 <HAL_RCC_OscConfig+0x29c>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f003 0302 	and.w	r3, r3, #2
 800278c:	2b00      	cmp	r3, #0
 800278e:	d0f0      	beq.n	8002772 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002790:	4b40      	ldr	r3, [pc, #256]	; (8002894 <HAL_RCC_OscConfig+0x29c>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a3f      	ldr	r2, [pc, #252]	; (8002894 <HAL_RCC_OscConfig+0x29c>)
 8002796:	f043 0308 	orr.w	r3, r3, #8
 800279a:	6013      	str	r3, [r2, #0]
 800279c:	4b3d      	ldr	r3, [pc, #244]	; (8002894 <HAL_RCC_OscConfig+0x29c>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a8:	493a      	ldr	r1, [pc, #232]	; (8002894 <HAL_RCC_OscConfig+0x29c>)
 80027aa:	4313      	orrs	r3, r2
 80027ac:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80027ae:	4b39      	ldr	r3, [pc, #228]	; (8002894 <HAL_RCC_OscConfig+0x29c>)
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6a1b      	ldr	r3, [r3, #32]
 80027ba:	021b      	lsls	r3, r3, #8
 80027bc:	4935      	ldr	r1, [pc, #212]	; (8002894 <HAL_RCC_OscConfig+0x29c>)
 80027be:	4313      	orrs	r3, r2
 80027c0:	604b      	str	r3, [r1, #4]
 80027c2:	e01a      	b.n	80027fa <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80027c4:	4b33      	ldr	r3, [pc, #204]	; (8002894 <HAL_RCC_OscConfig+0x29c>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a32      	ldr	r2, [pc, #200]	; (8002894 <HAL_RCC_OscConfig+0x29c>)
 80027ca:	f023 0301 	bic.w	r3, r3, #1
 80027ce:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80027d0:	f7ff fa3e 	bl	8001c50 <HAL_GetTick>
 80027d4:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80027d6:	e008      	b.n	80027ea <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80027d8:	f7ff fa3a 	bl	8001c50 <HAL_GetTick>
 80027dc:	4602      	mov	r2, r0
 80027de:	69bb      	ldr	r3, [r7, #24]
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	2b02      	cmp	r3, #2
 80027e4:	d901      	bls.n	80027ea <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80027e6:	2303      	movs	r3, #3
 80027e8:	e366      	b.n	8002eb8 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80027ea:	4b2a      	ldr	r3, [pc, #168]	; (8002894 <HAL_RCC_OscConfig+0x29c>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 0302 	and.w	r3, r3, #2
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d1f0      	bne.n	80027d8 <HAL_RCC_OscConfig+0x1e0>
 80027f6:	e000      	b.n	80027fa <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80027f8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 0301 	and.w	r3, r3, #1
 8002802:	2b00      	cmp	r3, #0
 8002804:	d073      	beq.n	80028ee <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002806:	6a3b      	ldr	r3, [r7, #32]
 8002808:	2b08      	cmp	r3, #8
 800280a:	d005      	beq.n	8002818 <HAL_RCC_OscConfig+0x220>
 800280c:	6a3b      	ldr	r3, [r7, #32]
 800280e:	2b0c      	cmp	r3, #12
 8002810:	d10e      	bne.n	8002830 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002812:	69fb      	ldr	r3, [r7, #28]
 8002814:	2b03      	cmp	r3, #3
 8002816:	d10b      	bne.n	8002830 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002818:	4b1e      	ldr	r3, [pc, #120]	; (8002894 <HAL_RCC_OscConfig+0x29c>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002820:	2b00      	cmp	r3, #0
 8002822:	d063      	beq.n	80028ec <HAL_RCC_OscConfig+0x2f4>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d15f      	bne.n	80028ec <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 800282c:	2301      	movs	r3, #1
 800282e:	e343      	b.n	8002eb8 <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002838:	d106      	bne.n	8002848 <HAL_RCC_OscConfig+0x250>
 800283a:	4b16      	ldr	r3, [pc, #88]	; (8002894 <HAL_RCC_OscConfig+0x29c>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a15      	ldr	r2, [pc, #84]	; (8002894 <HAL_RCC_OscConfig+0x29c>)
 8002840:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002844:	6013      	str	r3, [r2, #0]
 8002846:	e01d      	b.n	8002884 <HAL_RCC_OscConfig+0x28c>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002850:	d10c      	bne.n	800286c <HAL_RCC_OscConfig+0x274>
 8002852:	4b10      	ldr	r3, [pc, #64]	; (8002894 <HAL_RCC_OscConfig+0x29c>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a0f      	ldr	r2, [pc, #60]	; (8002894 <HAL_RCC_OscConfig+0x29c>)
 8002858:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800285c:	6013      	str	r3, [r2, #0]
 800285e:	4b0d      	ldr	r3, [pc, #52]	; (8002894 <HAL_RCC_OscConfig+0x29c>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a0c      	ldr	r2, [pc, #48]	; (8002894 <HAL_RCC_OscConfig+0x29c>)
 8002864:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002868:	6013      	str	r3, [r2, #0]
 800286a:	e00b      	b.n	8002884 <HAL_RCC_OscConfig+0x28c>
 800286c:	4b09      	ldr	r3, [pc, #36]	; (8002894 <HAL_RCC_OscConfig+0x29c>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a08      	ldr	r2, [pc, #32]	; (8002894 <HAL_RCC_OscConfig+0x29c>)
 8002872:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002876:	6013      	str	r3, [r2, #0]
 8002878:	4b06      	ldr	r3, [pc, #24]	; (8002894 <HAL_RCC_OscConfig+0x29c>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a05      	ldr	r2, [pc, #20]	; (8002894 <HAL_RCC_OscConfig+0x29c>)
 800287e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002882:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d01b      	beq.n	80028c4 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800288c:	f7ff f9e0 	bl	8001c50 <HAL_GetTick>
 8002890:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002892:	e010      	b.n	80028b6 <HAL_RCC_OscConfig+0x2be>
 8002894:	40021000 	.word	0x40021000
 8002898:	08004c8c 	.word	0x08004c8c
 800289c:	20000004 	.word	0x20000004
 80028a0:	20000008 	.word	0x20000008
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028a4:	f7ff f9d4 	bl	8001c50 <HAL_GetTick>
 80028a8:	4602      	mov	r2, r0
 80028aa:	69bb      	ldr	r3, [r7, #24]
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	2b64      	cmp	r3, #100	; 0x64
 80028b0:	d901      	bls.n	80028b6 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 80028b2:	2303      	movs	r3, #3
 80028b4:	e300      	b.n	8002eb8 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028b6:	4ba0      	ldr	r3, [pc, #640]	; (8002b38 <HAL_RCC_OscConfig+0x540>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d0f0      	beq.n	80028a4 <HAL_RCC_OscConfig+0x2ac>
 80028c2:	e014      	b.n	80028ee <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028c4:	f7ff f9c4 	bl	8001c50 <HAL_GetTick>
 80028c8:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80028ca:	e008      	b.n	80028de <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028cc:	f7ff f9c0 	bl	8001c50 <HAL_GetTick>
 80028d0:	4602      	mov	r2, r0
 80028d2:	69bb      	ldr	r3, [r7, #24]
 80028d4:	1ad3      	subs	r3, r2, r3
 80028d6:	2b64      	cmp	r3, #100	; 0x64
 80028d8:	d901      	bls.n	80028de <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 80028da:	2303      	movs	r3, #3
 80028dc:	e2ec      	b.n	8002eb8 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80028de:	4b96      	ldr	r3, [pc, #600]	; (8002b38 <HAL_RCC_OscConfig+0x540>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d1f0      	bne.n	80028cc <HAL_RCC_OscConfig+0x2d4>
 80028ea:	e000      	b.n	80028ee <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 0302 	and.w	r3, r3, #2
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d060      	beq.n	80029bc <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80028fa:	6a3b      	ldr	r3, [r7, #32]
 80028fc:	2b04      	cmp	r3, #4
 80028fe:	d005      	beq.n	800290c <HAL_RCC_OscConfig+0x314>
 8002900:	6a3b      	ldr	r3, [r7, #32]
 8002902:	2b0c      	cmp	r3, #12
 8002904:	d119      	bne.n	800293a <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002906:	69fb      	ldr	r3, [r7, #28]
 8002908:	2b02      	cmp	r3, #2
 800290a:	d116      	bne.n	800293a <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800290c:	4b8a      	ldr	r3, [pc, #552]	; (8002b38 <HAL_RCC_OscConfig+0x540>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002914:	2b00      	cmp	r3, #0
 8002916:	d005      	beq.n	8002924 <HAL_RCC_OscConfig+0x32c>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d101      	bne.n	8002924 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	e2c9      	b.n	8002eb8 <HAL_RCC_OscConfig+0x8c0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002924:	4b84      	ldr	r3, [pc, #528]	; (8002b38 <HAL_RCC_OscConfig+0x540>)
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	691b      	ldr	r3, [r3, #16]
 8002930:	061b      	lsls	r3, r3, #24
 8002932:	4981      	ldr	r1, [pc, #516]	; (8002b38 <HAL_RCC_OscConfig+0x540>)
 8002934:	4313      	orrs	r3, r2
 8002936:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002938:	e040      	b.n	80029bc <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	68db      	ldr	r3, [r3, #12]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d023      	beq.n	800298a <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002942:	4b7d      	ldr	r3, [pc, #500]	; (8002b38 <HAL_RCC_OscConfig+0x540>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a7c      	ldr	r2, [pc, #496]	; (8002b38 <HAL_RCC_OscConfig+0x540>)
 8002948:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800294c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800294e:	f7ff f97f 	bl	8001c50 <HAL_GetTick>
 8002952:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002954:	e008      	b.n	8002968 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002956:	f7ff f97b 	bl	8001c50 <HAL_GetTick>
 800295a:	4602      	mov	r2, r0
 800295c:	69bb      	ldr	r3, [r7, #24]
 800295e:	1ad3      	subs	r3, r2, r3
 8002960:	2b02      	cmp	r3, #2
 8002962:	d901      	bls.n	8002968 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8002964:	2303      	movs	r3, #3
 8002966:	e2a7      	b.n	8002eb8 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002968:	4b73      	ldr	r3, [pc, #460]	; (8002b38 <HAL_RCC_OscConfig+0x540>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002970:	2b00      	cmp	r3, #0
 8002972:	d0f0      	beq.n	8002956 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002974:	4b70      	ldr	r3, [pc, #448]	; (8002b38 <HAL_RCC_OscConfig+0x540>)
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	691b      	ldr	r3, [r3, #16]
 8002980:	061b      	lsls	r3, r3, #24
 8002982:	496d      	ldr	r1, [pc, #436]	; (8002b38 <HAL_RCC_OscConfig+0x540>)
 8002984:	4313      	orrs	r3, r2
 8002986:	604b      	str	r3, [r1, #4]
 8002988:	e018      	b.n	80029bc <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800298a:	4b6b      	ldr	r3, [pc, #428]	; (8002b38 <HAL_RCC_OscConfig+0x540>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a6a      	ldr	r2, [pc, #424]	; (8002b38 <HAL_RCC_OscConfig+0x540>)
 8002990:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002994:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002996:	f7ff f95b 	bl	8001c50 <HAL_GetTick>
 800299a:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800299c:	e008      	b.n	80029b0 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800299e:	f7ff f957 	bl	8001c50 <HAL_GetTick>
 80029a2:	4602      	mov	r2, r0
 80029a4:	69bb      	ldr	r3, [r7, #24]
 80029a6:	1ad3      	subs	r3, r2, r3
 80029a8:	2b02      	cmp	r3, #2
 80029aa:	d901      	bls.n	80029b0 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 80029ac:	2303      	movs	r3, #3
 80029ae:	e283      	b.n	8002eb8 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80029b0:	4b61      	ldr	r3, [pc, #388]	; (8002b38 <HAL_RCC_OscConfig+0x540>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d1f0      	bne.n	800299e <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 0308 	and.w	r3, r3, #8
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d07f      	beq.n	8002ac8 <HAL_RCC_OscConfig+0x4d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	695b      	ldr	r3, [r3, #20]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d05f      	beq.n	8002a90 <HAL_RCC_OscConfig+0x498>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 80029d0:	4b59      	ldr	r3, [pc, #356]	; (8002b38 <HAL_RCC_OscConfig+0x540>)
 80029d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029d6:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	699a      	ldr	r2, [r3, #24]
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	f003 0310 	and.w	r3, r3, #16
 80029e2:	429a      	cmp	r2, r3
 80029e4:	d037      	beq.n	8002a56 <HAL_RCC_OscConfig+0x45e>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	f003 0302 	and.w	r3, r3, #2
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d006      	beq.n	80029fe <HAL_RCC_OscConfig+0x406>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d101      	bne.n	80029fe <HAL_RCC_OscConfig+0x406>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	e25c      	b.n	8002eb8 <HAL_RCC_OscConfig+0x8c0>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	f003 0301 	and.w	r3, r3, #1
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d01b      	beq.n	8002a40 <HAL_RCC_OscConfig+0x448>
        {
          __HAL_RCC_LSI_DISABLE();
 8002a08:	4b4b      	ldr	r3, [pc, #300]	; (8002b38 <HAL_RCC_OscConfig+0x540>)
 8002a0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a0e:	4a4a      	ldr	r2, [pc, #296]	; (8002b38 <HAL_RCC_OscConfig+0x540>)
 8002a10:	f023 0301 	bic.w	r3, r3, #1
 8002a14:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002a18:	f7ff f91a 	bl	8001c50 <HAL_GetTick>
 8002a1c:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a1e:	e008      	b.n	8002a32 <HAL_RCC_OscConfig+0x43a>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a20:	f7ff f916 	bl	8001c50 <HAL_GetTick>
 8002a24:	4602      	mov	r2, r0
 8002a26:	69bb      	ldr	r3, [r7, #24]
 8002a28:	1ad3      	subs	r3, r2, r3
 8002a2a:	2b11      	cmp	r3, #17
 8002a2c:	d901      	bls.n	8002a32 <HAL_RCC_OscConfig+0x43a>
            {
              return HAL_TIMEOUT;
 8002a2e:	2303      	movs	r3, #3
 8002a30:	e242      	b.n	8002eb8 <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a32:	4b41      	ldr	r3, [pc, #260]	; (8002b38 <HAL_RCC_OscConfig+0x540>)
 8002a34:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a38:	f003 0302 	and.w	r3, r3, #2
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d1ef      	bne.n	8002a20 <HAL_RCC_OscConfig+0x428>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8002a40:	4b3d      	ldr	r3, [pc, #244]	; (8002b38 <HAL_RCC_OscConfig+0x540>)
 8002a42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a46:	f023 0210 	bic.w	r2, r3, #16
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	699b      	ldr	r3, [r3, #24]
 8002a4e:	493a      	ldr	r1, [pc, #232]	; (8002b38 <HAL_RCC_OscConfig+0x540>)
 8002a50:	4313      	orrs	r3, r2
 8002a52:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a56:	4b38      	ldr	r3, [pc, #224]	; (8002b38 <HAL_RCC_OscConfig+0x540>)
 8002a58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a5c:	4a36      	ldr	r2, [pc, #216]	; (8002b38 <HAL_RCC_OscConfig+0x540>)
 8002a5e:	f043 0301 	orr.w	r3, r3, #1
 8002a62:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a66:	f7ff f8f3 	bl	8001c50 <HAL_GetTick>
 8002a6a:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a6c:	e008      	b.n	8002a80 <HAL_RCC_OscConfig+0x488>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a6e:	f7ff f8ef 	bl	8001c50 <HAL_GetTick>
 8002a72:	4602      	mov	r2, r0
 8002a74:	69bb      	ldr	r3, [r7, #24]
 8002a76:	1ad3      	subs	r3, r2, r3
 8002a78:	2b11      	cmp	r3, #17
 8002a7a:	d901      	bls.n	8002a80 <HAL_RCC_OscConfig+0x488>
        {
          return HAL_TIMEOUT;
 8002a7c:	2303      	movs	r3, #3
 8002a7e:	e21b      	b.n	8002eb8 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a80:	4b2d      	ldr	r3, [pc, #180]	; (8002b38 <HAL_RCC_OscConfig+0x540>)
 8002a82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a86:	f003 0302 	and.w	r3, r3, #2
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d0ef      	beq.n	8002a6e <HAL_RCC_OscConfig+0x476>
 8002a8e:	e01b      	b.n	8002ac8 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a90:	4b29      	ldr	r3, [pc, #164]	; (8002b38 <HAL_RCC_OscConfig+0x540>)
 8002a92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a96:	4a28      	ldr	r2, [pc, #160]	; (8002b38 <HAL_RCC_OscConfig+0x540>)
 8002a98:	f023 0301 	bic.w	r3, r3, #1
 8002a9c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aa0:	f7ff f8d6 	bl	8001c50 <HAL_GetTick>
 8002aa4:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002aa6:	e008      	b.n	8002aba <HAL_RCC_OscConfig+0x4c2>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002aa8:	f7ff f8d2 	bl	8001c50 <HAL_GetTick>
 8002aac:	4602      	mov	r2, r0
 8002aae:	69bb      	ldr	r3, [r7, #24]
 8002ab0:	1ad3      	subs	r3, r2, r3
 8002ab2:	2b11      	cmp	r3, #17
 8002ab4:	d901      	bls.n	8002aba <HAL_RCC_OscConfig+0x4c2>
        {
          return HAL_TIMEOUT;
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	e1fe      	b.n	8002eb8 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002aba:	4b1f      	ldr	r3, [pc, #124]	; (8002b38 <HAL_RCC_OscConfig+0x540>)
 8002abc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ac0:	f003 0302 	and.w	r3, r3, #2
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d1ef      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x4b0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 0304 	and.w	r3, r3, #4
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	f000 80c1 	beq.w	8002c58 <HAL_RCC_OscConfig+0x660>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002adc:	4b16      	ldr	r3, [pc, #88]	; (8002b38 <HAL_RCC_OscConfig+0x540>)
 8002ade:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ae0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d10e      	bne.n	8002b06 <HAL_RCC_OscConfig+0x50e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ae8:	4b13      	ldr	r3, [pc, #76]	; (8002b38 <HAL_RCC_OscConfig+0x540>)
 8002aea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aec:	4a12      	ldr	r2, [pc, #72]	; (8002b38 <HAL_RCC_OscConfig+0x540>)
 8002aee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002af2:	6593      	str	r3, [r2, #88]	; 0x58
 8002af4:	4b10      	ldr	r3, [pc, #64]	; (8002b38 <HAL_RCC_OscConfig+0x540>)
 8002af6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002af8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002afc:	60fb      	str	r3, [r7, #12]
 8002afe:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002b00:	2301      	movs	r3, #1
 8002b02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b06:	4b0d      	ldr	r3, [pc, #52]	; (8002b3c <HAL_RCC_OscConfig+0x544>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d11c      	bne.n	8002b4c <HAL_RCC_OscConfig+0x554>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b12:	4b0a      	ldr	r3, [pc, #40]	; (8002b3c <HAL_RCC_OscConfig+0x544>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a09      	ldr	r2, [pc, #36]	; (8002b3c <HAL_RCC_OscConfig+0x544>)
 8002b18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b1e:	f7ff f897 	bl	8001c50 <HAL_GetTick>
 8002b22:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b24:	e00c      	b.n	8002b40 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b26:	f7ff f893 	bl	8001c50 <HAL_GetTick>
 8002b2a:	4602      	mov	r2, r0
 8002b2c:	69bb      	ldr	r3, [r7, #24]
 8002b2e:	1ad3      	subs	r3, r2, r3
 8002b30:	2b02      	cmp	r3, #2
 8002b32:	d905      	bls.n	8002b40 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002b34:	2303      	movs	r3, #3
 8002b36:	e1bf      	b.n	8002eb8 <HAL_RCC_OscConfig+0x8c0>
 8002b38:	40021000 	.word	0x40021000
 8002b3c:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b40:	4bb1      	ldr	r3, [pc, #708]	; (8002e08 <HAL_RCC_OscConfig+0x810>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d0ec      	beq.n	8002b26 <HAL_RCC_OscConfig+0x52e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	f003 0301 	and.w	r3, r3, #1
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d02c      	beq.n	8002bb2 <HAL_RCC_OscConfig+0x5ba>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8002b58:	4bac      	ldr	r3, [pc, #688]	; (8002e0c <HAL_RCC_OscConfig+0x814>)
 8002b5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b5e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b6a:	49a8      	ldr	r1, [pc, #672]	; (8002e0c <HAL_RCC_OscConfig+0x814>)
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	f003 0304 	and.w	r3, r3, #4
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d010      	beq.n	8002ba0 <HAL_RCC_OscConfig+0x5a8>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002b7e:	4ba3      	ldr	r3, [pc, #652]	; (8002e0c <HAL_RCC_OscConfig+0x814>)
 8002b80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b84:	4aa1      	ldr	r2, [pc, #644]	; (8002e0c <HAL_RCC_OscConfig+0x814>)
 8002b86:	f043 0304 	orr.w	r3, r3, #4
 8002b8a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002b8e:	4b9f      	ldr	r3, [pc, #636]	; (8002e0c <HAL_RCC_OscConfig+0x814>)
 8002b90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b94:	4a9d      	ldr	r2, [pc, #628]	; (8002e0c <HAL_RCC_OscConfig+0x814>)
 8002b96:	f043 0301 	orr.w	r3, r3, #1
 8002b9a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b9e:	e018      	b.n	8002bd2 <HAL_RCC_OscConfig+0x5da>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002ba0:	4b9a      	ldr	r3, [pc, #616]	; (8002e0c <HAL_RCC_OscConfig+0x814>)
 8002ba2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ba6:	4a99      	ldr	r2, [pc, #612]	; (8002e0c <HAL_RCC_OscConfig+0x814>)
 8002ba8:	f043 0301 	orr.w	r3, r3, #1
 8002bac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002bb0:	e00f      	b.n	8002bd2 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002bb2:	4b96      	ldr	r3, [pc, #600]	; (8002e0c <HAL_RCC_OscConfig+0x814>)
 8002bb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bb8:	4a94      	ldr	r2, [pc, #592]	; (8002e0c <HAL_RCC_OscConfig+0x814>)
 8002bba:	f023 0301 	bic.w	r3, r3, #1
 8002bbe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002bc2:	4b92      	ldr	r3, [pc, #584]	; (8002e0c <HAL_RCC_OscConfig+0x814>)
 8002bc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bc8:	4a90      	ldr	r2, [pc, #576]	; (8002e0c <HAL_RCC_OscConfig+0x814>)
 8002bca:	f023 0304 	bic.w	r3, r3, #4
 8002bce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d016      	beq.n	8002c08 <HAL_RCC_OscConfig+0x610>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bda:	f7ff f839 	bl	8001c50 <HAL_GetTick>
 8002bde:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002be0:	e00a      	b.n	8002bf8 <HAL_RCC_OscConfig+0x600>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002be2:	f7ff f835 	bl	8001c50 <HAL_GetTick>
 8002be6:	4602      	mov	r2, r0
 8002be8:	69bb      	ldr	r3, [r7, #24]
 8002bea:	1ad3      	subs	r3, r2, r3
 8002bec:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d901      	bls.n	8002bf8 <HAL_RCC_OscConfig+0x600>
        {
          return HAL_TIMEOUT;
 8002bf4:	2303      	movs	r3, #3
 8002bf6:	e15f      	b.n	8002eb8 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002bf8:	4b84      	ldr	r3, [pc, #528]	; (8002e0c <HAL_RCC_OscConfig+0x814>)
 8002bfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bfe:	f003 0302 	and.w	r3, r3, #2
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d0ed      	beq.n	8002be2 <HAL_RCC_OscConfig+0x5ea>
 8002c06:	e01d      	b.n	8002c44 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c08:	f7ff f822 	bl	8001c50 <HAL_GetTick>
 8002c0c:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c0e:	e00a      	b.n	8002c26 <HAL_RCC_OscConfig+0x62e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c10:	f7ff f81e 	bl	8001c50 <HAL_GetTick>
 8002c14:	4602      	mov	r2, r0
 8002c16:	69bb      	ldr	r3, [r7, #24]
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d901      	bls.n	8002c26 <HAL_RCC_OscConfig+0x62e>
        {
          return HAL_TIMEOUT;
 8002c22:	2303      	movs	r3, #3
 8002c24:	e148      	b.n	8002eb8 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c26:	4b79      	ldr	r3, [pc, #484]	; (8002e0c <HAL_RCC_OscConfig+0x814>)
 8002c28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c2c:	f003 0302 	and.w	r3, r3, #2
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d1ed      	bne.n	8002c10 <HAL_RCC_OscConfig+0x618>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8002c34:	4b75      	ldr	r3, [pc, #468]	; (8002e0c <HAL_RCC_OscConfig+0x814>)
 8002c36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c3a:	4a74      	ldr	r2, [pc, #464]	; (8002e0c <HAL_RCC_OscConfig+0x814>)
 8002c3c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d105      	bne.n	8002c58 <HAL_RCC_OscConfig+0x660>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c4c:	4b6f      	ldr	r3, [pc, #444]	; (8002e0c <HAL_RCC_OscConfig+0x814>)
 8002c4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c50:	4a6e      	ldr	r2, [pc, #440]	; (8002e0c <HAL_RCC_OscConfig+0x814>)
 8002c52:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c56:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f003 0320 	and.w	r3, r3, #32
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d03c      	beq.n	8002cde <HAL_RCC_OscConfig+0x6e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d01c      	beq.n	8002ca6 <HAL_RCC_OscConfig+0x6ae>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002c6c:	4b67      	ldr	r3, [pc, #412]	; (8002e0c <HAL_RCC_OscConfig+0x814>)
 8002c6e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002c72:	4a66      	ldr	r2, [pc, #408]	; (8002e0c <HAL_RCC_OscConfig+0x814>)
 8002c74:	f043 0301 	orr.w	r3, r3, #1
 8002c78:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c7c:	f7fe ffe8 	bl	8001c50 <HAL_GetTick>
 8002c80:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002c82:	e008      	b.n	8002c96 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002c84:	f7fe ffe4 	bl	8001c50 <HAL_GetTick>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	69bb      	ldr	r3, [r7, #24]
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	2b02      	cmp	r3, #2
 8002c90:	d901      	bls.n	8002c96 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8002c92:	2303      	movs	r3, #3
 8002c94:	e110      	b.n	8002eb8 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002c96:	4b5d      	ldr	r3, [pc, #372]	; (8002e0c <HAL_RCC_OscConfig+0x814>)
 8002c98:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002c9c:	f003 0302 	and.w	r3, r3, #2
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d0ef      	beq.n	8002c84 <HAL_RCC_OscConfig+0x68c>
 8002ca4:	e01b      	b.n	8002cde <HAL_RCC_OscConfig+0x6e6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002ca6:	4b59      	ldr	r3, [pc, #356]	; (8002e0c <HAL_RCC_OscConfig+0x814>)
 8002ca8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002cac:	4a57      	ldr	r2, [pc, #348]	; (8002e0c <HAL_RCC_OscConfig+0x814>)
 8002cae:	f023 0301 	bic.w	r3, r3, #1
 8002cb2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cb6:	f7fe ffcb 	bl	8001c50 <HAL_GetTick>
 8002cba:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002cbc:	e008      	b.n	8002cd0 <HAL_RCC_OscConfig+0x6d8>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002cbe:	f7fe ffc7 	bl	8001c50 <HAL_GetTick>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	69bb      	ldr	r3, [r7, #24]
 8002cc6:	1ad3      	subs	r3, r2, r3
 8002cc8:	2b02      	cmp	r3, #2
 8002cca:	d901      	bls.n	8002cd0 <HAL_RCC_OscConfig+0x6d8>
        {
          return HAL_TIMEOUT;
 8002ccc:	2303      	movs	r3, #3
 8002cce:	e0f3      	b.n	8002eb8 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002cd0:	4b4e      	ldr	r3, [pc, #312]	; (8002e0c <HAL_RCC_OscConfig+0x814>)
 8002cd2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002cd6:	f003 0302 	and.w	r3, r3, #2
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d1ef      	bne.n	8002cbe <HAL_RCC_OscConfig+0x6c6>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	f000 80e7 	beq.w	8002eb6 <HAL_RCC_OscConfig+0x8be>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cec:	2b02      	cmp	r3, #2
 8002cee:	f040 80b7 	bne.w	8002e60 <HAL_RCC_OscConfig+0x868>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002cf2:	4b46      	ldr	r3, [pc, #280]	; (8002e0c <HAL_RCC_OscConfig+0x814>)
 8002cf4:	68db      	ldr	r3, [r3, #12]
 8002cf6:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cf8:	69fb      	ldr	r3, [r7, #28]
 8002cfa:	f003 0203 	and.w	r2, r3, #3
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d02:	429a      	cmp	r2, r3
 8002d04:	d124      	bne.n	8002d50 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d10:	3b01      	subs	r3, #1
 8002d12:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d11b      	bne.n	8002d50 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d18:	69fb      	ldr	r3, [r7, #28]
 8002d1a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d22:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002d24:	429a      	cmp	r2, r3
 8002d26:	d113      	bne.n	8002d50 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d28:	69fb      	ldr	r3, [r7, #28]
 8002d2a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d32:	085b      	lsrs	r3, r3, #1
 8002d34:	3b01      	subs	r3, #1
 8002d36:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	d109      	bne.n	8002d50 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002d3c:	69fb      	ldr	r3, [r7, #28]
 8002d3e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d46:	085b      	lsrs	r3, r3, #1
 8002d48:	3b01      	subs	r3, #1
 8002d4a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	d061      	beq.n	8002e14 <HAL_RCC_OscConfig+0x81c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002d50:	6a3b      	ldr	r3, [r7, #32]
 8002d52:	2b0c      	cmp	r3, #12
 8002d54:	d056      	beq.n	8002e04 <HAL_RCC_OscConfig+0x80c>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002d56:	4b2d      	ldr	r3, [pc, #180]	; (8002e0c <HAL_RCC_OscConfig+0x814>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a2c      	ldr	r2, [pc, #176]	; (8002e0c <HAL_RCC_OscConfig+0x814>)
 8002d5c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d60:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002d62:	f7fe ff75 	bl	8001c50 <HAL_GetTick>
 8002d66:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d68:	e008      	b.n	8002d7c <HAL_RCC_OscConfig+0x784>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d6a:	f7fe ff71 	bl	8001c50 <HAL_GetTick>
 8002d6e:	4602      	mov	r2, r0
 8002d70:	69bb      	ldr	r3, [r7, #24]
 8002d72:	1ad3      	subs	r3, r2, r3
 8002d74:	2b02      	cmp	r3, #2
 8002d76:	d901      	bls.n	8002d7c <HAL_RCC_OscConfig+0x784>
              {
                return HAL_TIMEOUT;
 8002d78:	2303      	movs	r3, #3
 8002d7a:	e09d      	b.n	8002eb8 <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d7c:	4b23      	ldr	r3, [pc, #140]	; (8002e0c <HAL_RCC_OscConfig+0x814>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d1f0      	bne.n	8002d6a <HAL_RCC_OscConfig+0x772>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d88:	4b20      	ldr	r3, [pc, #128]	; (8002e0c <HAL_RCC_OscConfig+0x814>)
 8002d8a:	68da      	ldr	r2, [r3, #12]
 8002d8c:	4b20      	ldr	r3, [pc, #128]	; (8002e10 <HAL_RCC_OscConfig+0x818>)
 8002d8e:	4013      	ands	r3, r2
 8002d90:	687a      	ldr	r2, [r7, #4]
 8002d92:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002d94:	687a      	ldr	r2, [r7, #4]
 8002d96:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002d98:	3a01      	subs	r2, #1
 8002d9a:	0112      	lsls	r2, r2, #4
 8002d9c:	4311      	orrs	r1, r2
 8002d9e:	687a      	ldr	r2, [r7, #4]
 8002da0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002da2:	0212      	lsls	r2, r2, #8
 8002da4:	4311      	orrs	r1, r2
 8002da6:	687a      	ldr	r2, [r7, #4]
 8002da8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002daa:	0852      	lsrs	r2, r2, #1
 8002dac:	3a01      	subs	r2, #1
 8002dae:	0552      	lsls	r2, r2, #21
 8002db0:	4311      	orrs	r1, r2
 8002db2:	687a      	ldr	r2, [r7, #4]
 8002db4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002db6:	0852      	lsrs	r2, r2, #1
 8002db8:	3a01      	subs	r2, #1
 8002dba:	0652      	lsls	r2, r2, #25
 8002dbc:	430a      	orrs	r2, r1
 8002dbe:	4913      	ldr	r1, [pc, #76]	; (8002e0c <HAL_RCC_OscConfig+0x814>)
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002dc4:	4b11      	ldr	r3, [pc, #68]	; (8002e0c <HAL_RCC_OscConfig+0x814>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a10      	ldr	r2, [pc, #64]	; (8002e0c <HAL_RCC_OscConfig+0x814>)
 8002dca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002dce:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002dd0:	4b0e      	ldr	r3, [pc, #56]	; (8002e0c <HAL_RCC_OscConfig+0x814>)
 8002dd2:	68db      	ldr	r3, [r3, #12]
 8002dd4:	4a0d      	ldr	r2, [pc, #52]	; (8002e0c <HAL_RCC_OscConfig+0x814>)
 8002dd6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002dda:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002ddc:	f7fe ff38 	bl	8001c50 <HAL_GetTick>
 8002de0:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002de2:	e008      	b.n	8002df6 <HAL_RCC_OscConfig+0x7fe>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002de4:	f7fe ff34 	bl	8001c50 <HAL_GetTick>
 8002de8:	4602      	mov	r2, r0
 8002dea:	69bb      	ldr	r3, [r7, #24]
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	2b02      	cmp	r3, #2
 8002df0:	d901      	bls.n	8002df6 <HAL_RCC_OscConfig+0x7fe>
              {
                return HAL_TIMEOUT;
 8002df2:	2303      	movs	r3, #3
 8002df4:	e060      	b.n	8002eb8 <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002df6:	4b05      	ldr	r3, [pc, #20]	; (8002e0c <HAL_RCC_OscConfig+0x814>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d0f0      	beq.n	8002de4 <HAL_RCC_OscConfig+0x7ec>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e02:	e058      	b.n	8002eb6 <HAL_RCC_OscConfig+0x8be>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002e04:	2301      	movs	r3, #1
 8002e06:	e057      	b.n	8002eb8 <HAL_RCC_OscConfig+0x8c0>
 8002e08:	40007000 	.word	0x40007000
 8002e0c:	40021000 	.word	0x40021000
 8002e10:	f99f808c 	.word	0xf99f808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e14:	4b2a      	ldr	r3, [pc, #168]	; (8002ec0 <HAL_RCC_OscConfig+0x8c8>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d14a      	bne.n	8002eb6 <HAL_RCC_OscConfig+0x8be>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002e20:	4b27      	ldr	r3, [pc, #156]	; (8002ec0 <HAL_RCC_OscConfig+0x8c8>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a26      	ldr	r2, [pc, #152]	; (8002ec0 <HAL_RCC_OscConfig+0x8c8>)
 8002e26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e2a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002e2c:	4b24      	ldr	r3, [pc, #144]	; (8002ec0 <HAL_RCC_OscConfig+0x8c8>)
 8002e2e:	68db      	ldr	r3, [r3, #12]
 8002e30:	4a23      	ldr	r2, [pc, #140]	; (8002ec0 <HAL_RCC_OscConfig+0x8c8>)
 8002e32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e36:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002e38:	f7fe ff0a 	bl	8001c50 <HAL_GetTick>
 8002e3c:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e3e:	e008      	b.n	8002e52 <HAL_RCC_OscConfig+0x85a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e40:	f7fe ff06 	bl	8001c50 <HAL_GetTick>
 8002e44:	4602      	mov	r2, r0
 8002e46:	69bb      	ldr	r3, [r7, #24]
 8002e48:	1ad3      	subs	r3, r2, r3
 8002e4a:	2b02      	cmp	r3, #2
 8002e4c:	d901      	bls.n	8002e52 <HAL_RCC_OscConfig+0x85a>
            {
              return HAL_TIMEOUT;
 8002e4e:	2303      	movs	r3, #3
 8002e50:	e032      	b.n	8002eb8 <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e52:	4b1b      	ldr	r3, [pc, #108]	; (8002ec0 <HAL_RCC_OscConfig+0x8c8>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d0f0      	beq.n	8002e40 <HAL_RCC_OscConfig+0x848>
 8002e5e:	e02a      	b.n	8002eb6 <HAL_RCC_OscConfig+0x8be>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e60:	6a3b      	ldr	r3, [r7, #32]
 8002e62:	2b0c      	cmp	r3, #12
 8002e64:	d025      	beq.n	8002eb2 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e66:	4b16      	ldr	r3, [pc, #88]	; (8002ec0 <HAL_RCC_OscConfig+0x8c8>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a15      	ldr	r2, [pc, #84]	; (8002ec0 <HAL_RCC_OscConfig+0x8c8>)
 8002e6c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e70:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002e72:	4b13      	ldr	r3, [pc, #76]	; (8002ec0 <HAL_RCC_OscConfig+0x8c8>)
 8002e74:	68db      	ldr	r3, [r3, #12]
 8002e76:	4a12      	ldr	r2, [pc, #72]	; (8002ec0 <HAL_RCC_OscConfig+0x8c8>)
 8002e78:	f023 0303 	bic.w	r3, r3, #3
 8002e7c:	60d3      	str	r3, [r2, #12]
#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 8002e7e:	4b10      	ldr	r3, [pc, #64]	; (8002ec0 <HAL_RCC_OscConfig+0x8c8>)
 8002e80:	68db      	ldr	r3, [r3, #12]
 8002e82:	4a0f      	ldr	r2, [pc, #60]	; (8002ec0 <HAL_RCC_OscConfig+0x8c8>)
 8002e84:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002e88:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e8a:	f7fe fee1 	bl	8001c50 <HAL_GetTick>
 8002e8e:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e90:	e008      	b.n	8002ea4 <HAL_RCC_OscConfig+0x8ac>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e92:	f7fe fedd 	bl	8001c50 <HAL_GetTick>
 8002e96:	4602      	mov	r2, r0
 8002e98:	69bb      	ldr	r3, [r7, #24]
 8002e9a:	1ad3      	subs	r3, r2, r3
 8002e9c:	2b02      	cmp	r3, #2
 8002e9e:	d901      	bls.n	8002ea4 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8002ea0:	2303      	movs	r3, #3
 8002ea2:	e009      	b.n	8002eb8 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ea4:	4b06      	ldr	r3, [pc, #24]	; (8002ec0 <HAL_RCC_OscConfig+0x8c8>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d1f0      	bne.n	8002e92 <HAL_RCC_OscConfig+0x89a>
 8002eb0:	e001      	b.n	8002eb6 <HAL_RCC_OscConfig+0x8be>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e000      	b.n	8002eb8 <HAL_RCC_OscConfig+0x8c0>
      }
    }
  }
  return HAL_OK;
 8002eb6:	2300      	movs	r3, #0
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	3728      	adds	r7, #40	; 0x28
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}
 8002ec0:	40021000 	.word	0x40021000

08002ec4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b084      	sub	sp, #16
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
 8002ecc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d101      	bne.n	8002ed8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	e0c8      	b.n	800306a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ed8:	4b66      	ldr	r3, [pc, #408]	; (8003074 <HAL_RCC_ClockConfig+0x1b0>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f003 0307 	and.w	r3, r3, #7
 8002ee0:	683a      	ldr	r2, [r7, #0]
 8002ee2:	429a      	cmp	r2, r3
 8002ee4:	d910      	bls.n	8002f08 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ee6:	4b63      	ldr	r3, [pc, #396]	; (8003074 <HAL_RCC_ClockConfig+0x1b0>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f023 0207 	bic.w	r2, r3, #7
 8002eee:	4961      	ldr	r1, [pc, #388]	; (8003074 <HAL_RCC_ClockConfig+0x1b0>)
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ef6:	4b5f      	ldr	r3, [pc, #380]	; (8003074 <HAL_RCC_ClockConfig+0x1b0>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 0307 	and.w	r3, r3, #7
 8002efe:	683a      	ldr	r2, [r7, #0]
 8002f00:	429a      	cmp	r2, r3
 8002f02:	d001      	beq.n	8002f08 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	e0b0      	b.n	800306a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 0301 	and.w	r3, r3, #1
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d04c      	beq.n	8002fae <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	2b03      	cmp	r3, #3
 8002f1a:	d107      	bne.n	8002f2c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f1c:	4b56      	ldr	r3, [pc, #344]	; (8003078 <HAL_RCC_ClockConfig+0x1b4>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d121      	bne.n	8002f6c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	e09e      	b.n	800306a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	2b02      	cmp	r3, #2
 8002f32:	d107      	bne.n	8002f44 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f34:	4b50      	ldr	r3, [pc, #320]	; (8003078 <HAL_RCC_ClockConfig+0x1b4>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d115      	bne.n	8002f6c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002f40:	2301      	movs	r3, #1
 8002f42:	e092      	b.n	800306a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d107      	bne.n	8002f5c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f4c:	4b4a      	ldr	r3, [pc, #296]	; (8003078 <HAL_RCC_ClockConfig+0x1b4>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 0302 	and.w	r3, r3, #2
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d109      	bne.n	8002f6c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	e086      	b.n	800306a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f5c:	4b46      	ldr	r3, [pc, #280]	; (8003078 <HAL_RCC_ClockConfig+0x1b4>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d101      	bne.n	8002f6c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	e07e      	b.n	800306a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002f6c:	4b42      	ldr	r3, [pc, #264]	; (8003078 <HAL_RCC_ClockConfig+0x1b4>)
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	f023 0203 	bic.w	r2, r3, #3
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	493f      	ldr	r1, [pc, #252]	; (8003078 <HAL_RCC_ClockConfig+0x1b4>)
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f7e:	f7fe fe67 	bl	8001c50 <HAL_GetTick>
 8002f82:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f84:	e00a      	b.n	8002f9c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f86:	f7fe fe63 	bl	8001c50 <HAL_GetTick>
 8002f8a:	4602      	mov	r2, r0
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	1ad3      	subs	r3, r2, r3
 8002f90:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d901      	bls.n	8002f9c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002f98:	2303      	movs	r3, #3
 8002f9a:	e066      	b.n	800306a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f9c:	4b36      	ldr	r3, [pc, #216]	; (8003078 <HAL_RCC_ClockConfig+0x1b4>)
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	f003 020c 	and.w	r2, r3, #12
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	009b      	lsls	r3, r3, #2
 8002faa:	429a      	cmp	r2, r3
 8002fac:	d1eb      	bne.n	8002f86 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f003 0302 	and.w	r3, r3, #2
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d008      	beq.n	8002fcc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fba:	4b2f      	ldr	r3, [pc, #188]	; (8003078 <HAL_RCC_ClockConfig+0x1b4>)
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	492c      	ldr	r1, [pc, #176]	; (8003078 <HAL_RCC_ClockConfig+0x1b4>)
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002fcc:	4b29      	ldr	r3, [pc, #164]	; (8003074 <HAL_RCC_ClockConfig+0x1b0>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f003 0307 	and.w	r3, r3, #7
 8002fd4:	683a      	ldr	r2, [r7, #0]
 8002fd6:	429a      	cmp	r2, r3
 8002fd8:	d210      	bcs.n	8002ffc <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fda:	4b26      	ldr	r3, [pc, #152]	; (8003074 <HAL_RCC_ClockConfig+0x1b0>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f023 0207 	bic.w	r2, r3, #7
 8002fe2:	4924      	ldr	r1, [pc, #144]	; (8003074 <HAL_RCC_ClockConfig+0x1b0>)
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fea:	4b22      	ldr	r3, [pc, #136]	; (8003074 <HAL_RCC_ClockConfig+0x1b0>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 0307 	and.w	r3, r3, #7
 8002ff2:	683a      	ldr	r2, [r7, #0]
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d001      	beq.n	8002ffc <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	e036      	b.n	800306a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 0304 	and.w	r3, r3, #4
 8003004:	2b00      	cmp	r3, #0
 8003006:	d008      	beq.n	800301a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003008:	4b1b      	ldr	r3, [pc, #108]	; (8003078 <HAL_RCC_ClockConfig+0x1b4>)
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	68db      	ldr	r3, [r3, #12]
 8003014:	4918      	ldr	r1, [pc, #96]	; (8003078 <HAL_RCC_ClockConfig+0x1b4>)
 8003016:	4313      	orrs	r3, r2
 8003018:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f003 0308 	and.w	r3, r3, #8
 8003022:	2b00      	cmp	r3, #0
 8003024:	d009      	beq.n	800303a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003026:	4b14      	ldr	r3, [pc, #80]	; (8003078 <HAL_RCC_ClockConfig+0x1b4>)
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	691b      	ldr	r3, [r3, #16]
 8003032:	00db      	lsls	r3, r3, #3
 8003034:	4910      	ldr	r1, [pc, #64]	; (8003078 <HAL_RCC_ClockConfig+0x1b4>)
 8003036:	4313      	orrs	r3, r2
 8003038:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800303a:	f000 f825 	bl	8003088 <HAL_RCC_GetSysClockFreq>
 800303e:	4602      	mov	r2, r0
 8003040:	4b0d      	ldr	r3, [pc, #52]	; (8003078 <HAL_RCC_ClockConfig+0x1b4>)
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	091b      	lsrs	r3, r3, #4
 8003046:	f003 030f 	and.w	r3, r3, #15
 800304a:	490c      	ldr	r1, [pc, #48]	; (800307c <HAL_RCC_ClockConfig+0x1b8>)
 800304c:	5ccb      	ldrb	r3, [r1, r3]
 800304e:	f003 031f 	and.w	r3, r3, #31
 8003052:	fa22 f303 	lsr.w	r3, r2, r3
 8003056:	4a0a      	ldr	r2, [pc, #40]	; (8003080 <HAL_RCC_ClockConfig+0x1bc>)
 8003058:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800305a:	4b0a      	ldr	r3, [pc, #40]	; (8003084 <HAL_RCC_ClockConfig+0x1c0>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4618      	mov	r0, r3
 8003060:	f7fe fda6 	bl	8001bb0 <HAL_InitTick>
 8003064:	4603      	mov	r3, r0
 8003066:	72fb      	strb	r3, [r7, #11]

  return status;
 8003068:	7afb      	ldrb	r3, [r7, #11]
}
 800306a:	4618      	mov	r0, r3
 800306c:	3710      	adds	r7, #16
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
 8003072:	bf00      	nop
 8003074:	40022000 	.word	0x40022000
 8003078:	40021000 	.word	0x40021000
 800307c:	08004c8c 	.word	0x08004c8c
 8003080:	20000004 	.word	0x20000004
 8003084:	20000008 	.word	0x20000008

08003088 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003088:	b480      	push	{r7}
 800308a:	b089      	sub	sp, #36	; 0x24
 800308c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800308e:	2300      	movs	r3, #0
 8003090:	61fb      	str	r3, [r7, #28]
 8003092:	2300      	movs	r3, #0
 8003094:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003096:	4b3e      	ldr	r3, [pc, #248]	; (8003190 <HAL_RCC_GetSysClockFreq+0x108>)
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	f003 030c 	and.w	r3, r3, #12
 800309e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80030a0:	4b3b      	ldr	r3, [pc, #236]	; (8003190 <HAL_RCC_GetSysClockFreq+0x108>)
 80030a2:	68db      	ldr	r3, [r3, #12]
 80030a4:	f003 0303 	and.w	r3, r3, #3
 80030a8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d005      	beq.n	80030bc <HAL_RCC_GetSysClockFreq+0x34>
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	2b0c      	cmp	r3, #12
 80030b4:	d121      	bne.n	80030fa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d11e      	bne.n	80030fa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80030bc:	4b34      	ldr	r3, [pc, #208]	; (8003190 <HAL_RCC_GetSysClockFreq+0x108>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f003 0308 	and.w	r3, r3, #8
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d107      	bne.n	80030d8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80030c8:	4b31      	ldr	r3, [pc, #196]	; (8003190 <HAL_RCC_GetSysClockFreq+0x108>)
 80030ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030ce:	0a1b      	lsrs	r3, r3, #8
 80030d0:	f003 030f 	and.w	r3, r3, #15
 80030d4:	61fb      	str	r3, [r7, #28]
 80030d6:	e005      	b.n	80030e4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80030d8:	4b2d      	ldr	r3, [pc, #180]	; (8003190 <HAL_RCC_GetSysClockFreq+0x108>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	091b      	lsrs	r3, r3, #4
 80030de:	f003 030f 	and.w	r3, r3, #15
 80030e2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80030e4:	4a2b      	ldr	r2, [pc, #172]	; (8003194 <HAL_RCC_GetSysClockFreq+0x10c>)
 80030e6:	69fb      	ldr	r3, [r7, #28]
 80030e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030ec:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d10d      	bne.n	8003110 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80030f4:	69fb      	ldr	r3, [r7, #28]
 80030f6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80030f8:	e00a      	b.n	8003110 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	2b04      	cmp	r3, #4
 80030fe:	d102      	bne.n	8003106 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003100:	4b25      	ldr	r3, [pc, #148]	; (8003198 <HAL_RCC_GetSysClockFreq+0x110>)
 8003102:	61bb      	str	r3, [r7, #24]
 8003104:	e004      	b.n	8003110 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	2b08      	cmp	r3, #8
 800310a:	d101      	bne.n	8003110 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800310c:	4b23      	ldr	r3, [pc, #140]	; (800319c <HAL_RCC_GetSysClockFreq+0x114>)
 800310e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	2b0c      	cmp	r3, #12
 8003114:	d134      	bne.n	8003180 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003116:	4b1e      	ldr	r3, [pc, #120]	; (8003190 <HAL_RCC_GetSysClockFreq+0x108>)
 8003118:	68db      	ldr	r3, [r3, #12]
 800311a:	f003 0303 	and.w	r3, r3, #3
 800311e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	2b02      	cmp	r3, #2
 8003124:	d003      	beq.n	800312e <HAL_RCC_GetSysClockFreq+0xa6>
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	2b03      	cmp	r3, #3
 800312a:	d003      	beq.n	8003134 <HAL_RCC_GetSysClockFreq+0xac>
 800312c:	e005      	b.n	800313a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800312e:	4b1a      	ldr	r3, [pc, #104]	; (8003198 <HAL_RCC_GetSysClockFreq+0x110>)
 8003130:	617b      	str	r3, [r7, #20]
      break;
 8003132:	e005      	b.n	8003140 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003134:	4b19      	ldr	r3, [pc, #100]	; (800319c <HAL_RCC_GetSysClockFreq+0x114>)
 8003136:	617b      	str	r3, [r7, #20]
      break;
 8003138:	e002      	b.n	8003140 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800313a:	69fb      	ldr	r3, [r7, #28]
 800313c:	617b      	str	r3, [r7, #20]
      break;
 800313e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003140:	4b13      	ldr	r3, [pc, #76]	; (8003190 <HAL_RCC_GetSysClockFreq+0x108>)
 8003142:	68db      	ldr	r3, [r3, #12]
 8003144:	091b      	lsrs	r3, r3, #4
 8003146:	f003 0307 	and.w	r3, r3, #7
 800314a:	3301      	adds	r3, #1
 800314c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800314e:	4b10      	ldr	r3, [pc, #64]	; (8003190 <HAL_RCC_GetSysClockFreq+0x108>)
 8003150:	68db      	ldr	r3, [r3, #12]
 8003152:	0a1b      	lsrs	r3, r3, #8
 8003154:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003158:	697a      	ldr	r2, [r7, #20]
 800315a:	fb02 f203 	mul.w	r2, r2, r3
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	fbb2 f3f3 	udiv	r3, r2, r3
 8003164:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003166:	4b0a      	ldr	r3, [pc, #40]	; (8003190 <HAL_RCC_GetSysClockFreq+0x108>)
 8003168:	68db      	ldr	r3, [r3, #12]
 800316a:	0e5b      	lsrs	r3, r3, #25
 800316c:	f003 0303 	and.w	r3, r3, #3
 8003170:	3301      	adds	r3, #1
 8003172:	005b      	lsls	r3, r3, #1
 8003174:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003176:	697a      	ldr	r2, [r7, #20]
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	fbb2 f3f3 	udiv	r3, r2, r3
 800317e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003180:	69bb      	ldr	r3, [r7, #24]
}
 8003182:	4618      	mov	r0, r3
 8003184:	3724      	adds	r7, #36	; 0x24
 8003186:	46bd      	mov	sp, r7
 8003188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318c:	4770      	bx	lr
 800318e:	bf00      	nop
 8003190:	40021000 	.word	0x40021000
 8003194:	08004ca4 	.word	0x08004ca4
 8003198:	00f42400 	.word	0x00f42400
 800319c:	007a1200 	.word	0x007a1200

080031a0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031a0:	b480      	push	{r7}
 80031a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031a4:	4b03      	ldr	r3, [pc, #12]	; (80031b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80031a6:	681b      	ldr	r3, [r3, #0]
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr
 80031b2:	bf00      	nop
 80031b4:	20000004 	.word	0x20000004

080031b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80031bc:	f7ff fff0 	bl	80031a0 <HAL_RCC_GetHCLKFreq>
 80031c0:	4602      	mov	r2, r0
 80031c2:	4b06      	ldr	r3, [pc, #24]	; (80031dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	0a1b      	lsrs	r3, r3, #8
 80031c8:	f003 0307 	and.w	r3, r3, #7
 80031cc:	4904      	ldr	r1, [pc, #16]	; (80031e0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80031ce:	5ccb      	ldrb	r3, [r1, r3]
 80031d0:	f003 031f 	and.w	r3, r3, #31
 80031d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031d8:	4618      	mov	r0, r3
 80031da:	bd80      	pop	{r7, pc}
 80031dc:	40021000 	.word	0x40021000
 80031e0:	08004c9c 	.word	0x08004c9c

080031e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80031e8:	f7ff ffda 	bl	80031a0 <HAL_RCC_GetHCLKFreq>
 80031ec:	4602      	mov	r2, r0
 80031ee:	4b06      	ldr	r3, [pc, #24]	; (8003208 <HAL_RCC_GetPCLK2Freq+0x24>)
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	0adb      	lsrs	r3, r3, #11
 80031f4:	f003 0307 	and.w	r3, r3, #7
 80031f8:	4904      	ldr	r1, [pc, #16]	; (800320c <HAL_RCC_GetPCLK2Freq+0x28>)
 80031fa:	5ccb      	ldrb	r3, [r1, r3]
 80031fc:	f003 031f 	and.w	r3, r3, #31
 8003200:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003204:	4618      	mov	r0, r3
 8003206:	bd80      	pop	{r7, pc}
 8003208:	40021000 	.word	0x40021000
 800320c:	08004c9c 	.word	0x08004c9c

08003210 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b086      	sub	sp, #24
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003218:	2300      	movs	r3, #0
 800321a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800321c:	4b2a      	ldr	r3, [pc, #168]	; (80032c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800321e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003220:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003224:	2b00      	cmp	r3, #0
 8003226:	d003      	beq.n	8003230 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003228:	f7ff f982 	bl	8002530 <HAL_PWREx_GetVoltageRange>
 800322c:	6178      	str	r0, [r7, #20]
 800322e:	e014      	b.n	800325a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003230:	4b25      	ldr	r3, [pc, #148]	; (80032c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003232:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003234:	4a24      	ldr	r2, [pc, #144]	; (80032c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003236:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800323a:	6593      	str	r3, [r2, #88]	; 0x58
 800323c:	4b22      	ldr	r3, [pc, #136]	; (80032c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800323e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003240:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003244:	60fb      	str	r3, [r7, #12]
 8003246:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003248:	f7ff f972 	bl	8002530 <HAL_PWREx_GetVoltageRange>
 800324c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800324e:	4b1e      	ldr	r3, [pc, #120]	; (80032c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003250:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003252:	4a1d      	ldr	r2, [pc, #116]	; (80032c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003254:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003258:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003260:	d10b      	bne.n	800327a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2b80      	cmp	r3, #128	; 0x80
 8003266:	d919      	bls.n	800329c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2ba0      	cmp	r3, #160	; 0xa0
 800326c:	d902      	bls.n	8003274 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800326e:	2302      	movs	r3, #2
 8003270:	613b      	str	r3, [r7, #16]
 8003272:	e013      	b.n	800329c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003274:	2301      	movs	r3, #1
 8003276:	613b      	str	r3, [r7, #16]
 8003278:	e010      	b.n	800329c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2b80      	cmp	r3, #128	; 0x80
 800327e:	d902      	bls.n	8003286 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003280:	2303      	movs	r3, #3
 8003282:	613b      	str	r3, [r7, #16]
 8003284:	e00a      	b.n	800329c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2b80      	cmp	r3, #128	; 0x80
 800328a:	d102      	bne.n	8003292 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800328c:	2302      	movs	r3, #2
 800328e:	613b      	str	r3, [r7, #16]
 8003290:	e004      	b.n	800329c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2b70      	cmp	r3, #112	; 0x70
 8003296:	d101      	bne.n	800329c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003298:	2301      	movs	r3, #1
 800329a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800329c:	4b0b      	ldr	r3, [pc, #44]	; (80032cc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f023 0207 	bic.w	r2, r3, #7
 80032a4:	4909      	ldr	r1, [pc, #36]	; (80032cc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	4313      	orrs	r3, r2
 80032aa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80032ac:	4b07      	ldr	r3, [pc, #28]	; (80032cc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f003 0307 	and.w	r3, r3, #7
 80032b4:	693a      	ldr	r2, [r7, #16]
 80032b6:	429a      	cmp	r2, r3
 80032b8:	d001      	beq.n	80032be <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e000      	b.n	80032c0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80032be:	2300      	movs	r3, #0
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	3718      	adds	r7, #24
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}
 80032c8:	40021000 	.word	0x40021000
 80032cc:	40022000 	.word	0x40022000

080032d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b086      	sub	sp, #24
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80032d8:	2300      	movs	r3, #0
 80032da:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80032dc:	2300      	movs	r3, #0
 80032de:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	f000 809e 	beq.w	800342a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032ee:	2300      	movs	r3, #0
 80032f0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80032f2:	4b46      	ldr	r3, [pc, #280]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80032f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d101      	bne.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x32>
 80032fe:	2301      	movs	r3, #1
 8003300:	e000      	b.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x34>
 8003302:	2300      	movs	r3, #0
 8003304:	2b00      	cmp	r3, #0
 8003306:	d00d      	beq.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003308:	4b40      	ldr	r3, [pc, #256]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800330a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800330c:	4a3f      	ldr	r2, [pc, #252]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800330e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003312:	6593      	str	r3, [r2, #88]	; 0x58
 8003314:	4b3d      	ldr	r3, [pc, #244]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003316:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003318:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800331c:	60bb      	str	r3, [r7, #8]
 800331e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003320:	2301      	movs	r3, #1
 8003322:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003324:	4b3a      	ldr	r3, [pc, #232]	; (8003410 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a39      	ldr	r2, [pc, #228]	; (8003410 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800332a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800332e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003330:	f7fe fc8e 	bl	8001c50 <HAL_GetTick>
 8003334:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003336:	e009      	b.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003338:	f7fe fc8a 	bl	8001c50 <HAL_GetTick>
 800333c:	4602      	mov	r2, r0
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	1ad3      	subs	r3, r2, r3
 8003342:	2b02      	cmp	r3, #2
 8003344:	d902      	bls.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 8003346:	2303      	movs	r3, #3
 8003348:	74fb      	strb	r3, [r7, #19]
        break;
 800334a:	e005      	b.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800334c:	4b30      	ldr	r3, [pc, #192]	; (8003410 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003354:	2b00      	cmp	r3, #0
 8003356:	d0ef      	beq.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 8003358:	7cfb      	ldrb	r3, [r7, #19]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d15a      	bne.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800335e:	4b2b      	ldr	r3, [pc, #172]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003360:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003364:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003368:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d01e      	beq.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0xde>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003374:	697a      	ldr	r2, [r7, #20]
 8003376:	429a      	cmp	r2, r3
 8003378:	d019      	beq.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800337a:	4b24      	ldr	r3, [pc, #144]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800337c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003380:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003384:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003386:	4b21      	ldr	r3, [pc, #132]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003388:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800338c:	4a1f      	ldr	r2, [pc, #124]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800338e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003392:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003396:	4b1d      	ldr	r3, [pc, #116]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003398:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800339c:	4a1b      	ldr	r2, [pc, #108]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800339e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80033a6:	4a19      	ldr	r2, [pc, #100]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	f003 0301 	and.w	r3, r3, #1
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d016      	beq.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033b8:	f7fe fc4a 	bl	8001c50 <HAL_GetTick>
 80033bc:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033be:	e00b      	b.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033c0:	f7fe fc46 	bl	8001c50 <HAL_GetTick>
 80033c4:	4602      	mov	r2, r0
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	1ad3      	subs	r3, r2, r3
 80033ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d902      	bls.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 80033d2:	2303      	movs	r3, #3
 80033d4:	74fb      	strb	r3, [r7, #19]
            break;
 80033d6:	e006      	b.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033d8:	4b0c      	ldr	r3, [pc, #48]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80033da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033de:	f003 0302 	and.w	r3, r3, #2
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d0ec      	beq.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 80033e6:	7cfb      	ldrb	r3, [r7, #19]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d10b      	bne.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80033ec:	4b07      	ldr	r3, [pc, #28]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80033ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033f2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033fa:	4904      	ldr	r1, [pc, #16]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80033fc:	4313      	orrs	r3, r2
 80033fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003402:	e009      	b.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003404:	7cfb      	ldrb	r3, [r7, #19]
 8003406:	74bb      	strb	r3, [r7, #18]
 8003408:	e006      	b.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x148>
 800340a:	bf00      	nop
 800340c:	40021000 	.word	0x40021000
 8003410:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003414:	7cfb      	ldrb	r3, [r7, #19]
 8003416:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003418:	7c7b      	ldrb	r3, [r7, #17]
 800341a:	2b01      	cmp	r3, #1
 800341c:	d105      	bne.n	800342a <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800341e:	4b6e      	ldr	r3, [pc, #440]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003420:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003422:	4a6d      	ldr	r2, [pc, #436]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003424:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003428:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 0301 	and.w	r3, r3, #1
 8003432:	2b00      	cmp	r3, #0
 8003434:	d00a      	beq.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003436:	4b68      	ldr	r3, [pc, #416]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003438:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800343c:	f023 0203 	bic.w	r2, r3, #3
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	4964      	ldr	r1, [pc, #400]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003446:	4313      	orrs	r3, r2
 8003448:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f003 0302 	and.w	r3, r3, #2
 8003454:	2b00      	cmp	r3, #0
 8003456:	d00a      	beq.n	800346e <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003458:	4b5f      	ldr	r3, [pc, #380]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800345a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800345e:	f023 020c 	bic.w	r2, r3, #12
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	495c      	ldr	r1, [pc, #368]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003468:	4313      	orrs	r3, r2
 800346a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f003 0304 	and.w	r3, r3, #4
 8003476:	2b00      	cmp	r3, #0
 8003478:	d00a      	beq.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800347a:	4b57      	ldr	r3, [pc, #348]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800347c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003480:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	68db      	ldr	r3, [r3, #12]
 8003488:	4953      	ldr	r1, [pc, #332]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800348a:	4313      	orrs	r3, r2
 800348c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f003 0320 	and.w	r3, r3, #32
 8003498:	2b00      	cmp	r3, #0
 800349a:	d00a      	beq.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800349c:	4b4e      	ldr	r3, [pc, #312]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800349e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034a2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	691b      	ldr	r3, [r3, #16]
 80034aa:	494b      	ldr	r1, [pc, #300]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80034ac:	4313      	orrs	r3, r2
 80034ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d00a      	beq.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80034be:	4b46      	ldr	r3, [pc, #280]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80034c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034c4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6a1b      	ldr	r3, [r3, #32]
 80034cc:	4942      	ldr	r1, [pc, #264]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80034ce:	4313      	orrs	r3, r2
 80034d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d00a      	beq.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80034e0:	4b3d      	ldr	r3, [pc, #244]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80034e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034e6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ee:	493a      	ldr	r1, [pc, #232]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80034f0:	4313      	orrs	r3, r2
 80034f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d00a      	beq.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003502:	4b35      	ldr	r3, [pc, #212]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003504:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003508:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	695b      	ldr	r3, [r3, #20]
 8003510:	4931      	ldr	r1, [pc, #196]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003512:	4313      	orrs	r3, r2
 8003514:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003520:	2b00      	cmp	r3, #0
 8003522:	d00a      	beq.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003524:	4b2c      	ldr	r3, [pc, #176]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003526:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800352a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	699b      	ldr	r3, [r3, #24]
 8003532:	4929      	ldr	r1, [pc, #164]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003534:	4313      	orrs	r3, r2
 8003536:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003542:	2b00      	cmp	r3, #0
 8003544:	d00a      	beq.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003546:	4b24      	ldr	r3, [pc, #144]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003548:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800354c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	69db      	ldr	r3, [r3, #28]
 8003554:	4920      	ldr	r1, [pc, #128]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003556:	4313      	orrs	r3, r2
 8003558:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003564:	2b00      	cmp	r3, #0
 8003566:	d015      	beq.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003568:	4b1b      	ldr	r3, [pc, #108]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800356a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800356e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003576:	4918      	ldr	r1, [pc, #96]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003578:	4313      	orrs	r3, r2
 800357a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003582:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003586:	d105      	bne.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003588:	4b13      	ldr	r3, [pc, #76]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800358a:	68db      	ldr	r3, [r3, #12]
 800358c:	4a12      	ldr	r2, [pc, #72]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800358e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003592:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800359c:	2b00      	cmp	r3, #0
 800359e:	d015      	beq.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80035a0:	4b0d      	ldr	r3, [pc, #52]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80035a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035a6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ae:	490a      	ldr	r1, [pc, #40]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80035b0:	4313      	orrs	r3, r2
 80035b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80035be:	d105      	bne.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80035c0:	4b05      	ldr	r3, [pc, #20]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80035c2:	68db      	ldr	r3, [r3, #12]
 80035c4:	4a04      	ldr	r2, [pc, #16]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80035c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80035ca:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80035cc:	7cbb      	ldrb	r3, [r7, #18]
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	3718      	adds	r7, #24
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}
 80035d6:	bf00      	nop
 80035d8:	40021000 	.word	0x40021000

080035dc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b084      	sub	sp, #16
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d101      	bne.n	80035ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	e095      	b.n	800371a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d108      	bne.n	8003608 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80035fe:	d009      	beq.n	8003614 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2200      	movs	r2, #0
 8003604:	61da      	str	r2, [r3, #28]
 8003606:	e005      	b.n	8003614 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2200      	movs	r2, #0
 800360c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2200      	movs	r2, #0
 8003612:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2200      	movs	r2, #0
 8003618:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003620:	b2db      	uxtb	r3, r3
 8003622:	2b00      	cmp	r3, #0
 8003624:	d106      	bne.n	8003634 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2200      	movs	r2, #0
 800362a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	f7fe f986 	bl	8001940 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2202      	movs	r2, #2
 8003638:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800364a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	68db      	ldr	r3, [r3, #12]
 8003650:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003654:	d902      	bls.n	800365c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003656:	2300      	movs	r3, #0
 8003658:	60fb      	str	r3, [r7, #12]
 800365a:	e002      	b.n	8003662 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800365c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003660:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	68db      	ldr	r3, [r3, #12]
 8003666:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800366a:	d007      	beq.n	800367c <HAL_SPI_Init+0xa0>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003674:	d002      	beq.n	800367c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2200      	movs	r2, #0
 800367a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800368c:	431a      	orrs	r2, r3
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	691b      	ldr	r3, [r3, #16]
 8003692:	f003 0302 	and.w	r3, r3, #2
 8003696:	431a      	orrs	r2, r3
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	695b      	ldr	r3, [r3, #20]
 800369c:	f003 0301 	and.w	r3, r3, #1
 80036a0:	431a      	orrs	r2, r3
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	699b      	ldr	r3, [r3, #24]
 80036a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036aa:	431a      	orrs	r2, r3
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	69db      	ldr	r3, [r3, #28]
 80036b0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80036b4:	431a      	orrs	r2, r3
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6a1b      	ldr	r3, [r3, #32]
 80036ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036be:	ea42 0103 	orr.w	r1, r2, r3
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036c6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	430a      	orrs	r2, r1
 80036d0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	699b      	ldr	r3, [r3, #24]
 80036d6:	0c1b      	lsrs	r3, r3, #16
 80036d8:	f003 0204 	and.w	r2, r3, #4
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e0:	f003 0310 	and.w	r3, r3, #16
 80036e4:	431a      	orrs	r2, r3
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036ea:	f003 0308 	and.w	r3, r3, #8
 80036ee:	431a      	orrs	r2, r3
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	68db      	ldr	r3, [r3, #12]
 80036f4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80036f8:	ea42 0103 	orr.w	r1, r2, r3
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	430a      	orrs	r2, r1
 8003708:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2200      	movs	r2, #0
 800370e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2201      	movs	r2, #1
 8003714:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003718:	2300      	movs	r3, #0
}
 800371a:	4618      	mov	r0, r3
 800371c:	3710      	adds	r7, #16
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}

08003722 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003722:	b580      	push	{r7, lr}
 8003724:	b088      	sub	sp, #32
 8003726:	af00      	add	r7, sp, #0
 8003728:	60f8      	str	r0, [r7, #12]
 800372a:	60b9      	str	r1, [r7, #8]
 800372c:	603b      	str	r3, [r7, #0]
 800372e:	4613      	mov	r3, r2
 8003730:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003732:	2300      	movs	r3, #0
 8003734:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800373c:	2b01      	cmp	r3, #1
 800373e:	d101      	bne.n	8003744 <HAL_SPI_Transmit+0x22>
 8003740:	2302      	movs	r3, #2
 8003742:	e158      	b.n	80039f6 <HAL_SPI_Transmit+0x2d4>
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	2201      	movs	r2, #1
 8003748:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800374c:	f7fe fa80 	bl	8001c50 <HAL_GetTick>
 8003750:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003752:	88fb      	ldrh	r3, [r7, #6]
 8003754:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800375c:	b2db      	uxtb	r3, r3
 800375e:	2b01      	cmp	r3, #1
 8003760:	d002      	beq.n	8003768 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003762:	2302      	movs	r3, #2
 8003764:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003766:	e13d      	b.n	80039e4 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d002      	beq.n	8003774 <HAL_SPI_Transmit+0x52>
 800376e:	88fb      	ldrh	r3, [r7, #6]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d102      	bne.n	800377a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003778:	e134      	b.n	80039e4 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2203      	movs	r2, #3
 800377e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	2200      	movs	r2, #0
 8003786:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	68ba      	ldr	r2, [r7, #8]
 800378c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	88fa      	ldrh	r2, [r7, #6]
 8003792:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	88fa      	ldrh	r2, [r7, #6]
 8003798:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	2200      	movs	r2, #0
 800379e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2200      	movs	r2, #0
 80037a4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2200      	movs	r2, #0
 80037ac:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	2200      	movs	r2, #0
 80037b4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2200      	movs	r2, #0
 80037ba:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037c4:	d10f      	bne.n	80037e6 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	681a      	ldr	r2, [r3, #0]
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037d4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80037e4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037f0:	2b40      	cmp	r3, #64	; 0x40
 80037f2:	d007      	beq.n	8003804 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	681a      	ldr	r2, [r3, #0]
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003802:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	68db      	ldr	r3, [r3, #12]
 8003808:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800380c:	d94b      	bls.n	80038a6 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d002      	beq.n	800381c <HAL_SPI_Transmit+0xfa>
 8003816:	8afb      	ldrh	r3, [r7, #22]
 8003818:	2b01      	cmp	r3, #1
 800381a:	d13e      	bne.n	800389a <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003820:	881a      	ldrh	r2, [r3, #0]
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800382c:	1c9a      	adds	r2, r3, #2
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003836:	b29b      	uxth	r3, r3
 8003838:	3b01      	subs	r3, #1
 800383a:	b29a      	uxth	r2, r3
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003840:	e02b      	b.n	800389a <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	f003 0302 	and.w	r3, r3, #2
 800384c:	2b02      	cmp	r3, #2
 800384e:	d112      	bne.n	8003876 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003854:	881a      	ldrh	r2, [r3, #0]
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003860:	1c9a      	adds	r2, r3, #2
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800386a:	b29b      	uxth	r3, r3
 800386c:	3b01      	subs	r3, #1
 800386e:	b29a      	uxth	r2, r3
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003874:	e011      	b.n	800389a <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003876:	f7fe f9eb 	bl	8001c50 <HAL_GetTick>
 800387a:	4602      	mov	r2, r0
 800387c:	69bb      	ldr	r3, [r7, #24]
 800387e:	1ad3      	subs	r3, r2, r3
 8003880:	683a      	ldr	r2, [r7, #0]
 8003882:	429a      	cmp	r2, r3
 8003884:	d803      	bhi.n	800388e <HAL_SPI_Transmit+0x16c>
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800388c:	d102      	bne.n	8003894 <HAL_SPI_Transmit+0x172>
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d102      	bne.n	800389a <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8003894:	2303      	movs	r3, #3
 8003896:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003898:	e0a4      	b.n	80039e4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800389e:	b29b      	uxth	r3, r3
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d1ce      	bne.n	8003842 <HAL_SPI_Transmit+0x120>
 80038a4:	e07c      	b.n	80039a0 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d002      	beq.n	80038b4 <HAL_SPI_Transmit+0x192>
 80038ae:	8afb      	ldrh	r3, [r7, #22]
 80038b0:	2b01      	cmp	r3, #1
 80038b2:	d170      	bne.n	8003996 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038b8:	b29b      	uxth	r3, r3
 80038ba:	2b01      	cmp	r3, #1
 80038bc:	d912      	bls.n	80038e4 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038c2:	881a      	ldrh	r2, [r3, #0]
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ce:	1c9a      	adds	r2, r3, #2
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038d8:	b29b      	uxth	r3, r3
 80038da:	3b02      	subs	r3, #2
 80038dc:	b29a      	uxth	r2, r3
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80038e2:	e058      	b.n	8003996 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	330c      	adds	r3, #12
 80038ee:	7812      	ldrb	r2, [r2, #0]
 80038f0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038f6:	1c5a      	adds	r2, r3, #1
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003900:	b29b      	uxth	r3, r3
 8003902:	3b01      	subs	r3, #1
 8003904:	b29a      	uxth	r2, r3
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800390a:	e044      	b.n	8003996 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	f003 0302 	and.w	r3, r3, #2
 8003916:	2b02      	cmp	r3, #2
 8003918:	d12b      	bne.n	8003972 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800391e:	b29b      	uxth	r3, r3
 8003920:	2b01      	cmp	r3, #1
 8003922:	d912      	bls.n	800394a <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003928:	881a      	ldrh	r2, [r3, #0]
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003934:	1c9a      	adds	r2, r3, #2
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800393e:	b29b      	uxth	r3, r3
 8003940:	3b02      	subs	r3, #2
 8003942:	b29a      	uxth	r2, r3
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003948:	e025      	b.n	8003996 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	330c      	adds	r3, #12
 8003954:	7812      	ldrb	r2, [r2, #0]
 8003956:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800395c:	1c5a      	adds	r2, r3, #1
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003966:	b29b      	uxth	r3, r3
 8003968:	3b01      	subs	r3, #1
 800396a:	b29a      	uxth	r2, r3
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003970:	e011      	b.n	8003996 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003972:	f7fe f96d 	bl	8001c50 <HAL_GetTick>
 8003976:	4602      	mov	r2, r0
 8003978:	69bb      	ldr	r3, [r7, #24]
 800397a:	1ad3      	subs	r3, r2, r3
 800397c:	683a      	ldr	r2, [r7, #0]
 800397e:	429a      	cmp	r2, r3
 8003980:	d803      	bhi.n	800398a <HAL_SPI_Transmit+0x268>
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003988:	d102      	bne.n	8003990 <HAL_SPI_Transmit+0x26e>
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d102      	bne.n	8003996 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8003990:	2303      	movs	r3, #3
 8003992:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003994:	e026      	b.n	80039e4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800399a:	b29b      	uxth	r3, r3
 800399c:	2b00      	cmp	r3, #0
 800399e:	d1b5      	bne.n	800390c <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80039a0:	69ba      	ldr	r2, [r7, #24]
 80039a2:	6839      	ldr	r1, [r7, #0]
 80039a4:	68f8      	ldr	r0, [r7, #12]
 80039a6:	f000 f945 	bl	8003c34 <SPI_EndRxTxTransaction>
 80039aa:	4603      	mov	r3, r0
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d002      	beq.n	80039b6 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2220      	movs	r2, #32
 80039b4:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d10a      	bne.n	80039d4 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80039be:	2300      	movs	r3, #0
 80039c0:	613b      	str	r3, [r7, #16]
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	68db      	ldr	r3, [r3, #12]
 80039c8:	613b      	str	r3, [r7, #16]
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	613b      	str	r3, [r7, #16]
 80039d2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d002      	beq.n	80039e2 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	77fb      	strb	r3, [r7, #31]
 80039e0:	e000      	b.n	80039e4 <HAL_SPI_Transmit+0x2c2>
  }

error:
 80039e2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	2201      	movs	r2, #1
 80039e8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2200      	movs	r2, #0
 80039f0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80039f4:	7ffb      	ldrb	r3, [r7, #31]
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	3720      	adds	r7, #32
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}
	...

08003a00 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b088      	sub	sp, #32
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	60f8      	str	r0, [r7, #12]
 8003a08:	60b9      	str	r1, [r7, #8]
 8003a0a:	603b      	str	r3, [r7, #0]
 8003a0c:	4613      	mov	r3, r2
 8003a0e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003a10:	f7fe f91e 	bl	8001c50 <HAL_GetTick>
 8003a14:	4602      	mov	r2, r0
 8003a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a18:	1a9b      	subs	r3, r3, r2
 8003a1a:	683a      	ldr	r2, [r7, #0]
 8003a1c:	4413      	add	r3, r2
 8003a1e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003a20:	f7fe f916 	bl	8001c50 <HAL_GetTick>
 8003a24:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003a26:	4b39      	ldr	r3, [pc, #228]	; (8003b0c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	015b      	lsls	r3, r3, #5
 8003a2c:	0d1b      	lsrs	r3, r3, #20
 8003a2e:	69fa      	ldr	r2, [r7, #28]
 8003a30:	fb02 f303 	mul.w	r3, r2, r3
 8003a34:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003a36:	e054      	b.n	8003ae2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a3e:	d050      	beq.n	8003ae2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003a40:	f7fe f906 	bl	8001c50 <HAL_GetTick>
 8003a44:	4602      	mov	r2, r0
 8003a46:	69bb      	ldr	r3, [r7, #24]
 8003a48:	1ad3      	subs	r3, r2, r3
 8003a4a:	69fa      	ldr	r2, [r7, #28]
 8003a4c:	429a      	cmp	r2, r3
 8003a4e:	d902      	bls.n	8003a56 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003a50:	69fb      	ldr	r3, [r7, #28]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d13d      	bne.n	8003ad2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	685a      	ldr	r2, [r3, #4]
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003a64:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a6e:	d111      	bne.n	8003a94 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a78:	d004      	beq.n	8003a84 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	689b      	ldr	r3, [r3, #8]
 8003a7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a82:	d107      	bne.n	8003a94 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	681a      	ldr	r2, [r3, #0]
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a92:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a9c:	d10f      	bne.n	8003abe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	681a      	ldr	r2, [r3, #0]
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003aac:	601a      	str	r2, [r3, #0]
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	681a      	ldr	r2, [r3, #0]
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003abc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	2201      	movs	r2, #1
 8003ac2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003ace:	2303      	movs	r3, #3
 8003ad0:	e017      	b.n	8003b02 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d101      	bne.n	8003adc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	3b01      	subs	r3, #1
 8003ae0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	689a      	ldr	r2, [r3, #8]
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	4013      	ands	r3, r2
 8003aec:	68ba      	ldr	r2, [r7, #8]
 8003aee:	429a      	cmp	r2, r3
 8003af0:	bf0c      	ite	eq
 8003af2:	2301      	moveq	r3, #1
 8003af4:	2300      	movne	r3, #0
 8003af6:	b2db      	uxtb	r3, r3
 8003af8:	461a      	mov	r2, r3
 8003afa:	79fb      	ldrb	r3, [r7, #7]
 8003afc:	429a      	cmp	r2, r3
 8003afe:	d19b      	bne.n	8003a38 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003b00:	2300      	movs	r3, #0
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	3720      	adds	r7, #32
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}
 8003b0a:	bf00      	nop
 8003b0c:	20000004 	.word	0x20000004

08003b10 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b088      	sub	sp, #32
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	60f8      	str	r0, [r7, #12]
 8003b18:	60b9      	str	r1, [r7, #8]
 8003b1a:	607a      	str	r2, [r7, #4]
 8003b1c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003b1e:	f7fe f897 	bl	8001c50 <HAL_GetTick>
 8003b22:	4602      	mov	r2, r0
 8003b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b26:	1a9b      	subs	r3, r3, r2
 8003b28:	683a      	ldr	r2, [r7, #0]
 8003b2a:	4413      	add	r3, r2
 8003b2c:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003b2e:	f7fe f88f 	bl	8001c50 <HAL_GetTick>
 8003b32:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003b34:	4b3e      	ldr	r3, [pc, #248]	; (8003c30 <SPI_WaitFifoStateUntilTimeout+0x120>)
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	4613      	mov	r3, r2
 8003b3a:	009b      	lsls	r3, r3, #2
 8003b3c:	4413      	add	r3, r2
 8003b3e:	00da      	lsls	r2, r3, #3
 8003b40:	1ad3      	subs	r3, r2, r3
 8003b42:	0d1b      	lsrs	r3, r3, #20
 8003b44:	69fa      	ldr	r2, [r7, #28]
 8003b46:	fb02 f303 	mul.w	r3, r2, r3
 8003b4a:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 8003b4c:	e062      	b.n	8003c14 <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003b54:	d109      	bne.n	8003b6a <SPI_WaitFifoStateUntilTimeout+0x5a>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d106      	bne.n	8003b6a <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	330c      	adds	r3, #12
 8003b62:	781b      	ldrb	r3, [r3, #0]
 8003b64:	b2db      	uxtb	r3, r3
 8003b66:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8003b68:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b70:	d050      	beq.n	8003c14 <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003b72:	f7fe f86d 	bl	8001c50 <HAL_GetTick>
 8003b76:	4602      	mov	r2, r0
 8003b78:	69bb      	ldr	r3, [r7, #24]
 8003b7a:	1ad3      	subs	r3, r2, r3
 8003b7c:	69fa      	ldr	r2, [r7, #28]
 8003b7e:	429a      	cmp	r2, r3
 8003b80:	d902      	bls.n	8003b88 <SPI_WaitFifoStateUntilTimeout+0x78>
 8003b82:	69fb      	ldr	r3, [r7, #28]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d13d      	bne.n	8003c04 <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	685a      	ldr	r2, [r3, #4]
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003b96:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ba0:	d111      	bne.n	8003bc6 <SPI_WaitFifoStateUntilTimeout+0xb6>
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	689b      	ldr	r3, [r3, #8]
 8003ba6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003baa:	d004      	beq.n	8003bb6 <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bb4:	d107      	bne.n	8003bc6 <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	681a      	ldr	r2, [r3, #0]
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bc4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bce:	d10f      	bne.n	8003bf0 <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	681a      	ldr	r2, [r3, #0]
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003bde:	601a      	str	r2, [r3, #0]
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	681a      	ldr	r2, [r3, #0]
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003bee:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003c00:	2303      	movs	r3, #3
 8003c02:	e010      	b.n	8003c26 <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003c04:	693b      	ldr	r3, [r7, #16]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d101      	bne.n	8003c0e <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	3b01      	subs	r3, #1
 8003c12:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	689a      	ldr	r2, [r3, #8]
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	687a      	ldr	r2, [r7, #4]
 8003c20:	429a      	cmp	r2, r3
 8003c22:	d194      	bne.n	8003b4e <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8003c24:	2300      	movs	r3, #0
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	3720      	adds	r7, #32
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}
 8003c2e:	bf00      	nop
 8003c30:	20000004 	.word	0x20000004

08003c34 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b086      	sub	sp, #24
 8003c38:	af02      	add	r7, sp, #8
 8003c3a:	60f8      	str	r0, [r7, #12]
 8003c3c:	60b9      	str	r1, [r7, #8]
 8003c3e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	9300      	str	r3, [sp, #0]
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	2200      	movs	r2, #0
 8003c48:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003c4c:	68f8      	ldr	r0, [r7, #12]
 8003c4e:	f7ff ff5f 	bl	8003b10 <SPI_WaitFifoStateUntilTimeout>
 8003c52:	4603      	mov	r3, r0
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d007      	beq.n	8003c68 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c5c:	f043 0220 	orr.w	r2, r3, #32
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003c64:	2303      	movs	r3, #3
 8003c66:	e027      	b.n	8003cb8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	9300      	str	r3, [sp, #0]
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	2180      	movs	r1, #128	; 0x80
 8003c72:	68f8      	ldr	r0, [r7, #12]
 8003c74:	f7ff fec4 	bl	8003a00 <SPI_WaitFlagStateUntilTimeout>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d007      	beq.n	8003c8e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c82:	f043 0220 	orr.w	r2, r3, #32
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003c8a:	2303      	movs	r3, #3
 8003c8c:	e014      	b.n	8003cb8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	9300      	str	r3, [sp, #0]
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	2200      	movs	r2, #0
 8003c96:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003c9a:	68f8      	ldr	r0, [r7, #12]
 8003c9c:	f7ff ff38 	bl	8003b10 <SPI_WaitFifoStateUntilTimeout>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d007      	beq.n	8003cb6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003caa:	f043 0220 	orr.w	r2, r3, #32
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003cb2:	2303      	movs	r3, #3
 8003cb4:	e000      	b.n	8003cb8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003cb6:	2300      	movs	r3, #0
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	3710      	adds	r7, #16
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd80      	pop	{r7, pc}

08003cc0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b082      	sub	sp, #8
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d101      	bne.n	8003cd2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e040      	b.n	8003d54 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d106      	bne.n	8003ce8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ce2:	6878      	ldr	r0, [r7, #4]
 8003ce4:	f7fd fe70 	bl	80019c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2224      	movs	r2, #36	; 0x24
 8003cec:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	681a      	ldr	r2, [r3, #0]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f022 0201 	bic.w	r2, r2, #1
 8003cfc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	f000 fa4e 	bl	80041a0 <UART_SetConfig>
 8003d04:	4603      	mov	r3, r0
 8003d06:	2b01      	cmp	r3, #1
 8003d08:	d101      	bne.n	8003d0e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e022      	b.n	8003d54 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d002      	beq.n	8003d1c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	f000 fc76 	bl	8004608 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	685a      	ldr	r2, [r3, #4]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d2a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	689a      	ldr	r2, [r3, #8]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d3a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f042 0201 	orr.w	r2, r2, #1
 8003d4a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003d4c:	6878      	ldr	r0, [r7, #4]
 8003d4e:	f000 fcfd 	bl	800474c <UART_CheckIdleState>
 8003d52:	4603      	mov	r3, r0
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	3708      	adds	r7, #8
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}

08003d5c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b088      	sub	sp, #32
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	69db      	ldr	r3, [r3, #28]
 8003d6a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003d7c:	69fa      	ldr	r2, [r7, #28]
 8003d7e:	f640 030f 	movw	r3, #2063	; 0x80f
 8003d82:	4013      	ands	r3, r2
 8003d84:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d113      	bne.n	8003db4 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003d8c:	69fb      	ldr	r3, [r7, #28]
 8003d8e:	f003 0320 	and.w	r3, r3, #32
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d00e      	beq.n	8003db4 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003d96:	69bb      	ldr	r3, [r7, #24]
 8003d98:	f003 0320 	and.w	r3, r3, #32
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d009      	beq.n	8003db4 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	f000 81ce 	beq.w	8004146 <HAL_UART_IRQHandler+0x3ea>
      {
        huart->RxISR(huart);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	4798      	blx	r3
      }
      return;
 8003db2:	e1c8      	b.n	8004146 <HAL_UART_IRQHandler+0x3ea>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	f000 80e3 	beq.w	8003f82 <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	f003 0301 	and.w	r3, r3, #1
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d105      	bne.n	8003dd2 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003dc6:	69ba      	ldr	r2, [r7, #24]
 8003dc8:	4ba6      	ldr	r3, [pc, #664]	; (8004064 <HAL_UART_IRQHandler+0x308>)
 8003dca:	4013      	ands	r3, r2
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	f000 80d8 	beq.w	8003f82 <HAL_UART_IRQHandler+0x226>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003dd2:	69fb      	ldr	r3, [r7, #28]
 8003dd4:	f003 0301 	and.w	r3, r3, #1
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d010      	beq.n	8003dfe <HAL_UART_IRQHandler+0xa2>
 8003ddc:	69bb      	ldr	r3, [r7, #24]
 8003dde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d00b      	beq.n	8003dfe <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	2201      	movs	r2, #1
 8003dec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003df4:	f043 0201 	orr.w	r2, r3, #1
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003dfe:	69fb      	ldr	r3, [r7, #28]
 8003e00:	f003 0302 	and.w	r3, r3, #2
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d010      	beq.n	8003e2a <HAL_UART_IRQHandler+0xce>
 8003e08:	697b      	ldr	r3, [r7, #20]
 8003e0a:	f003 0301 	and.w	r3, r3, #1
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d00b      	beq.n	8003e2a <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	2202      	movs	r2, #2
 8003e18:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e20:	f043 0204 	orr.w	r2, r3, #4
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003e2a:	69fb      	ldr	r3, [r7, #28]
 8003e2c:	f003 0304 	and.w	r3, r3, #4
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d010      	beq.n	8003e56 <HAL_UART_IRQHandler+0xfa>
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	f003 0301 	and.w	r3, r3, #1
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d00b      	beq.n	8003e56 <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	2204      	movs	r2, #4
 8003e44:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e4c:	f043 0202 	orr.w	r2, r3, #2
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003e56:	69fb      	ldr	r3, [r7, #28]
 8003e58:	f003 0308 	and.w	r3, r3, #8
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d015      	beq.n	8003e8c <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003e60:	69bb      	ldr	r3, [r7, #24]
 8003e62:	f003 0320 	and.w	r3, r3, #32
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d104      	bne.n	8003e74 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d00b      	beq.n	8003e8c <HAL_UART_IRQHandler+0x130>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	2208      	movs	r2, #8
 8003e7a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e82:	f043 0208 	orr.w	r2, r3, #8
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003e8c:	69fb      	ldr	r3, [r7, #28]
 8003e8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d011      	beq.n	8003eba <HAL_UART_IRQHandler+0x15e>
 8003e96:	69bb      	ldr	r3, [r7, #24]
 8003e98:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d00c      	beq.n	8003eba <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003ea8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003eb0:	f043 0220 	orr.w	r2, r3, #32
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	f000 8142 	beq.w	800414a <HAL_UART_IRQHandler+0x3ee>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003ec6:	69fb      	ldr	r3, [r7, #28]
 8003ec8:	f003 0320 	and.w	r3, r3, #32
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d00c      	beq.n	8003eea <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003ed0:	69bb      	ldr	r3, [r7, #24]
 8003ed2:	f003 0320 	and.w	r3, r3, #32
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d007      	beq.n	8003eea <HAL_UART_IRQHandler+0x18e>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d003      	beq.n	8003eea <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ee6:	6878      	ldr	r0, [r7, #4]
 8003ee8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ef0:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003efc:	2b40      	cmp	r3, #64	; 0x40
 8003efe:	d004      	beq.n	8003f0a <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d031      	beq.n	8003f6e <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003f0a:	6878      	ldr	r0, [r7, #4]
 8003f0c:	f000 fce3 	bl	80048d6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	689b      	ldr	r3, [r3, #8]
 8003f16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f1a:	2b40      	cmp	r3, #64	; 0x40
 8003f1c:	d123      	bne.n	8003f66 <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	689a      	ldr	r2, [r3, #8]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f2c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d013      	beq.n	8003f5e <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f3a:	4a4b      	ldr	r2, [pc, #300]	; (8004068 <HAL_UART_IRQHandler+0x30c>)
 8003f3c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f42:	4618      	mov	r0, r3
 8003f44:	f7fe f803 	bl	8001f4e <HAL_DMA_Abort_IT>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d017      	beq.n	8003f7e <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f54:	687a      	ldr	r2, [r7, #4]
 8003f56:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8003f58:	4610      	mov	r0, r2
 8003f5a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f5c:	e00f      	b.n	8003f7e <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	f000 f908 	bl	8004174 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f64:	e00b      	b.n	8003f7e <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f000 f904 	bl	8004174 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f6c:	e007      	b.n	8003f7e <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003f6e:	6878      	ldr	r0, [r7, #4]
 8003f70:	f000 f900 	bl	8004174 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2200      	movs	r2, #0
 8003f78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8003f7c:	e0e5      	b.n	800414a <HAL_UART_IRQHandler+0x3ee>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f7e:	bf00      	nop
    return;
 8003f80:	e0e3      	b.n	800414a <HAL_UART_IRQHandler+0x3ee>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f86:	2b01      	cmp	r3, #1
 8003f88:	f040 80a9 	bne.w	80040de <HAL_UART_IRQHandler+0x382>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8003f8c:	69fb      	ldr	r3, [r7, #28]
 8003f8e:	f003 0310 	and.w	r3, r3, #16
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	f000 80a3 	beq.w	80040de <HAL_UART_IRQHandler+0x382>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8003f98:	69bb      	ldr	r3, [r7, #24]
 8003f9a:	f003 0310 	and.w	r3, r3, #16
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	f000 809d 	beq.w	80040de <HAL_UART_IRQHandler+0x382>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	2210      	movs	r2, #16
 8003faa:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	689b      	ldr	r3, [r3, #8]
 8003fb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fb6:	2b40      	cmp	r3, #64	; 0x40
 8003fb8:	d158      	bne.n	800406c <HAL_UART_IRQHandler+0x310>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 8003fc4:	893b      	ldrh	r3, [r7, #8]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	f000 80c1 	beq.w	800414e <HAL_UART_IRQHandler+0x3f2>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003fd2:	893a      	ldrh	r2, [r7, #8]
 8003fd4:	429a      	cmp	r2, r3
 8003fd6:	f080 80ba 	bcs.w	800414e <HAL_UART_IRQHandler+0x3f2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	893a      	ldrh	r2, [r7, #8]
 8003fde:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f003 0320 	and.w	r3, r3, #32
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d12a      	bne.n	8004048 <HAL_UART_IRQHandler+0x2ec>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	681a      	ldr	r2, [r3, #0]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004000:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	689a      	ldr	r2, [r3, #8]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f022 0201 	bic.w	r2, r2, #1
 8004010:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	689a      	ldr	r2, [r3, #8]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004020:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2220      	movs	r2, #32
 8004026:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2200      	movs	r2, #0
 800402c:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f022 0210 	bic.w	r2, r2, #16
 800403c:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004042:	4618      	mov	r0, r3
 8004044:	f7fd ff45 	bl	8001ed2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004054:	b29b      	uxth	r3, r3
 8004056:	1ad3      	subs	r3, r2, r3
 8004058:	b29b      	uxth	r3, r3
 800405a:	4619      	mov	r1, r3
 800405c:	6878      	ldr	r0, [r7, #4]
 800405e:	f000 f893 	bl	8004188 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004062:	e074      	b.n	800414e <HAL_UART_IRQHandler+0x3f2>
 8004064:	04000120 	.word	0x04000120
 8004068:	08004935 	.word	0x08004935
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004078:	b29b      	uxth	r3, r3
 800407a:	1ad3      	subs	r3, r2, r3
 800407c:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004084:	b29b      	uxth	r3, r3
 8004086:	2b00      	cmp	r3, #0
 8004088:	d063      	beq.n	8004152 <HAL_UART_IRQHandler+0x3f6>
          &&(nb_rx_data > 0U) )
 800408a:	897b      	ldrh	r3, [r7, #10]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d060      	beq.n	8004152 <HAL_UART_IRQHandler+0x3f6>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	681a      	ldr	r2, [r3, #0]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800409e:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	689a      	ldr	r2, [r3, #8]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f022 0201 	bic.w	r2, r2, #1
 80040ae:	609a      	str	r2, [r3, #8]
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2220      	movs	r2, #32
 80040b4:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2200      	movs	r2, #0
 80040ba:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2200      	movs	r2, #0
 80040c0:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	681a      	ldr	r2, [r3, #0]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f022 0210 	bic.w	r2, r2, #16
 80040d0:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80040d2:	897b      	ldrh	r3, [r7, #10]
 80040d4:	4619      	mov	r1, r3
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	f000 f856 	bl	8004188 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80040dc:	e039      	b.n	8004152 <HAL_UART_IRQHandler+0x3f6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80040de:	69fb      	ldr	r3, [r7, #28]
 80040e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d00d      	beq.n	8004104 <HAL_UART_IRQHandler+0x3a8>
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d008      	beq.n	8004104 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80040fa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80040fc:	6878      	ldr	r0, [r7, #4]
 80040fe:	f000 fc48 	bl	8004992 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004102:	e029      	b.n	8004158 <HAL_UART_IRQHandler+0x3fc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004104:	69fb      	ldr	r3, [r7, #28]
 8004106:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800410a:	2b00      	cmp	r3, #0
 800410c:	d00d      	beq.n	800412a <HAL_UART_IRQHandler+0x3ce>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800410e:	69bb      	ldr	r3, [r7, #24]
 8004110:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004114:	2b00      	cmp	r3, #0
 8004116:	d008      	beq.n	800412a <HAL_UART_IRQHandler+0x3ce>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800411c:	2b00      	cmp	r3, #0
 800411e:	d01a      	beq.n	8004156 <HAL_UART_IRQHandler+0x3fa>
    {
      huart->TxISR(huart);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004124:	6878      	ldr	r0, [r7, #4]
 8004126:	4798      	blx	r3
    }
    return;
 8004128:	e015      	b.n	8004156 <HAL_UART_IRQHandler+0x3fa>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800412a:	69fb      	ldr	r3, [r7, #28]
 800412c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004130:	2b00      	cmp	r3, #0
 8004132:	d011      	beq.n	8004158 <HAL_UART_IRQHandler+0x3fc>
 8004134:	69bb      	ldr	r3, [r7, #24]
 8004136:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800413a:	2b00      	cmp	r3, #0
 800413c:	d00c      	beq.n	8004158 <HAL_UART_IRQHandler+0x3fc>
  {
    UART_EndTransmit_IT(huart);
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	f000 fc0e 	bl	8004960 <UART_EndTransmit_IT>
    return;
 8004144:	e008      	b.n	8004158 <HAL_UART_IRQHandler+0x3fc>
      return;
 8004146:	bf00      	nop
 8004148:	e006      	b.n	8004158 <HAL_UART_IRQHandler+0x3fc>
    return;
 800414a:	bf00      	nop
 800414c:	e004      	b.n	8004158 <HAL_UART_IRQHandler+0x3fc>
      return;
 800414e:	bf00      	nop
 8004150:	e002      	b.n	8004158 <HAL_UART_IRQHandler+0x3fc>
      return;
 8004152:	bf00      	nop
 8004154:	e000      	b.n	8004158 <HAL_UART_IRQHandler+0x3fc>
    return;
 8004156:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004158:	3720      	adds	r7, #32
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}
 800415e:	bf00      	nop

08004160 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004160:	b480      	push	{r7}
 8004162:	b083      	sub	sp, #12
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004168:	bf00      	nop
 800416a:	370c      	adds	r7, #12
 800416c:	46bd      	mov	sp, r7
 800416e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004172:	4770      	bx	lr

08004174 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004174:	b480      	push	{r7}
 8004176:	b083      	sub	sp, #12
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800417c:	bf00      	nop
 800417e:	370c      	adds	r7, #12
 8004180:	46bd      	mov	sp, r7
 8004182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004186:	4770      	bx	lr

08004188 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004188:	b480      	push	{r7}
 800418a:	b083      	sub	sp, #12
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
 8004190:	460b      	mov	r3, r1
 8004192:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004194:	bf00      	nop
 8004196:	370c      	adds	r7, #12
 8004198:	46bd      	mov	sp, r7
 800419a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419e:	4770      	bx	lr

080041a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041a0:	b5b0      	push	{r4, r5, r7, lr}
 80041a2:	b088      	sub	sp, #32
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80041a8:	2300      	movs	r3, #0
 80041aa:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	689a      	ldr	r2, [r3, #8]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	691b      	ldr	r3, [r3, #16]
 80041b4:	431a      	orrs	r2, r3
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	695b      	ldr	r3, [r3, #20]
 80041ba:	431a      	orrs	r2, r3
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	69db      	ldr	r3, [r3, #28]
 80041c0:	4313      	orrs	r3, r2
 80041c2:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	681a      	ldr	r2, [r3, #0]
 80041ca:	4baa      	ldr	r3, [pc, #680]	; (8004474 <UART_SetConfig+0x2d4>)
 80041cc:	4013      	ands	r3, r2
 80041ce:	687a      	ldr	r2, [r7, #4]
 80041d0:	6812      	ldr	r2, [r2, #0]
 80041d2:	69f9      	ldr	r1, [r7, #28]
 80041d4:	430b      	orrs	r3, r1
 80041d6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	68da      	ldr	r2, [r3, #12]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	430a      	orrs	r2, r1
 80041ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	699b      	ldr	r3, [r3, #24]
 80041f2:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a9f      	ldr	r2, [pc, #636]	; (8004478 <UART_SetConfig+0x2d8>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d004      	beq.n	8004208 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6a1b      	ldr	r3, [r3, #32]
 8004202:	69fa      	ldr	r2, [r7, #28]
 8004204:	4313      	orrs	r3, r2
 8004206:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	689b      	ldr	r3, [r3, #8]
 800420e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	69fa      	ldr	r2, [r7, #28]
 8004218:	430a      	orrs	r2, r1
 800421a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a96      	ldr	r2, [pc, #600]	; (800447c <UART_SetConfig+0x2dc>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d121      	bne.n	800426a <UART_SetConfig+0xca>
 8004226:	4b96      	ldr	r3, [pc, #600]	; (8004480 <UART_SetConfig+0x2e0>)
 8004228:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800422c:	f003 0303 	and.w	r3, r3, #3
 8004230:	2b03      	cmp	r3, #3
 8004232:	d817      	bhi.n	8004264 <UART_SetConfig+0xc4>
 8004234:	a201      	add	r2, pc, #4	; (adr r2, 800423c <UART_SetConfig+0x9c>)
 8004236:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800423a:	bf00      	nop
 800423c:	0800424d 	.word	0x0800424d
 8004240:	08004259 	.word	0x08004259
 8004244:	08004253 	.word	0x08004253
 8004248:	0800425f 	.word	0x0800425f
 800424c:	2301      	movs	r3, #1
 800424e:	76fb      	strb	r3, [r7, #27]
 8004250:	e096      	b.n	8004380 <UART_SetConfig+0x1e0>
 8004252:	2302      	movs	r3, #2
 8004254:	76fb      	strb	r3, [r7, #27]
 8004256:	e093      	b.n	8004380 <UART_SetConfig+0x1e0>
 8004258:	2304      	movs	r3, #4
 800425a:	76fb      	strb	r3, [r7, #27]
 800425c:	e090      	b.n	8004380 <UART_SetConfig+0x1e0>
 800425e:	2308      	movs	r3, #8
 8004260:	76fb      	strb	r3, [r7, #27]
 8004262:	e08d      	b.n	8004380 <UART_SetConfig+0x1e0>
 8004264:	2310      	movs	r3, #16
 8004266:	76fb      	strb	r3, [r7, #27]
 8004268:	e08a      	b.n	8004380 <UART_SetConfig+0x1e0>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a85      	ldr	r2, [pc, #532]	; (8004484 <UART_SetConfig+0x2e4>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d132      	bne.n	80042da <UART_SetConfig+0x13a>
 8004274:	4b82      	ldr	r3, [pc, #520]	; (8004480 <UART_SetConfig+0x2e0>)
 8004276:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800427a:	f003 030c 	and.w	r3, r3, #12
 800427e:	2b0c      	cmp	r3, #12
 8004280:	d828      	bhi.n	80042d4 <UART_SetConfig+0x134>
 8004282:	a201      	add	r2, pc, #4	; (adr r2, 8004288 <UART_SetConfig+0xe8>)
 8004284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004288:	080042bd 	.word	0x080042bd
 800428c:	080042d5 	.word	0x080042d5
 8004290:	080042d5 	.word	0x080042d5
 8004294:	080042d5 	.word	0x080042d5
 8004298:	080042c9 	.word	0x080042c9
 800429c:	080042d5 	.word	0x080042d5
 80042a0:	080042d5 	.word	0x080042d5
 80042a4:	080042d5 	.word	0x080042d5
 80042a8:	080042c3 	.word	0x080042c3
 80042ac:	080042d5 	.word	0x080042d5
 80042b0:	080042d5 	.word	0x080042d5
 80042b4:	080042d5 	.word	0x080042d5
 80042b8:	080042cf 	.word	0x080042cf
 80042bc:	2300      	movs	r3, #0
 80042be:	76fb      	strb	r3, [r7, #27]
 80042c0:	e05e      	b.n	8004380 <UART_SetConfig+0x1e0>
 80042c2:	2302      	movs	r3, #2
 80042c4:	76fb      	strb	r3, [r7, #27]
 80042c6:	e05b      	b.n	8004380 <UART_SetConfig+0x1e0>
 80042c8:	2304      	movs	r3, #4
 80042ca:	76fb      	strb	r3, [r7, #27]
 80042cc:	e058      	b.n	8004380 <UART_SetConfig+0x1e0>
 80042ce:	2308      	movs	r3, #8
 80042d0:	76fb      	strb	r3, [r7, #27]
 80042d2:	e055      	b.n	8004380 <UART_SetConfig+0x1e0>
 80042d4:	2310      	movs	r3, #16
 80042d6:	76fb      	strb	r3, [r7, #27]
 80042d8:	e052      	b.n	8004380 <UART_SetConfig+0x1e0>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a6a      	ldr	r2, [pc, #424]	; (8004488 <UART_SetConfig+0x2e8>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d120      	bne.n	8004326 <UART_SetConfig+0x186>
 80042e4:	4b66      	ldr	r3, [pc, #408]	; (8004480 <UART_SetConfig+0x2e0>)
 80042e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042ea:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80042ee:	2b30      	cmp	r3, #48	; 0x30
 80042f0:	d013      	beq.n	800431a <UART_SetConfig+0x17a>
 80042f2:	2b30      	cmp	r3, #48	; 0x30
 80042f4:	d814      	bhi.n	8004320 <UART_SetConfig+0x180>
 80042f6:	2b20      	cmp	r3, #32
 80042f8:	d009      	beq.n	800430e <UART_SetConfig+0x16e>
 80042fa:	2b20      	cmp	r3, #32
 80042fc:	d810      	bhi.n	8004320 <UART_SetConfig+0x180>
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d002      	beq.n	8004308 <UART_SetConfig+0x168>
 8004302:	2b10      	cmp	r3, #16
 8004304:	d006      	beq.n	8004314 <UART_SetConfig+0x174>
 8004306:	e00b      	b.n	8004320 <UART_SetConfig+0x180>
 8004308:	2300      	movs	r3, #0
 800430a:	76fb      	strb	r3, [r7, #27]
 800430c:	e038      	b.n	8004380 <UART_SetConfig+0x1e0>
 800430e:	2302      	movs	r3, #2
 8004310:	76fb      	strb	r3, [r7, #27]
 8004312:	e035      	b.n	8004380 <UART_SetConfig+0x1e0>
 8004314:	2304      	movs	r3, #4
 8004316:	76fb      	strb	r3, [r7, #27]
 8004318:	e032      	b.n	8004380 <UART_SetConfig+0x1e0>
 800431a:	2308      	movs	r3, #8
 800431c:	76fb      	strb	r3, [r7, #27]
 800431e:	e02f      	b.n	8004380 <UART_SetConfig+0x1e0>
 8004320:	2310      	movs	r3, #16
 8004322:	76fb      	strb	r3, [r7, #27]
 8004324:	e02c      	b.n	8004380 <UART_SetConfig+0x1e0>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a53      	ldr	r2, [pc, #332]	; (8004478 <UART_SetConfig+0x2d8>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d125      	bne.n	800437c <UART_SetConfig+0x1dc>
 8004330:	4b53      	ldr	r3, [pc, #332]	; (8004480 <UART_SetConfig+0x2e0>)
 8004332:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004336:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800433a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800433e:	d017      	beq.n	8004370 <UART_SetConfig+0x1d0>
 8004340:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004344:	d817      	bhi.n	8004376 <UART_SetConfig+0x1d6>
 8004346:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800434a:	d00b      	beq.n	8004364 <UART_SetConfig+0x1c4>
 800434c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004350:	d811      	bhi.n	8004376 <UART_SetConfig+0x1d6>
 8004352:	2b00      	cmp	r3, #0
 8004354:	d003      	beq.n	800435e <UART_SetConfig+0x1be>
 8004356:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800435a:	d006      	beq.n	800436a <UART_SetConfig+0x1ca>
 800435c:	e00b      	b.n	8004376 <UART_SetConfig+0x1d6>
 800435e:	2300      	movs	r3, #0
 8004360:	76fb      	strb	r3, [r7, #27]
 8004362:	e00d      	b.n	8004380 <UART_SetConfig+0x1e0>
 8004364:	2302      	movs	r3, #2
 8004366:	76fb      	strb	r3, [r7, #27]
 8004368:	e00a      	b.n	8004380 <UART_SetConfig+0x1e0>
 800436a:	2304      	movs	r3, #4
 800436c:	76fb      	strb	r3, [r7, #27]
 800436e:	e007      	b.n	8004380 <UART_SetConfig+0x1e0>
 8004370:	2308      	movs	r3, #8
 8004372:	76fb      	strb	r3, [r7, #27]
 8004374:	e004      	b.n	8004380 <UART_SetConfig+0x1e0>
 8004376:	2310      	movs	r3, #16
 8004378:	76fb      	strb	r3, [r7, #27]
 800437a:	e001      	b.n	8004380 <UART_SetConfig+0x1e0>
 800437c:	2310      	movs	r3, #16
 800437e:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a3c      	ldr	r2, [pc, #240]	; (8004478 <UART_SetConfig+0x2d8>)
 8004386:	4293      	cmp	r3, r2
 8004388:	f040 8082 	bne.w	8004490 <UART_SetConfig+0x2f0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800438c:	7efb      	ldrb	r3, [r7, #27]
 800438e:	2b08      	cmp	r3, #8
 8004390:	d823      	bhi.n	80043da <UART_SetConfig+0x23a>
 8004392:	a201      	add	r2, pc, #4	; (adr r2, 8004398 <UART_SetConfig+0x1f8>)
 8004394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004398:	080043bd 	.word	0x080043bd
 800439c:	080043db 	.word	0x080043db
 80043a0:	080043c5 	.word	0x080043c5
 80043a4:	080043db 	.word	0x080043db
 80043a8:	080043cb 	.word	0x080043cb
 80043ac:	080043db 	.word	0x080043db
 80043b0:	080043db 	.word	0x080043db
 80043b4:	080043db 	.word	0x080043db
 80043b8:	080043d3 	.word	0x080043d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80043bc:	f7fe fefc 	bl	80031b8 <HAL_RCC_GetPCLK1Freq>
 80043c0:	6178      	str	r0, [r7, #20]
        break;
 80043c2:	e00f      	b.n	80043e4 <UART_SetConfig+0x244>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80043c4:	4b31      	ldr	r3, [pc, #196]	; (800448c <UART_SetConfig+0x2ec>)
 80043c6:	617b      	str	r3, [r7, #20]
        break;
 80043c8:	e00c      	b.n	80043e4 <UART_SetConfig+0x244>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80043ca:	f7fe fe5d 	bl	8003088 <HAL_RCC_GetSysClockFreq>
 80043ce:	6178      	str	r0, [r7, #20]
        break;
 80043d0:	e008      	b.n	80043e4 <UART_SetConfig+0x244>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80043d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043d6:	617b      	str	r3, [r7, #20]
        break;
 80043d8:	e004      	b.n	80043e4 <UART_SetConfig+0x244>
      default:
        pclk = 0U;
 80043da:	2300      	movs	r3, #0
 80043dc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	76bb      	strb	r3, [r7, #26]
        break;
 80043e2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	f000 8100 	beq.w	80045ec <UART_SetConfig+0x44c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	685a      	ldr	r2, [r3, #4]
 80043f0:	4613      	mov	r3, r2
 80043f2:	005b      	lsls	r3, r3, #1
 80043f4:	4413      	add	r3, r2
 80043f6:	697a      	ldr	r2, [r7, #20]
 80043f8:	429a      	cmp	r2, r3
 80043fa:	d305      	bcc.n	8004408 <UART_SetConfig+0x268>
          (pclk > (4096U * huart->Init.BaudRate)))
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004402:	697a      	ldr	r2, [r7, #20]
 8004404:	429a      	cmp	r2, r3
 8004406:	d902      	bls.n	800440e <UART_SetConfig+0x26e>
      {
        ret = HAL_ERROR;
 8004408:	2301      	movs	r3, #1
 800440a:	76bb      	strb	r3, [r7, #26]
 800440c:	e0ee      	b.n	80045ec <UART_SetConfig+0x44c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800440e:	697b      	ldr	r3, [r7, #20]
 8004410:	4618      	mov	r0, r3
 8004412:	f04f 0100 	mov.w	r1, #0
 8004416:	f04f 0200 	mov.w	r2, #0
 800441a:	f04f 0300 	mov.w	r3, #0
 800441e:	020b      	lsls	r3, r1, #8
 8004420:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004424:	0202      	lsls	r2, r0, #8
 8004426:	6879      	ldr	r1, [r7, #4]
 8004428:	6849      	ldr	r1, [r1, #4]
 800442a:	0849      	lsrs	r1, r1, #1
 800442c:	4608      	mov	r0, r1
 800442e:	f04f 0100 	mov.w	r1, #0
 8004432:	1814      	adds	r4, r2, r0
 8004434:	eb43 0501 	adc.w	r5, r3, r1
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	461a      	mov	r2, r3
 800443e:	f04f 0300 	mov.w	r3, #0
 8004442:	4620      	mov	r0, r4
 8004444:	4629      	mov	r1, r5
 8004446:	f7fb fec1 	bl	80001cc <__aeabi_uldivmod>
 800444a:	4602      	mov	r2, r0
 800444c:	460b      	mov	r3, r1
 800444e:	4613      	mov	r3, r2
 8004450:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004458:	d308      	bcc.n	800446c <UART_SetConfig+0x2cc>
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004460:	d204      	bcs.n	800446c <UART_SetConfig+0x2cc>
        {
          huart->Instance->BRR = usartdiv;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	693a      	ldr	r2, [r7, #16]
 8004468:	60da      	str	r2, [r3, #12]
 800446a:	e0bf      	b.n	80045ec <UART_SetConfig+0x44c>
        }
        else
        {
          ret = HAL_ERROR;
 800446c:	2301      	movs	r3, #1
 800446e:	76bb      	strb	r3, [r7, #26]
 8004470:	e0bc      	b.n	80045ec <UART_SetConfig+0x44c>
 8004472:	bf00      	nop
 8004474:	efff69f3 	.word	0xefff69f3
 8004478:	40008000 	.word	0x40008000
 800447c:	40013800 	.word	0x40013800
 8004480:	40021000 	.word	0x40021000
 8004484:	40004400 	.word	0x40004400
 8004488:	40004800 	.word	0x40004800
 800448c:	00f42400 	.word	0x00f42400
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	69db      	ldr	r3, [r3, #28]
 8004494:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004498:	d15c      	bne.n	8004554 <UART_SetConfig+0x3b4>
  {
    switch (clocksource)
 800449a:	7efb      	ldrb	r3, [r7, #27]
 800449c:	2b08      	cmp	r3, #8
 800449e:	d828      	bhi.n	80044f2 <UART_SetConfig+0x352>
 80044a0:	a201      	add	r2, pc, #4	; (adr r2, 80044a8 <UART_SetConfig+0x308>)
 80044a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044a6:	bf00      	nop
 80044a8:	080044cd 	.word	0x080044cd
 80044ac:	080044d5 	.word	0x080044d5
 80044b0:	080044dd 	.word	0x080044dd
 80044b4:	080044f3 	.word	0x080044f3
 80044b8:	080044e3 	.word	0x080044e3
 80044bc:	080044f3 	.word	0x080044f3
 80044c0:	080044f3 	.word	0x080044f3
 80044c4:	080044f3 	.word	0x080044f3
 80044c8:	080044eb 	.word	0x080044eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044cc:	f7fe fe74 	bl	80031b8 <HAL_RCC_GetPCLK1Freq>
 80044d0:	6178      	str	r0, [r7, #20]
        break;
 80044d2:	e013      	b.n	80044fc <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80044d4:	f7fe fe86 	bl	80031e4 <HAL_RCC_GetPCLK2Freq>
 80044d8:	6178      	str	r0, [r7, #20]
        break;
 80044da:	e00f      	b.n	80044fc <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80044dc:	4b49      	ldr	r3, [pc, #292]	; (8004604 <UART_SetConfig+0x464>)
 80044de:	617b      	str	r3, [r7, #20]
        break;
 80044e0:	e00c      	b.n	80044fc <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044e2:	f7fe fdd1 	bl	8003088 <HAL_RCC_GetSysClockFreq>
 80044e6:	6178      	str	r0, [r7, #20]
        break;
 80044e8:	e008      	b.n	80044fc <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80044ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044ee:	617b      	str	r3, [r7, #20]
        break;
 80044f0:	e004      	b.n	80044fc <UART_SetConfig+0x35c>
      default:
        pclk = 0U;
 80044f2:	2300      	movs	r3, #0
 80044f4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	76bb      	strb	r3, [r7, #26]
        break;
 80044fa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d074      	beq.n	80045ec <UART_SetConfig+0x44c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	005a      	lsls	r2, r3, #1
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	085b      	lsrs	r3, r3, #1
 800450c:	441a      	add	r2, r3
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	fbb2 f3f3 	udiv	r3, r2, r3
 8004516:	b29b      	uxth	r3, r3
 8004518:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	2b0f      	cmp	r3, #15
 800451e:	d916      	bls.n	800454e <UART_SetConfig+0x3ae>
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004526:	d212      	bcs.n	800454e <UART_SetConfig+0x3ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004528:	693b      	ldr	r3, [r7, #16]
 800452a:	b29b      	uxth	r3, r3
 800452c:	f023 030f 	bic.w	r3, r3, #15
 8004530:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	085b      	lsrs	r3, r3, #1
 8004536:	b29b      	uxth	r3, r3
 8004538:	f003 0307 	and.w	r3, r3, #7
 800453c:	b29a      	uxth	r2, r3
 800453e:	89fb      	ldrh	r3, [r7, #14]
 8004540:	4313      	orrs	r3, r2
 8004542:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	89fa      	ldrh	r2, [r7, #14]
 800454a:	60da      	str	r2, [r3, #12]
 800454c:	e04e      	b.n	80045ec <UART_SetConfig+0x44c>
      }
      else
      {
        ret = HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	76bb      	strb	r3, [r7, #26]
 8004552:	e04b      	b.n	80045ec <UART_SetConfig+0x44c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004554:	7efb      	ldrb	r3, [r7, #27]
 8004556:	2b08      	cmp	r3, #8
 8004558:	d827      	bhi.n	80045aa <UART_SetConfig+0x40a>
 800455a:	a201      	add	r2, pc, #4	; (adr r2, 8004560 <UART_SetConfig+0x3c0>)
 800455c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004560:	08004585 	.word	0x08004585
 8004564:	0800458d 	.word	0x0800458d
 8004568:	08004595 	.word	0x08004595
 800456c:	080045ab 	.word	0x080045ab
 8004570:	0800459b 	.word	0x0800459b
 8004574:	080045ab 	.word	0x080045ab
 8004578:	080045ab 	.word	0x080045ab
 800457c:	080045ab 	.word	0x080045ab
 8004580:	080045a3 	.word	0x080045a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004584:	f7fe fe18 	bl	80031b8 <HAL_RCC_GetPCLK1Freq>
 8004588:	6178      	str	r0, [r7, #20]
        break;
 800458a:	e013      	b.n	80045b4 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800458c:	f7fe fe2a 	bl	80031e4 <HAL_RCC_GetPCLK2Freq>
 8004590:	6178      	str	r0, [r7, #20]
        break;
 8004592:	e00f      	b.n	80045b4 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004594:	4b1b      	ldr	r3, [pc, #108]	; (8004604 <UART_SetConfig+0x464>)
 8004596:	617b      	str	r3, [r7, #20]
        break;
 8004598:	e00c      	b.n	80045b4 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800459a:	f7fe fd75 	bl	8003088 <HAL_RCC_GetSysClockFreq>
 800459e:	6178      	str	r0, [r7, #20]
        break;
 80045a0:	e008      	b.n	80045b4 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80045a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045a6:	617b      	str	r3, [r7, #20]
        break;
 80045a8:	e004      	b.n	80045b4 <UART_SetConfig+0x414>
      default:
        pclk = 0U;
 80045aa:	2300      	movs	r3, #0
 80045ac:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80045ae:	2301      	movs	r3, #1
 80045b0:	76bb      	strb	r3, [r7, #26]
        break;
 80045b2:	bf00      	nop
    }

    if (pclk != 0U)
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d018      	beq.n	80045ec <UART_SetConfig+0x44c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	085a      	lsrs	r2, r3, #1
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	441a      	add	r2, r3
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80045cc:	b29b      	uxth	r3, r3
 80045ce:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80045d0:	693b      	ldr	r3, [r7, #16]
 80045d2:	2b0f      	cmp	r3, #15
 80045d4:	d908      	bls.n	80045e8 <UART_SetConfig+0x448>
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045dc:	d204      	bcs.n	80045e8 <UART_SetConfig+0x448>
      {
        huart->Instance->BRR = usartdiv;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	693a      	ldr	r2, [r7, #16]
 80045e4:	60da      	str	r2, [r3, #12]
 80045e6:	e001      	b.n	80045ec <UART_SetConfig+0x44c>
      }
      else
      {
        ret = HAL_ERROR;
 80045e8:	2301      	movs	r3, #1
 80045ea:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2200      	movs	r2, #0
 80045f0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2200      	movs	r2, #0
 80045f6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80045f8:	7ebb      	ldrb	r3, [r7, #26]
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	3720      	adds	r7, #32
 80045fe:	46bd      	mov	sp, r7
 8004600:	bdb0      	pop	{r4, r5, r7, pc}
 8004602:	bf00      	nop
 8004604:	00f42400 	.word	0x00f42400

08004608 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004608:	b480      	push	{r7}
 800460a:	b083      	sub	sp, #12
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004614:	f003 0301 	and.w	r3, r3, #1
 8004618:	2b00      	cmp	r3, #0
 800461a:	d00a      	beq.n	8004632 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	430a      	orrs	r2, r1
 8004630:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004636:	f003 0302 	and.w	r3, r3, #2
 800463a:	2b00      	cmp	r3, #0
 800463c:	d00a      	beq.n	8004654 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	430a      	orrs	r2, r1
 8004652:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004658:	f003 0304 	and.w	r3, r3, #4
 800465c:	2b00      	cmp	r3, #0
 800465e:	d00a      	beq.n	8004676 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	430a      	orrs	r2, r1
 8004674:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800467a:	f003 0308 	and.w	r3, r3, #8
 800467e:	2b00      	cmp	r3, #0
 8004680:	d00a      	beq.n	8004698 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	430a      	orrs	r2, r1
 8004696:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800469c:	f003 0310 	and.w	r3, r3, #16
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d00a      	beq.n	80046ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	689b      	ldr	r3, [r3, #8]
 80046aa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	430a      	orrs	r2, r1
 80046b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046be:	f003 0320 	and.w	r3, r3, #32
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d00a      	beq.n	80046dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	689b      	ldr	r3, [r3, #8]
 80046cc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	430a      	orrs	r2, r1
 80046da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d01a      	beq.n	800471e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	430a      	orrs	r2, r1
 80046fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004702:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004706:	d10a      	bne.n	800471e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	430a      	orrs	r2, r1
 800471c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004722:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004726:	2b00      	cmp	r3, #0
 8004728:	d00a      	beq.n	8004740 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	430a      	orrs	r2, r1
 800473e:	605a      	str	r2, [r3, #4]
  }
}
 8004740:	bf00      	nop
 8004742:	370c      	adds	r7, #12
 8004744:	46bd      	mov	sp, r7
 8004746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474a:	4770      	bx	lr

0800474c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b086      	sub	sp, #24
 8004750:	af02      	add	r7, sp, #8
 8004752:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2200      	movs	r2, #0
 8004758:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800475c:	f7fd fa78 	bl	8001c50 <HAL_GetTick>
 8004760:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f003 0308 	and.w	r3, r3, #8
 800476c:	2b08      	cmp	r3, #8
 800476e:	d10e      	bne.n	800478e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004770:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004774:	9300      	str	r3, [sp, #0]
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	2200      	movs	r2, #0
 800477a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	f000 f82d 	bl	80047de <UART_WaitOnFlagUntilTimeout>
 8004784:	4603      	mov	r3, r0
 8004786:	2b00      	cmp	r3, #0
 8004788:	d001      	beq.n	800478e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800478a:	2303      	movs	r3, #3
 800478c:	e023      	b.n	80047d6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f003 0304 	and.w	r3, r3, #4
 8004798:	2b04      	cmp	r3, #4
 800479a:	d10e      	bne.n	80047ba <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800479c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80047a0:	9300      	str	r3, [sp, #0]
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	2200      	movs	r2, #0
 80047a6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80047aa:	6878      	ldr	r0, [r7, #4]
 80047ac:	f000 f817 	bl	80047de <UART_WaitOnFlagUntilTimeout>
 80047b0:	4603      	mov	r3, r0
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d001      	beq.n	80047ba <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80047b6:	2303      	movs	r3, #3
 80047b8:	e00d      	b.n	80047d6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2220      	movs	r2, #32
 80047be:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2220      	movs	r2, #32
 80047c4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2200      	movs	r2, #0
 80047ca:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2200      	movs	r2, #0
 80047d0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80047d4:	2300      	movs	r3, #0
}
 80047d6:	4618      	mov	r0, r3
 80047d8:	3710      	adds	r7, #16
 80047da:	46bd      	mov	sp, r7
 80047dc:	bd80      	pop	{r7, pc}

080047de <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80047de:	b580      	push	{r7, lr}
 80047e0:	b084      	sub	sp, #16
 80047e2:	af00      	add	r7, sp, #0
 80047e4:	60f8      	str	r0, [r7, #12]
 80047e6:	60b9      	str	r1, [r7, #8]
 80047e8:	603b      	str	r3, [r7, #0]
 80047ea:	4613      	mov	r3, r2
 80047ec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047ee:	e05e      	b.n	80048ae <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047f0:	69bb      	ldr	r3, [r7, #24]
 80047f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80047f6:	d05a      	beq.n	80048ae <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047f8:	f7fd fa2a 	bl	8001c50 <HAL_GetTick>
 80047fc:	4602      	mov	r2, r0
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	1ad3      	subs	r3, r2, r3
 8004802:	69ba      	ldr	r2, [r7, #24]
 8004804:	429a      	cmp	r2, r3
 8004806:	d302      	bcc.n	800480e <UART_WaitOnFlagUntilTimeout+0x30>
 8004808:	69bb      	ldr	r3, [r7, #24]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d11b      	bne.n	8004846 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	681a      	ldr	r2, [r3, #0]
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800481c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	689a      	ldr	r2, [r3, #8]
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f022 0201 	bic.w	r2, r2, #1
 800482c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	2220      	movs	r2, #32
 8004832:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	2220      	movs	r2, #32
 8004838:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2200      	movs	r2, #0
 800483e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004842:	2303      	movs	r3, #3
 8004844:	e043      	b.n	80048ce <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f003 0304 	and.w	r3, r3, #4
 8004850:	2b00      	cmp	r3, #0
 8004852:	d02c      	beq.n	80048ae <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	69db      	ldr	r3, [r3, #28]
 800485a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800485e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004862:	d124      	bne.n	80048ae <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800486c:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	681a      	ldr	r2, [r3, #0]
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800487c:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	689a      	ldr	r2, [r3, #8]
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f022 0201 	bic.w	r2, r2, #1
 800488c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	2220      	movs	r2, #32
 8004892:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	2220      	movs	r2, #32
 8004898:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	2220      	movs	r2, #32
 800489e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	2200      	movs	r2, #0
 80048a6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80048aa:	2303      	movs	r3, #3
 80048ac:	e00f      	b.n	80048ce <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	69da      	ldr	r2, [r3, #28]
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	4013      	ands	r3, r2
 80048b8:	68ba      	ldr	r2, [r7, #8]
 80048ba:	429a      	cmp	r2, r3
 80048bc:	bf0c      	ite	eq
 80048be:	2301      	moveq	r3, #1
 80048c0:	2300      	movne	r3, #0
 80048c2:	b2db      	uxtb	r3, r3
 80048c4:	461a      	mov	r2, r3
 80048c6:	79fb      	ldrb	r3, [r7, #7]
 80048c8:	429a      	cmp	r2, r3
 80048ca:	d091      	beq.n	80047f0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80048cc:	2300      	movs	r3, #0
}
 80048ce:	4618      	mov	r0, r3
 80048d0:	3710      	adds	r7, #16
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bd80      	pop	{r7, pc}

080048d6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80048d6:	b480      	push	{r7}
 80048d8:	b083      	sub	sp, #12
 80048da:	af00      	add	r7, sp, #0
 80048dc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	681a      	ldr	r2, [r3, #0]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80048ec:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	689a      	ldr	r2, [r3, #8]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f022 0201 	bic.w	r2, r2, #1
 80048fc:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004902:	2b01      	cmp	r3, #1
 8004904:	d107      	bne.n	8004916 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	681a      	ldr	r2, [r3, #0]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f022 0210 	bic.w	r2, r2, #16
 8004914:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2220      	movs	r2, #32
 800491a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2200      	movs	r2, #0
 8004920:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2200      	movs	r2, #0
 8004926:	665a      	str	r2, [r3, #100]	; 0x64
}
 8004928:	bf00      	nop
 800492a:	370c      	adds	r7, #12
 800492c:	46bd      	mov	sp, r7
 800492e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004932:	4770      	bx	lr

08004934 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b084      	sub	sp, #16
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004940:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	2200      	movs	r2, #0
 8004946:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	2200      	movs	r2, #0
 800494e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004952:	68f8      	ldr	r0, [r7, #12]
 8004954:	f7ff fc0e 	bl	8004174 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004958:	bf00      	nop
 800495a:	3710      	adds	r7, #16
 800495c:	46bd      	mov	sp, r7
 800495e:	bd80      	pop	{r7, pc}

08004960 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b082      	sub	sp, #8
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	681a      	ldr	r2, [r3, #0]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004976:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2220      	movs	r2, #32
 800497c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2200      	movs	r2, #0
 8004982:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004984:	6878      	ldr	r0, [r7, #4]
 8004986:	f7ff fbeb 	bl	8004160 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800498a:	bf00      	nop
 800498c:	3708      	adds	r7, #8
 800498e:	46bd      	mov	sp, r7
 8004990:	bd80      	pop	{r7, pc}

08004992 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004992:	b480      	push	{r7}
 8004994:	b083      	sub	sp, #12
 8004996:	af00      	add	r7, sp, #0
 8004998:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800499a:	bf00      	nop
 800499c:	370c      	adds	r7, #12
 800499e:	46bd      	mov	sp, r7
 80049a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a4:	4770      	bx	lr
	...

080049a8 <__libc_init_array>:
 80049a8:	b570      	push	{r4, r5, r6, lr}
 80049aa:	4d0d      	ldr	r5, [pc, #52]	; (80049e0 <__libc_init_array+0x38>)
 80049ac:	4c0d      	ldr	r4, [pc, #52]	; (80049e4 <__libc_init_array+0x3c>)
 80049ae:	1b64      	subs	r4, r4, r5
 80049b0:	10a4      	asrs	r4, r4, #2
 80049b2:	2600      	movs	r6, #0
 80049b4:	42a6      	cmp	r6, r4
 80049b6:	d109      	bne.n	80049cc <__libc_init_array+0x24>
 80049b8:	4d0b      	ldr	r5, [pc, #44]	; (80049e8 <__libc_init_array+0x40>)
 80049ba:	4c0c      	ldr	r4, [pc, #48]	; (80049ec <__libc_init_array+0x44>)
 80049bc:	f000 f820 	bl	8004a00 <_init>
 80049c0:	1b64      	subs	r4, r4, r5
 80049c2:	10a4      	asrs	r4, r4, #2
 80049c4:	2600      	movs	r6, #0
 80049c6:	42a6      	cmp	r6, r4
 80049c8:	d105      	bne.n	80049d6 <__libc_init_array+0x2e>
 80049ca:	bd70      	pop	{r4, r5, r6, pc}
 80049cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80049d0:	4798      	blx	r3
 80049d2:	3601      	adds	r6, #1
 80049d4:	e7ee      	b.n	80049b4 <__libc_init_array+0xc>
 80049d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80049da:	4798      	blx	r3
 80049dc:	3601      	adds	r6, #1
 80049de:	e7f2      	b.n	80049c6 <__libc_init_array+0x1e>
 80049e0:	08004cdc 	.word	0x08004cdc
 80049e4:	08004cdc 	.word	0x08004cdc
 80049e8:	08004cdc 	.word	0x08004cdc
 80049ec:	08004ce0 	.word	0x08004ce0

080049f0 <memset>:
 80049f0:	4402      	add	r2, r0
 80049f2:	4603      	mov	r3, r0
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d100      	bne.n	80049fa <memset+0xa>
 80049f8:	4770      	bx	lr
 80049fa:	f803 1b01 	strb.w	r1, [r3], #1
 80049fe:	e7f9      	b.n	80049f4 <memset+0x4>

08004a00 <_init>:
 8004a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a02:	bf00      	nop
 8004a04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a06:	bc08      	pop	{r3}
 8004a08:	469e      	mov	lr, r3
 8004a0a:	4770      	bx	lr

08004a0c <_fini>:
 8004a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a0e:	bf00      	nop
 8004a10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a12:	bc08      	pop	{r3}
 8004a14:	469e      	mov	lr, r3
 8004a16:	4770      	bx	lr
