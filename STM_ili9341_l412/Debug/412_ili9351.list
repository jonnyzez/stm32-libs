
412_ili9351.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004178  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002960  08004304  08004304  00014304  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c64  08006c64  00020024  2**0
                  CONTENTS
  4 .ARM          00000008  08006c64  08006c64  00016c64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006c6c  08006c6c  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006c6c  08006c6c  00016c6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006c70  08006c70  00016c70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08006c74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e0  20000024  08006c98  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000204  08006c98  00020204  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012879  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002769  00000000  00000000  000328cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f28  00000000  00000000  00035038  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0001a9eb  00000000  00000000  00035f60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00012706  00000000  00000000  0005094b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000a419b  00000000  00000000  00063051  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  001071ec  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00000e30  00000000  00000000  00107240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003e44  00000000  00000000  00108070  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000024 	.word	0x20000024
 80001a8:	00000000 	.word	0x00000000
 80001ac:	080042ec 	.word	0x080042ec

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000028 	.word	0x20000028
 80001c8:	080042ec 	.word	0x080042ec

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e0:	f000 b96e 	b.w	80004c0 <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9d08      	ldr	r5, [sp, #32]
 8000202:	4604      	mov	r4, r0
 8000204:	468c      	mov	ip, r1
 8000206:	2b00      	cmp	r3, #0
 8000208:	f040 8083 	bne.w	8000312 <__udivmoddi4+0x116>
 800020c:	428a      	cmp	r2, r1
 800020e:	4617      	mov	r7, r2
 8000210:	d947      	bls.n	80002a2 <__udivmoddi4+0xa6>
 8000212:	fab2 f282 	clz	r2, r2
 8000216:	b142      	cbz	r2, 800022a <__udivmoddi4+0x2e>
 8000218:	f1c2 0020 	rsb	r0, r2, #32
 800021c:	fa24 f000 	lsr.w	r0, r4, r0
 8000220:	4091      	lsls	r1, r2
 8000222:	4097      	lsls	r7, r2
 8000224:	ea40 0c01 	orr.w	ip, r0, r1
 8000228:	4094      	lsls	r4, r2
 800022a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022e:	0c23      	lsrs	r3, r4, #16
 8000230:	fbbc f6f8 	udiv	r6, ip, r8
 8000234:	fa1f fe87 	uxth.w	lr, r7
 8000238:	fb08 c116 	mls	r1, r8, r6, ip
 800023c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000240:	fb06 f10e 	mul.w	r1, r6, lr
 8000244:	4299      	cmp	r1, r3
 8000246:	d909      	bls.n	800025c <__udivmoddi4+0x60>
 8000248:	18fb      	adds	r3, r7, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800024e:	f080 8119 	bcs.w	8000484 <__udivmoddi4+0x288>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 8116 	bls.w	8000484 <__udivmoddi4+0x288>
 8000258:	3e02      	subs	r6, #2
 800025a:	443b      	add	r3, r7
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000270:	45a6      	cmp	lr, r4
 8000272:	d909      	bls.n	8000288 <__udivmoddi4+0x8c>
 8000274:	193c      	adds	r4, r7, r4
 8000276:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800027a:	f080 8105 	bcs.w	8000488 <__udivmoddi4+0x28c>
 800027e:	45a6      	cmp	lr, r4
 8000280:	f240 8102 	bls.w	8000488 <__udivmoddi4+0x28c>
 8000284:	3802      	subs	r0, #2
 8000286:	443c      	add	r4, r7
 8000288:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028c:	eba4 040e 	sub.w	r4, r4, lr
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa0>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	b902      	cbnz	r2, 80002a6 <__udivmoddi4+0xaa>
 80002a4:	deff      	udf	#255	; 0xff
 80002a6:	fab2 f282 	clz	r2, r2
 80002aa:	2a00      	cmp	r2, #0
 80002ac:	d150      	bne.n	8000350 <__udivmoddi4+0x154>
 80002ae:	1bcb      	subs	r3, r1, r7
 80002b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b4:	fa1f f887 	uxth.w	r8, r7
 80002b8:	2601      	movs	r6, #1
 80002ba:	fbb3 fcfe 	udiv	ip, r3, lr
 80002be:	0c21      	lsrs	r1, r4, #16
 80002c0:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c8:	fb08 f30c 	mul.w	r3, r8, ip
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d907      	bls.n	80002e0 <__udivmoddi4+0xe4>
 80002d0:	1879      	adds	r1, r7, r1
 80002d2:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002d6:	d202      	bcs.n	80002de <__udivmoddi4+0xe2>
 80002d8:	428b      	cmp	r3, r1
 80002da:	f200 80e9 	bhi.w	80004b0 <__udivmoddi4+0x2b4>
 80002de:	4684      	mov	ip, r0
 80002e0:	1ac9      	subs	r1, r1, r3
 80002e2:	b2a3      	uxth	r3, r4
 80002e4:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e8:	fb0e 1110 	mls	r1, lr, r0, r1
 80002ec:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f0:	fb08 f800 	mul.w	r8, r8, r0
 80002f4:	45a0      	cmp	r8, r4
 80002f6:	d907      	bls.n	8000308 <__udivmoddi4+0x10c>
 80002f8:	193c      	adds	r4, r7, r4
 80002fa:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002fe:	d202      	bcs.n	8000306 <__udivmoddi4+0x10a>
 8000300:	45a0      	cmp	r8, r4
 8000302:	f200 80d9 	bhi.w	80004b8 <__udivmoddi4+0x2bc>
 8000306:	4618      	mov	r0, r3
 8000308:	eba4 0408 	sub.w	r4, r4, r8
 800030c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000310:	e7bf      	b.n	8000292 <__udivmoddi4+0x96>
 8000312:	428b      	cmp	r3, r1
 8000314:	d909      	bls.n	800032a <__udivmoddi4+0x12e>
 8000316:	2d00      	cmp	r5, #0
 8000318:	f000 80b1 	beq.w	800047e <__udivmoddi4+0x282>
 800031c:	2600      	movs	r6, #0
 800031e:	e9c5 0100 	strd	r0, r1, [r5]
 8000322:	4630      	mov	r0, r6
 8000324:	4631      	mov	r1, r6
 8000326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032a:	fab3 f683 	clz	r6, r3
 800032e:	2e00      	cmp	r6, #0
 8000330:	d14a      	bne.n	80003c8 <__udivmoddi4+0x1cc>
 8000332:	428b      	cmp	r3, r1
 8000334:	d302      	bcc.n	800033c <__udivmoddi4+0x140>
 8000336:	4282      	cmp	r2, r0
 8000338:	f200 80b8 	bhi.w	80004ac <__udivmoddi4+0x2b0>
 800033c:	1a84      	subs	r4, r0, r2
 800033e:	eb61 0103 	sbc.w	r1, r1, r3
 8000342:	2001      	movs	r0, #1
 8000344:	468c      	mov	ip, r1
 8000346:	2d00      	cmp	r5, #0
 8000348:	d0a8      	beq.n	800029c <__udivmoddi4+0xa0>
 800034a:	e9c5 4c00 	strd	r4, ip, [r5]
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0xa0>
 8000350:	f1c2 0320 	rsb	r3, r2, #32
 8000354:	fa20 f603 	lsr.w	r6, r0, r3
 8000358:	4097      	lsls	r7, r2
 800035a:	fa01 f002 	lsl.w	r0, r1, r2
 800035e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000362:	40d9      	lsrs	r1, r3
 8000364:	4330      	orrs	r0, r6
 8000366:	0c03      	lsrs	r3, r0, #16
 8000368:	fbb1 f6fe 	udiv	r6, r1, lr
 800036c:	fa1f f887 	uxth.w	r8, r7
 8000370:	fb0e 1116 	mls	r1, lr, r6, r1
 8000374:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000378:	fb06 f108 	mul.w	r1, r6, r8
 800037c:	4299      	cmp	r1, r3
 800037e:	fa04 f402 	lsl.w	r4, r4, r2
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x19c>
 8000384:	18fb      	adds	r3, r7, r3
 8000386:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800038a:	f080 808d 	bcs.w	80004a8 <__udivmoddi4+0x2ac>
 800038e:	4299      	cmp	r1, r3
 8000390:	f240 808a 	bls.w	80004a8 <__udivmoddi4+0x2ac>
 8000394:	3e02      	subs	r6, #2
 8000396:	443b      	add	r3, r7
 8000398:	1a5b      	subs	r3, r3, r1
 800039a:	b281      	uxth	r1, r0
 800039c:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a0:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a8:	fb00 f308 	mul.w	r3, r0, r8
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d907      	bls.n	80003c0 <__udivmoddi4+0x1c4>
 80003b0:	1879      	adds	r1, r7, r1
 80003b2:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003b6:	d273      	bcs.n	80004a0 <__udivmoddi4+0x2a4>
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d971      	bls.n	80004a0 <__udivmoddi4+0x2a4>
 80003bc:	3802      	subs	r0, #2
 80003be:	4439      	add	r1, r7
 80003c0:	1acb      	subs	r3, r1, r3
 80003c2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c6:	e778      	b.n	80002ba <__udivmoddi4+0xbe>
 80003c8:	f1c6 0c20 	rsb	ip, r6, #32
 80003cc:	fa03 f406 	lsl.w	r4, r3, r6
 80003d0:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d4:	431c      	orrs	r4, r3
 80003d6:	fa20 f70c 	lsr.w	r7, r0, ip
 80003da:	fa01 f306 	lsl.w	r3, r1, r6
 80003de:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003e2:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e6:	431f      	orrs	r7, r3
 80003e8:	0c3b      	lsrs	r3, r7, #16
 80003ea:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ee:	fa1f f884 	uxth.w	r8, r4
 80003f2:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003fa:	fb09 fa08 	mul.w	sl, r9, r8
 80003fe:	458a      	cmp	sl, r1
 8000400:	fa02 f206 	lsl.w	r2, r2, r6
 8000404:	fa00 f306 	lsl.w	r3, r0, r6
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x220>
 800040a:	1861      	adds	r1, r4, r1
 800040c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000410:	d248      	bcs.n	80004a4 <__udivmoddi4+0x2a8>
 8000412:	458a      	cmp	sl, r1
 8000414:	d946      	bls.n	80004a4 <__udivmoddi4+0x2a8>
 8000416:	f1a9 0902 	sub.w	r9, r9, #2
 800041a:	4421      	add	r1, r4
 800041c:	eba1 010a 	sub.w	r1, r1, sl
 8000420:	b2bf      	uxth	r7, r7
 8000422:	fbb1 f0fe 	udiv	r0, r1, lr
 8000426:	fb0e 1110 	mls	r1, lr, r0, r1
 800042a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042e:	fb00 f808 	mul.w	r8, r0, r8
 8000432:	45b8      	cmp	r8, r7
 8000434:	d907      	bls.n	8000446 <__udivmoddi4+0x24a>
 8000436:	19e7      	adds	r7, r4, r7
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800043c:	d22e      	bcs.n	800049c <__udivmoddi4+0x2a0>
 800043e:	45b8      	cmp	r8, r7
 8000440:	d92c      	bls.n	800049c <__udivmoddi4+0x2a0>
 8000442:	3802      	subs	r0, #2
 8000444:	4427      	add	r7, r4
 8000446:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800044a:	eba7 0708 	sub.w	r7, r7, r8
 800044e:	fba0 8902 	umull	r8, r9, r0, r2
 8000452:	454f      	cmp	r7, r9
 8000454:	46c6      	mov	lr, r8
 8000456:	4649      	mov	r1, r9
 8000458:	d31a      	bcc.n	8000490 <__udivmoddi4+0x294>
 800045a:	d017      	beq.n	800048c <__udivmoddi4+0x290>
 800045c:	b15d      	cbz	r5, 8000476 <__udivmoddi4+0x27a>
 800045e:	ebb3 020e 	subs.w	r2, r3, lr
 8000462:	eb67 0701 	sbc.w	r7, r7, r1
 8000466:	fa07 fc0c 	lsl.w	ip, r7, ip
 800046a:	40f2      	lsrs	r2, r6
 800046c:	ea4c 0202 	orr.w	r2, ip, r2
 8000470:	40f7      	lsrs	r7, r6
 8000472:	e9c5 2700 	strd	r2, r7, [r5]
 8000476:	2600      	movs	r6, #0
 8000478:	4631      	mov	r1, r6
 800047a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047e:	462e      	mov	r6, r5
 8000480:	4628      	mov	r0, r5
 8000482:	e70b      	b.n	800029c <__udivmoddi4+0xa0>
 8000484:	4606      	mov	r6, r0
 8000486:	e6e9      	b.n	800025c <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fd      	b.n	8000288 <__udivmoddi4+0x8c>
 800048c:	4543      	cmp	r3, r8
 800048e:	d2e5      	bcs.n	800045c <__udivmoddi4+0x260>
 8000490:	ebb8 0e02 	subs.w	lr, r8, r2
 8000494:	eb69 0104 	sbc.w	r1, r9, r4
 8000498:	3801      	subs	r0, #1
 800049a:	e7df      	b.n	800045c <__udivmoddi4+0x260>
 800049c:	4608      	mov	r0, r1
 800049e:	e7d2      	b.n	8000446 <__udivmoddi4+0x24a>
 80004a0:	4660      	mov	r0, ip
 80004a2:	e78d      	b.n	80003c0 <__udivmoddi4+0x1c4>
 80004a4:	4681      	mov	r9, r0
 80004a6:	e7b9      	b.n	800041c <__udivmoddi4+0x220>
 80004a8:	4666      	mov	r6, ip
 80004aa:	e775      	b.n	8000398 <__udivmoddi4+0x19c>
 80004ac:	4630      	mov	r0, r6
 80004ae:	e74a      	b.n	8000346 <__udivmoddi4+0x14a>
 80004b0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b4:	4439      	add	r1, r7
 80004b6:	e713      	b.n	80002e0 <__udivmoddi4+0xe4>
 80004b8:	3802      	subs	r0, #2
 80004ba:	443c      	add	r4, r7
 80004bc:	e724      	b.n	8000308 <__udivmoddi4+0x10c>
 80004be:	bf00      	nop

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <ILI9341_Select>:
/* vim: set ai et ts=4 sw=4: */
#include "stm32l4xx_hal.h"
#include "ili9341.h"

static void ILI9341_Select() {
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_CS_GPIO_Port, ILI9341_CS_Pin, GPIO_PIN_RESET);
 80004c8:	2200      	movs	r2, #0
 80004ca:	2104      	movs	r1, #4
 80004cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004d0:	f001 fb66 	bl	8001ba0 <HAL_GPIO_WritePin>
}
 80004d4:	bf00      	nop
 80004d6:	bd80      	pop	{r7, pc}

080004d8 <ILI9341_Unselect>:

void ILI9341_Unselect() {
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_CS_GPIO_Port, ILI9341_CS_Pin, GPIO_PIN_SET);
 80004dc:	2201      	movs	r2, #1
 80004de:	2104      	movs	r1, #4
 80004e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004e4:	f001 fb5c 	bl	8001ba0 <HAL_GPIO_WritePin>
}
 80004e8:	bf00      	nop
 80004ea:	bd80      	pop	{r7, pc}

080004ec <ILI9341_Reset>:

static void ILI9341_Reset() {
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_RES_GPIO_Port, ILI9341_RES_Pin, GPIO_PIN_RESET);
 80004f0:	2200      	movs	r2, #0
 80004f2:	2101      	movs	r1, #1
 80004f4:	4806      	ldr	r0, [pc, #24]	; (8000510 <ILI9341_Reset+0x24>)
 80004f6:	f001 fb53 	bl	8001ba0 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 80004fa:	2005      	movs	r0, #5
 80004fc:	f001 f82a 	bl	8001554 <HAL_Delay>
    HAL_GPIO_WritePin(ILI9341_RES_GPIO_Port, ILI9341_RES_Pin, GPIO_PIN_SET);
 8000500:	2201      	movs	r2, #1
 8000502:	2101      	movs	r1, #1
 8000504:	4802      	ldr	r0, [pc, #8]	; (8000510 <ILI9341_Reset+0x24>)
 8000506:	f001 fb4b 	bl	8001ba0 <HAL_GPIO_WritePin>
}
 800050a:	bf00      	nop
 800050c:	bd80      	pop	{r7, pc}
 800050e:	bf00      	nop
 8000510:	48000400 	.word	0x48000400

08000514 <ILI9341_WriteCommand>:

static void ILI9341_WriteCommand(uint8_t cmd) {
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
 800051a:	4603      	mov	r3, r0
 800051c:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_RESET);
 800051e:	2200      	movs	r2, #0
 8000520:	2108      	movs	r1, #8
 8000522:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000526:	f001 fb3b 	bl	8001ba0 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ILI9341_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 800052a:	1df9      	adds	r1, r7, #7
 800052c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000530:	2201      	movs	r2, #1
 8000532:	4803      	ldr	r0, [pc, #12]	; (8000540 <ILI9341_WriteCommand+0x2c>)
 8000534:	f002 fd6b 	bl	800300e <HAL_SPI_Transmit>
}
 8000538:	bf00      	nop
 800053a:	3708      	adds	r7, #8
 800053c:	46bd      	mov	sp, r7
 800053e:	bd80      	pop	{r7, pc}
 8000540:	20000164 	.word	0x20000164

08000544 <ILI9341_WriteData>:

static void ILI9341_WriteData(uint8_t* buff, size_t buff_size) {
 8000544:	b580      	push	{r7, lr}
 8000546:	b084      	sub	sp, #16
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
 800054c:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 800054e:	2201      	movs	r2, #1
 8000550:	2108      	movs	r1, #8
 8000552:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000556:	f001 fb23 	bl	8001ba0 <HAL_GPIO_WritePin>

    // split data in small chunks because HAL can't send more then 64K at once
    while(buff_size > 0) {
 800055a:	e015      	b.n	8000588 <ILI9341_WriteData+0x44>
        uint16_t chunk_size = buff_size > 32768 ? 32768 : buff_size;
 800055c:	683b      	ldr	r3, [r7, #0]
 800055e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000562:	bf28      	it	cs
 8000564:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 8000568:	81fb      	strh	r3, [r7, #14]
        HAL_SPI_Transmit(&ILI9341_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
 800056a:	89fa      	ldrh	r2, [r7, #14]
 800056c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000570:	6879      	ldr	r1, [r7, #4]
 8000572:	4809      	ldr	r0, [pc, #36]	; (8000598 <ILI9341_WriteData+0x54>)
 8000574:	f002 fd4b 	bl	800300e <HAL_SPI_Transmit>
        buff += chunk_size;
 8000578:	89fb      	ldrh	r3, [r7, #14]
 800057a:	687a      	ldr	r2, [r7, #4]
 800057c:	4413      	add	r3, r2
 800057e:	607b      	str	r3, [r7, #4]
        buff_size -= chunk_size;
 8000580:	89fb      	ldrh	r3, [r7, #14]
 8000582:	683a      	ldr	r2, [r7, #0]
 8000584:	1ad3      	subs	r3, r2, r3
 8000586:	603b      	str	r3, [r7, #0]
    while(buff_size > 0) {
 8000588:	683b      	ldr	r3, [r7, #0]
 800058a:	2b00      	cmp	r3, #0
 800058c:	d1e6      	bne.n	800055c <ILI9341_WriteData+0x18>
    }
}
 800058e:	bf00      	nop
 8000590:	bf00      	nop
 8000592:	3710      	adds	r7, #16
 8000594:	46bd      	mov	sp, r7
 8000596:	bd80      	pop	{r7, pc}
 8000598:	20000164 	.word	0x20000164

0800059c <ILI9341_SetAddressWindow>:

static void ILI9341_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1) {
 800059c:	b590      	push	{r4, r7, lr}
 800059e:	b085      	sub	sp, #20
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	4604      	mov	r4, r0
 80005a4:	4608      	mov	r0, r1
 80005a6:	4611      	mov	r1, r2
 80005a8:	461a      	mov	r2, r3
 80005aa:	4623      	mov	r3, r4
 80005ac:	80fb      	strh	r3, [r7, #6]
 80005ae:	4603      	mov	r3, r0
 80005b0:	80bb      	strh	r3, [r7, #4]
 80005b2:	460b      	mov	r3, r1
 80005b4:	807b      	strh	r3, [r7, #2]
 80005b6:	4613      	mov	r3, r2
 80005b8:	803b      	strh	r3, [r7, #0]
    // column address set
    ILI9341_WriteCommand(0x2A); // CASET
 80005ba:	202a      	movs	r0, #42	; 0x2a
 80005bc:	f7ff ffaa 	bl	8000514 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { (x0 >> 8) & 0xFF, x0 & 0xFF, (x1 >> 8) & 0xFF, x1 & 0xFF };
 80005c0:	88fb      	ldrh	r3, [r7, #6]
 80005c2:	0a1b      	lsrs	r3, r3, #8
 80005c4:	b29b      	uxth	r3, r3
 80005c6:	b2db      	uxtb	r3, r3
 80005c8:	733b      	strb	r3, [r7, #12]
 80005ca:	88fb      	ldrh	r3, [r7, #6]
 80005cc:	b2db      	uxtb	r3, r3
 80005ce:	737b      	strb	r3, [r7, #13]
 80005d0:	887b      	ldrh	r3, [r7, #2]
 80005d2:	0a1b      	lsrs	r3, r3, #8
 80005d4:	b29b      	uxth	r3, r3
 80005d6:	b2db      	uxtb	r3, r3
 80005d8:	73bb      	strb	r3, [r7, #14]
 80005da:	887b      	ldrh	r3, [r7, #2]
 80005dc:	b2db      	uxtb	r3, r3
 80005de:	73fb      	strb	r3, [r7, #15]
        ILI9341_WriteData(data, sizeof(data));
 80005e0:	f107 030c 	add.w	r3, r7, #12
 80005e4:	2104      	movs	r1, #4
 80005e6:	4618      	mov	r0, r3
 80005e8:	f7ff ffac 	bl	8000544 <ILI9341_WriteData>
    }

    // row address set
    ILI9341_WriteCommand(0x2B); // RASET
 80005ec:	202b      	movs	r0, #43	; 0x2b
 80005ee:	f7ff ff91 	bl	8000514 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { (y0 >> 8) & 0xFF, y0 & 0xFF, (y1 >> 8) & 0xFF, y1 & 0xFF };
 80005f2:	88bb      	ldrh	r3, [r7, #4]
 80005f4:	0a1b      	lsrs	r3, r3, #8
 80005f6:	b29b      	uxth	r3, r3
 80005f8:	b2db      	uxtb	r3, r3
 80005fa:	723b      	strb	r3, [r7, #8]
 80005fc:	88bb      	ldrh	r3, [r7, #4]
 80005fe:	b2db      	uxtb	r3, r3
 8000600:	727b      	strb	r3, [r7, #9]
 8000602:	883b      	ldrh	r3, [r7, #0]
 8000604:	0a1b      	lsrs	r3, r3, #8
 8000606:	b29b      	uxth	r3, r3
 8000608:	b2db      	uxtb	r3, r3
 800060a:	72bb      	strb	r3, [r7, #10]
 800060c:	883b      	ldrh	r3, [r7, #0]
 800060e:	b2db      	uxtb	r3, r3
 8000610:	72fb      	strb	r3, [r7, #11]
        ILI9341_WriteData(data, sizeof(data));
 8000612:	f107 0308 	add.w	r3, r7, #8
 8000616:	2104      	movs	r1, #4
 8000618:	4618      	mov	r0, r3
 800061a:	f7ff ff93 	bl	8000544 <ILI9341_WriteData>
    }

    // write to RAM
    ILI9341_WriteCommand(0x2C); // RAMWR
 800061e:	202c      	movs	r0, #44	; 0x2c
 8000620:	f7ff ff78 	bl	8000514 <ILI9341_WriteCommand>
}
 8000624:	bf00      	nop
 8000626:	3714      	adds	r7, #20
 8000628:	46bd      	mov	sp, r7
 800062a:	bd90      	pop	{r4, r7, pc}

0800062c <ILI9341_Init>:

void ILI9341_Init() {
 800062c:	b590      	push	{r4, r7, lr}
 800062e:	b09b      	sub	sp, #108	; 0x6c
 8000630:	af00      	add	r7, sp, #0
    ILI9341_Select();
 8000632:	f7ff ff47 	bl	80004c4 <ILI9341_Select>
    ILI9341_Reset();
 8000636:	f7ff ff59 	bl	80004ec <ILI9341_Reset>

    // command list is based on https://github.com/martnak/STM32-ILI9341

    // SOFTWARE RESET
    ILI9341_WriteCommand(0x01);
 800063a:	2001      	movs	r0, #1
 800063c:	f7ff ff6a 	bl	8000514 <ILI9341_WriteCommand>
    HAL_Delay(1000);
 8000640:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000644:	f000 ff86 	bl	8001554 <HAL_Delay>
        
    // POWER CONTROL A
    ILI9341_WriteCommand(0xCB);
 8000648:	20cb      	movs	r0, #203	; 0xcb
 800064a:	f7ff ff63 	bl	8000514 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x39, 0x2C, 0x00, 0x34, 0x02 };
 800064e:	4a87      	ldr	r2, [pc, #540]	; (800086c <ILI9341_Init+0x240>)
 8000650:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000654:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000658:	6018      	str	r0, [r3, #0]
 800065a:	3304      	adds	r3, #4
 800065c:	7019      	strb	r1, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 800065e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000662:	2105      	movs	r1, #5
 8000664:	4618      	mov	r0, r3
 8000666:	f7ff ff6d 	bl	8000544 <ILI9341_WriteData>
    }

    // POWER CONTROL B
    ILI9341_WriteCommand(0xCF);
 800066a:	20cf      	movs	r0, #207	; 0xcf
 800066c:	f7ff ff52 	bl	8000514 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0xC1, 0x30 };
 8000670:	4a7f      	ldr	r2, [pc, #508]	; (8000870 <ILI9341_Init+0x244>)
 8000672:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000676:	6812      	ldr	r2, [r2, #0]
 8000678:	4611      	mov	r1, r2
 800067a:	8019      	strh	r1, [r3, #0]
 800067c:	3302      	adds	r3, #2
 800067e:	0c12      	lsrs	r2, r2, #16
 8000680:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 8000682:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000686:	2103      	movs	r1, #3
 8000688:	4618      	mov	r0, r3
 800068a:	f7ff ff5b 	bl	8000544 <ILI9341_WriteData>
    }

    // DRIVER TIMING CONTROL A
    ILI9341_WriteCommand(0xE8);
 800068e:	20e8      	movs	r0, #232	; 0xe8
 8000690:	f7ff ff40 	bl	8000514 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x85, 0x00, 0x78 };
 8000694:	4a77      	ldr	r2, [pc, #476]	; (8000874 <ILI9341_Init+0x248>)
 8000696:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800069a:	6812      	ldr	r2, [r2, #0]
 800069c:	4611      	mov	r1, r2
 800069e:	8019      	strh	r1, [r3, #0]
 80006a0:	3302      	adds	r3, #2
 80006a2:	0c12      	lsrs	r2, r2, #16
 80006a4:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 80006a6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80006aa:	2103      	movs	r1, #3
 80006ac:	4618      	mov	r0, r3
 80006ae:	f7ff ff49 	bl	8000544 <ILI9341_WriteData>
    }

    // DRIVER TIMING CONTROL B
    ILI9341_WriteCommand(0xEA);
 80006b2:	20ea      	movs	r0, #234	; 0xea
 80006b4:	f7ff ff2e 	bl	8000514 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x00 };
 80006b8:	2300      	movs	r3, #0
 80006ba:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
        ILI9341_WriteData(data, sizeof(data));
 80006be:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80006c2:	2102      	movs	r1, #2
 80006c4:	4618      	mov	r0, r3
 80006c6:	f7ff ff3d 	bl	8000544 <ILI9341_WriteData>
    }

    // POWER ON SEQUENCE CONTROL
    ILI9341_WriteCommand(0xED);
 80006ca:	20ed      	movs	r0, #237	; 0xed
 80006cc:	f7ff ff22 	bl	8000514 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x64, 0x03, 0x12, 0x81 };
 80006d0:	4b69      	ldr	r3, [pc, #420]	; (8000878 <ILI9341_Init+0x24c>)
 80006d2:	653b      	str	r3, [r7, #80]	; 0x50
        ILI9341_WriteData(data, sizeof(data));
 80006d4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80006d8:	2104      	movs	r1, #4
 80006da:	4618      	mov	r0, r3
 80006dc:	f7ff ff32 	bl	8000544 <ILI9341_WriteData>
    }

    // PUMP RATIO CONTROL
    ILI9341_WriteCommand(0xF7);
 80006e0:	20f7      	movs	r0, #247	; 0xf7
 80006e2:	f7ff ff17 	bl	8000514 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x20 };
 80006e6:	2320      	movs	r3, #32
 80006e8:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
        ILI9341_WriteData(data, sizeof(data));
 80006ec:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80006f0:	2101      	movs	r1, #1
 80006f2:	4618      	mov	r0, r3
 80006f4:	f7ff ff26 	bl	8000544 <ILI9341_WriteData>
    }

    // POWER CONTROL,VRH[5:0]
    ILI9341_WriteCommand(0xC0);
 80006f8:	20c0      	movs	r0, #192	; 0xc0
 80006fa:	f7ff ff0b 	bl	8000514 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x23 };
 80006fe:	2323      	movs	r3, #35	; 0x23
 8000700:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
        ILI9341_WriteData(data, sizeof(data));
 8000704:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000708:	2101      	movs	r1, #1
 800070a:	4618      	mov	r0, r3
 800070c:	f7ff ff1a 	bl	8000544 <ILI9341_WriteData>
    }

    // POWER CONTROL,SAP[2:0];BT[3:0]
    ILI9341_WriteCommand(0xC1);
 8000710:	20c1      	movs	r0, #193	; 0xc1
 8000712:	f7ff feff 	bl	8000514 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x10 };
 8000716:	2310      	movs	r3, #16
 8000718:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
        ILI9341_WriteData(data, sizeof(data));
 800071c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000720:	2101      	movs	r1, #1
 8000722:	4618      	mov	r0, r3
 8000724:	f7ff ff0e 	bl	8000544 <ILI9341_WriteData>
    }

    // VCM CONTROL
    ILI9341_WriteCommand(0xC5);
 8000728:	20c5      	movs	r0, #197	; 0xc5
 800072a:	f7ff fef3 	bl	8000514 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x3E, 0x28 };
 800072e:	f642 033e 	movw	r3, #10302	; 0x283e
 8000732:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
        ILI9341_WriteData(data, sizeof(data));
 8000736:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800073a:	2102      	movs	r1, #2
 800073c:	4618      	mov	r0, r3
 800073e:	f7ff ff01 	bl	8000544 <ILI9341_WriteData>
    }

    // VCM CONTROL 2
    ILI9341_WriteCommand(0xC7);
 8000742:	20c7      	movs	r0, #199	; 0xc7
 8000744:	f7ff fee6 	bl	8000514 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x86 };
 8000748:	2386      	movs	r3, #134	; 0x86
 800074a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
        ILI9341_WriteData(data, sizeof(data));
 800074e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000752:	2101      	movs	r1, #1
 8000754:	4618      	mov	r0, r3
 8000756:	f7ff fef5 	bl	8000544 <ILI9341_WriteData>
    }

    // MEMORY ACCESS CONTROL
    ILI9341_WriteCommand(0x36);
 800075a:	2036      	movs	r0, #54	; 0x36
 800075c:	f7ff feda 	bl	8000514 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x48 };
 8000760:	2348      	movs	r3, #72	; 0x48
 8000762:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
        ILI9341_WriteData(data, sizeof(data));
 8000766:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800076a:	2101      	movs	r1, #1
 800076c:	4618      	mov	r0, r3
 800076e:	f7ff fee9 	bl	8000544 <ILI9341_WriteData>
    }

    // PIXEL FORMAT
    ILI9341_WriteCommand(0x3A);
 8000772:	203a      	movs	r0, #58	; 0x3a
 8000774:	f7ff fece 	bl	8000514 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x55 };
 8000778:	2355      	movs	r3, #85	; 0x55
 800077a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        ILI9341_WriteData(data, sizeof(data));
 800077e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000782:	2101      	movs	r1, #1
 8000784:	4618      	mov	r0, r3
 8000786:	f7ff fedd 	bl	8000544 <ILI9341_WriteData>
    }

    // FRAME RATIO CONTROL, STANDARD RGB COLOR
    ILI9341_WriteCommand(0xB1);
 800078a:	20b1      	movs	r0, #177	; 0xb1
 800078c:	f7ff fec2 	bl	8000514 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x18 };
 8000790:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000794:	863b      	strh	r3, [r7, #48]	; 0x30
        ILI9341_WriteData(data, sizeof(data));
 8000796:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800079a:	2102      	movs	r1, #2
 800079c:	4618      	mov	r0, r3
 800079e:	f7ff fed1 	bl	8000544 <ILI9341_WriteData>
    }

    // DISPLAY FUNCTION CONTROL
    ILI9341_WriteCommand(0xB6);
 80007a2:	20b6      	movs	r0, #182	; 0xb6
 80007a4:	f7ff feb6 	bl	8000514 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x08, 0x82, 0x27 };
 80007a8:	4a34      	ldr	r2, [pc, #208]	; (800087c <ILI9341_Init+0x250>)
 80007aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007ae:	6812      	ldr	r2, [r2, #0]
 80007b0:	4611      	mov	r1, r2
 80007b2:	8019      	strh	r1, [r3, #0]
 80007b4:	3302      	adds	r3, #2
 80007b6:	0c12      	lsrs	r2, r2, #16
 80007b8:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 80007ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007be:	2103      	movs	r1, #3
 80007c0:	4618      	mov	r0, r3
 80007c2:	f7ff febf 	bl	8000544 <ILI9341_WriteData>
    }

    // 3GAMMA FUNCTION DISABLE
    ILI9341_WriteCommand(0xF2);
 80007c6:	20f2      	movs	r0, #242	; 0xf2
 80007c8:	f7ff fea4 	bl	8000514 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00 };
 80007cc:	2300      	movs	r3, #0
 80007ce:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
        ILI9341_WriteData(data, sizeof(data));
 80007d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007d6:	2101      	movs	r1, #1
 80007d8:	4618      	mov	r0, r3
 80007da:	f7ff feb3 	bl	8000544 <ILI9341_WriteData>
    }

    // GAMMA CURVE SELECTED
    ILI9341_WriteCommand(0x26);
 80007de:	2026      	movs	r0, #38	; 0x26
 80007e0:	f7ff fe98 	bl	8000514 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x01 };
 80007e4:	2301      	movs	r3, #1
 80007e6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        ILI9341_WriteData(data, sizeof(data));
 80007ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007ee:	2101      	movs	r1, #1
 80007f0:	4618      	mov	r0, r3
 80007f2:	f7ff fea7 	bl	8000544 <ILI9341_WriteData>
    }

    // POSITIVE GAMMA CORRECTION
    ILI9341_WriteCommand(0xE0);
 80007f6:	20e0      	movs	r0, #224	; 0xe0
 80007f8:	f7ff fe8c 	bl	8000514 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x0F, 0x31, 0x2B, 0x0C, 0x0E, 0x08, 0x4E, 0xF1,
 80007fc:	4b20      	ldr	r3, [pc, #128]	; (8000880 <ILI9341_Init+0x254>)
 80007fe:	f107 0414 	add.w	r4, r7, #20
 8000802:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000804:	c407      	stmia	r4!, {r0, r1, r2}
 8000806:	8023      	strh	r3, [r4, #0]
 8000808:	3402      	adds	r4, #2
 800080a:	0c1b      	lsrs	r3, r3, #16
 800080c:	7023      	strb	r3, [r4, #0]
                           0x37, 0x07, 0x10, 0x03, 0x0E, 0x09, 0x00 };
        ILI9341_WriteData(data, sizeof(data));
 800080e:	f107 0314 	add.w	r3, r7, #20
 8000812:	210f      	movs	r1, #15
 8000814:	4618      	mov	r0, r3
 8000816:	f7ff fe95 	bl	8000544 <ILI9341_WriteData>
    }

    // NEGATIVE GAMMA CORRECTION
    ILI9341_WriteCommand(0xE1);
 800081a:	20e1      	movs	r0, #225	; 0xe1
 800081c:	f7ff fe7a 	bl	8000514 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x0E, 0x14, 0x03, 0x11, 0x07, 0x31, 0xC1,
 8000820:	4b18      	ldr	r3, [pc, #96]	; (8000884 <ILI9341_Init+0x258>)
 8000822:	1d3c      	adds	r4, r7, #4
 8000824:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000826:	c407      	stmia	r4!, {r0, r1, r2}
 8000828:	8023      	strh	r3, [r4, #0]
 800082a:	3402      	adds	r4, #2
 800082c:	0c1b      	lsrs	r3, r3, #16
 800082e:	7023      	strb	r3, [r4, #0]
                           0x48, 0x08, 0x0F, 0x0C, 0x31, 0x36, 0x0F };
        ILI9341_WriteData(data, sizeof(data));
 8000830:	1d3b      	adds	r3, r7, #4
 8000832:	210f      	movs	r1, #15
 8000834:	4618      	mov	r0, r3
 8000836:	f7ff fe85 	bl	8000544 <ILI9341_WriteData>
    }

    // EXIT SLEEP
    ILI9341_WriteCommand(0x11);
 800083a:	2011      	movs	r0, #17
 800083c:	f7ff fe6a 	bl	8000514 <ILI9341_WriteCommand>
    HAL_Delay(120);
 8000840:	2078      	movs	r0, #120	; 0x78
 8000842:	f000 fe87 	bl	8001554 <HAL_Delay>

    // TURN ON DISPLAY
    ILI9341_WriteCommand(0x29);
 8000846:	2029      	movs	r0, #41	; 0x29
 8000848:	f7ff fe64 	bl	8000514 <ILI9341_WriteCommand>

    // MADCTL
    ILI9341_WriteCommand(0x36);
 800084c:	2036      	movs	r0, #54	; 0x36
 800084e:	f7ff fe61 	bl	8000514 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { ILI9341_ROTATION };
 8000852:	2328      	movs	r3, #40	; 0x28
 8000854:	703b      	strb	r3, [r7, #0]
        ILI9341_WriteData(data, sizeof(data));
 8000856:	463b      	mov	r3, r7
 8000858:	2101      	movs	r1, #1
 800085a:	4618      	mov	r0, r3
 800085c:	f7ff fe72 	bl	8000544 <ILI9341_WriteData>
    }

    ILI9341_Unselect();
 8000860:	f7ff fe3a 	bl	80004d8 <ILI9341_Unselect>
}
 8000864:	bf00      	nop
 8000866:	376c      	adds	r7, #108	; 0x6c
 8000868:	46bd      	mov	sp, r7
 800086a:	bd90      	pop	{r4, r7, pc}
 800086c:	08004304 	.word	0x08004304
 8000870:	0800430c 	.word	0x0800430c
 8000874:	08004310 	.word	0x08004310
 8000878:	81120364 	.word	0x81120364
 800087c:	08004314 	.word	0x08004314
 8000880:	08004318 	.word	0x08004318
 8000884:	08004328 	.word	0x08004328

08000888 <ILI9341_DrawPixel>:

void ILI9341_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 8000888:	b580      	push	{r7, lr}
 800088a:	b084      	sub	sp, #16
 800088c:	af00      	add	r7, sp, #0
 800088e:	4603      	mov	r3, r0
 8000890:	80fb      	strh	r3, [r7, #6]
 8000892:	460b      	mov	r3, r1
 8000894:	80bb      	strh	r3, [r7, #4]
 8000896:	4613      	mov	r3, r2
 8000898:	807b      	strh	r3, [r7, #2]
    if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT))
 800089a:	88fb      	ldrh	r3, [r7, #6]
 800089c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80008a0:	d21f      	bcs.n	80008e2 <ILI9341_DrawPixel+0x5a>
 80008a2:	88bb      	ldrh	r3, [r7, #4]
 80008a4:	2bef      	cmp	r3, #239	; 0xef
 80008a6:	d81c      	bhi.n	80008e2 <ILI9341_DrawPixel+0x5a>
        return;

    ILI9341_Select();
 80008a8:	f7ff fe0c 	bl	80004c4 <ILI9341_Select>

    ILI9341_SetAddressWindow(x, y, x+1, y+1);
 80008ac:	88fb      	ldrh	r3, [r7, #6]
 80008ae:	3301      	adds	r3, #1
 80008b0:	b29a      	uxth	r2, r3
 80008b2:	88bb      	ldrh	r3, [r7, #4]
 80008b4:	3301      	adds	r3, #1
 80008b6:	b29b      	uxth	r3, r3
 80008b8:	88b9      	ldrh	r1, [r7, #4]
 80008ba:	88f8      	ldrh	r0, [r7, #6]
 80008bc:	f7ff fe6e 	bl	800059c <ILI9341_SetAddressWindow>
    uint8_t data[] = { color >> 8, color & 0xFF };
 80008c0:	887b      	ldrh	r3, [r7, #2]
 80008c2:	0a1b      	lsrs	r3, r3, #8
 80008c4:	b29b      	uxth	r3, r3
 80008c6:	b2db      	uxtb	r3, r3
 80008c8:	733b      	strb	r3, [r7, #12]
 80008ca:	887b      	ldrh	r3, [r7, #2]
 80008cc:	b2db      	uxtb	r3, r3
 80008ce:	737b      	strb	r3, [r7, #13]
    ILI9341_WriteData(data, sizeof(data));
 80008d0:	f107 030c 	add.w	r3, r7, #12
 80008d4:	2102      	movs	r1, #2
 80008d6:	4618      	mov	r0, r3
 80008d8:	f7ff fe34 	bl	8000544 <ILI9341_WriteData>

    ILI9341_Unselect();
 80008dc:	f7ff fdfc 	bl	80004d8 <ILI9341_Unselect>
 80008e0:	e000      	b.n	80008e4 <ILI9341_DrawPixel+0x5c>
        return;
 80008e2:	bf00      	nop
}
 80008e4:	3710      	adds	r7, #16
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}

080008ea <ILI9341_WriteChar>:

static void ILI9341_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 80008ea:	b082      	sub	sp, #8
 80008ec:	b590      	push	{r4, r7, lr}
 80008ee:	b089      	sub	sp, #36	; 0x24
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	637b      	str	r3, [r7, #52]	; 0x34
 80008f4:	4603      	mov	r3, r0
 80008f6:	80fb      	strh	r3, [r7, #6]
 80008f8:	460b      	mov	r3, r1
 80008fa:	80bb      	strh	r3, [r7, #4]
 80008fc:	4613      	mov	r3, r2
 80008fe:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ILI9341_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 8000900:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000904:	b29a      	uxth	r2, r3
 8000906:	88fb      	ldrh	r3, [r7, #6]
 8000908:	4413      	add	r3, r2
 800090a:	b29b      	uxth	r3, r3
 800090c:	3b01      	subs	r3, #1
 800090e:	b29c      	uxth	r4, r3
 8000910:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000914:	b29a      	uxth	r2, r3
 8000916:	88bb      	ldrh	r3, [r7, #4]
 8000918:	4413      	add	r3, r2
 800091a:	b29b      	uxth	r3, r3
 800091c:	3b01      	subs	r3, #1
 800091e:	b29b      	uxth	r3, r3
 8000920:	88b9      	ldrh	r1, [r7, #4]
 8000922:	88f8      	ldrh	r0, [r7, #6]
 8000924:	4622      	mov	r2, r4
 8000926:	f7ff fe39 	bl	800059c <ILI9341_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 800092a:	2300      	movs	r3, #0
 800092c:	61fb      	str	r3, [r7, #28]
 800092e:	e043      	b.n	80009b8 <ILI9341_WriteChar+0xce>
        b = font.data[(ch - 32) * font.height + i];
 8000930:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000932:	78fb      	ldrb	r3, [r7, #3]
 8000934:	3b20      	subs	r3, #32
 8000936:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 800093a:	fb01 f303 	mul.w	r3, r1, r3
 800093e:	4619      	mov	r1, r3
 8000940:	69fb      	ldr	r3, [r7, #28]
 8000942:	440b      	add	r3, r1
 8000944:	005b      	lsls	r3, r3, #1
 8000946:	4413      	add	r3, r2
 8000948:	881b      	ldrh	r3, [r3, #0]
 800094a:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 800094c:	2300      	movs	r3, #0
 800094e:	61bb      	str	r3, [r7, #24]
 8000950:	e029      	b.n	80009a6 <ILI9341_WriteChar+0xbc>
            if((b << j) & 0x8000)  {
 8000952:	697a      	ldr	r2, [r7, #20]
 8000954:	69bb      	ldr	r3, [r7, #24]
 8000956:	fa02 f303 	lsl.w	r3, r2, r3
 800095a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800095e:	2b00      	cmp	r3, #0
 8000960:	d00e      	beq.n	8000980 <ILI9341_WriteChar+0x96>
                uint8_t data[] = { color >> 8, color & 0xFF };
 8000962:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000964:	0a1b      	lsrs	r3, r3, #8
 8000966:	b29b      	uxth	r3, r3
 8000968:	b2db      	uxtb	r3, r3
 800096a:	743b      	strb	r3, [r7, #16]
 800096c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800096e:	b2db      	uxtb	r3, r3
 8000970:	747b      	strb	r3, [r7, #17]
                ILI9341_WriteData(data, sizeof(data));
 8000972:	f107 0310 	add.w	r3, r7, #16
 8000976:	2102      	movs	r1, #2
 8000978:	4618      	mov	r0, r3
 800097a:	f7ff fde3 	bl	8000544 <ILI9341_WriteData>
 800097e:	e00f      	b.n	80009a0 <ILI9341_WriteChar+0xb6>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8000980:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000984:	0a1b      	lsrs	r3, r3, #8
 8000986:	b29b      	uxth	r3, r3
 8000988:	b2db      	uxtb	r3, r3
 800098a:	733b      	strb	r3, [r7, #12]
 800098c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000990:	b2db      	uxtb	r3, r3
 8000992:	737b      	strb	r3, [r7, #13]
                ILI9341_WriteData(data, sizeof(data));
 8000994:	f107 030c 	add.w	r3, r7, #12
 8000998:	2102      	movs	r1, #2
 800099a:	4618      	mov	r0, r3
 800099c:	f7ff fdd2 	bl	8000544 <ILI9341_WriteData>
        for(j = 0; j < font.width; j++) {
 80009a0:	69bb      	ldr	r3, [r7, #24]
 80009a2:	3301      	adds	r3, #1
 80009a4:	61bb      	str	r3, [r7, #24]
 80009a6:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80009aa:	461a      	mov	r2, r3
 80009ac:	69bb      	ldr	r3, [r7, #24]
 80009ae:	4293      	cmp	r3, r2
 80009b0:	d3cf      	bcc.n	8000952 <ILI9341_WriteChar+0x68>
    for(i = 0; i < font.height; i++) {
 80009b2:	69fb      	ldr	r3, [r7, #28]
 80009b4:	3301      	adds	r3, #1
 80009b6:	61fb      	str	r3, [r7, #28]
 80009b8:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80009bc:	461a      	mov	r2, r3
 80009be:	69fb      	ldr	r3, [r7, #28]
 80009c0:	4293      	cmp	r3, r2
 80009c2:	d3b5      	bcc.n	8000930 <ILI9341_WriteChar+0x46>
            }
        }
    }
}
 80009c4:	bf00      	nop
 80009c6:	bf00      	nop
 80009c8:	3724      	adds	r7, #36	; 0x24
 80009ca:	46bd      	mov	sp, r7
 80009cc:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80009d0:	b002      	add	sp, #8
 80009d2:	4770      	bx	lr

080009d4 <ILI9341_WriteString>:

void ILI9341_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 80009d4:	b082      	sub	sp, #8
 80009d6:	b580      	push	{r7, lr}
 80009d8:	b086      	sub	sp, #24
 80009da:	af04      	add	r7, sp, #16
 80009dc:	603a      	str	r2, [r7, #0]
 80009de:	617b      	str	r3, [r7, #20]
 80009e0:	4603      	mov	r3, r0
 80009e2:	80fb      	strh	r3, [r7, #6]
 80009e4:	460b      	mov	r3, r1
 80009e6:	80bb      	strh	r3, [r7, #4]
    ILI9341_Select();
 80009e8:	f7ff fd6c 	bl	80004c4 <ILI9341_Select>

    while(*str) {
 80009ec:	e02e      	b.n	8000a4c <ILI9341_WriteString+0x78>
        if(x + font.width >= ILI9341_WIDTH) {
 80009ee:	88fb      	ldrh	r3, [r7, #6]
 80009f0:	7d3a      	ldrb	r2, [r7, #20]
 80009f2:	4413      	add	r3, r2
 80009f4:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80009f8:	db13      	blt.n	8000a22 <ILI9341_WriteString+0x4e>
            x = 0;
 80009fa:	2300      	movs	r3, #0
 80009fc:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 80009fe:	7d7b      	ldrb	r3, [r7, #21]
 8000a00:	b29a      	uxth	r2, r3
 8000a02:	88bb      	ldrh	r3, [r7, #4]
 8000a04:	4413      	add	r3, r2
 8000a06:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ILI9341_HEIGHT) {
 8000a08:	88bb      	ldrh	r3, [r7, #4]
 8000a0a:	7d7a      	ldrb	r2, [r7, #21]
 8000a0c:	4413      	add	r3, r2
 8000a0e:	2bef      	cmp	r3, #239	; 0xef
 8000a10:	dc21      	bgt.n	8000a56 <ILI9341_WriteString+0x82>
                break;
            }

            if(*str == ' ') {
 8000a12:	683b      	ldr	r3, [r7, #0]
 8000a14:	781b      	ldrb	r3, [r3, #0]
 8000a16:	2b20      	cmp	r3, #32
 8000a18:	d103      	bne.n	8000a22 <ILI9341_WriteString+0x4e>
                // skip spaces in the beginning of the new line
                str++;
 8000a1a:	683b      	ldr	r3, [r7, #0]
 8000a1c:	3301      	adds	r3, #1
 8000a1e:	603b      	str	r3, [r7, #0]
                continue;
 8000a20:	e014      	b.n	8000a4c <ILI9341_WriteString+0x78>
            }
        }

        ILI9341_WriteChar(x, y, *str, font, color, bgcolor);
 8000a22:	683b      	ldr	r3, [r7, #0]
 8000a24:	781a      	ldrb	r2, [r3, #0]
 8000a26:	88b9      	ldrh	r1, [r7, #4]
 8000a28:	88f8      	ldrh	r0, [r7, #6]
 8000a2a:	8c3b      	ldrh	r3, [r7, #32]
 8000a2c:	9302      	str	r3, [sp, #8]
 8000a2e:	8bbb      	ldrh	r3, [r7, #28]
 8000a30:	9301      	str	r3, [sp, #4]
 8000a32:	69bb      	ldr	r3, [r7, #24]
 8000a34:	9300      	str	r3, [sp, #0]
 8000a36:	697b      	ldr	r3, [r7, #20]
 8000a38:	f7ff ff57 	bl	80008ea <ILI9341_WriteChar>
        x += font.width;
 8000a3c:	7d3b      	ldrb	r3, [r7, #20]
 8000a3e:	b29a      	uxth	r2, r3
 8000a40:	88fb      	ldrh	r3, [r7, #6]
 8000a42:	4413      	add	r3, r2
 8000a44:	80fb      	strh	r3, [r7, #6]
        str++;
 8000a46:	683b      	ldr	r3, [r7, #0]
 8000a48:	3301      	adds	r3, #1
 8000a4a:	603b      	str	r3, [r7, #0]
    while(*str) {
 8000a4c:	683b      	ldr	r3, [r7, #0]
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d1cc      	bne.n	80009ee <ILI9341_WriteString+0x1a>
 8000a54:	e000      	b.n	8000a58 <ILI9341_WriteString+0x84>
                break;
 8000a56:	bf00      	nop
    }

    ILI9341_Unselect();
 8000a58:	f7ff fd3e 	bl	80004d8 <ILI9341_Unselect>
}
 8000a5c:	bf00      	nop
 8000a5e:	3708      	adds	r7, #8
 8000a60:	46bd      	mov	sp, r7
 8000a62:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000a66:	b002      	add	sp, #8
 8000a68:	4770      	bx	lr
	...

08000a6c <ILI9341_FillRectangle>:

void ILI9341_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8000a6c:	b590      	push	{r4, r7, lr}
 8000a6e:	b085      	sub	sp, #20
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	4604      	mov	r4, r0
 8000a74:	4608      	mov	r0, r1
 8000a76:	4611      	mov	r1, r2
 8000a78:	461a      	mov	r2, r3
 8000a7a:	4623      	mov	r3, r4
 8000a7c:	80fb      	strh	r3, [r7, #6]
 8000a7e:	4603      	mov	r3, r0
 8000a80:	80bb      	strh	r3, [r7, #4]
 8000a82:	460b      	mov	r3, r1
 8000a84:	807b      	strh	r3, [r7, #2]
 8000a86:	4613      	mov	r3, r2
 8000a88:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT)) return;
 8000a8a:	88fb      	ldrh	r3, [r7, #6]
 8000a8c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000a90:	d253      	bcs.n	8000b3a <ILI9341_FillRectangle+0xce>
 8000a92:	88bb      	ldrh	r3, [r7, #4]
 8000a94:	2bef      	cmp	r3, #239	; 0xef
 8000a96:	d850      	bhi.n	8000b3a <ILI9341_FillRectangle+0xce>
    if((x + w - 1) >= ILI9341_WIDTH) w = ILI9341_WIDTH - x;
 8000a98:	88fa      	ldrh	r2, [r7, #6]
 8000a9a:	887b      	ldrh	r3, [r7, #2]
 8000a9c:	4413      	add	r3, r2
 8000a9e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000aa2:	dd03      	ble.n	8000aac <ILI9341_FillRectangle+0x40>
 8000aa4:	88fb      	ldrh	r3, [r7, #6]
 8000aa6:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 8000aaa:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ILI9341_HEIGHT) h = ILI9341_HEIGHT - y;
 8000aac:	88ba      	ldrh	r2, [r7, #4]
 8000aae:	883b      	ldrh	r3, [r7, #0]
 8000ab0:	4413      	add	r3, r2
 8000ab2:	2bf0      	cmp	r3, #240	; 0xf0
 8000ab4:	dd03      	ble.n	8000abe <ILI9341_FillRectangle+0x52>
 8000ab6:	88bb      	ldrh	r3, [r7, #4]
 8000ab8:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8000abc:	803b      	strh	r3, [r7, #0]

    ILI9341_Select();
 8000abe:	f7ff fd01 	bl	80004c4 <ILI9341_Select>
    ILI9341_SetAddressWindow(x, y, x+w-1, y+h-1);
 8000ac2:	88fa      	ldrh	r2, [r7, #6]
 8000ac4:	887b      	ldrh	r3, [r7, #2]
 8000ac6:	4413      	add	r3, r2
 8000ac8:	b29b      	uxth	r3, r3
 8000aca:	3b01      	subs	r3, #1
 8000acc:	b29c      	uxth	r4, r3
 8000ace:	88ba      	ldrh	r2, [r7, #4]
 8000ad0:	883b      	ldrh	r3, [r7, #0]
 8000ad2:	4413      	add	r3, r2
 8000ad4:	b29b      	uxth	r3, r3
 8000ad6:	3b01      	subs	r3, #1
 8000ad8:	b29b      	uxth	r3, r3
 8000ada:	88b9      	ldrh	r1, [r7, #4]
 8000adc:	88f8      	ldrh	r0, [r7, #6]
 8000ade:	4622      	mov	r2, r4
 8000ae0:	f7ff fd5c 	bl	800059c <ILI9341_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 8000ae4:	8c3b      	ldrh	r3, [r7, #32]
 8000ae6:	0a1b      	lsrs	r3, r3, #8
 8000ae8:	b29b      	uxth	r3, r3
 8000aea:	b2db      	uxtb	r3, r3
 8000aec:	733b      	strb	r3, [r7, #12]
 8000aee:	8c3b      	ldrh	r3, [r7, #32]
 8000af0:	b2db      	uxtb	r3, r3
 8000af2:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 8000af4:	2201      	movs	r2, #1
 8000af6:	2108      	movs	r1, #8
 8000af8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000afc:	f001 f850 	bl	8001ba0 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 8000b00:	883b      	ldrh	r3, [r7, #0]
 8000b02:	80bb      	strh	r3, [r7, #4]
 8000b04:	e013      	b.n	8000b2e <ILI9341_FillRectangle+0xc2>
        for(x = w; x > 0; x--) {
 8000b06:	887b      	ldrh	r3, [r7, #2]
 8000b08:	80fb      	strh	r3, [r7, #6]
 8000b0a:	e00a      	b.n	8000b22 <ILI9341_FillRectangle+0xb6>
            HAL_SPI_Transmit(&ILI9341_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8000b0c:	f107 010c 	add.w	r1, r7, #12
 8000b10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b14:	2202      	movs	r2, #2
 8000b16:	480b      	ldr	r0, [pc, #44]	; (8000b44 <ILI9341_FillRectangle+0xd8>)
 8000b18:	f002 fa79 	bl	800300e <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 8000b1c:	88fb      	ldrh	r3, [r7, #6]
 8000b1e:	3b01      	subs	r3, #1
 8000b20:	80fb      	strh	r3, [r7, #6]
 8000b22:	88fb      	ldrh	r3, [r7, #6]
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d1f1      	bne.n	8000b0c <ILI9341_FillRectangle+0xa0>
    for(y = h; y > 0; y--) {
 8000b28:	88bb      	ldrh	r3, [r7, #4]
 8000b2a:	3b01      	subs	r3, #1
 8000b2c:	80bb      	strh	r3, [r7, #4]
 8000b2e:	88bb      	ldrh	r3, [r7, #4]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d1e8      	bne.n	8000b06 <ILI9341_FillRectangle+0x9a>
        }
    }

    ILI9341_Unselect();
 8000b34:	f7ff fcd0 	bl	80004d8 <ILI9341_Unselect>
 8000b38:	e000      	b.n	8000b3c <ILI9341_FillRectangle+0xd0>
    if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT)) return;
 8000b3a:	bf00      	nop
}
 8000b3c:	3714      	adds	r7, #20
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd90      	pop	{r4, r7, pc}
 8000b42:	bf00      	nop
 8000b44:	20000164 	.word	0x20000164

08000b48 <ILI9341_FillScreen>:

void ILI9341_FillScreen(uint16_t color) {
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b084      	sub	sp, #16
 8000b4c:	af02      	add	r7, sp, #8
 8000b4e:	4603      	mov	r3, r0
 8000b50:	80fb      	strh	r3, [r7, #6]
    ILI9341_FillRectangle(0, 0, ILI9341_WIDTH, ILI9341_HEIGHT, color);
 8000b52:	88fb      	ldrh	r3, [r7, #6]
 8000b54:	9300      	str	r3, [sp, #0]
 8000b56:	23f0      	movs	r3, #240	; 0xf0
 8000b58:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	2000      	movs	r0, #0
 8000b60:	f7ff ff84 	bl	8000a6c <ILI9341_FillRectangle>
}
 8000b64:	bf00      	nop
 8000b66:	3708      	adds	r7, #8
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}

08000b6c <ILI9341_InvertColors>:
    ILI9341_SetAddressWindow(x, y, x+w-1, y+h-1);
    ILI9341_WriteData((uint8_t*)data, sizeof(uint16_t)*w*h);
    ILI9341_Unselect();
}

void ILI9341_InvertColors(bool invert) {
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	4603      	mov	r3, r0
 8000b74:	71fb      	strb	r3, [r7, #7]
    ILI9341_Select();
 8000b76:	f7ff fca5 	bl	80004c4 <ILI9341_Select>
    ILI9341_WriteCommand(invert ? 0x21 /* INVON */ : 0x20 /* INVOFF */);
 8000b7a:	79fb      	ldrb	r3, [r7, #7]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d001      	beq.n	8000b84 <ILI9341_InvertColors+0x18>
 8000b80:	2321      	movs	r3, #33	; 0x21
 8000b82:	e000      	b.n	8000b86 <ILI9341_InvertColors+0x1a>
 8000b84:	2320      	movs	r3, #32
 8000b86:	4618      	mov	r0, r3
 8000b88:	f7ff fcc4 	bl	8000514 <ILI9341_WriteCommand>
    ILI9341_Unselect();
 8000b8c:	f7ff fca4 	bl	80004d8 <ILI9341_Unselect>
}
 8000b90:	bf00      	nop
 8000b92:	3708      	adds	r7, #8
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}

08000b98 <ILI9341_TouchUnselect>:

static void ILI9341_TouchSelect() {
    HAL_GPIO_WritePin(ILI9341_TOUCH_CS_GPIO_Port, ILI9341_TOUCH_CS_Pin, GPIO_PIN_RESET);
}

void ILI9341_TouchUnselect() {
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_TOUCH_CS_GPIO_Port, ILI9341_TOUCH_CS_Pin, GPIO_PIN_SET);
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ba2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ba6:	f000 fffb 	bl	8001ba0 <HAL_GPIO_WritePin>
}
 8000baa:	bf00      	nop
 8000bac:	bd80      	pop	{r7, pc}
	...

08000bb0 <main>:

//************************************************************************************************
//        main
//************************************************************************************************
int main(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b086      	sub	sp, #24
 8000bb4:	af04      	add	r7, sp, #16

  HAL_Init();
 8000bb6:	f000 fc58 	bl	800146a <HAL_Init>
  SystemClock_Config();
 8000bba:	f000 f951 	bl	8000e60 <SystemClock_Config>
  MX_GPIO_Init();
 8000bbe:	f000 fa67 	bl	8001090 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000bc2:	f000 f9b7 	bl	8000f34 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000bc6:	f000 f9f5 	bl	8000fb4 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000bca:	f000 fa31 	bl	8001030 <MX_USART1_UART_Init>

  ILI9341_Unselect();
 8000bce:	f7ff fc83 	bl	80004d8 <ILI9341_Unselect>
  ILI9341_TouchUnselect();
 8000bd2:	f7ff ffe1 	bl	8000b98 <ILI9341_TouchUnselect>
  ILI9341_Init();
 8000bd6:	f7ff fd29 	bl	800062c <ILI9341_Init>
//************************************************************************************************
  while (1)
  {


	    ILI9341_FillScreen(BLACK);
 8000bda:	2000      	movs	r0, #0
 8000bdc:	f7ff ffb4 	bl	8000b48 <ILI9341_FillScreen>

	    for(int x = 0; x < ILI9341_WIDTH; x++) {
 8000be0:	2300      	movs	r3, #0
 8000be2:	607b      	str	r3, [r7, #4]
 8000be4:	e012      	b.n	8000c0c <main+0x5c>
	        ILI9341_DrawPixel(x, 0, RED);
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	b29b      	uxth	r3, r3
 8000bea:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8000bee:	2100      	movs	r1, #0
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f7ff fe49 	bl	8000888 <ILI9341_DrawPixel>
	        ILI9341_DrawPixel(x, ILI9341_HEIGHT-1, RED);
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	b29b      	uxth	r3, r3
 8000bfa:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8000bfe:	21ef      	movs	r1, #239	; 0xef
 8000c00:	4618      	mov	r0, r3
 8000c02:	f7ff fe41 	bl	8000888 <ILI9341_DrawPixel>
	    for(int x = 0; x < ILI9341_WIDTH; x++) {
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	3301      	adds	r3, #1
 8000c0a:	607b      	str	r3, [r7, #4]
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000c12:	dbe8      	blt.n	8000be6 <main+0x36>
	    }

	    for(int y = 0; y < ILI9341_HEIGHT; y++) {
 8000c14:	2300      	movs	r3, #0
 8000c16:	603b      	str	r3, [r7, #0]
 8000c18:	e013      	b.n	8000c42 <main+0x92>
	        ILI9341_DrawPixel(0, y, RED);
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	b29b      	uxth	r3, r3
 8000c1e:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8000c22:	4619      	mov	r1, r3
 8000c24:	2000      	movs	r0, #0
 8000c26:	f7ff fe2f 	bl	8000888 <ILI9341_DrawPixel>
	        ILI9341_DrawPixel(ILI9341_WIDTH-1, y, RED);
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	b29b      	uxth	r3, r3
 8000c2e:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8000c32:	4619      	mov	r1, r3
 8000c34:	f240 103f 	movw	r0, #319	; 0x13f
 8000c38:	f7ff fe26 	bl	8000888 <ILI9341_DrawPixel>
	    for(int y = 0; y < ILI9341_HEIGHT; y++) {
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	3301      	adds	r3, #1
 8000c40:	603b      	str	r3, [r7, #0]
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	2bef      	cmp	r3, #239	; 0xef
 8000c46:	dde8      	ble.n	8000c1a <main+0x6a>
	    }

	    ILI9341_FillScreen(BLACK);
 8000c48:	2000      	movs	r0, #0
 8000c4a:	f7ff ff7d 	bl	8000b48 <ILI9341_FillScreen>
	    ILI9341_WriteString(0, 0, "Font_7x10, red on black, lorem ipsum dolor sit amet", Font_7x10, RED, BLACK);
 8000c4e:	4b76      	ldr	r3, [pc, #472]	; (8000e28 <main+0x278>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	9202      	str	r2, [sp, #8]
 8000c54:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8000c58:	9201      	str	r2, [sp, #4]
 8000c5a:	685a      	ldr	r2, [r3, #4]
 8000c5c:	9200      	str	r2, [sp, #0]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4a72      	ldr	r2, [pc, #456]	; (8000e2c <main+0x27c>)
 8000c62:	2100      	movs	r1, #0
 8000c64:	2000      	movs	r0, #0
 8000c66:	f7ff feb5 	bl	80009d4 <ILI9341_WriteString>
	    ILI9341_WriteString(0, 3*10, "Font_11x18, green, lorem ipsum dolor sit amet", Font_11x18, GREEN, BLACK);
 8000c6a:	4b71      	ldr	r3, [pc, #452]	; (8000e30 <main+0x280>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	9202      	str	r2, [sp, #8]
 8000c70:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8000c74:	9201      	str	r2, [sp, #4]
 8000c76:	685a      	ldr	r2, [r3, #4]
 8000c78:	9200      	str	r2, [sp, #0]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a6d      	ldr	r2, [pc, #436]	; (8000e34 <main+0x284>)
 8000c7e:	211e      	movs	r1, #30
 8000c80:	2000      	movs	r0, #0
 8000c82:	f7ff fea7 	bl	80009d4 <ILI9341_WriteString>
	    ILI9341_WriteString(0, 3*10+3*18, "Font_16x26, blue, lorem ipsum dolor sit amet", Font_16x26, BLUE, BLACK);
 8000c86:	4b6c      	ldr	r3, [pc, #432]	; (8000e38 <main+0x288>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	9202      	str	r2, [sp, #8]
 8000c8c:	221f      	movs	r2, #31
 8000c8e:	9201      	str	r2, [sp, #4]
 8000c90:	685a      	ldr	r2, [r3, #4]
 8000c92:	9200      	str	r2, [sp, #0]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	4a69      	ldr	r2, [pc, #420]	; (8000e3c <main+0x28c>)
 8000c98:	2154      	movs	r1, #84	; 0x54
 8000c9a:	2000      	movs	r0, #0
 8000c9c:	f7ff fe9a 	bl	80009d4 <ILI9341_WriteString>

	    HAL_Delay(1000);
 8000ca0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ca4:	f000 fc56 	bl	8001554 <HAL_Delay>
	    ILI9341_InvertColors(true);
 8000ca8:	2001      	movs	r0, #1
 8000caa:	f7ff ff5f 	bl	8000b6c <ILI9341_InvertColors>
	    HAL_Delay(1000);
 8000cae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cb2:	f000 fc4f 	bl	8001554 <HAL_Delay>
	    ILI9341_InvertColors(false);
 8000cb6:	2000      	movs	r0, #0
 8000cb8:	f7ff ff58 	bl	8000b6c <ILI9341_InvertColors>

	    HAL_Delay(5000);
 8000cbc:	f241 3088 	movw	r0, #5000	; 0x1388
 8000cc0:	f000 fc48 	bl	8001554 <HAL_Delay>

	    ILI9341_FillScreen(WHITE);
 8000cc4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000cc8:	f7ff ff3e 	bl	8000b48 <ILI9341_FillScreen>
	        ILI9341_WriteString(0, 0, "WHITE", Font_11x18, BLACK, WHITE);
 8000ccc:	4b58      	ldr	r3, [pc, #352]	; (8000e30 <main+0x280>)
 8000cce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000cd2:	9202      	str	r2, [sp, #8]
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	9201      	str	r2, [sp, #4]
 8000cd8:	685a      	ldr	r2, [r3, #4]
 8000cda:	9200      	str	r2, [sp, #0]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	4a58      	ldr	r2, [pc, #352]	; (8000e40 <main+0x290>)
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	2000      	movs	r0, #0
 8000ce4:	f7ff fe76 	bl	80009d4 <ILI9341_WriteString>
	        HAL_Delay(500);
 8000ce8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000cec:	f000 fc32 	bl	8001554 <HAL_Delay>

	        ILI9341_FillScreen(BLUE);
 8000cf0:	201f      	movs	r0, #31
 8000cf2:	f7ff ff29 	bl	8000b48 <ILI9341_FillScreen>
	        ILI9341_WriteString(0, 0, "BLUE", Font_11x18, BLACK, BLUE);
 8000cf6:	4b4e      	ldr	r3, [pc, #312]	; (8000e30 <main+0x280>)
 8000cf8:	221f      	movs	r2, #31
 8000cfa:	9202      	str	r2, [sp, #8]
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	9201      	str	r2, [sp, #4]
 8000d00:	685a      	ldr	r2, [r3, #4]
 8000d02:	9200      	str	r2, [sp, #0]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	4a4f      	ldr	r2, [pc, #316]	; (8000e44 <main+0x294>)
 8000d08:	2100      	movs	r1, #0
 8000d0a:	2000      	movs	r0, #0
 8000d0c:	f7ff fe62 	bl	80009d4 <ILI9341_WriteString>
	        HAL_Delay(500);
 8000d10:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d14:	f000 fc1e 	bl	8001554 <HAL_Delay>

	        ILI9341_FillScreen(RED);
 8000d18:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8000d1c:	f7ff ff14 	bl	8000b48 <ILI9341_FillScreen>
	        ILI9341_WriteString(0, 0, "RED", Font_11x18, BLACK, RED);
 8000d20:	4b43      	ldr	r3, [pc, #268]	; (8000e30 <main+0x280>)
 8000d22:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8000d26:	9202      	str	r2, [sp, #8]
 8000d28:	2200      	movs	r2, #0
 8000d2a:	9201      	str	r2, [sp, #4]
 8000d2c:	685a      	ldr	r2, [r3, #4]
 8000d2e:	9200      	str	r2, [sp, #0]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	4a45      	ldr	r2, [pc, #276]	; (8000e48 <main+0x298>)
 8000d34:	2100      	movs	r1, #0
 8000d36:	2000      	movs	r0, #0
 8000d38:	f7ff fe4c 	bl	80009d4 <ILI9341_WriteString>
	        HAL_Delay(500);
 8000d3c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d40:	f000 fc08 	bl	8001554 <HAL_Delay>

	        ILI9341_FillScreen(GREEN);
 8000d44:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8000d48:	f7ff fefe 	bl	8000b48 <ILI9341_FillScreen>
	        ILI9341_WriteString(0, 0, "GREEN", Font_11x18, BLACK, GREEN);
 8000d4c:	4b38      	ldr	r3, [pc, #224]	; (8000e30 <main+0x280>)
 8000d4e:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8000d52:	9202      	str	r2, [sp, #8]
 8000d54:	2200      	movs	r2, #0
 8000d56:	9201      	str	r2, [sp, #4]
 8000d58:	685a      	ldr	r2, [r3, #4]
 8000d5a:	9200      	str	r2, [sp, #0]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	4a3b      	ldr	r2, [pc, #236]	; (8000e4c <main+0x29c>)
 8000d60:	2100      	movs	r1, #0
 8000d62:	2000      	movs	r0, #0
 8000d64:	f7ff fe36 	bl	80009d4 <ILI9341_WriteString>
	        HAL_Delay(500);
 8000d68:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d6c:	f000 fbf2 	bl	8001554 <HAL_Delay>

	        ILI9341_FillScreen(CYAN);
 8000d70:	f240 70ff 	movw	r0, #2047	; 0x7ff
 8000d74:	f7ff fee8 	bl	8000b48 <ILI9341_FillScreen>
	        ILI9341_WriteString(0, 0, "CYAN", Font_11x18, BLACK, CYAN);
 8000d78:	4b2d      	ldr	r3, [pc, #180]	; (8000e30 <main+0x280>)
 8000d7a:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000d7e:	9202      	str	r2, [sp, #8]
 8000d80:	2200      	movs	r2, #0
 8000d82:	9201      	str	r2, [sp, #4]
 8000d84:	685a      	ldr	r2, [r3, #4]
 8000d86:	9200      	str	r2, [sp, #0]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	4a31      	ldr	r2, [pc, #196]	; (8000e50 <main+0x2a0>)
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	2000      	movs	r0, #0
 8000d90:	f7ff fe20 	bl	80009d4 <ILI9341_WriteString>
	        HAL_Delay(500);
 8000d94:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d98:	f000 fbdc 	bl	8001554 <HAL_Delay>

	        ILI9341_FillScreen(MAGENTA);
 8000d9c:	f64f 001f 	movw	r0, #63519	; 0xf81f
 8000da0:	f7ff fed2 	bl	8000b48 <ILI9341_FillScreen>
	        ILI9341_WriteString(0, 0, "MAGENTA", Font_11x18, BLACK, MAGENTA);
 8000da4:	4b22      	ldr	r3, [pc, #136]	; (8000e30 <main+0x280>)
 8000da6:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8000daa:	9202      	str	r2, [sp, #8]
 8000dac:	2200      	movs	r2, #0
 8000dae:	9201      	str	r2, [sp, #4]
 8000db0:	685a      	ldr	r2, [r3, #4]
 8000db2:	9200      	str	r2, [sp, #0]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	4a27      	ldr	r2, [pc, #156]	; (8000e54 <main+0x2a4>)
 8000db8:	2100      	movs	r1, #0
 8000dba:	2000      	movs	r0, #0
 8000dbc:	f7ff fe0a 	bl	80009d4 <ILI9341_WriteString>
	        HAL_Delay(500);
 8000dc0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000dc4:	f000 fbc6 	bl	8001554 <HAL_Delay>

	        ILI9341_FillScreen(YELLOW);
 8000dc8:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8000dcc:	f7ff febc 	bl	8000b48 <ILI9341_FillScreen>
	        ILI9341_WriteString(0, 0, "YELLOW", Font_11x18, BLACK, YELLOW);
 8000dd0:	4b17      	ldr	r3, [pc, #92]	; (8000e30 <main+0x280>)
 8000dd2:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8000dd6:	9202      	str	r2, [sp, #8]
 8000dd8:	2200      	movs	r2, #0
 8000dda:	9201      	str	r2, [sp, #4]
 8000ddc:	685a      	ldr	r2, [r3, #4]
 8000dde:	9200      	str	r2, [sp, #0]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	4a1d      	ldr	r2, [pc, #116]	; (8000e58 <main+0x2a8>)
 8000de4:	2100      	movs	r1, #0
 8000de6:	2000      	movs	r0, #0
 8000de8:	f7ff fdf4 	bl	80009d4 <ILI9341_WriteString>
	        HAL_Delay(500);
 8000dec:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000df0:	f000 fbb0 	bl	8001554 <HAL_Delay>

	        ILI9341_FillScreen(BLACK);
 8000df4:	2000      	movs	r0, #0
 8000df6:	f7ff fea7 	bl	8000b48 <ILI9341_FillScreen>
	        ILI9341_WriteString(0, 0, "BLACK", Font_11x18, WHITE, BLACK);
 8000dfa:	4b0d      	ldr	r3, [pc, #52]	; (8000e30 <main+0x280>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	9202      	str	r2, [sp, #8]
 8000e00:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e04:	9201      	str	r2, [sp, #4]
 8000e06:	685a      	ldr	r2, [r3, #4]
 8000e08:	9200      	str	r2, [sp, #0]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4a13      	ldr	r2, [pc, #76]	; (8000e5c <main+0x2ac>)
 8000e0e:	2100      	movs	r1, #0
 8000e10:	2000      	movs	r0, #0
 8000e12:	f7ff fddf 	bl	80009d4 <ILI9341_WriteString>
	        HAL_Delay(500);
 8000e16:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e1a:	f000 fb9b 	bl	8001554 <HAL_Delay>

	        //ILI9341_DrawImage((ILI9341_WIDTH - 240) / 2, (ILI9341_HEIGHT - 240) / 2, 240, 240, (const uint16_t*)test_img_240x240);

	        HAL_Delay(3000);
 8000e1e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000e22:	f000 fb97 	bl	8001554 <HAL_Delay>
	    ILI9341_FillScreen(BLACK);
 8000e26:	e6d8      	b.n	8000bda <main+0x2a>
 8000e28:	20000000 	.word	0x20000000
 8000e2c:	08004338 	.word	0x08004338
 8000e30:	20000008 	.word	0x20000008
 8000e34:	0800436c 	.word	0x0800436c
 8000e38:	20000010 	.word	0x20000010
 8000e3c:	0800439c 	.word	0x0800439c
 8000e40:	080043cc 	.word	0x080043cc
 8000e44:	080043d4 	.word	0x080043d4
 8000e48:	080043dc 	.word	0x080043dc
 8000e4c:	080043e0 	.word	0x080043e0
 8000e50:	080043e8 	.word	0x080043e8
 8000e54:	080043f0 	.word	0x080043f0
 8000e58:	080043f8 	.word	0x080043f8
 8000e5c:	08004400 	.word	0x08004400

08000e60 <SystemClock_Config>:




void SystemClock_Config(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b0a4      	sub	sp, #144	; 0x90
 8000e64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e66:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000e6a:	2244      	movs	r2, #68	; 0x44
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f003 fa34 	bl	80042dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e74:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000e78:	2200      	movs	r2, #0
 8000e7a:	601a      	str	r2, [r3, #0]
 8000e7c:	605a      	str	r2, [r3, #4]
 8000e7e:	609a      	str	r2, [r3, #8]
 8000e80:	60da      	str	r2, [r3, #12]
 8000e82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e84:	1d3b      	adds	r3, r7, #4
 8000e86:	2234      	movs	r2, #52	; 0x34
 8000e88:	2100      	movs	r1, #0
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f003 fa26 	bl	80042dc <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000e90:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000e94:	f000 ffd0 	bl	8001e38 <HAL_PWREx_ControlVoltageScaling>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d001      	beq.n	8000ea2 <SystemClock_Config+0x42>
  {
    Error_Handler();
 8000e9e:	f000 f957 	bl	8001150 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ea2:	2302      	movs	r3, #2
 8000ea4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ea6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000eaa:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000eac:	2340      	movs	r3, #64	; 0x40
 8000eae:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000eb0:	2302      	movs	r3, #2
 8000eb2:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000eb4:	2302      	movs	r3, #2
 8000eb6:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000eb8:	2301      	movs	r3, #1
 8000eba:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000ebe:	2308      	movs	r3, #8
 8000ec0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000ec4:	2302      	movs	r3, #2
 8000ec6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000eca:	2302      	movs	r3, #2
 8000ecc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ed0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f001 f805 	bl	8001ee4 <HAL_RCC_OscConfig>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d001      	beq.n	8000ee4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000ee0:	f000 f936 	bl	8001150 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ee4:	230f      	movs	r3, #15
 8000ee6:	63bb      	str	r3, [r7, #56]	; 0x38
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ee8:	2303      	movs	r3, #3
 8000eea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000eec:	2300      	movs	r3, #0
 8000eee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	64bb      	str	r3, [r7, #72]	; 0x48

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000ef8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000efc:	2103      	movs	r1, #3
 8000efe:	4618      	mov	r0, r3
 8000f00:	f001 fc56 	bl	80027b0 <HAL_RCC_ClockConfig>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000f0a:	f000 f921 	bl	8001150 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8000f0e:	2341      	movs	r3, #65	; 0x41
 8000f10:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000f12:	2300      	movs	r3, #0
 8000f14:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000f16:	2300      	movs	r3, #0
 8000f18:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f1a:	1d3b      	adds	r3, r7, #4
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f001 fe4d 	bl	8002bbc <HAL_RCCEx_PeriphCLKConfig>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d001      	beq.n	8000f2c <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000f28:	f000 f912 	bl	8001150 <Error_Handler>
  }
}
 8000f2c:	bf00      	nop
 8000f2e:	3790      	adds	r7, #144	; 0x90
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}

08000f34 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f38:	4b1b      	ldr	r3, [pc, #108]	; (8000fa8 <MX_I2C1_Init+0x74>)
 8000f3a:	4a1c      	ldr	r2, [pc, #112]	; (8000fac <MX_I2C1_Init+0x78>)
 8000f3c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00602173;
 8000f3e:	4b1a      	ldr	r3, [pc, #104]	; (8000fa8 <MX_I2C1_Init+0x74>)
 8000f40:	4a1b      	ldr	r2, [pc, #108]	; (8000fb0 <MX_I2C1_Init+0x7c>)
 8000f42:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000f44:	4b18      	ldr	r3, [pc, #96]	; (8000fa8 <MX_I2C1_Init+0x74>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f4a:	4b17      	ldr	r3, [pc, #92]	; (8000fa8 <MX_I2C1_Init+0x74>)
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f50:	4b15      	ldr	r3, [pc, #84]	; (8000fa8 <MX_I2C1_Init+0x74>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000f56:	4b14      	ldr	r3, [pc, #80]	; (8000fa8 <MX_I2C1_Init+0x74>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f5c:	4b12      	ldr	r3, [pc, #72]	; (8000fa8 <MX_I2C1_Init+0x74>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f62:	4b11      	ldr	r3, [pc, #68]	; (8000fa8 <MX_I2C1_Init+0x74>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f68:	4b0f      	ldr	r3, [pc, #60]	; (8000fa8 <MX_I2C1_Init+0x74>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f6e:	480e      	ldr	r0, [pc, #56]	; (8000fa8 <MX_I2C1_Init+0x74>)
 8000f70:	f000 fe2e 	bl	8001bd0 <HAL_I2C_Init>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000f7a:	f000 f8e9 	bl	8001150 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f7e:	2100      	movs	r1, #0
 8000f80:	4809      	ldr	r0, [pc, #36]	; (8000fa8 <MX_I2C1_Init+0x74>)
 8000f82:	f000 feb4 	bl	8001cee <HAL_I2CEx_ConfigAnalogFilter>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000f8c:	f000 f8e0 	bl	8001150 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000f90:	2100      	movs	r1, #0
 8000f92:	4805      	ldr	r0, [pc, #20]	; (8000fa8 <MX_I2C1_Init+0x74>)
 8000f94:	f000 fef6 	bl	8001d84 <HAL_I2CEx_ConfigDigitalFilter>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000f9e:	f000 f8d7 	bl	8001150 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000fa2:	bf00      	nop
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	20000080 	.word	0x20000080
 8000fac:	40005400 	.word	0x40005400
 8000fb0:	00602173 	.word	0x00602173

08000fb4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000fb8:	4b1b      	ldr	r3, [pc, #108]	; (8001028 <MX_SPI1_Init+0x74>)
 8000fba:	4a1c      	ldr	r2, [pc, #112]	; (800102c <MX_SPI1_Init+0x78>)
 8000fbc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000fbe:	4b1a      	ldr	r3, [pc, #104]	; (8001028 <MX_SPI1_Init+0x74>)
 8000fc0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000fc4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000fc6:	4b18      	ldr	r3, [pc, #96]	; (8001028 <MX_SPI1_Init+0x74>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000fcc:	4b16      	ldr	r3, [pc, #88]	; (8001028 <MX_SPI1_Init+0x74>)
 8000fce:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000fd2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000fd4:	4b14      	ldr	r3, [pc, #80]	; (8001028 <MX_SPI1_Init+0x74>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000fda:	4b13      	ldr	r3, [pc, #76]	; (8001028 <MX_SPI1_Init+0x74>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000fe0:	4b11      	ldr	r3, [pc, #68]	; (8001028 <MX_SPI1_Init+0x74>)
 8000fe2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fe6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000fe8:	4b0f      	ldr	r3, [pc, #60]	; (8001028 <MX_SPI1_Init+0x74>)
 8000fea:	2210      	movs	r2, #16
 8000fec:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000fee:	4b0e      	ldr	r3, [pc, #56]	; (8001028 <MX_SPI1_Init+0x74>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ff4:	4b0c      	ldr	r3, [pc, #48]	; (8001028 <MX_SPI1_Init+0x74>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ffa:	4b0b      	ldr	r3, [pc, #44]	; (8001028 <MX_SPI1_Init+0x74>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001000:	4b09      	ldr	r3, [pc, #36]	; (8001028 <MX_SPI1_Init+0x74>)
 8001002:	2207      	movs	r2, #7
 8001004:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001006:	4b08      	ldr	r3, [pc, #32]	; (8001028 <MX_SPI1_Init+0x74>)
 8001008:	2200      	movs	r2, #0
 800100a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800100c:	4b06      	ldr	r3, [pc, #24]	; (8001028 <MX_SPI1_Init+0x74>)
 800100e:	2208      	movs	r2, #8
 8001010:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001012:	4805      	ldr	r0, [pc, #20]	; (8001028 <MX_SPI1_Init+0x74>)
 8001014:	f001 ff58 	bl	8002ec8 <HAL_SPI_Init>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800101e:	f000 f897 	bl	8001150 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001022:	bf00      	nop
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	20000164 	.word	0x20000164
 800102c:	40013000 	.word	0x40013000

08001030 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001034:	4b14      	ldr	r3, [pc, #80]	; (8001088 <MX_USART1_UART_Init+0x58>)
 8001036:	4a15      	ldr	r2, [pc, #84]	; (800108c <MX_USART1_UART_Init+0x5c>)
 8001038:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800103a:	4b13      	ldr	r3, [pc, #76]	; (8001088 <MX_USART1_UART_Init+0x58>)
 800103c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001040:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001042:	4b11      	ldr	r3, [pc, #68]	; (8001088 <MX_USART1_UART_Init+0x58>)
 8001044:	2200      	movs	r2, #0
 8001046:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001048:	4b0f      	ldr	r3, [pc, #60]	; (8001088 <MX_USART1_UART_Init+0x58>)
 800104a:	2200      	movs	r2, #0
 800104c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800104e:	4b0e      	ldr	r3, [pc, #56]	; (8001088 <MX_USART1_UART_Init+0x58>)
 8001050:	2200      	movs	r2, #0
 8001052:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001054:	4b0c      	ldr	r3, [pc, #48]	; (8001088 <MX_USART1_UART_Init+0x58>)
 8001056:	220c      	movs	r2, #12
 8001058:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800105a:	4b0b      	ldr	r3, [pc, #44]	; (8001088 <MX_USART1_UART_Init+0x58>)
 800105c:	2200      	movs	r2, #0
 800105e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001060:	4b09      	ldr	r3, [pc, #36]	; (8001088 <MX_USART1_UART_Init+0x58>)
 8001062:	2200      	movs	r2, #0
 8001064:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001066:	4b08      	ldr	r3, [pc, #32]	; (8001088 <MX_USART1_UART_Init+0x58>)
 8001068:	2200      	movs	r2, #0
 800106a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800106c:	4b06      	ldr	r3, [pc, #24]	; (8001088 <MX_USART1_UART_Init+0x58>)
 800106e:	2200      	movs	r2, #0
 8001070:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001072:	4805      	ldr	r0, [pc, #20]	; (8001088 <MX_USART1_UART_Init+0x58>)
 8001074:	f002 fa9a 	bl	80035ac <HAL_UART_Init>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800107e:	f000 f867 	bl	8001150 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001082:	bf00      	nop
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	200000dc 	.word	0x200000dc
 800108c:	40013800 	.word	0x40013800

08001090 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b088      	sub	sp, #32
 8001094:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001096:	f107 030c 	add.w	r3, r7, #12
 800109a:	2200      	movs	r2, #0
 800109c:	601a      	str	r2, [r3, #0]
 800109e:	605a      	str	r2, [r3, #4]
 80010a0:	609a      	str	r2, [r3, #8]
 80010a2:	60da      	str	r2, [r3, #12]
 80010a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010a6:	4b28      	ldr	r3, [pc, #160]	; (8001148 <MX_GPIO_Init+0xb8>)
 80010a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010aa:	4a27      	ldr	r2, [pc, #156]	; (8001148 <MX_GPIO_Init+0xb8>)
 80010ac:	f043 0301 	orr.w	r3, r3, #1
 80010b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010b2:	4b25      	ldr	r3, [pc, #148]	; (8001148 <MX_GPIO_Init+0xb8>)
 80010b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010b6:	f003 0301 	and.w	r3, r3, #1
 80010ba:	60bb      	str	r3, [r7, #8]
 80010bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010be:	4b22      	ldr	r3, [pc, #136]	; (8001148 <MX_GPIO_Init+0xb8>)
 80010c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010c2:	4a21      	ldr	r2, [pc, #132]	; (8001148 <MX_GPIO_Init+0xb8>)
 80010c4:	f043 0302 	orr.w	r3, r3, #2
 80010c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010ca:	4b1f      	ldr	r3, [pc, #124]	; (8001148 <MX_GPIO_Init+0xb8>)
 80010cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ce:	f003 0302 	and.w	r3, r3, #2
 80010d2:	607b      	str	r3, [r7, #4]
 80010d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 80010d6:	2200      	movs	r2, #0
 80010d8:	210c      	movs	r1, #12
 80010da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010de:	f000 fd5f 	bl	8001ba0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 80010e2:	2200      	movs	r2, #0
 80010e4:	2119      	movs	r1, #25
 80010e6:	4819      	ldr	r0, [pc, #100]	; (800114c <MX_GPIO_Init+0xbc>)
 80010e8:	f000 fd5a 	bl	8001ba0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80010ec:	230c      	movs	r3, #12
 80010ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010f0:	2301      	movs	r3, #1
 80010f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f4:	2300      	movs	r3, #0
 80010f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f8:	2300      	movs	r3, #0
 80010fa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010fc:	f107 030c 	add.w	r3, r7, #12
 8001100:	4619      	mov	r1, r3
 8001102:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001106:	f000 fbd9 	bl	80018bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800110a:	23c0      	movs	r3, #192	; 0xc0
 800110c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800110e:	2300      	movs	r3, #0
 8001110:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001112:	2301      	movs	r3, #1
 8001114:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001116:	f107 030c 	add.w	r3, r7, #12
 800111a:	4619      	mov	r1, r3
 800111c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001120:	f000 fbcc 	bl	80018bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB3 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4;
 8001124:	2319      	movs	r3, #25
 8001126:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001128:	2301      	movs	r3, #1
 800112a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112c:	2300      	movs	r3, #0
 800112e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001130:	2300      	movs	r3, #0
 8001132:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001134:	f107 030c 	add.w	r3, r7, #12
 8001138:	4619      	mov	r1, r3
 800113a:	4804      	ldr	r0, [pc, #16]	; (800114c <MX_GPIO_Init+0xbc>)
 800113c:	f000 fbbe 	bl	80018bc <HAL_GPIO_Init>

}
 8001140:	bf00      	nop
 8001142:	3720      	adds	r7, #32
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	40021000 	.word	0x40021000
 800114c:	48000400 	.word	0x48000400

08001150 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001154:	b672      	cpsid	i
}
 8001156:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001158:	e7fe      	b.n	8001158 <Error_Handler+0x8>
	...

0800115c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001162:	4b0f      	ldr	r3, [pc, #60]	; (80011a0 <HAL_MspInit+0x44>)
 8001164:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001166:	4a0e      	ldr	r2, [pc, #56]	; (80011a0 <HAL_MspInit+0x44>)
 8001168:	f043 0301 	orr.w	r3, r3, #1
 800116c:	6613      	str	r3, [r2, #96]	; 0x60
 800116e:	4b0c      	ldr	r3, [pc, #48]	; (80011a0 <HAL_MspInit+0x44>)
 8001170:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001172:	f003 0301 	and.w	r3, r3, #1
 8001176:	607b      	str	r3, [r7, #4]
 8001178:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800117a:	4b09      	ldr	r3, [pc, #36]	; (80011a0 <HAL_MspInit+0x44>)
 800117c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800117e:	4a08      	ldr	r2, [pc, #32]	; (80011a0 <HAL_MspInit+0x44>)
 8001180:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001184:	6593      	str	r3, [r2, #88]	; 0x58
 8001186:	4b06      	ldr	r3, [pc, #24]	; (80011a0 <HAL_MspInit+0x44>)
 8001188:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800118a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800118e:	603b      	str	r3, [r7, #0]
 8001190:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001192:	bf00      	nop
 8001194:	370c      	adds	r7, #12
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop
 80011a0:	40021000 	.word	0x40021000

080011a4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b08a      	sub	sp, #40	; 0x28
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ac:	f107 0314 	add.w	r3, r7, #20
 80011b0:	2200      	movs	r2, #0
 80011b2:	601a      	str	r2, [r3, #0]
 80011b4:	605a      	str	r2, [r3, #4]
 80011b6:	609a      	str	r2, [r3, #8]
 80011b8:	60da      	str	r2, [r3, #12]
 80011ba:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a17      	ldr	r2, [pc, #92]	; (8001220 <HAL_I2C_MspInit+0x7c>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d127      	bne.n	8001216 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011c6:	4b17      	ldr	r3, [pc, #92]	; (8001224 <HAL_I2C_MspInit+0x80>)
 80011c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ca:	4a16      	ldr	r2, [pc, #88]	; (8001224 <HAL_I2C_MspInit+0x80>)
 80011cc:	f043 0302 	orr.w	r3, r3, #2
 80011d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011d2:	4b14      	ldr	r3, [pc, #80]	; (8001224 <HAL_I2C_MspInit+0x80>)
 80011d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011d6:	f003 0302 	and.w	r3, r3, #2
 80011da:	613b      	str	r3, [r7, #16]
 80011dc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80011de:	23c0      	movs	r3, #192	; 0xc0
 80011e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011e2:	2312      	movs	r3, #18
 80011e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011e6:	2301      	movs	r3, #1
 80011e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ea:	2303      	movs	r3, #3
 80011ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80011ee:	2304      	movs	r3, #4
 80011f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011f2:	f107 0314 	add.w	r3, r7, #20
 80011f6:	4619      	mov	r1, r3
 80011f8:	480b      	ldr	r0, [pc, #44]	; (8001228 <HAL_I2C_MspInit+0x84>)
 80011fa:	f000 fb5f 	bl	80018bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80011fe:	4b09      	ldr	r3, [pc, #36]	; (8001224 <HAL_I2C_MspInit+0x80>)
 8001200:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001202:	4a08      	ldr	r2, [pc, #32]	; (8001224 <HAL_I2C_MspInit+0x80>)
 8001204:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001208:	6593      	str	r3, [r2, #88]	; 0x58
 800120a:	4b06      	ldr	r3, [pc, #24]	; (8001224 <HAL_I2C_MspInit+0x80>)
 800120c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800120e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001212:	60fb      	str	r3, [r7, #12]
 8001214:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001216:	bf00      	nop
 8001218:	3728      	adds	r7, #40	; 0x28
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	40005400 	.word	0x40005400
 8001224:	40021000 	.word	0x40021000
 8001228:	48000400 	.word	0x48000400

0800122c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b08a      	sub	sp, #40	; 0x28
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001234:	f107 0314 	add.w	r3, r7, #20
 8001238:	2200      	movs	r2, #0
 800123a:	601a      	str	r2, [r3, #0]
 800123c:	605a      	str	r2, [r3, #4]
 800123e:	609a      	str	r2, [r3, #8]
 8001240:	60da      	str	r2, [r3, #12]
 8001242:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a18      	ldr	r2, [pc, #96]	; (80012ac <HAL_SPI_MspInit+0x80>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d129      	bne.n	80012a2 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800124e:	4b18      	ldr	r3, [pc, #96]	; (80012b0 <HAL_SPI_MspInit+0x84>)
 8001250:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001252:	4a17      	ldr	r2, [pc, #92]	; (80012b0 <HAL_SPI_MspInit+0x84>)
 8001254:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001258:	6613      	str	r3, [r2, #96]	; 0x60
 800125a:	4b15      	ldr	r3, [pc, #84]	; (80012b0 <HAL_SPI_MspInit+0x84>)
 800125c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800125e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001262:	613b      	str	r3, [r7, #16]
 8001264:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001266:	4b12      	ldr	r3, [pc, #72]	; (80012b0 <HAL_SPI_MspInit+0x84>)
 8001268:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800126a:	4a11      	ldr	r2, [pc, #68]	; (80012b0 <HAL_SPI_MspInit+0x84>)
 800126c:	f043 0301 	orr.w	r3, r3, #1
 8001270:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001272:	4b0f      	ldr	r3, [pc, #60]	; (80012b0 <HAL_SPI_MspInit+0x84>)
 8001274:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001276:	f003 0301 	and.w	r3, r3, #1
 800127a:	60fb      	str	r3, [r7, #12]
 800127c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA11     ------> SPI1_MISO
    PA12     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_12;
 800127e:	f641 0302 	movw	r3, #6146	; 0x1802
 8001282:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001284:	2302      	movs	r3, #2
 8001286:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001288:	2300      	movs	r3, #0
 800128a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800128c:	2303      	movs	r3, #3
 800128e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001290:	2305      	movs	r3, #5
 8001292:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001294:	f107 0314 	add.w	r3, r7, #20
 8001298:	4619      	mov	r1, r3
 800129a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800129e:	f000 fb0d 	bl	80018bc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80012a2:	bf00      	nop
 80012a4:	3728      	adds	r7, #40	; 0x28
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	40013000 	.word	0x40013000
 80012b0:	40021000 	.word	0x40021000

080012b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b08a      	sub	sp, #40	; 0x28
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012bc:	f107 0314 	add.w	r3, r7, #20
 80012c0:	2200      	movs	r2, #0
 80012c2:	601a      	str	r2, [r3, #0]
 80012c4:	605a      	str	r2, [r3, #4]
 80012c6:	609a      	str	r2, [r3, #8]
 80012c8:	60da      	str	r2, [r3, #12]
 80012ca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a1c      	ldr	r2, [pc, #112]	; (8001344 <HAL_UART_MspInit+0x90>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d131      	bne.n	800133a <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80012d6:	4b1c      	ldr	r3, [pc, #112]	; (8001348 <HAL_UART_MspInit+0x94>)
 80012d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012da:	4a1b      	ldr	r2, [pc, #108]	; (8001348 <HAL_UART_MspInit+0x94>)
 80012dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012e0:	6613      	str	r3, [r2, #96]	; 0x60
 80012e2:	4b19      	ldr	r3, [pc, #100]	; (8001348 <HAL_UART_MspInit+0x94>)
 80012e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012ea:	613b      	str	r3, [r7, #16]
 80012ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ee:	4b16      	ldr	r3, [pc, #88]	; (8001348 <HAL_UART_MspInit+0x94>)
 80012f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012f2:	4a15      	ldr	r2, [pc, #84]	; (8001348 <HAL_UART_MspInit+0x94>)
 80012f4:	f043 0301 	orr.w	r3, r3, #1
 80012f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012fa:	4b13      	ldr	r3, [pc, #76]	; (8001348 <HAL_UART_MspInit+0x94>)
 80012fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012fe:	f003 0301 	and.w	r3, r3, #1
 8001302:	60fb      	str	r3, [r7, #12]
 8001304:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001306:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800130a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800130c:	2302      	movs	r3, #2
 800130e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001310:	2300      	movs	r3, #0
 8001312:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001314:	2303      	movs	r3, #3
 8001316:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001318:	2307      	movs	r3, #7
 800131a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800131c:	f107 0314 	add.w	r3, r7, #20
 8001320:	4619      	mov	r1, r3
 8001322:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001326:	f000 fac9 	bl	80018bc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800132a:	2200      	movs	r2, #0
 800132c:	2100      	movs	r1, #0
 800132e:	2025      	movs	r0, #37	; 0x25
 8001330:	f000 fa0f 	bl	8001752 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001334:	2025      	movs	r0, #37	; 0x25
 8001336:	f000 fa28 	bl	800178a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800133a:	bf00      	nop
 800133c:	3728      	adds	r7, #40	; 0x28
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	40013800 	.word	0x40013800
 8001348:	40021000 	.word	0x40021000

0800134c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001350:	e7fe      	b.n	8001350 <NMI_Handler+0x4>

08001352 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001352:	b480      	push	{r7}
 8001354:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001356:	e7fe      	b.n	8001356 <HardFault_Handler+0x4>

08001358 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800135c:	e7fe      	b.n	800135c <MemManage_Handler+0x4>

0800135e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800135e:	b480      	push	{r7}
 8001360:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001362:	e7fe      	b.n	8001362 <BusFault_Handler+0x4>

08001364 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001368:	e7fe      	b.n	8001368 <UsageFault_Handler+0x4>

0800136a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800136a:	b480      	push	{r7}
 800136c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800136e:	bf00      	nop
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr

08001378 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800137c:	bf00      	nop
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr

08001386 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001386:	b480      	push	{r7}
 8001388:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800138a:	bf00      	nop
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr

08001394 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001398:	f000 f8bc 	bl	8001514 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800139c:	bf00      	nop
 800139e:	bd80      	pop	{r7, pc}

080013a0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80013a4:	4802      	ldr	r0, [pc, #8]	; (80013b0 <USART1_IRQHandler+0x10>)
 80013a6:	f002 f94f 	bl	8003648 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80013aa:	bf00      	nop
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	200000dc 	.word	0x200000dc

080013b4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80013b8:	4b15      	ldr	r3, [pc, #84]	; (8001410 <SystemInit+0x5c>)
 80013ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013be:	4a14      	ldr	r2, [pc, #80]	; (8001410 <SystemInit+0x5c>)
 80013c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80013c8:	4b12      	ldr	r3, [pc, #72]	; (8001414 <SystemInit+0x60>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a11      	ldr	r2, [pc, #68]	; (8001414 <SystemInit+0x60>)
 80013ce:	f043 0301 	orr.w	r3, r3, #1
 80013d2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80013d4:	4b0f      	ldr	r3, [pc, #60]	; (8001414 <SystemInit+0x60>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80013da:	4b0e      	ldr	r3, [pc, #56]	; (8001414 <SystemInit+0x60>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4a0d      	ldr	r2, [pc, #52]	; (8001414 <SystemInit+0x60>)
 80013e0:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80013e4:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80013e8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80013ea:	4b0a      	ldr	r3, [pc, #40]	; (8001414 <SystemInit+0x60>)
 80013ec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80013f0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80013f2:	4b08      	ldr	r3, [pc, #32]	; (8001414 <SystemInit+0x60>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4a07      	ldr	r2, [pc, #28]	; (8001414 <SystemInit+0x60>)
 80013f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013fc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80013fe:	4b05      	ldr	r3, [pc, #20]	; (8001414 <SystemInit+0x60>)
 8001400:	2200      	movs	r2, #0
 8001402:	619a      	str	r2, [r3, #24]
}
 8001404:	bf00      	nop
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	e000ed00 	.word	0xe000ed00
 8001414:	40021000 	.word	0x40021000

08001418 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001418:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001450 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800141c:	f7ff ffca 	bl	80013b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001420:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001422:	e003      	b.n	800142c <LoopCopyDataInit>

08001424 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001424:	4b0b      	ldr	r3, [pc, #44]	; (8001454 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001426:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001428:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800142a:	3104      	adds	r1, #4

0800142c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800142c:	480a      	ldr	r0, [pc, #40]	; (8001458 <LoopForever+0xa>)
	ldr	r3, =_edata
 800142e:	4b0b      	ldr	r3, [pc, #44]	; (800145c <LoopForever+0xe>)
	adds	r2, r0, r1
 8001430:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001432:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001434:	d3f6      	bcc.n	8001424 <CopyDataInit>
	ldr	r2, =_sbss
 8001436:	4a0a      	ldr	r2, [pc, #40]	; (8001460 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001438:	e002      	b.n	8001440 <LoopFillZerobss>

0800143a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800143a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800143c:	f842 3b04 	str.w	r3, [r2], #4

08001440 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001440:	4b08      	ldr	r3, [pc, #32]	; (8001464 <LoopForever+0x16>)
	cmp	r2, r3
 8001442:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001444:	d3f9      	bcc.n	800143a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001446:	f002 ff25 	bl	8004294 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800144a:	f7ff fbb1 	bl	8000bb0 <main>

0800144e <LoopForever>:

LoopForever:
    b LoopForever
 800144e:	e7fe      	b.n	800144e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001450:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 8001454:	08006c74 	.word	0x08006c74
	ldr	r0, =_sdata
 8001458:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800145c:	20000024 	.word	0x20000024
	ldr	r2, =_sbss
 8001460:	20000024 	.word	0x20000024
	ldr	r3, = _ebss
 8001464:	20000204 	.word	0x20000204

08001468 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001468:	e7fe      	b.n	8001468 <ADC1_2_IRQHandler>

0800146a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800146a:	b580      	push	{r7, lr}
 800146c:	b082      	sub	sp, #8
 800146e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001470:	2300      	movs	r3, #0
 8001472:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001474:	2003      	movs	r0, #3
 8001476:	f000 f961 	bl	800173c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800147a:	2000      	movs	r0, #0
 800147c:	f000 f80e 	bl	800149c <HAL_InitTick>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d002      	beq.n	800148c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001486:	2301      	movs	r3, #1
 8001488:	71fb      	strb	r3, [r7, #7]
 800148a:	e001      	b.n	8001490 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800148c:	f7ff fe66 	bl	800115c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001490:	79fb      	ldrb	r3, [r7, #7]
}
 8001492:	4618      	mov	r0, r3
 8001494:	3708      	adds	r7, #8
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
	...

0800149c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b084      	sub	sp, #16
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80014a4:	2300      	movs	r3, #0
 80014a6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80014a8:	4b17      	ldr	r3, [pc, #92]	; (8001508 <HAL_InitTick+0x6c>)
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d023      	beq.n	80014f8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80014b0:	4b16      	ldr	r3, [pc, #88]	; (800150c <HAL_InitTick+0x70>)
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	4b14      	ldr	r3, [pc, #80]	; (8001508 <HAL_InitTick+0x6c>)
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	4619      	mov	r1, r3
 80014ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014be:	fbb3 f3f1 	udiv	r3, r3, r1
 80014c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80014c6:	4618      	mov	r0, r3
 80014c8:	f000 f96d 	bl	80017a6 <HAL_SYSTICK_Config>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d10f      	bne.n	80014f2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2b0f      	cmp	r3, #15
 80014d6:	d809      	bhi.n	80014ec <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014d8:	2200      	movs	r2, #0
 80014da:	6879      	ldr	r1, [r7, #4]
 80014dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80014e0:	f000 f937 	bl	8001752 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80014e4:	4a0a      	ldr	r2, [pc, #40]	; (8001510 <HAL_InitTick+0x74>)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6013      	str	r3, [r2, #0]
 80014ea:	e007      	b.n	80014fc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80014ec:	2301      	movs	r3, #1
 80014ee:	73fb      	strb	r3, [r7, #15]
 80014f0:	e004      	b.n	80014fc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80014f2:	2301      	movs	r3, #1
 80014f4:	73fb      	strb	r3, [r7, #15]
 80014f6:	e001      	b.n	80014fc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80014f8:	2301      	movs	r3, #1
 80014fa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80014fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80014fe:	4618      	mov	r0, r3
 8001500:	3710      	adds	r7, #16
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	20000020 	.word	0x20000020
 800150c:	20000018 	.word	0x20000018
 8001510:	2000001c 	.word	0x2000001c

08001514 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001518:	4b06      	ldr	r3, [pc, #24]	; (8001534 <HAL_IncTick+0x20>)
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	461a      	mov	r2, r3
 800151e:	4b06      	ldr	r3, [pc, #24]	; (8001538 <HAL_IncTick+0x24>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4413      	add	r3, r2
 8001524:	4a04      	ldr	r2, [pc, #16]	; (8001538 <HAL_IncTick+0x24>)
 8001526:	6013      	str	r3, [r2, #0]
}
 8001528:	bf00      	nop
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr
 8001532:	bf00      	nop
 8001534:	20000020 	.word	0x20000020
 8001538:	20000200 	.word	0x20000200

0800153c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  return uwTick;
 8001540:	4b03      	ldr	r3, [pc, #12]	; (8001550 <HAL_GetTick+0x14>)
 8001542:	681b      	ldr	r3, [r3, #0]
}
 8001544:	4618      	mov	r0, r3
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop
 8001550:	20000200 	.word	0x20000200

08001554 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b084      	sub	sp, #16
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800155c:	f7ff ffee 	bl	800153c <HAL_GetTick>
 8001560:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800156c:	d005      	beq.n	800157a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800156e:	4b0a      	ldr	r3, [pc, #40]	; (8001598 <HAL_Delay+0x44>)
 8001570:	781b      	ldrb	r3, [r3, #0]
 8001572:	461a      	mov	r2, r3
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	4413      	add	r3, r2
 8001578:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800157a:	bf00      	nop
 800157c:	f7ff ffde 	bl	800153c <HAL_GetTick>
 8001580:	4602      	mov	r2, r0
 8001582:	68bb      	ldr	r3, [r7, #8]
 8001584:	1ad3      	subs	r3, r2, r3
 8001586:	68fa      	ldr	r2, [r7, #12]
 8001588:	429a      	cmp	r2, r3
 800158a:	d8f7      	bhi.n	800157c <HAL_Delay+0x28>
  {
  }
}
 800158c:	bf00      	nop
 800158e:	bf00      	nop
 8001590:	3710      	adds	r7, #16
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	20000020 	.word	0x20000020

0800159c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800159c:	b480      	push	{r7}
 800159e:	b085      	sub	sp, #20
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	f003 0307 	and.w	r3, r3, #7
 80015aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015ac:	4b0c      	ldr	r3, [pc, #48]	; (80015e0 <__NVIC_SetPriorityGrouping+0x44>)
 80015ae:	68db      	ldr	r3, [r3, #12]
 80015b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015b2:	68ba      	ldr	r2, [r7, #8]
 80015b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015b8:	4013      	ands	r3, r2
 80015ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015ce:	4a04      	ldr	r2, [pc, #16]	; (80015e0 <__NVIC_SetPriorityGrouping+0x44>)
 80015d0:	68bb      	ldr	r3, [r7, #8]
 80015d2:	60d3      	str	r3, [r2, #12]
}
 80015d4:	bf00      	nop
 80015d6:	3714      	adds	r7, #20
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr
 80015e0:	e000ed00 	.word	0xe000ed00

080015e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015e8:	4b04      	ldr	r3, [pc, #16]	; (80015fc <__NVIC_GetPriorityGrouping+0x18>)
 80015ea:	68db      	ldr	r3, [r3, #12]
 80015ec:	0a1b      	lsrs	r3, r3, #8
 80015ee:	f003 0307 	and.w	r3, r3, #7
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr
 80015fc:	e000ed00 	.word	0xe000ed00

08001600 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001600:	b480      	push	{r7}
 8001602:	b083      	sub	sp, #12
 8001604:	af00      	add	r7, sp, #0
 8001606:	4603      	mov	r3, r0
 8001608:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800160a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800160e:	2b00      	cmp	r3, #0
 8001610:	db0b      	blt.n	800162a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001612:	79fb      	ldrb	r3, [r7, #7]
 8001614:	f003 021f 	and.w	r2, r3, #31
 8001618:	4907      	ldr	r1, [pc, #28]	; (8001638 <__NVIC_EnableIRQ+0x38>)
 800161a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800161e:	095b      	lsrs	r3, r3, #5
 8001620:	2001      	movs	r0, #1
 8001622:	fa00 f202 	lsl.w	r2, r0, r2
 8001626:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800162a:	bf00      	nop
 800162c:	370c      	adds	r7, #12
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr
 8001636:	bf00      	nop
 8001638:	e000e100 	.word	0xe000e100

0800163c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800163c:	b480      	push	{r7}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0
 8001642:	4603      	mov	r3, r0
 8001644:	6039      	str	r1, [r7, #0]
 8001646:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001648:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800164c:	2b00      	cmp	r3, #0
 800164e:	db0a      	blt.n	8001666 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	b2da      	uxtb	r2, r3
 8001654:	490c      	ldr	r1, [pc, #48]	; (8001688 <__NVIC_SetPriority+0x4c>)
 8001656:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800165a:	0112      	lsls	r2, r2, #4
 800165c:	b2d2      	uxtb	r2, r2
 800165e:	440b      	add	r3, r1
 8001660:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001664:	e00a      	b.n	800167c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	b2da      	uxtb	r2, r3
 800166a:	4908      	ldr	r1, [pc, #32]	; (800168c <__NVIC_SetPriority+0x50>)
 800166c:	79fb      	ldrb	r3, [r7, #7]
 800166e:	f003 030f 	and.w	r3, r3, #15
 8001672:	3b04      	subs	r3, #4
 8001674:	0112      	lsls	r2, r2, #4
 8001676:	b2d2      	uxtb	r2, r2
 8001678:	440b      	add	r3, r1
 800167a:	761a      	strb	r2, [r3, #24]
}
 800167c:	bf00      	nop
 800167e:	370c      	adds	r7, #12
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr
 8001688:	e000e100 	.word	0xe000e100
 800168c:	e000ed00 	.word	0xe000ed00

08001690 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001690:	b480      	push	{r7}
 8001692:	b089      	sub	sp, #36	; 0x24
 8001694:	af00      	add	r7, sp, #0
 8001696:	60f8      	str	r0, [r7, #12]
 8001698:	60b9      	str	r1, [r7, #8]
 800169a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	f003 0307 	and.w	r3, r3, #7
 80016a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016a4:	69fb      	ldr	r3, [r7, #28]
 80016a6:	f1c3 0307 	rsb	r3, r3, #7
 80016aa:	2b04      	cmp	r3, #4
 80016ac:	bf28      	it	cs
 80016ae:	2304      	movcs	r3, #4
 80016b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016b2:	69fb      	ldr	r3, [r7, #28]
 80016b4:	3304      	adds	r3, #4
 80016b6:	2b06      	cmp	r3, #6
 80016b8:	d902      	bls.n	80016c0 <NVIC_EncodePriority+0x30>
 80016ba:	69fb      	ldr	r3, [r7, #28]
 80016bc:	3b03      	subs	r3, #3
 80016be:	e000      	b.n	80016c2 <NVIC_EncodePriority+0x32>
 80016c0:	2300      	movs	r3, #0
 80016c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80016c8:	69bb      	ldr	r3, [r7, #24]
 80016ca:	fa02 f303 	lsl.w	r3, r2, r3
 80016ce:	43da      	mvns	r2, r3
 80016d0:	68bb      	ldr	r3, [r7, #8]
 80016d2:	401a      	ands	r2, r3
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016d8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	fa01 f303 	lsl.w	r3, r1, r3
 80016e2:	43d9      	mvns	r1, r3
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016e8:	4313      	orrs	r3, r2
         );
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	3724      	adds	r7, #36	; 0x24
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr
	...

080016f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	3b01      	subs	r3, #1
 8001704:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001708:	d301      	bcc.n	800170e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800170a:	2301      	movs	r3, #1
 800170c:	e00f      	b.n	800172e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800170e:	4a0a      	ldr	r2, [pc, #40]	; (8001738 <SysTick_Config+0x40>)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	3b01      	subs	r3, #1
 8001714:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001716:	210f      	movs	r1, #15
 8001718:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800171c:	f7ff ff8e 	bl	800163c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001720:	4b05      	ldr	r3, [pc, #20]	; (8001738 <SysTick_Config+0x40>)
 8001722:	2200      	movs	r2, #0
 8001724:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001726:	4b04      	ldr	r3, [pc, #16]	; (8001738 <SysTick_Config+0x40>)
 8001728:	2207      	movs	r2, #7
 800172a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800172c:	2300      	movs	r3, #0
}
 800172e:	4618      	mov	r0, r3
 8001730:	3708      	adds	r7, #8
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	e000e010 	.word	0xe000e010

0800173c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001744:	6878      	ldr	r0, [r7, #4]
 8001746:	f7ff ff29 	bl	800159c <__NVIC_SetPriorityGrouping>
}
 800174a:	bf00      	nop
 800174c:	3708      	adds	r7, #8
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}

08001752 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001752:	b580      	push	{r7, lr}
 8001754:	b086      	sub	sp, #24
 8001756:	af00      	add	r7, sp, #0
 8001758:	4603      	mov	r3, r0
 800175a:	60b9      	str	r1, [r7, #8]
 800175c:	607a      	str	r2, [r7, #4]
 800175e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001760:	2300      	movs	r3, #0
 8001762:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001764:	f7ff ff3e 	bl	80015e4 <__NVIC_GetPriorityGrouping>
 8001768:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800176a:	687a      	ldr	r2, [r7, #4]
 800176c:	68b9      	ldr	r1, [r7, #8]
 800176e:	6978      	ldr	r0, [r7, #20]
 8001770:	f7ff ff8e 	bl	8001690 <NVIC_EncodePriority>
 8001774:	4602      	mov	r2, r0
 8001776:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800177a:	4611      	mov	r1, r2
 800177c:	4618      	mov	r0, r3
 800177e:	f7ff ff5d 	bl	800163c <__NVIC_SetPriority>
}
 8001782:	bf00      	nop
 8001784:	3718      	adds	r7, #24
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}

0800178a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800178a:	b580      	push	{r7, lr}
 800178c:	b082      	sub	sp, #8
 800178e:	af00      	add	r7, sp, #0
 8001790:	4603      	mov	r3, r0
 8001792:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001794:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001798:	4618      	mov	r0, r3
 800179a:	f7ff ff31 	bl	8001600 <__NVIC_EnableIRQ>
}
 800179e:	bf00      	nop
 80017a0:	3708      	adds	r7, #8
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}

080017a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017a6:	b580      	push	{r7, lr}
 80017a8:	b082      	sub	sp, #8
 80017aa:	af00      	add	r7, sp, #0
 80017ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017ae:	6878      	ldr	r0, [r7, #4]
 80017b0:	f7ff ffa2 	bl	80016f8 <SysTick_Config>
 80017b4:	4603      	mov	r3, r0
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3708      	adds	r7, #8
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}

080017be <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80017be:	b480      	push	{r7}
 80017c0:	b085      	sub	sp, #20
 80017c2:	af00      	add	r7, sp, #0
 80017c4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017c6:	2300      	movs	r3, #0
 80017c8:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80017d0:	b2db      	uxtb	r3, r3
 80017d2:	2b02      	cmp	r3, #2
 80017d4:	d008      	beq.n	80017e8 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2204      	movs	r2, #4
 80017da:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2200      	movs	r2, #0
 80017e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80017e4:	2301      	movs	r3, #1
 80017e6:	e022      	b.n	800182e <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f022 020e 	bic.w	r2, r2, #14
 80017f6:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	681a      	ldr	r2, [r3, #0]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f022 0201 	bic.w	r2, r2, #1
 8001806:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800180c:	f003 021c 	and.w	r2, r3, #28
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001814:	2101      	movs	r1, #1
 8001816:	fa01 f202 	lsl.w	r2, r1, r2
 800181a:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2201      	movs	r2, #1
 8001820:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2200      	movs	r2, #0
 8001828:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800182c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800182e:	4618      	mov	r0, r3
 8001830:	3714      	adds	r7, #20
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr

0800183a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800183a:	b580      	push	{r7, lr}
 800183c:	b084      	sub	sp, #16
 800183e:	af00      	add	r7, sp, #0
 8001840:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001842:	2300      	movs	r3, #0
 8001844:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800184c:	b2db      	uxtb	r3, r3
 800184e:	2b02      	cmp	r3, #2
 8001850:	d005      	beq.n	800185e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2204      	movs	r2, #4
 8001856:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001858:	2301      	movs	r3, #1
 800185a:	73fb      	strb	r3, [r7, #15]
 800185c:	e029      	b.n	80018b2 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f022 020e 	bic.w	r2, r2, #14
 800186c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f022 0201 	bic.w	r2, r2, #1
 800187c:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001882:	f003 021c 	and.w	r2, r3, #28
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188a:	2101      	movs	r1, #1
 800188c:	fa01 f202 	lsl.w	r2, r1, r2
 8001890:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2201      	movs	r2, #1
 8001896:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2200      	movs	r2, #0
 800189e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d003      	beq.n	80018b2 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018ae:	6878      	ldr	r0, [r7, #4]
 80018b0:	4798      	blx	r3
    }
  }
  return status;
 80018b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	3710      	adds	r7, #16
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}

080018bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018bc:	b480      	push	{r7}
 80018be:	b087      	sub	sp, #28
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
 80018c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018c6:	2300      	movs	r3, #0
 80018c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018ca:	e14e      	b.n	8001b6a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	2101      	movs	r1, #1
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	fa01 f303 	lsl.w	r3, r1, r3
 80018d8:	4013      	ands	r3, r2
 80018da:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	f000 8140 	beq.w	8001b64 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	2b01      	cmp	r3, #1
 80018ea:	d00b      	beq.n	8001904 <HAL_GPIO_Init+0x48>
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	2b02      	cmp	r3, #2
 80018f2:	d007      	beq.n	8001904 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80018f8:	2b11      	cmp	r3, #17
 80018fa:	d003      	beq.n	8001904 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	2b12      	cmp	r3, #18
 8001902:	d130      	bne.n	8001966 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	005b      	lsls	r3, r3, #1
 800190e:	2203      	movs	r2, #3
 8001910:	fa02 f303 	lsl.w	r3, r2, r3
 8001914:	43db      	mvns	r3, r3
 8001916:	693a      	ldr	r2, [r7, #16]
 8001918:	4013      	ands	r3, r2
 800191a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	68da      	ldr	r2, [r3, #12]
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	005b      	lsls	r3, r3, #1
 8001924:	fa02 f303 	lsl.w	r3, r2, r3
 8001928:	693a      	ldr	r2, [r7, #16]
 800192a:	4313      	orrs	r3, r2
 800192c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	693a      	ldr	r2, [r7, #16]
 8001932:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800193a:	2201      	movs	r2, #1
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	fa02 f303 	lsl.w	r3, r2, r3
 8001942:	43db      	mvns	r3, r3
 8001944:	693a      	ldr	r2, [r7, #16]
 8001946:	4013      	ands	r3, r2
 8001948:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	091b      	lsrs	r3, r3, #4
 8001950:	f003 0201 	and.w	r2, r3, #1
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	fa02 f303 	lsl.w	r3, r2, r3
 800195a:	693a      	ldr	r2, [r7, #16]
 800195c:	4313      	orrs	r3, r2
 800195e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	693a      	ldr	r2, [r7, #16]
 8001964:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	68db      	ldr	r3, [r3, #12]
 800196a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	005b      	lsls	r3, r3, #1
 8001970:	2203      	movs	r2, #3
 8001972:	fa02 f303 	lsl.w	r3, r2, r3
 8001976:	43db      	mvns	r3, r3
 8001978:	693a      	ldr	r2, [r7, #16]
 800197a:	4013      	ands	r3, r2
 800197c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	689a      	ldr	r2, [r3, #8]
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	005b      	lsls	r3, r3, #1
 8001986:	fa02 f303 	lsl.w	r3, r2, r3
 800198a:	693a      	ldr	r2, [r7, #16]
 800198c:	4313      	orrs	r3, r2
 800198e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	693a      	ldr	r2, [r7, #16]
 8001994:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	2b02      	cmp	r3, #2
 800199c:	d003      	beq.n	80019a6 <HAL_GPIO_Init+0xea>
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	2b12      	cmp	r3, #18
 80019a4:	d123      	bne.n	80019ee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	08da      	lsrs	r2, r3, #3
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	3208      	adds	r2, #8
 80019ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019b2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	f003 0307 	and.w	r3, r3, #7
 80019ba:	009b      	lsls	r3, r3, #2
 80019bc:	220f      	movs	r2, #15
 80019be:	fa02 f303 	lsl.w	r3, r2, r3
 80019c2:	43db      	mvns	r3, r3
 80019c4:	693a      	ldr	r2, [r7, #16]
 80019c6:	4013      	ands	r3, r2
 80019c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	691a      	ldr	r2, [r3, #16]
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	f003 0307 	and.w	r3, r3, #7
 80019d4:	009b      	lsls	r3, r3, #2
 80019d6:	fa02 f303 	lsl.w	r3, r2, r3
 80019da:	693a      	ldr	r2, [r7, #16]
 80019dc:	4313      	orrs	r3, r2
 80019de:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	08da      	lsrs	r2, r3, #3
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	3208      	adds	r2, #8
 80019e8:	6939      	ldr	r1, [r7, #16]
 80019ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	005b      	lsls	r3, r3, #1
 80019f8:	2203      	movs	r2, #3
 80019fa:	fa02 f303 	lsl.w	r3, r2, r3
 80019fe:	43db      	mvns	r3, r3
 8001a00:	693a      	ldr	r2, [r7, #16]
 8001a02:	4013      	ands	r3, r2
 8001a04:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	f003 0203 	and.w	r2, r3, #3
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	005b      	lsls	r3, r3, #1
 8001a12:	fa02 f303 	lsl.w	r3, r2, r3
 8001a16:	693a      	ldr	r2, [r7, #16]
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	693a      	ldr	r2, [r7, #16]
 8001a20:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	f000 809a 	beq.w	8001b64 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a30:	4b55      	ldr	r3, [pc, #340]	; (8001b88 <HAL_GPIO_Init+0x2cc>)
 8001a32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a34:	4a54      	ldr	r2, [pc, #336]	; (8001b88 <HAL_GPIO_Init+0x2cc>)
 8001a36:	f043 0301 	orr.w	r3, r3, #1
 8001a3a:	6613      	str	r3, [r2, #96]	; 0x60
 8001a3c:	4b52      	ldr	r3, [pc, #328]	; (8001b88 <HAL_GPIO_Init+0x2cc>)
 8001a3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a40:	f003 0301 	and.w	r3, r3, #1
 8001a44:	60bb      	str	r3, [r7, #8]
 8001a46:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001a48:	4a50      	ldr	r2, [pc, #320]	; (8001b8c <HAL_GPIO_Init+0x2d0>)
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	089b      	lsrs	r3, r3, #2
 8001a4e:	3302      	adds	r3, #2
 8001a50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a54:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	f003 0303 	and.w	r3, r3, #3
 8001a5c:	009b      	lsls	r3, r3, #2
 8001a5e:	220f      	movs	r2, #15
 8001a60:	fa02 f303 	lsl.w	r3, r2, r3
 8001a64:	43db      	mvns	r3, r3
 8001a66:	693a      	ldr	r2, [r7, #16]
 8001a68:	4013      	ands	r3, r2
 8001a6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001a72:	d013      	beq.n	8001a9c <HAL_GPIO_Init+0x1e0>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	4a46      	ldr	r2, [pc, #280]	; (8001b90 <HAL_GPIO_Init+0x2d4>)
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d00d      	beq.n	8001a98 <HAL_GPIO_Init+0x1dc>
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	4a45      	ldr	r2, [pc, #276]	; (8001b94 <HAL_GPIO_Init+0x2d8>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d007      	beq.n	8001a94 <HAL_GPIO_Init+0x1d8>
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	4a44      	ldr	r2, [pc, #272]	; (8001b98 <HAL_GPIO_Init+0x2dc>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d101      	bne.n	8001a90 <HAL_GPIO_Init+0x1d4>
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	e006      	b.n	8001a9e <HAL_GPIO_Init+0x1e2>
 8001a90:	2307      	movs	r3, #7
 8001a92:	e004      	b.n	8001a9e <HAL_GPIO_Init+0x1e2>
 8001a94:	2302      	movs	r3, #2
 8001a96:	e002      	b.n	8001a9e <HAL_GPIO_Init+0x1e2>
 8001a98:	2301      	movs	r3, #1
 8001a9a:	e000      	b.n	8001a9e <HAL_GPIO_Init+0x1e2>
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	697a      	ldr	r2, [r7, #20]
 8001aa0:	f002 0203 	and.w	r2, r2, #3
 8001aa4:	0092      	lsls	r2, r2, #2
 8001aa6:	4093      	lsls	r3, r2
 8001aa8:	693a      	ldr	r2, [r7, #16]
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001aae:	4937      	ldr	r1, [pc, #220]	; (8001b8c <HAL_GPIO_Init+0x2d0>)
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	089b      	lsrs	r3, r3, #2
 8001ab4:	3302      	adds	r3, #2
 8001ab6:	693a      	ldr	r2, [r7, #16]
 8001ab8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001abc:	4b37      	ldr	r3, [pc, #220]	; (8001b9c <HAL_GPIO_Init+0x2e0>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	43db      	mvns	r3, r3
 8001ac6:	693a      	ldr	r2, [r7, #16]
 8001ac8:	4013      	ands	r3, r2
 8001aca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d003      	beq.n	8001ae0 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001ad8:	693a      	ldr	r2, [r7, #16]
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	4313      	orrs	r3, r2
 8001ade:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001ae0:	4a2e      	ldr	r2, [pc, #184]	; (8001b9c <HAL_GPIO_Init+0x2e0>)
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001ae6:	4b2d      	ldr	r3, [pc, #180]	; (8001b9c <HAL_GPIO_Init+0x2e0>)
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	43db      	mvns	r3, r3
 8001af0:	693a      	ldr	r2, [r7, #16]
 8001af2:	4013      	ands	r3, r2
 8001af4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d003      	beq.n	8001b0a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001b02:	693a      	ldr	r2, [r7, #16]
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	4313      	orrs	r3, r2
 8001b08:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001b0a:	4a24      	ldr	r2, [pc, #144]	; (8001b9c <HAL_GPIO_Init+0x2e0>)
 8001b0c:	693b      	ldr	r3, [r7, #16]
 8001b0e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001b10:	4b22      	ldr	r3, [pc, #136]	; (8001b9c <HAL_GPIO_Init+0x2e0>)
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	43db      	mvns	r3, r3
 8001b1a:	693a      	ldr	r2, [r7, #16]
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d003      	beq.n	8001b34 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001b2c:	693a      	ldr	r2, [r7, #16]
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	4313      	orrs	r3, r2
 8001b32:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001b34:	4a19      	ldr	r2, [pc, #100]	; (8001b9c <HAL_GPIO_Init+0x2e0>)
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001b3a:	4b18      	ldr	r3, [pc, #96]	; (8001b9c <HAL_GPIO_Init+0x2e0>)
 8001b3c:	68db      	ldr	r3, [r3, #12]
 8001b3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	43db      	mvns	r3, r3
 8001b44:	693a      	ldr	r2, [r7, #16]
 8001b46:	4013      	ands	r3, r2
 8001b48:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d003      	beq.n	8001b5e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001b56:	693a      	ldr	r2, [r7, #16]
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001b5e:	4a0f      	ldr	r2, [pc, #60]	; (8001b9c <HAL_GPIO_Init+0x2e0>)
 8001b60:	693b      	ldr	r3, [r7, #16]
 8001b62:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	3301      	adds	r3, #1
 8001b68:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	fa22 f303 	lsr.w	r3, r2, r3
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	f47f aea9 	bne.w	80018cc <HAL_GPIO_Init+0x10>
  }
}
 8001b7a:	bf00      	nop
 8001b7c:	bf00      	nop
 8001b7e:	371c      	adds	r7, #28
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr
 8001b88:	40021000 	.word	0x40021000
 8001b8c:	40010000 	.word	0x40010000
 8001b90:	48000400 	.word	0x48000400
 8001b94:	48000800 	.word	0x48000800
 8001b98:	48000c00 	.word	0x48000c00
 8001b9c:	40010400 	.word	0x40010400

08001ba0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	460b      	mov	r3, r1
 8001baa:	807b      	strh	r3, [r7, #2]
 8001bac:	4613      	mov	r3, r2
 8001bae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bb0:	787b      	ldrb	r3, [r7, #1]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d003      	beq.n	8001bbe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001bb6:	887a      	ldrh	r2, [r7, #2]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001bbc:	e002      	b.n	8001bc4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001bbe:	887a      	ldrh	r2, [r7, #2]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001bc4:	bf00      	nop
 8001bc6:	370c      	adds	r7, #12
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr

08001bd0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d101      	bne.n	8001be2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e081      	b.n	8001ce6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d106      	bne.n	8001bfc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	f7ff fad4 	bl	80011a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2224      	movs	r2, #36	; 0x24
 8001c00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f022 0201 	bic.w	r2, r2, #1
 8001c12:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	685a      	ldr	r2, [r3, #4]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001c20:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	689a      	ldr	r2, [r3, #8]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001c30:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	68db      	ldr	r3, [r3, #12]
 8001c36:	2b01      	cmp	r3, #1
 8001c38:	d107      	bne.n	8001c4a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	689a      	ldr	r2, [r3, #8]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001c46:	609a      	str	r2, [r3, #8]
 8001c48:	e006      	b.n	8001c58 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	689a      	ldr	r2, [r3, #8]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001c56:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	68db      	ldr	r3, [r3, #12]
 8001c5c:	2b02      	cmp	r3, #2
 8001c5e:	d104      	bne.n	8001c6a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001c68:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	687a      	ldr	r2, [r7, #4]
 8001c72:	6812      	ldr	r2, [r2, #0]
 8001c74:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001c78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c7c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	68da      	ldr	r2, [r3, #12]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001c8c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	691a      	ldr	r2, [r3, #16]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	695b      	ldr	r3, [r3, #20]
 8001c96:	ea42 0103 	orr.w	r1, r2, r3
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	699b      	ldr	r3, [r3, #24]
 8001c9e:	021a      	lsls	r2, r3, #8
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	430a      	orrs	r2, r1
 8001ca6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	69d9      	ldr	r1, [r3, #28]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6a1a      	ldr	r2, [r3, #32]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	430a      	orrs	r2, r1
 8001cb6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f042 0201 	orr.w	r2, r2, #1
 8001cc6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2200      	movs	r2, #0
 8001ccc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2220      	movs	r2, #32
 8001cd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2200      	movs	r2, #0
 8001ce0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001ce4:	2300      	movs	r3, #0
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3708      	adds	r7, #8
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}

08001cee <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001cee:	b480      	push	{r7}
 8001cf0:	b083      	sub	sp, #12
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	6078      	str	r0, [r7, #4]
 8001cf6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	2b20      	cmp	r3, #32
 8001d02:	d138      	bne.n	8001d76 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001d0a:	2b01      	cmp	r3, #1
 8001d0c:	d101      	bne.n	8001d12 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001d0e:	2302      	movs	r3, #2
 8001d10:	e032      	b.n	8001d78 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2201      	movs	r2, #1
 8001d16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2224      	movs	r2, #36	; 0x24
 8001d1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f022 0201 	bic.w	r2, r2, #1
 8001d30:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001d40:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	6819      	ldr	r1, [r3, #0]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	683a      	ldr	r2, [r7, #0]
 8001d4e:	430a      	orrs	r2, r1
 8001d50:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	681a      	ldr	r2, [r3, #0]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f042 0201 	orr.w	r2, r2, #1
 8001d60:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2220      	movs	r2, #32
 8001d66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001d72:	2300      	movs	r3, #0
 8001d74:	e000      	b.n	8001d78 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001d76:	2302      	movs	r3, #2
  }
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	370c      	adds	r7, #12
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr

08001d84 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b085      	sub	sp, #20
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
 8001d8c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	2b20      	cmp	r3, #32
 8001d98:	d139      	bne.n	8001e0e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001da0:	2b01      	cmp	r3, #1
 8001da2:	d101      	bne.n	8001da8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001da4:	2302      	movs	r3, #2
 8001da6:	e033      	b.n	8001e10 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2201      	movs	r2, #1
 8001dac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2224      	movs	r2, #36	; 0x24
 8001db4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f022 0201 	bic.w	r2, r2, #1
 8001dc6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001dd6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	021b      	lsls	r3, r3, #8
 8001ddc:	68fa      	ldr	r2, [r7, #12]
 8001dde:	4313      	orrs	r3, r2
 8001de0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	68fa      	ldr	r2, [r7, #12]
 8001de8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f042 0201 	orr.w	r2, r2, #1
 8001df8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2220      	movs	r2, #32
 8001dfe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2200      	movs	r2, #0
 8001e06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	e000      	b.n	8001e10 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001e0e:	2302      	movs	r3, #2
  }
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	3714      	adds	r7, #20
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr

08001e1c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001e20:	4b04      	ldr	r3, [pc, #16]	; (8001e34 <HAL_PWREx_GetVoltageRange+0x18>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr
 8001e32:	bf00      	nop
 8001e34:	40007000 	.word	0x40007000

08001e38 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b085      	sub	sp, #20
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e46:	d130      	bne.n	8001eaa <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e48:	4b23      	ldr	r3, [pc, #140]	; (8001ed8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001e50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e54:	d038      	beq.n	8001ec8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e56:	4b20      	ldr	r3, [pc, #128]	; (8001ed8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001e5e:	4a1e      	ldr	r2, [pc, #120]	; (8001ed8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e60:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e64:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001e66:	4b1d      	ldr	r3, [pc, #116]	; (8001edc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	2232      	movs	r2, #50	; 0x32
 8001e6c:	fb02 f303 	mul.w	r3, r2, r3
 8001e70:	4a1b      	ldr	r2, [pc, #108]	; (8001ee0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001e72:	fba2 2303 	umull	r2, r3, r2, r3
 8001e76:	0c9b      	lsrs	r3, r3, #18
 8001e78:	3301      	adds	r3, #1
 8001e7a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e7c:	e002      	b.n	8001e84 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	3b01      	subs	r3, #1
 8001e82:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e84:	4b14      	ldr	r3, [pc, #80]	; (8001ed8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e86:	695b      	ldr	r3, [r3, #20]
 8001e88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e90:	d102      	bne.n	8001e98 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d1f2      	bne.n	8001e7e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001e98:	4b0f      	ldr	r3, [pc, #60]	; (8001ed8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e9a:	695b      	ldr	r3, [r3, #20]
 8001e9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ea0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ea4:	d110      	bne.n	8001ec8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	e00f      	b.n	8001eca <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001eaa:	4b0b      	ldr	r3, [pc, #44]	; (8001ed8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001eb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001eb6:	d007      	beq.n	8001ec8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001eb8:	4b07      	ldr	r3, [pc, #28]	; (8001ed8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001ec0:	4a05      	ldr	r2, [pc, #20]	; (8001ed8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ec2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ec6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001ec8:	2300      	movs	r3, #0
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3714      	adds	r7, #20
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr
 8001ed6:	bf00      	nop
 8001ed8:	40007000 	.word	0x40007000
 8001edc:	20000018 	.word	0x20000018
 8001ee0:	431bde83 	.word	0x431bde83

08001ee4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b08a      	sub	sp, #40	; 0x28
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d102      	bne.n	8001ef8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	f000 bc56 	b.w	80027a4 <HAL_RCC_OscConfig+0x8c0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ef8:	4ba1      	ldr	r3, [pc, #644]	; (8002180 <HAL_RCC_OscConfig+0x29c>)
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	f003 030c 	and.w	r3, r3, #12
 8001f00:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f02:	4b9f      	ldr	r3, [pc, #636]	; (8002180 <HAL_RCC_OscConfig+0x29c>)
 8001f04:	68db      	ldr	r3, [r3, #12]
 8001f06:	f003 0303 	and.w	r3, r3, #3
 8001f0a:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f003 0310 	and.w	r3, r3, #16
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	f000 80e6 	beq.w	80020e6 <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001f1a:	6a3b      	ldr	r3, [r7, #32]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d007      	beq.n	8001f30 <HAL_RCC_OscConfig+0x4c>
 8001f20:	6a3b      	ldr	r3, [r7, #32]
 8001f22:	2b0c      	cmp	r3, #12
 8001f24:	f040 808d 	bne.w	8002042 <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001f28:	69fb      	ldr	r3, [r7, #28]
 8001f2a:	2b01      	cmp	r3, #1
 8001f2c:	f040 8089 	bne.w	8002042 <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001f30:	4b93      	ldr	r3, [pc, #588]	; (8002180 <HAL_RCC_OscConfig+0x29c>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f003 0302 	and.w	r3, r3, #2
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d006      	beq.n	8001f4a <HAL_RCC_OscConfig+0x66>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	69db      	ldr	r3, [r3, #28]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d102      	bne.n	8001f4a <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8001f44:	2301      	movs	r3, #1
 8001f46:	f000 bc2d 	b.w	80027a4 <HAL_RCC_OscConfig+0x8c0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f4e:	4b8c      	ldr	r3, [pc, #560]	; (8002180 <HAL_RCC_OscConfig+0x29c>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f003 0308 	and.w	r3, r3, #8
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d004      	beq.n	8001f64 <HAL_RCC_OscConfig+0x80>
 8001f5a:	4b89      	ldr	r3, [pc, #548]	; (8002180 <HAL_RCC_OscConfig+0x29c>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f62:	e005      	b.n	8001f70 <HAL_RCC_OscConfig+0x8c>
 8001f64:	4b86      	ldr	r3, [pc, #536]	; (8002180 <HAL_RCC_OscConfig+0x29c>)
 8001f66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f6a:	091b      	lsrs	r3, r3, #4
 8001f6c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d224      	bcs.n	8001fbe <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f000 fdbf 	bl	8002afc <RCC_SetFlashLatencyFromMSIRange>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d002      	beq.n	8001f8a <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8001f84:	2301      	movs	r3, #1
 8001f86:	f000 bc0d 	b.w	80027a4 <HAL_RCC_OscConfig+0x8c0>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f8a:	4b7d      	ldr	r3, [pc, #500]	; (8002180 <HAL_RCC_OscConfig+0x29c>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a7c      	ldr	r2, [pc, #496]	; (8002180 <HAL_RCC_OscConfig+0x29c>)
 8001f90:	f043 0308 	orr.w	r3, r3, #8
 8001f94:	6013      	str	r3, [r2, #0]
 8001f96:	4b7a      	ldr	r3, [pc, #488]	; (8002180 <HAL_RCC_OscConfig+0x29c>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa2:	4977      	ldr	r1, [pc, #476]	; (8002180 <HAL_RCC_OscConfig+0x29c>)
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001fa8:	4b75      	ldr	r3, [pc, #468]	; (8002180 <HAL_RCC_OscConfig+0x29c>)
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6a1b      	ldr	r3, [r3, #32]
 8001fb4:	021b      	lsls	r3, r3, #8
 8001fb6:	4972      	ldr	r1, [pc, #456]	; (8002180 <HAL_RCC_OscConfig+0x29c>)
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	604b      	str	r3, [r1, #4]
 8001fbc:	e025      	b.n	800200a <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001fbe:	4b70      	ldr	r3, [pc, #448]	; (8002180 <HAL_RCC_OscConfig+0x29c>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a6f      	ldr	r2, [pc, #444]	; (8002180 <HAL_RCC_OscConfig+0x29c>)
 8001fc4:	f043 0308 	orr.w	r3, r3, #8
 8001fc8:	6013      	str	r3, [r2, #0]
 8001fca:	4b6d      	ldr	r3, [pc, #436]	; (8002180 <HAL_RCC_OscConfig+0x29c>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd6:	496a      	ldr	r1, [pc, #424]	; (8002180 <HAL_RCC_OscConfig+0x29c>)
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001fdc:	4b68      	ldr	r3, [pc, #416]	; (8002180 <HAL_RCC_OscConfig+0x29c>)
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6a1b      	ldr	r3, [r3, #32]
 8001fe8:	021b      	lsls	r3, r3, #8
 8001fea:	4965      	ldr	r1, [pc, #404]	; (8002180 <HAL_RCC_OscConfig+0x29c>)
 8001fec:	4313      	orrs	r3, r2
 8001fee:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ff0:	6a3b      	ldr	r3, [r7, #32]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d109      	bne.n	800200a <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f000 fd7e 	bl	8002afc <RCC_SetFlashLatencyFromMSIRange>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d001      	beq.n	800200a <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e3cc      	b.n	80027a4 <HAL_RCC_OscConfig+0x8c0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800200a:	f000 fcb3 	bl	8002974 <HAL_RCC_GetSysClockFreq>
 800200e:	4602      	mov	r2, r0
 8002010:	4b5b      	ldr	r3, [pc, #364]	; (8002180 <HAL_RCC_OscConfig+0x29c>)
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	091b      	lsrs	r3, r3, #4
 8002016:	f003 030f 	and.w	r3, r3, #15
 800201a:	495a      	ldr	r1, [pc, #360]	; (8002184 <HAL_RCC_OscConfig+0x2a0>)
 800201c:	5ccb      	ldrb	r3, [r1, r3]
 800201e:	f003 031f 	and.w	r3, r3, #31
 8002022:	fa22 f303 	lsr.w	r3, r2, r3
 8002026:	4a58      	ldr	r2, [pc, #352]	; (8002188 <HAL_RCC_OscConfig+0x2a4>)
 8002028:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800202a:	4b58      	ldr	r3, [pc, #352]	; (800218c <HAL_RCC_OscConfig+0x2a8>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4618      	mov	r0, r3
 8002030:	f7ff fa34 	bl	800149c <HAL_InitTick>
 8002034:	4603      	mov	r3, r0
 8002036:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8002038:	7dfb      	ldrb	r3, [r7, #23]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d052      	beq.n	80020e4 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 800203e:	7dfb      	ldrb	r3, [r7, #23]
 8002040:	e3b0      	b.n	80027a4 <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	69db      	ldr	r3, [r3, #28]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d032      	beq.n	80020b0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800204a:	4b4d      	ldr	r3, [pc, #308]	; (8002180 <HAL_RCC_OscConfig+0x29c>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a4c      	ldr	r2, [pc, #304]	; (8002180 <HAL_RCC_OscConfig+0x29c>)
 8002050:	f043 0301 	orr.w	r3, r3, #1
 8002054:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002056:	f7ff fa71 	bl	800153c <HAL_GetTick>
 800205a:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800205c:	e008      	b.n	8002070 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800205e:	f7ff fa6d 	bl	800153c <HAL_GetTick>
 8002062:	4602      	mov	r2, r0
 8002064:	69bb      	ldr	r3, [r7, #24]
 8002066:	1ad3      	subs	r3, r2, r3
 8002068:	2b02      	cmp	r3, #2
 800206a:	d901      	bls.n	8002070 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 800206c:	2303      	movs	r3, #3
 800206e:	e399      	b.n	80027a4 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002070:	4b43      	ldr	r3, [pc, #268]	; (8002180 <HAL_RCC_OscConfig+0x29c>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f003 0302 	and.w	r3, r3, #2
 8002078:	2b00      	cmp	r3, #0
 800207a:	d0f0      	beq.n	800205e <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800207c:	4b40      	ldr	r3, [pc, #256]	; (8002180 <HAL_RCC_OscConfig+0x29c>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a3f      	ldr	r2, [pc, #252]	; (8002180 <HAL_RCC_OscConfig+0x29c>)
 8002082:	f043 0308 	orr.w	r3, r3, #8
 8002086:	6013      	str	r3, [r2, #0]
 8002088:	4b3d      	ldr	r3, [pc, #244]	; (8002180 <HAL_RCC_OscConfig+0x29c>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002094:	493a      	ldr	r1, [pc, #232]	; (8002180 <HAL_RCC_OscConfig+0x29c>)
 8002096:	4313      	orrs	r3, r2
 8002098:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800209a:	4b39      	ldr	r3, [pc, #228]	; (8002180 <HAL_RCC_OscConfig+0x29c>)
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6a1b      	ldr	r3, [r3, #32]
 80020a6:	021b      	lsls	r3, r3, #8
 80020a8:	4935      	ldr	r1, [pc, #212]	; (8002180 <HAL_RCC_OscConfig+0x29c>)
 80020aa:	4313      	orrs	r3, r2
 80020ac:	604b      	str	r3, [r1, #4]
 80020ae:	e01a      	b.n	80020e6 <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80020b0:	4b33      	ldr	r3, [pc, #204]	; (8002180 <HAL_RCC_OscConfig+0x29c>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a32      	ldr	r2, [pc, #200]	; (8002180 <HAL_RCC_OscConfig+0x29c>)
 80020b6:	f023 0301 	bic.w	r3, r3, #1
 80020ba:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80020bc:	f7ff fa3e 	bl	800153c <HAL_GetTick>
 80020c0:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80020c2:	e008      	b.n	80020d6 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80020c4:	f7ff fa3a 	bl	800153c <HAL_GetTick>
 80020c8:	4602      	mov	r2, r0
 80020ca:	69bb      	ldr	r3, [r7, #24]
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	2b02      	cmp	r3, #2
 80020d0:	d901      	bls.n	80020d6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80020d2:	2303      	movs	r3, #3
 80020d4:	e366      	b.n	80027a4 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80020d6:	4b2a      	ldr	r3, [pc, #168]	; (8002180 <HAL_RCC_OscConfig+0x29c>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 0302 	and.w	r3, r3, #2
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d1f0      	bne.n	80020c4 <HAL_RCC_OscConfig+0x1e0>
 80020e2:	e000      	b.n	80020e6 <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80020e4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 0301 	and.w	r3, r3, #1
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d073      	beq.n	80021da <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80020f2:	6a3b      	ldr	r3, [r7, #32]
 80020f4:	2b08      	cmp	r3, #8
 80020f6:	d005      	beq.n	8002104 <HAL_RCC_OscConfig+0x220>
 80020f8:	6a3b      	ldr	r3, [r7, #32]
 80020fa:	2b0c      	cmp	r3, #12
 80020fc:	d10e      	bne.n	800211c <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	2b03      	cmp	r3, #3
 8002102:	d10b      	bne.n	800211c <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002104:	4b1e      	ldr	r3, [pc, #120]	; (8002180 <HAL_RCC_OscConfig+0x29c>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800210c:	2b00      	cmp	r3, #0
 800210e:	d063      	beq.n	80021d8 <HAL_RCC_OscConfig+0x2f4>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d15f      	bne.n	80021d8 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8002118:	2301      	movs	r3, #1
 800211a:	e343      	b.n	80027a4 <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002124:	d106      	bne.n	8002134 <HAL_RCC_OscConfig+0x250>
 8002126:	4b16      	ldr	r3, [pc, #88]	; (8002180 <HAL_RCC_OscConfig+0x29c>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a15      	ldr	r2, [pc, #84]	; (8002180 <HAL_RCC_OscConfig+0x29c>)
 800212c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002130:	6013      	str	r3, [r2, #0]
 8002132:	e01d      	b.n	8002170 <HAL_RCC_OscConfig+0x28c>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800213c:	d10c      	bne.n	8002158 <HAL_RCC_OscConfig+0x274>
 800213e:	4b10      	ldr	r3, [pc, #64]	; (8002180 <HAL_RCC_OscConfig+0x29c>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a0f      	ldr	r2, [pc, #60]	; (8002180 <HAL_RCC_OscConfig+0x29c>)
 8002144:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002148:	6013      	str	r3, [r2, #0]
 800214a:	4b0d      	ldr	r3, [pc, #52]	; (8002180 <HAL_RCC_OscConfig+0x29c>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a0c      	ldr	r2, [pc, #48]	; (8002180 <HAL_RCC_OscConfig+0x29c>)
 8002150:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002154:	6013      	str	r3, [r2, #0]
 8002156:	e00b      	b.n	8002170 <HAL_RCC_OscConfig+0x28c>
 8002158:	4b09      	ldr	r3, [pc, #36]	; (8002180 <HAL_RCC_OscConfig+0x29c>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a08      	ldr	r2, [pc, #32]	; (8002180 <HAL_RCC_OscConfig+0x29c>)
 800215e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002162:	6013      	str	r3, [r2, #0]
 8002164:	4b06      	ldr	r3, [pc, #24]	; (8002180 <HAL_RCC_OscConfig+0x29c>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a05      	ldr	r2, [pc, #20]	; (8002180 <HAL_RCC_OscConfig+0x29c>)
 800216a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800216e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d01b      	beq.n	80021b0 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002178:	f7ff f9e0 	bl	800153c <HAL_GetTick>
 800217c:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800217e:	e010      	b.n	80021a2 <HAL_RCC_OscConfig+0x2be>
 8002180:	40021000 	.word	0x40021000
 8002184:	08006c1c 	.word	0x08006c1c
 8002188:	20000018 	.word	0x20000018
 800218c:	2000001c 	.word	0x2000001c
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002190:	f7ff f9d4 	bl	800153c <HAL_GetTick>
 8002194:	4602      	mov	r2, r0
 8002196:	69bb      	ldr	r3, [r7, #24]
 8002198:	1ad3      	subs	r3, r2, r3
 800219a:	2b64      	cmp	r3, #100	; 0x64
 800219c:	d901      	bls.n	80021a2 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 800219e:	2303      	movs	r3, #3
 80021a0:	e300      	b.n	80027a4 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021a2:	4ba0      	ldr	r3, [pc, #640]	; (8002424 <HAL_RCC_OscConfig+0x540>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d0f0      	beq.n	8002190 <HAL_RCC_OscConfig+0x2ac>
 80021ae:	e014      	b.n	80021da <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021b0:	f7ff f9c4 	bl	800153c <HAL_GetTick>
 80021b4:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80021b6:	e008      	b.n	80021ca <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021b8:	f7ff f9c0 	bl	800153c <HAL_GetTick>
 80021bc:	4602      	mov	r2, r0
 80021be:	69bb      	ldr	r3, [r7, #24]
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	2b64      	cmp	r3, #100	; 0x64
 80021c4:	d901      	bls.n	80021ca <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 80021c6:	2303      	movs	r3, #3
 80021c8:	e2ec      	b.n	80027a4 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80021ca:	4b96      	ldr	r3, [pc, #600]	; (8002424 <HAL_RCC_OscConfig+0x540>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d1f0      	bne.n	80021b8 <HAL_RCC_OscConfig+0x2d4>
 80021d6:	e000      	b.n	80021da <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f003 0302 	and.w	r3, r3, #2
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d060      	beq.n	80022a8 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80021e6:	6a3b      	ldr	r3, [r7, #32]
 80021e8:	2b04      	cmp	r3, #4
 80021ea:	d005      	beq.n	80021f8 <HAL_RCC_OscConfig+0x314>
 80021ec:	6a3b      	ldr	r3, [r7, #32]
 80021ee:	2b0c      	cmp	r3, #12
 80021f0:	d119      	bne.n	8002226 <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	2b02      	cmp	r3, #2
 80021f6:	d116      	bne.n	8002226 <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80021f8:	4b8a      	ldr	r3, [pc, #552]	; (8002424 <HAL_RCC_OscConfig+0x540>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002200:	2b00      	cmp	r3, #0
 8002202:	d005      	beq.n	8002210 <HAL_RCC_OscConfig+0x32c>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d101      	bne.n	8002210 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 800220c:	2301      	movs	r3, #1
 800220e:	e2c9      	b.n	80027a4 <HAL_RCC_OscConfig+0x8c0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002210:	4b84      	ldr	r3, [pc, #528]	; (8002424 <HAL_RCC_OscConfig+0x540>)
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	691b      	ldr	r3, [r3, #16]
 800221c:	061b      	lsls	r3, r3, #24
 800221e:	4981      	ldr	r1, [pc, #516]	; (8002424 <HAL_RCC_OscConfig+0x540>)
 8002220:	4313      	orrs	r3, r2
 8002222:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002224:	e040      	b.n	80022a8 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	68db      	ldr	r3, [r3, #12]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d023      	beq.n	8002276 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800222e:	4b7d      	ldr	r3, [pc, #500]	; (8002424 <HAL_RCC_OscConfig+0x540>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a7c      	ldr	r2, [pc, #496]	; (8002424 <HAL_RCC_OscConfig+0x540>)
 8002234:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002238:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800223a:	f7ff f97f 	bl	800153c <HAL_GetTick>
 800223e:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002240:	e008      	b.n	8002254 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002242:	f7ff f97b 	bl	800153c <HAL_GetTick>
 8002246:	4602      	mov	r2, r0
 8002248:	69bb      	ldr	r3, [r7, #24]
 800224a:	1ad3      	subs	r3, r2, r3
 800224c:	2b02      	cmp	r3, #2
 800224e:	d901      	bls.n	8002254 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8002250:	2303      	movs	r3, #3
 8002252:	e2a7      	b.n	80027a4 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002254:	4b73      	ldr	r3, [pc, #460]	; (8002424 <HAL_RCC_OscConfig+0x540>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800225c:	2b00      	cmp	r3, #0
 800225e:	d0f0      	beq.n	8002242 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002260:	4b70      	ldr	r3, [pc, #448]	; (8002424 <HAL_RCC_OscConfig+0x540>)
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	691b      	ldr	r3, [r3, #16]
 800226c:	061b      	lsls	r3, r3, #24
 800226e:	496d      	ldr	r1, [pc, #436]	; (8002424 <HAL_RCC_OscConfig+0x540>)
 8002270:	4313      	orrs	r3, r2
 8002272:	604b      	str	r3, [r1, #4]
 8002274:	e018      	b.n	80022a8 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002276:	4b6b      	ldr	r3, [pc, #428]	; (8002424 <HAL_RCC_OscConfig+0x540>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a6a      	ldr	r2, [pc, #424]	; (8002424 <HAL_RCC_OscConfig+0x540>)
 800227c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002280:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002282:	f7ff f95b 	bl	800153c <HAL_GetTick>
 8002286:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002288:	e008      	b.n	800229c <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800228a:	f7ff f957 	bl	800153c <HAL_GetTick>
 800228e:	4602      	mov	r2, r0
 8002290:	69bb      	ldr	r3, [r7, #24]
 8002292:	1ad3      	subs	r3, r2, r3
 8002294:	2b02      	cmp	r3, #2
 8002296:	d901      	bls.n	800229c <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8002298:	2303      	movs	r3, #3
 800229a:	e283      	b.n	80027a4 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800229c:	4b61      	ldr	r3, [pc, #388]	; (8002424 <HAL_RCC_OscConfig+0x540>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d1f0      	bne.n	800228a <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 0308 	and.w	r3, r3, #8
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d07f      	beq.n	80023b4 <HAL_RCC_OscConfig+0x4d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	695b      	ldr	r3, [r3, #20]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d05f      	beq.n	800237c <HAL_RCC_OscConfig+0x498>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 80022bc:	4b59      	ldr	r3, [pc, #356]	; (8002424 <HAL_RCC_OscConfig+0x540>)
 80022be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022c2:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	699a      	ldr	r2, [r3, #24]
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	f003 0310 	and.w	r3, r3, #16
 80022ce:	429a      	cmp	r2, r3
 80022d0:	d037      	beq.n	8002342 <HAL_RCC_OscConfig+0x45e>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	f003 0302 	and.w	r3, r3, #2
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d006      	beq.n	80022ea <HAL_RCC_OscConfig+0x406>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d101      	bne.n	80022ea <HAL_RCC_OscConfig+0x406>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e25c      	b.n	80027a4 <HAL_RCC_OscConfig+0x8c0>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	f003 0301 	and.w	r3, r3, #1
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d01b      	beq.n	800232c <HAL_RCC_OscConfig+0x448>
        {
          __HAL_RCC_LSI_DISABLE();
 80022f4:	4b4b      	ldr	r3, [pc, #300]	; (8002424 <HAL_RCC_OscConfig+0x540>)
 80022f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022fa:	4a4a      	ldr	r2, [pc, #296]	; (8002424 <HAL_RCC_OscConfig+0x540>)
 80022fc:	f023 0301 	bic.w	r3, r3, #1
 8002300:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002304:	f7ff f91a 	bl	800153c <HAL_GetTick>
 8002308:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800230a:	e008      	b.n	800231e <HAL_RCC_OscConfig+0x43a>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800230c:	f7ff f916 	bl	800153c <HAL_GetTick>
 8002310:	4602      	mov	r2, r0
 8002312:	69bb      	ldr	r3, [r7, #24]
 8002314:	1ad3      	subs	r3, r2, r3
 8002316:	2b11      	cmp	r3, #17
 8002318:	d901      	bls.n	800231e <HAL_RCC_OscConfig+0x43a>
            {
              return HAL_TIMEOUT;
 800231a:	2303      	movs	r3, #3
 800231c:	e242      	b.n	80027a4 <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800231e:	4b41      	ldr	r3, [pc, #260]	; (8002424 <HAL_RCC_OscConfig+0x540>)
 8002320:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002324:	f003 0302 	and.w	r3, r3, #2
 8002328:	2b00      	cmp	r3, #0
 800232a:	d1ef      	bne.n	800230c <HAL_RCC_OscConfig+0x428>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 800232c:	4b3d      	ldr	r3, [pc, #244]	; (8002424 <HAL_RCC_OscConfig+0x540>)
 800232e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002332:	f023 0210 	bic.w	r2, r3, #16
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	699b      	ldr	r3, [r3, #24]
 800233a:	493a      	ldr	r1, [pc, #232]	; (8002424 <HAL_RCC_OscConfig+0x540>)
 800233c:	4313      	orrs	r3, r2
 800233e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002342:	4b38      	ldr	r3, [pc, #224]	; (8002424 <HAL_RCC_OscConfig+0x540>)
 8002344:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002348:	4a36      	ldr	r2, [pc, #216]	; (8002424 <HAL_RCC_OscConfig+0x540>)
 800234a:	f043 0301 	orr.w	r3, r3, #1
 800234e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002352:	f7ff f8f3 	bl	800153c <HAL_GetTick>
 8002356:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002358:	e008      	b.n	800236c <HAL_RCC_OscConfig+0x488>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800235a:	f7ff f8ef 	bl	800153c <HAL_GetTick>
 800235e:	4602      	mov	r2, r0
 8002360:	69bb      	ldr	r3, [r7, #24]
 8002362:	1ad3      	subs	r3, r2, r3
 8002364:	2b11      	cmp	r3, #17
 8002366:	d901      	bls.n	800236c <HAL_RCC_OscConfig+0x488>
        {
          return HAL_TIMEOUT;
 8002368:	2303      	movs	r3, #3
 800236a:	e21b      	b.n	80027a4 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800236c:	4b2d      	ldr	r3, [pc, #180]	; (8002424 <HAL_RCC_OscConfig+0x540>)
 800236e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002372:	f003 0302 	and.w	r3, r3, #2
 8002376:	2b00      	cmp	r3, #0
 8002378:	d0ef      	beq.n	800235a <HAL_RCC_OscConfig+0x476>
 800237a:	e01b      	b.n	80023b4 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800237c:	4b29      	ldr	r3, [pc, #164]	; (8002424 <HAL_RCC_OscConfig+0x540>)
 800237e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002382:	4a28      	ldr	r2, [pc, #160]	; (8002424 <HAL_RCC_OscConfig+0x540>)
 8002384:	f023 0301 	bic.w	r3, r3, #1
 8002388:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800238c:	f7ff f8d6 	bl	800153c <HAL_GetTick>
 8002390:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002392:	e008      	b.n	80023a6 <HAL_RCC_OscConfig+0x4c2>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002394:	f7ff f8d2 	bl	800153c <HAL_GetTick>
 8002398:	4602      	mov	r2, r0
 800239a:	69bb      	ldr	r3, [r7, #24]
 800239c:	1ad3      	subs	r3, r2, r3
 800239e:	2b11      	cmp	r3, #17
 80023a0:	d901      	bls.n	80023a6 <HAL_RCC_OscConfig+0x4c2>
        {
          return HAL_TIMEOUT;
 80023a2:	2303      	movs	r3, #3
 80023a4:	e1fe      	b.n	80027a4 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80023a6:	4b1f      	ldr	r3, [pc, #124]	; (8002424 <HAL_RCC_OscConfig+0x540>)
 80023a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023ac:	f003 0302 	and.w	r3, r3, #2
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d1ef      	bne.n	8002394 <HAL_RCC_OscConfig+0x4b0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f003 0304 	and.w	r3, r3, #4
 80023bc:	2b00      	cmp	r3, #0
 80023be:	f000 80c1 	beq.w	8002544 <HAL_RCC_OscConfig+0x660>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023c2:	2300      	movs	r3, #0
 80023c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80023c8:	4b16      	ldr	r3, [pc, #88]	; (8002424 <HAL_RCC_OscConfig+0x540>)
 80023ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d10e      	bne.n	80023f2 <HAL_RCC_OscConfig+0x50e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023d4:	4b13      	ldr	r3, [pc, #76]	; (8002424 <HAL_RCC_OscConfig+0x540>)
 80023d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023d8:	4a12      	ldr	r2, [pc, #72]	; (8002424 <HAL_RCC_OscConfig+0x540>)
 80023da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023de:	6593      	str	r3, [r2, #88]	; 0x58
 80023e0:	4b10      	ldr	r3, [pc, #64]	; (8002424 <HAL_RCC_OscConfig+0x540>)
 80023e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023e8:	60fb      	str	r3, [r7, #12]
 80023ea:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80023ec:	2301      	movs	r3, #1
 80023ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023f2:	4b0d      	ldr	r3, [pc, #52]	; (8002428 <HAL_RCC_OscConfig+0x544>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d11c      	bne.n	8002438 <HAL_RCC_OscConfig+0x554>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80023fe:	4b0a      	ldr	r3, [pc, #40]	; (8002428 <HAL_RCC_OscConfig+0x544>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a09      	ldr	r2, [pc, #36]	; (8002428 <HAL_RCC_OscConfig+0x544>)
 8002404:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002408:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800240a:	f7ff f897 	bl	800153c <HAL_GetTick>
 800240e:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002410:	e00c      	b.n	800242c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002412:	f7ff f893 	bl	800153c <HAL_GetTick>
 8002416:	4602      	mov	r2, r0
 8002418:	69bb      	ldr	r3, [r7, #24]
 800241a:	1ad3      	subs	r3, r2, r3
 800241c:	2b02      	cmp	r3, #2
 800241e:	d905      	bls.n	800242c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002420:	2303      	movs	r3, #3
 8002422:	e1bf      	b.n	80027a4 <HAL_RCC_OscConfig+0x8c0>
 8002424:	40021000 	.word	0x40021000
 8002428:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800242c:	4bb1      	ldr	r3, [pc, #708]	; (80026f4 <HAL_RCC_OscConfig+0x810>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002434:	2b00      	cmp	r3, #0
 8002436:	d0ec      	beq.n	8002412 <HAL_RCC_OscConfig+0x52e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	f003 0301 	and.w	r3, r3, #1
 8002440:	2b00      	cmp	r3, #0
 8002442:	d02c      	beq.n	800249e <HAL_RCC_OscConfig+0x5ba>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8002444:	4bac      	ldr	r3, [pc, #688]	; (80026f8 <HAL_RCC_OscConfig+0x814>)
 8002446:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800244a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002456:	49a8      	ldr	r1, [pc, #672]	; (80026f8 <HAL_RCC_OscConfig+0x814>)
 8002458:	4313      	orrs	r3, r2
 800245a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	f003 0304 	and.w	r3, r3, #4
 8002466:	2b00      	cmp	r3, #0
 8002468:	d010      	beq.n	800248c <HAL_RCC_OscConfig+0x5a8>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800246a:	4ba3      	ldr	r3, [pc, #652]	; (80026f8 <HAL_RCC_OscConfig+0x814>)
 800246c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002470:	4aa1      	ldr	r2, [pc, #644]	; (80026f8 <HAL_RCC_OscConfig+0x814>)
 8002472:	f043 0304 	orr.w	r3, r3, #4
 8002476:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800247a:	4b9f      	ldr	r3, [pc, #636]	; (80026f8 <HAL_RCC_OscConfig+0x814>)
 800247c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002480:	4a9d      	ldr	r2, [pc, #628]	; (80026f8 <HAL_RCC_OscConfig+0x814>)
 8002482:	f043 0301 	orr.w	r3, r3, #1
 8002486:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800248a:	e018      	b.n	80024be <HAL_RCC_OscConfig+0x5da>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800248c:	4b9a      	ldr	r3, [pc, #616]	; (80026f8 <HAL_RCC_OscConfig+0x814>)
 800248e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002492:	4a99      	ldr	r2, [pc, #612]	; (80026f8 <HAL_RCC_OscConfig+0x814>)
 8002494:	f043 0301 	orr.w	r3, r3, #1
 8002498:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800249c:	e00f      	b.n	80024be <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800249e:	4b96      	ldr	r3, [pc, #600]	; (80026f8 <HAL_RCC_OscConfig+0x814>)
 80024a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024a4:	4a94      	ldr	r2, [pc, #592]	; (80026f8 <HAL_RCC_OscConfig+0x814>)
 80024a6:	f023 0301 	bic.w	r3, r3, #1
 80024aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80024ae:	4b92      	ldr	r3, [pc, #584]	; (80026f8 <HAL_RCC_OscConfig+0x814>)
 80024b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024b4:	4a90      	ldr	r2, [pc, #576]	; (80026f8 <HAL_RCC_OscConfig+0x814>)
 80024b6:	f023 0304 	bic.w	r3, r3, #4
 80024ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d016      	beq.n	80024f4 <HAL_RCC_OscConfig+0x610>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024c6:	f7ff f839 	bl	800153c <HAL_GetTick>
 80024ca:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024cc:	e00a      	b.n	80024e4 <HAL_RCC_OscConfig+0x600>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024ce:	f7ff f835 	bl	800153c <HAL_GetTick>
 80024d2:	4602      	mov	r2, r0
 80024d4:	69bb      	ldr	r3, [r7, #24]
 80024d6:	1ad3      	subs	r3, r2, r3
 80024d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80024dc:	4293      	cmp	r3, r2
 80024de:	d901      	bls.n	80024e4 <HAL_RCC_OscConfig+0x600>
        {
          return HAL_TIMEOUT;
 80024e0:	2303      	movs	r3, #3
 80024e2:	e15f      	b.n	80027a4 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024e4:	4b84      	ldr	r3, [pc, #528]	; (80026f8 <HAL_RCC_OscConfig+0x814>)
 80024e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024ea:	f003 0302 	and.w	r3, r3, #2
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d0ed      	beq.n	80024ce <HAL_RCC_OscConfig+0x5ea>
 80024f2:	e01d      	b.n	8002530 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024f4:	f7ff f822 	bl	800153c <HAL_GetTick>
 80024f8:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80024fa:	e00a      	b.n	8002512 <HAL_RCC_OscConfig+0x62e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024fc:	f7ff f81e 	bl	800153c <HAL_GetTick>
 8002500:	4602      	mov	r2, r0
 8002502:	69bb      	ldr	r3, [r7, #24]
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	f241 3288 	movw	r2, #5000	; 0x1388
 800250a:	4293      	cmp	r3, r2
 800250c:	d901      	bls.n	8002512 <HAL_RCC_OscConfig+0x62e>
        {
          return HAL_TIMEOUT;
 800250e:	2303      	movs	r3, #3
 8002510:	e148      	b.n	80027a4 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002512:	4b79      	ldr	r3, [pc, #484]	; (80026f8 <HAL_RCC_OscConfig+0x814>)
 8002514:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002518:	f003 0302 	and.w	r3, r3, #2
 800251c:	2b00      	cmp	r3, #0
 800251e:	d1ed      	bne.n	80024fc <HAL_RCC_OscConfig+0x618>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8002520:	4b75      	ldr	r3, [pc, #468]	; (80026f8 <HAL_RCC_OscConfig+0x814>)
 8002522:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002526:	4a74      	ldr	r2, [pc, #464]	; (80026f8 <HAL_RCC_OscConfig+0x814>)
 8002528:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800252c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002530:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002534:	2b01      	cmp	r3, #1
 8002536:	d105      	bne.n	8002544 <HAL_RCC_OscConfig+0x660>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002538:	4b6f      	ldr	r3, [pc, #444]	; (80026f8 <HAL_RCC_OscConfig+0x814>)
 800253a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800253c:	4a6e      	ldr	r2, [pc, #440]	; (80026f8 <HAL_RCC_OscConfig+0x814>)
 800253e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002542:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 0320 	and.w	r3, r3, #32
 800254c:	2b00      	cmp	r3, #0
 800254e:	d03c      	beq.n	80025ca <HAL_RCC_OscConfig+0x6e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002554:	2b00      	cmp	r3, #0
 8002556:	d01c      	beq.n	8002592 <HAL_RCC_OscConfig+0x6ae>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002558:	4b67      	ldr	r3, [pc, #412]	; (80026f8 <HAL_RCC_OscConfig+0x814>)
 800255a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800255e:	4a66      	ldr	r2, [pc, #408]	; (80026f8 <HAL_RCC_OscConfig+0x814>)
 8002560:	f043 0301 	orr.w	r3, r3, #1
 8002564:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002568:	f7fe ffe8 	bl	800153c <HAL_GetTick>
 800256c:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800256e:	e008      	b.n	8002582 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002570:	f7fe ffe4 	bl	800153c <HAL_GetTick>
 8002574:	4602      	mov	r2, r0
 8002576:	69bb      	ldr	r3, [r7, #24]
 8002578:	1ad3      	subs	r3, r2, r3
 800257a:	2b02      	cmp	r3, #2
 800257c:	d901      	bls.n	8002582 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 800257e:	2303      	movs	r3, #3
 8002580:	e110      	b.n	80027a4 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002582:	4b5d      	ldr	r3, [pc, #372]	; (80026f8 <HAL_RCC_OscConfig+0x814>)
 8002584:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002588:	f003 0302 	and.w	r3, r3, #2
 800258c:	2b00      	cmp	r3, #0
 800258e:	d0ef      	beq.n	8002570 <HAL_RCC_OscConfig+0x68c>
 8002590:	e01b      	b.n	80025ca <HAL_RCC_OscConfig+0x6e6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002592:	4b59      	ldr	r3, [pc, #356]	; (80026f8 <HAL_RCC_OscConfig+0x814>)
 8002594:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002598:	4a57      	ldr	r2, [pc, #348]	; (80026f8 <HAL_RCC_OscConfig+0x814>)
 800259a:	f023 0301 	bic.w	r3, r3, #1
 800259e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025a2:	f7fe ffcb 	bl	800153c <HAL_GetTick>
 80025a6:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80025a8:	e008      	b.n	80025bc <HAL_RCC_OscConfig+0x6d8>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80025aa:	f7fe ffc7 	bl	800153c <HAL_GetTick>
 80025ae:	4602      	mov	r2, r0
 80025b0:	69bb      	ldr	r3, [r7, #24]
 80025b2:	1ad3      	subs	r3, r2, r3
 80025b4:	2b02      	cmp	r3, #2
 80025b6:	d901      	bls.n	80025bc <HAL_RCC_OscConfig+0x6d8>
        {
          return HAL_TIMEOUT;
 80025b8:	2303      	movs	r3, #3
 80025ba:	e0f3      	b.n	80027a4 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80025bc:	4b4e      	ldr	r3, [pc, #312]	; (80026f8 <HAL_RCC_OscConfig+0x814>)
 80025be:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80025c2:	f003 0302 	and.w	r3, r3, #2
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d1ef      	bne.n	80025aa <HAL_RCC_OscConfig+0x6c6>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	f000 80e7 	beq.w	80027a2 <HAL_RCC_OscConfig+0x8be>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025d8:	2b02      	cmp	r3, #2
 80025da:	f040 80b7 	bne.w	800274c <HAL_RCC_OscConfig+0x868>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80025de:	4b46      	ldr	r3, [pc, #280]	; (80026f8 <HAL_RCC_OscConfig+0x814>)
 80025e0:	68db      	ldr	r3, [r3, #12]
 80025e2:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80025e4:	69fb      	ldr	r3, [r7, #28]
 80025e6:	f003 0203 	and.w	r2, r3, #3
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ee:	429a      	cmp	r2, r3
 80025f0:	d124      	bne.n	800263c <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80025f2:	69fb      	ldr	r3, [r7, #28]
 80025f4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025fc:	3b01      	subs	r3, #1
 80025fe:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002600:	429a      	cmp	r2, r3
 8002602:	d11b      	bne.n	800263c <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002604:	69fb      	ldr	r3, [r7, #28]
 8002606:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800260e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002610:	429a      	cmp	r2, r3
 8002612:	d113      	bne.n	800263c <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002614:	69fb      	ldr	r3, [r7, #28]
 8002616:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800261e:	085b      	lsrs	r3, r3, #1
 8002620:	3b01      	subs	r3, #1
 8002622:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002624:	429a      	cmp	r2, r3
 8002626:	d109      	bne.n	800263c <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002628:	69fb      	ldr	r3, [r7, #28]
 800262a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002632:	085b      	lsrs	r3, r3, #1
 8002634:	3b01      	subs	r3, #1
 8002636:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002638:	429a      	cmp	r2, r3
 800263a:	d061      	beq.n	8002700 <HAL_RCC_OscConfig+0x81c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800263c:	6a3b      	ldr	r3, [r7, #32]
 800263e:	2b0c      	cmp	r3, #12
 8002640:	d056      	beq.n	80026f0 <HAL_RCC_OscConfig+0x80c>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002642:	4b2d      	ldr	r3, [pc, #180]	; (80026f8 <HAL_RCC_OscConfig+0x814>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a2c      	ldr	r2, [pc, #176]	; (80026f8 <HAL_RCC_OscConfig+0x814>)
 8002648:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800264c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800264e:	f7fe ff75 	bl	800153c <HAL_GetTick>
 8002652:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002654:	e008      	b.n	8002668 <HAL_RCC_OscConfig+0x784>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002656:	f7fe ff71 	bl	800153c <HAL_GetTick>
 800265a:	4602      	mov	r2, r0
 800265c:	69bb      	ldr	r3, [r7, #24]
 800265e:	1ad3      	subs	r3, r2, r3
 8002660:	2b02      	cmp	r3, #2
 8002662:	d901      	bls.n	8002668 <HAL_RCC_OscConfig+0x784>
              {
                return HAL_TIMEOUT;
 8002664:	2303      	movs	r3, #3
 8002666:	e09d      	b.n	80027a4 <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002668:	4b23      	ldr	r3, [pc, #140]	; (80026f8 <HAL_RCC_OscConfig+0x814>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002670:	2b00      	cmp	r3, #0
 8002672:	d1f0      	bne.n	8002656 <HAL_RCC_OscConfig+0x772>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002674:	4b20      	ldr	r3, [pc, #128]	; (80026f8 <HAL_RCC_OscConfig+0x814>)
 8002676:	68da      	ldr	r2, [r3, #12]
 8002678:	4b20      	ldr	r3, [pc, #128]	; (80026fc <HAL_RCC_OscConfig+0x818>)
 800267a:	4013      	ands	r3, r2
 800267c:	687a      	ldr	r2, [r7, #4]
 800267e:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002680:	687a      	ldr	r2, [r7, #4]
 8002682:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002684:	3a01      	subs	r2, #1
 8002686:	0112      	lsls	r2, r2, #4
 8002688:	4311      	orrs	r1, r2
 800268a:	687a      	ldr	r2, [r7, #4]
 800268c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800268e:	0212      	lsls	r2, r2, #8
 8002690:	4311      	orrs	r1, r2
 8002692:	687a      	ldr	r2, [r7, #4]
 8002694:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002696:	0852      	lsrs	r2, r2, #1
 8002698:	3a01      	subs	r2, #1
 800269a:	0552      	lsls	r2, r2, #21
 800269c:	4311      	orrs	r1, r2
 800269e:	687a      	ldr	r2, [r7, #4]
 80026a0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80026a2:	0852      	lsrs	r2, r2, #1
 80026a4:	3a01      	subs	r2, #1
 80026a6:	0652      	lsls	r2, r2, #25
 80026a8:	430a      	orrs	r2, r1
 80026aa:	4913      	ldr	r1, [pc, #76]	; (80026f8 <HAL_RCC_OscConfig+0x814>)
 80026ac:	4313      	orrs	r3, r2
 80026ae:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80026b0:	4b11      	ldr	r3, [pc, #68]	; (80026f8 <HAL_RCC_OscConfig+0x814>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a10      	ldr	r2, [pc, #64]	; (80026f8 <HAL_RCC_OscConfig+0x814>)
 80026b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026ba:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80026bc:	4b0e      	ldr	r3, [pc, #56]	; (80026f8 <HAL_RCC_OscConfig+0x814>)
 80026be:	68db      	ldr	r3, [r3, #12]
 80026c0:	4a0d      	ldr	r2, [pc, #52]	; (80026f8 <HAL_RCC_OscConfig+0x814>)
 80026c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026c6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80026c8:	f7fe ff38 	bl	800153c <HAL_GetTick>
 80026cc:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026ce:	e008      	b.n	80026e2 <HAL_RCC_OscConfig+0x7fe>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026d0:	f7fe ff34 	bl	800153c <HAL_GetTick>
 80026d4:	4602      	mov	r2, r0
 80026d6:	69bb      	ldr	r3, [r7, #24]
 80026d8:	1ad3      	subs	r3, r2, r3
 80026da:	2b02      	cmp	r3, #2
 80026dc:	d901      	bls.n	80026e2 <HAL_RCC_OscConfig+0x7fe>
              {
                return HAL_TIMEOUT;
 80026de:	2303      	movs	r3, #3
 80026e0:	e060      	b.n	80027a4 <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026e2:	4b05      	ldr	r3, [pc, #20]	; (80026f8 <HAL_RCC_OscConfig+0x814>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d0f0      	beq.n	80026d0 <HAL_RCC_OscConfig+0x7ec>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80026ee:	e058      	b.n	80027a2 <HAL_RCC_OscConfig+0x8be>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	e057      	b.n	80027a4 <HAL_RCC_OscConfig+0x8c0>
 80026f4:	40007000 	.word	0x40007000
 80026f8:	40021000 	.word	0x40021000
 80026fc:	f99f808c 	.word	0xf99f808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002700:	4b2a      	ldr	r3, [pc, #168]	; (80027ac <HAL_RCC_OscConfig+0x8c8>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002708:	2b00      	cmp	r3, #0
 800270a:	d14a      	bne.n	80027a2 <HAL_RCC_OscConfig+0x8be>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800270c:	4b27      	ldr	r3, [pc, #156]	; (80027ac <HAL_RCC_OscConfig+0x8c8>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a26      	ldr	r2, [pc, #152]	; (80027ac <HAL_RCC_OscConfig+0x8c8>)
 8002712:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002716:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002718:	4b24      	ldr	r3, [pc, #144]	; (80027ac <HAL_RCC_OscConfig+0x8c8>)
 800271a:	68db      	ldr	r3, [r3, #12]
 800271c:	4a23      	ldr	r2, [pc, #140]	; (80027ac <HAL_RCC_OscConfig+0x8c8>)
 800271e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002722:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002724:	f7fe ff0a 	bl	800153c <HAL_GetTick>
 8002728:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800272a:	e008      	b.n	800273e <HAL_RCC_OscConfig+0x85a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800272c:	f7fe ff06 	bl	800153c <HAL_GetTick>
 8002730:	4602      	mov	r2, r0
 8002732:	69bb      	ldr	r3, [r7, #24]
 8002734:	1ad3      	subs	r3, r2, r3
 8002736:	2b02      	cmp	r3, #2
 8002738:	d901      	bls.n	800273e <HAL_RCC_OscConfig+0x85a>
            {
              return HAL_TIMEOUT;
 800273a:	2303      	movs	r3, #3
 800273c:	e032      	b.n	80027a4 <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800273e:	4b1b      	ldr	r3, [pc, #108]	; (80027ac <HAL_RCC_OscConfig+0x8c8>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002746:	2b00      	cmp	r3, #0
 8002748:	d0f0      	beq.n	800272c <HAL_RCC_OscConfig+0x848>
 800274a:	e02a      	b.n	80027a2 <HAL_RCC_OscConfig+0x8be>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800274c:	6a3b      	ldr	r3, [r7, #32]
 800274e:	2b0c      	cmp	r3, #12
 8002750:	d025      	beq.n	800279e <HAL_RCC_OscConfig+0x8ba>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002752:	4b16      	ldr	r3, [pc, #88]	; (80027ac <HAL_RCC_OscConfig+0x8c8>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a15      	ldr	r2, [pc, #84]	; (80027ac <HAL_RCC_OscConfig+0x8c8>)
 8002758:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800275c:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800275e:	4b13      	ldr	r3, [pc, #76]	; (80027ac <HAL_RCC_OscConfig+0x8c8>)
 8002760:	68db      	ldr	r3, [r3, #12]
 8002762:	4a12      	ldr	r2, [pc, #72]	; (80027ac <HAL_RCC_OscConfig+0x8c8>)
 8002764:	f023 0303 	bic.w	r3, r3, #3
 8002768:	60d3      	str	r3, [r2, #12]
#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 800276a:	4b10      	ldr	r3, [pc, #64]	; (80027ac <HAL_RCC_OscConfig+0x8c8>)
 800276c:	68db      	ldr	r3, [r3, #12]
 800276e:	4a0f      	ldr	r2, [pc, #60]	; (80027ac <HAL_RCC_OscConfig+0x8c8>)
 8002770:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002774:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002776:	f7fe fee1 	bl	800153c <HAL_GetTick>
 800277a:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800277c:	e008      	b.n	8002790 <HAL_RCC_OscConfig+0x8ac>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800277e:	f7fe fedd 	bl	800153c <HAL_GetTick>
 8002782:	4602      	mov	r2, r0
 8002784:	69bb      	ldr	r3, [r7, #24]
 8002786:	1ad3      	subs	r3, r2, r3
 8002788:	2b02      	cmp	r3, #2
 800278a:	d901      	bls.n	8002790 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 800278c:	2303      	movs	r3, #3
 800278e:	e009      	b.n	80027a4 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002790:	4b06      	ldr	r3, [pc, #24]	; (80027ac <HAL_RCC_OscConfig+0x8c8>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002798:	2b00      	cmp	r3, #0
 800279a:	d1f0      	bne.n	800277e <HAL_RCC_OscConfig+0x89a>
 800279c:	e001      	b.n	80027a2 <HAL_RCC_OscConfig+0x8be>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e000      	b.n	80027a4 <HAL_RCC_OscConfig+0x8c0>
      }
    }
  }
  return HAL_OK;
 80027a2:	2300      	movs	r3, #0
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	3728      	adds	r7, #40	; 0x28
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	40021000 	.word	0x40021000

080027b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b084      	sub	sp, #16
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
 80027b8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d101      	bne.n	80027c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	e0c8      	b.n	8002956 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027c4:	4b66      	ldr	r3, [pc, #408]	; (8002960 <HAL_RCC_ClockConfig+0x1b0>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 0307 	and.w	r3, r3, #7
 80027cc:	683a      	ldr	r2, [r7, #0]
 80027ce:	429a      	cmp	r2, r3
 80027d0:	d910      	bls.n	80027f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027d2:	4b63      	ldr	r3, [pc, #396]	; (8002960 <HAL_RCC_ClockConfig+0x1b0>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f023 0207 	bic.w	r2, r3, #7
 80027da:	4961      	ldr	r1, [pc, #388]	; (8002960 <HAL_RCC_ClockConfig+0x1b0>)
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	4313      	orrs	r3, r2
 80027e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027e2:	4b5f      	ldr	r3, [pc, #380]	; (8002960 <HAL_RCC_ClockConfig+0x1b0>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 0307 	and.w	r3, r3, #7
 80027ea:	683a      	ldr	r2, [r7, #0]
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d001      	beq.n	80027f4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80027f0:	2301      	movs	r3, #1
 80027f2:	e0b0      	b.n	8002956 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f003 0301 	and.w	r3, r3, #1
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d04c      	beq.n	800289a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	2b03      	cmp	r3, #3
 8002806:	d107      	bne.n	8002818 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002808:	4b56      	ldr	r3, [pc, #344]	; (8002964 <HAL_RCC_ClockConfig+0x1b4>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002810:	2b00      	cmp	r3, #0
 8002812:	d121      	bne.n	8002858 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	e09e      	b.n	8002956 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	2b02      	cmp	r3, #2
 800281e:	d107      	bne.n	8002830 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002820:	4b50      	ldr	r3, [pc, #320]	; (8002964 <HAL_RCC_ClockConfig+0x1b4>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002828:	2b00      	cmp	r3, #0
 800282a:	d115      	bne.n	8002858 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800282c:	2301      	movs	r3, #1
 800282e:	e092      	b.n	8002956 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d107      	bne.n	8002848 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002838:	4b4a      	ldr	r3, [pc, #296]	; (8002964 <HAL_RCC_ClockConfig+0x1b4>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 0302 	and.w	r3, r3, #2
 8002840:	2b00      	cmp	r3, #0
 8002842:	d109      	bne.n	8002858 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002844:	2301      	movs	r3, #1
 8002846:	e086      	b.n	8002956 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002848:	4b46      	ldr	r3, [pc, #280]	; (8002964 <HAL_RCC_ClockConfig+0x1b4>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002850:	2b00      	cmp	r3, #0
 8002852:	d101      	bne.n	8002858 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	e07e      	b.n	8002956 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002858:	4b42      	ldr	r3, [pc, #264]	; (8002964 <HAL_RCC_ClockConfig+0x1b4>)
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	f023 0203 	bic.w	r2, r3, #3
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	493f      	ldr	r1, [pc, #252]	; (8002964 <HAL_RCC_ClockConfig+0x1b4>)
 8002866:	4313      	orrs	r3, r2
 8002868:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800286a:	f7fe fe67 	bl	800153c <HAL_GetTick>
 800286e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002870:	e00a      	b.n	8002888 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002872:	f7fe fe63 	bl	800153c <HAL_GetTick>
 8002876:	4602      	mov	r2, r0
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	1ad3      	subs	r3, r2, r3
 800287c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002880:	4293      	cmp	r3, r2
 8002882:	d901      	bls.n	8002888 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002884:	2303      	movs	r3, #3
 8002886:	e066      	b.n	8002956 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002888:	4b36      	ldr	r3, [pc, #216]	; (8002964 <HAL_RCC_ClockConfig+0x1b4>)
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	f003 020c 	and.w	r2, r3, #12
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	009b      	lsls	r3, r3, #2
 8002896:	429a      	cmp	r2, r3
 8002898:	d1eb      	bne.n	8002872 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f003 0302 	and.w	r3, r3, #2
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d008      	beq.n	80028b8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028a6:	4b2f      	ldr	r3, [pc, #188]	; (8002964 <HAL_RCC_ClockConfig+0x1b4>)
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	492c      	ldr	r1, [pc, #176]	; (8002964 <HAL_RCC_ClockConfig+0x1b4>)
 80028b4:	4313      	orrs	r3, r2
 80028b6:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80028b8:	4b29      	ldr	r3, [pc, #164]	; (8002960 <HAL_RCC_ClockConfig+0x1b0>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f003 0307 	and.w	r3, r3, #7
 80028c0:	683a      	ldr	r2, [r7, #0]
 80028c2:	429a      	cmp	r2, r3
 80028c4:	d210      	bcs.n	80028e8 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028c6:	4b26      	ldr	r3, [pc, #152]	; (8002960 <HAL_RCC_ClockConfig+0x1b0>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f023 0207 	bic.w	r2, r3, #7
 80028ce:	4924      	ldr	r1, [pc, #144]	; (8002960 <HAL_RCC_ClockConfig+0x1b0>)
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	4313      	orrs	r3, r2
 80028d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028d6:	4b22      	ldr	r3, [pc, #136]	; (8002960 <HAL_RCC_ClockConfig+0x1b0>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 0307 	and.w	r3, r3, #7
 80028de:	683a      	ldr	r2, [r7, #0]
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d001      	beq.n	80028e8 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	e036      	b.n	8002956 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f003 0304 	and.w	r3, r3, #4
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d008      	beq.n	8002906 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028f4:	4b1b      	ldr	r3, [pc, #108]	; (8002964 <HAL_RCC_ClockConfig+0x1b4>)
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	68db      	ldr	r3, [r3, #12]
 8002900:	4918      	ldr	r1, [pc, #96]	; (8002964 <HAL_RCC_ClockConfig+0x1b4>)
 8002902:	4313      	orrs	r3, r2
 8002904:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 0308 	and.w	r3, r3, #8
 800290e:	2b00      	cmp	r3, #0
 8002910:	d009      	beq.n	8002926 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002912:	4b14      	ldr	r3, [pc, #80]	; (8002964 <HAL_RCC_ClockConfig+0x1b4>)
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	691b      	ldr	r3, [r3, #16]
 800291e:	00db      	lsls	r3, r3, #3
 8002920:	4910      	ldr	r1, [pc, #64]	; (8002964 <HAL_RCC_ClockConfig+0x1b4>)
 8002922:	4313      	orrs	r3, r2
 8002924:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002926:	f000 f825 	bl	8002974 <HAL_RCC_GetSysClockFreq>
 800292a:	4602      	mov	r2, r0
 800292c:	4b0d      	ldr	r3, [pc, #52]	; (8002964 <HAL_RCC_ClockConfig+0x1b4>)
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	091b      	lsrs	r3, r3, #4
 8002932:	f003 030f 	and.w	r3, r3, #15
 8002936:	490c      	ldr	r1, [pc, #48]	; (8002968 <HAL_RCC_ClockConfig+0x1b8>)
 8002938:	5ccb      	ldrb	r3, [r1, r3]
 800293a:	f003 031f 	and.w	r3, r3, #31
 800293e:	fa22 f303 	lsr.w	r3, r2, r3
 8002942:	4a0a      	ldr	r2, [pc, #40]	; (800296c <HAL_RCC_ClockConfig+0x1bc>)
 8002944:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002946:	4b0a      	ldr	r3, [pc, #40]	; (8002970 <HAL_RCC_ClockConfig+0x1c0>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4618      	mov	r0, r3
 800294c:	f7fe fda6 	bl	800149c <HAL_InitTick>
 8002950:	4603      	mov	r3, r0
 8002952:	72fb      	strb	r3, [r7, #11]

  return status;
 8002954:	7afb      	ldrb	r3, [r7, #11]
}
 8002956:	4618      	mov	r0, r3
 8002958:	3710      	adds	r7, #16
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	40022000 	.word	0x40022000
 8002964:	40021000 	.word	0x40021000
 8002968:	08006c1c 	.word	0x08006c1c
 800296c:	20000018 	.word	0x20000018
 8002970:	2000001c 	.word	0x2000001c

08002974 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002974:	b480      	push	{r7}
 8002976:	b089      	sub	sp, #36	; 0x24
 8002978:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800297a:	2300      	movs	r3, #0
 800297c:	61fb      	str	r3, [r7, #28]
 800297e:	2300      	movs	r3, #0
 8002980:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002982:	4b3e      	ldr	r3, [pc, #248]	; (8002a7c <HAL_RCC_GetSysClockFreq+0x108>)
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	f003 030c 	and.w	r3, r3, #12
 800298a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800298c:	4b3b      	ldr	r3, [pc, #236]	; (8002a7c <HAL_RCC_GetSysClockFreq+0x108>)
 800298e:	68db      	ldr	r3, [r3, #12]
 8002990:	f003 0303 	and.w	r3, r3, #3
 8002994:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d005      	beq.n	80029a8 <HAL_RCC_GetSysClockFreq+0x34>
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	2b0c      	cmp	r3, #12
 80029a0:	d121      	bne.n	80029e6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	d11e      	bne.n	80029e6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80029a8:	4b34      	ldr	r3, [pc, #208]	; (8002a7c <HAL_RCC_GetSysClockFreq+0x108>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f003 0308 	and.w	r3, r3, #8
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d107      	bne.n	80029c4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80029b4:	4b31      	ldr	r3, [pc, #196]	; (8002a7c <HAL_RCC_GetSysClockFreq+0x108>)
 80029b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029ba:	0a1b      	lsrs	r3, r3, #8
 80029bc:	f003 030f 	and.w	r3, r3, #15
 80029c0:	61fb      	str	r3, [r7, #28]
 80029c2:	e005      	b.n	80029d0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80029c4:	4b2d      	ldr	r3, [pc, #180]	; (8002a7c <HAL_RCC_GetSysClockFreq+0x108>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	091b      	lsrs	r3, r3, #4
 80029ca:	f003 030f 	and.w	r3, r3, #15
 80029ce:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80029d0:	4a2b      	ldr	r2, [pc, #172]	; (8002a80 <HAL_RCC_GetSysClockFreq+0x10c>)
 80029d2:	69fb      	ldr	r3, [r7, #28]
 80029d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029d8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d10d      	bne.n	80029fc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80029e0:	69fb      	ldr	r3, [r7, #28]
 80029e2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80029e4:	e00a      	b.n	80029fc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	2b04      	cmp	r3, #4
 80029ea:	d102      	bne.n	80029f2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80029ec:	4b25      	ldr	r3, [pc, #148]	; (8002a84 <HAL_RCC_GetSysClockFreq+0x110>)
 80029ee:	61bb      	str	r3, [r7, #24]
 80029f0:	e004      	b.n	80029fc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	2b08      	cmp	r3, #8
 80029f6:	d101      	bne.n	80029fc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80029f8:	4b23      	ldr	r3, [pc, #140]	; (8002a88 <HAL_RCC_GetSysClockFreq+0x114>)
 80029fa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	2b0c      	cmp	r3, #12
 8002a00:	d134      	bne.n	8002a6c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002a02:	4b1e      	ldr	r3, [pc, #120]	; (8002a7c <HAL_RCC_GetSysClockFreq+0x108>)
 8002a04:	68db      	ldr	r3, [r3, #12]
 8002a06:	f003 0303 	and.w	r3, r3, #3
 8002a0a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	2b02      	cmp	r3, #2
 8002a10:	d003      	beq.n	8002a1a <HAL_RCC_GetSysClockFreq+0xa6>
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	2b03      	cmp	r3, #3
 8002a16:	d003      	beq.n	8002a20 <HAL_RCC_GetSysClockFreq+0xac>
 8002a18:	e005      	b.n	8002a26 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002a1a:	4b1a      	ldr	r3, [pc, #104]	; (8002a84 <HAL_RCC_GetSysClockFreq+0x110>)
 8002a1c:	617b      	str	r3, [r7, #20]
      break;
 8002a1e:	e005      	b.n	8002a2c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002a20:	4b19      	ldr	r3, [pc, #100]	; (8002a88 <HAL_RCC_GetSysClockFreq+0x114>)
 8002a22:	617b      	str	r3, [r7, #20]
      break;
 8002a24:	e002      	b.n	8002a2c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002a26:	69fb      	ldr	r3, [r7, #28]
 8002a28:	617b      	str	r3, [r7, #20]
      break;
 8002a2a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002a2c:	4b13      	ldr	r3, [pc, #76]	; (8002a7c <HAL_RCC_GetSysClockFreq+0x108>)
 8002a2e:	68db      	ldr	r3, [r3, #12]
 8002a30:	091b      	lsrs	r3, r3, #4
 8002a32:	f003 0307 	and.w	r3, r3, #7
 8002a36:	3301      	adds	r3, #1
 8002a38:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002a3a:	4b10      	ldr	r3, [pc, #64]	; (8002a7c <HAL_RCC_GetSysClockFreq+0x108>)
 8002a3c:	68db      	ldr	r3, [r3, #12]
 8002a3e:	0a1b      	lsrs	r3, r3, #8
 8002a40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002a44:	697a      	ldr	r2, [r7, #20]
 8002a46:	fb02 f203 	mul.w	r2, r2, r3
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a50:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002a52:	4b0a      	ldr	r3, [pc, #40]	; (8002a7c <HAL_RCC_GetSysClockFreq+0x108>)
 8002a54:	68db      	ldr	r3, [r3, #12]
 8002a56:	0e5b      	lsrs	r3, r3, #25
 8002a58:	f003 0303 	and.w	r3, r3, #3
 8002a5c:	3301      	adds	r3, #1
 8002a5e:	005b      	lsls	r3, r3, #1
 8002a60:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002a62:	697a      	ldr	r2, [r7, #20]
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a6a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002a6c:	69bb      	ldr	r3, [r7, #24]
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3724      	adds	r7, #36	; 0x24
 8002a72:	46bd      	mov	sp, r7
 8002a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a78:	4770      	bx	lr
 8002a7a:	bf00      	nop
 8002a7c:	40021000 	.word	0x40021000
 8002a80:	08006c34 	.word	0x08006c34
 8002a84:	00f42400 	.word	0x00f42400
 8002a88:	007a1200 	.word	0x007a1200

08002a8c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a90:	4b03      	ldr	r3, [pc, #12]	; (8002aa0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a92:	681b      	ldr	r3, [r3, #0]
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr
 8002a9e:	bf00      	nop
 8002aa0:	20000018 	.word	0x20000018

08002aa4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002aa8:	f7ff fff0 	bl	8002a8c <HAL_RCC_GetHCLKFreq>
 8002aac:	4602      	mov	r2, r0
 8002aae:	4b06      	ldr	r3, [pc, #24]	; (8002ac8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	0a1b      	lsrs	r3, r3, #8
 8002ab4:	f003 0307 	and.w	r3, r3, #7
 8002ab8:	4904      	ldr	r1, [pc, #16]	; (8002acc <HAL_RCC_GetPCLK1Freq+0x28>)
 8002aba:	5ccb      	ldrb	r3, [r1, r3]
 8002abc:	f003 031f 	and.w	r3, r3, #31
 8002ac0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	bd80      	pop	{r7, pc}
 8002ac8:	40021000 	.word	0x40021000
 8002acc:	08006c2c 	.word	0x08006c2c

08002ad0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002ad4:	f7ff ffda 	bl	8002a8c <HAL_RCC_GetHCLKFreq>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	4b06      	ldr	r3, [pc, #24]	; (8002af4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	0adb      	lsrs	r3, r3, #11
 8002ae0:	f003 0307 	and.w	r3, r3, #7
 8002ae4:	4904      	ldr	r1, [pc, #16]	; (8002af8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002ae6:	5ccb      	ldrb	r3, [r1, r3]
 8002ae8:	f003 031f 	and.w	r3, r3, #31
 8002aec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	40021000 	.word	0x40021000
 8002af8:	08006c2c 	.word	0x08006c2c

08002afc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b086      	sub	sp, #24
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002b04:	2300      	movs	r3, #0
 8002b06:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002b08:	4b2a      	ldr	r3, [pc, #168]	; (8002bb4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d003      	beq.n	8002b1c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002b14:	f7ff f982 	bl	8001e1c <HAL_PWREx_GetVoltageRange>
 8002b18:	6178      	str	r0, [r7, #20]
 8002b1a:	e014      	b.n	8002b46 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002b1c:	4b25      	ldr	r3, [pc, #148]	; (8002bb4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b20:	4a24      	ldr	r2, [pc, #144]	; (8002bb4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b26:	6593      	str	r3, [r2, #88]	; 0x58
 8002b28:	4b22      	ldr	r3, [pc, #136]	; (8002bb4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b30:	60fb      	str	r3, [r7, #12]
 8002b32:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002b34:	f7ff f972 	bl	8001e1c <HAL_PWREx_GetVoltageRange>
 8002b38:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002b3a:	4b1e      	ldr	r3, [pc, #120]	; (8002bb4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b3e:	4a1d      	ldr	r2, [pc, #116]	; (8002bb4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b44:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b4c:	d10b      	bne.n	8002b66 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2b80      	cmp	r3, #128	; 0x80
 8002b52:	d919      	bls.n	8002b88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2ba0      	cmp	r3, #160	; 0xa0
 8002b58:	d902      	bls.n	8002b60 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002b5a:	2302      	movs	r3, #2
 8002b5c:	613b      	str	r3, [r7, #16]
 8002b5e:	e013      	b.n	8002b88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002b60:	2301      	movs	r3, #1
 8002b62:	613b      	str	r3, [r7, #16]
 8002b64:	e010      	b.n	8002b88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2b80      	cmp	r3, #128	; 0x80
 8002b6a:	d902      	bls.n	8002b72 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002b6c:	2303      	movs	r3, #3
 8002b6e:	613b      	str	r3, [r7, #16]
 8002b70:	e00a      	b.n	8002b88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2b80      	cmp	r3, #128	; 0x80
 8002b76:	d102      	bne.n	8002b7e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002b78:	2302      	movs	r3, #2
 8002b7a:	613b      	str	r3, [r7, #16]
 8002b7c:	e004      	b.n	8002b88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2b70      	cmp	r3, #112	; 0x70
 8002b82:	d101      	bne.n	8002b88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002b84:	2301      	movs	r3, #1
 8002b86:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002b88:	4b0b      	ldr	r3, [pc, #44]	; (8002bb8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f023 0207 	bic.w	r2, r3, #7
 8002b90:	4909      	ldr	r1, [pc, #36]	; (8002bb8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	4313      	orrs	r3, r2
 8002b96:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002b98:	4b07      	ldr	r3, [pc, #28]	; (8002bb8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 0307 	and.w	r3, r3, #7
 8002ba0:	693a      	ldr	r2, [r7, #16]
 8002ba2:	429a      	cmp	r2, r3
 8002ba4:	d001      	beq.n	8002baa <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e000      	b.n	8002bac <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002baa:	2300      	movs	r3, #0
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	3718      	adds	r7, #24
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}
 8002bb4:	40021000 	.word	0x40021000
 8002bb8:	40022000 	.word	0x40022000

08002bbc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b086      	sub	sp, #24
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002bc8:	2300      	movs	r3, #0
 8002bca:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	f000 809e 	beq.w	8002d16 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002bde:	4b46      	ldr	r3, [pc, #280]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002be0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002be2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d101      	bne.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002bea:	2301      	movs	r3, #1
 8002bec:	e000      	b.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x34>
 8002bee:	2300      	movs	r3, #0
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d00d      	beq.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bf4:	4b40      	ldr	r3, [pc, #256]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002bf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bf8:	4a3f      	ldr	r2, [pc, #252]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002bfa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bfe:	6593      	str	r3, [r2, #88]	; 0x58
 8002c00:	4b3d      	ldr	r3, [pc, #244]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002c02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c08:	60bb      	str	r3, [r7, #8]
 8002c0a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c10:	4b3a      	ldr	r3, [pc, #232]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a39      	ldr	r2, [pc, #228]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002c16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c1a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002c1c:	f7fe fc8e 	bl	800153c <HAL_GetTick>
 8002c20:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002c22:	e009      	b.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c24:	f7fe fc8a 	bl	800153c <HAL_GetTick>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	1ad3      	subs	r3, r2, r3
 8002c2e:	2b02      	cmp	r3, #2
 8002c30:	d902      	bls.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 8002c32:	2303      	movs	r3, #3
 8002c34:	74fb      	strb	r3, [r7, #19]
        break;
 8002c36:	e005      	b.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002c38:	4b30      	ldr	r3, [pc, #192]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d0ef      	beq.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 8002c44:	7cfb      	ldrb	r3, [r7, #19]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d15a      	bne.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002c4a:	4b2b      	ldr	r3, [pc, #172]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002c4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c50:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c54:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d01e      	beq.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0xde>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c60:	697a      	ldr	r2, [r7, #20]
 8002c62:	429a      	cmp	r2, r3
 8002c64:	d019      	beq.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002c66:	4b24      	ldr	r3, [pc, #144]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002c68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c70:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002c72:	4b21      	ldr	r3, [pc, #132]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002c74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c78:	4a1f      	ldr	r2, [pc, #124]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002c7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c7e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002c82:	4b1d      	ldr	r3, [pc, #116]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002c84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c88:	4a1b      	ldr	r2, [pc, #108]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002c8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c8e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002c92:	4a19      	ldr	r2, [pc, #100]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	f003 0301 	and.w	r3, r3, #1
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d016      	beq.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ca4:	f7fe fc4a 	bl	800153c <HAL_GetTick>
 8002ca8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002caa:	e00b      	b.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cac:	f7fe fc46 	bl	800153c <HAL_GetTick>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	1ad3      	subs	r3, r2, r3
 8002cb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d902      	bls.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 8002cbe:	2303      	movs	r3, #3
 8002cc0:	74fb      	strb	r3, [r7, #19]
            break;
 8002cc2:	e006      	b.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cc4:	4b0c      	ldr	r3, [pc, #48]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002cc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cca:	f003 0302 	and.w	r3, r3, #2
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d0ec      	beq.n	8002cac <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 8002cd2:	7cfb      	ldrb	r3, [r7, #19]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d10b      	bne.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002cd8:	4b07      	ldr	r3, [pc, #28]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002cda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cde:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce6:	4904      	ldr	r1, [pc, #16]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002cee:	e009      	b.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002cf0:	7cfb      	ldrb	r3, [r7, #19]
 8002cf2:	74bb      	strb	r3, [r7, #18]
 8002cf4:	e006      	b.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0x148>
 8002cf6:	bf00      	nop
 8002cf8:	40021000 	.word	0x40021000
 8002cfc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d00:	7cfb      	ldrb	r3, [r7, #19]
 8002d02:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d04:	7c7b      	ldrb	r3, [r7, #17]
 8002d06:	2b01      	cmp	r3, #1
 8002d08:	d105      	bne.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d0a:	4b6e      	ldr	r3, [pc, #440]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002d0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d0e:	4a6d      	ldr	r2, [pc, #436]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002d10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d14:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 0301 	and.w	r3, r3, #1
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d00a      	beq.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d22:	4b68      	ldr	r3, [pc, #416]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002d24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d28:	f023 0203 	bic.w	r2, r3, #3
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	4964      	ldr	r1, [pc, #400]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002d32:	4313      	orrs	r3, r2
 8002d34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f003 0302 	and.w	r3, r3, #2
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d00a      	beq.n	8002d5a <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002d44:	4b5f      	ldr	r3, [pc, #380]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002d46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d4a:	f023 020c 	bic.w	r2, r3, #12
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	495c      	ldr	r1, [pc, #368]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002d54:	4313      	orrs	r3, r2
 8002d56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f003 0304 	and.w	r3, r3, #4
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d00a      	beq.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002d66:	4b57      	ldr	r3, [pc, #348]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002d68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d6c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	68db      	ldr	r3, [r3, #12]
 8002d74:	4953      	ldr	r1, [pc, #332]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002d76:	4313      	orrs	r3, r2
 8002d78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f003 0320 	and.w	r3, r3, #32
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d00a      	beq.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002d88:	4b4e      	ldr	r3, [pc, #312]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002d8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d8e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	691b      	ldr	r3, [r3, #16]
 8002d96:	494b      	ldr	r1, [pc, #300]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d00a      	beq.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002daa:	4b46      	ldr	r3, [pc, #280]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002dac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002db0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6a1b      	ldr	r3, [r3, #32]
 8002db8:	4942      	ldr	r1, [pc, #264]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d00a      	beq.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002dcc:	4b3d      	ldr	r3, [pc, #244]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002dce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dd2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dda:	493a      	ldr	r1, [pc, #232]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d00a      	beq.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002dee:	4b35      	ldr	r3, [pc, #212]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002df0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002df4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	695b      	ldr	r3, [r3, #20]
 8002dfc:	4931      	ldr	r1, [pc, #196]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d00a      	beq.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002e10:	4b2c      	ldr	r3, [pc, #176]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e16:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	699b      	ldr	r3, [r3, #24]
 8002e1e:	4929      	ldr	r1, [pc, #164]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002e20:	4313      	orrs	r3, r2
 8002e22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d00a      	beq.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002e32:	4b24      	ldr	r3, [pc, #144]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002e34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e38:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	69db      	ldr	r3, [r3, #28]
 8002e40:	4920      	ldr	r1, [pc, #128]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002e42:	4313      	orrs	r3, r2
 8002e44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d015      	beq.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002e54:	4b1b      	ldr	r3, [pc, #108]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002e56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e5a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e62:	4918      	ldr	r1, [pc, #96]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002e64:	4313      	orrs	r3, r2
 8002e66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e6e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e72:	d105      	bne.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e74:	4b13      	ldr	r3, [pc, #76]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002e76:	68db      	ldr	r3, [r3, #12]
 8002e78:	4a12      	ldr	r2, [pc, #72]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002e7a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e7e:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d015      	beq.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002e8c:	4b0d      	ldr	r3, [pc, #52]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002e8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e92:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e9a:	490a      	ldr	r1, [pc, #40]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ea6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002eaa:	d105      	bne.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002eac:	4b05      	ldr	r3, [pc, #20]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002eae:	68db      	ldr	r3, [r3, #12]
 8002eb0:	4a04      	ldr	r2, [pc, #16]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002eb2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002eb6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002eb8:	7cbb      	ldrb	r3, [r7, #18]
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	3718      	adds	r7, #24
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}
 8002ec2:	bf00      	nop
 8002ec4:	40021000 	.word	0x40021000

08002ec8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b084      	sub	sp, #16
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d101      	bne.n	8002eda <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e095      	b.n	8003006 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d108      	bne.n	8002ef4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002eea:	d009      	beq.n	8002f00 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	61da      	str	r2, [r3, #28]
 8002ef2:	e005      	b.n	8002f00 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2200      	movs	r2, #0
 8002efe:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2200      	movs	r2, #0
 8002f04:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002f0c:	b2db      	uxtb	r3, r3
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d106      	bne.n	8002f20 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2200      	movs	r2, #0
 8002f16:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	f7fe f986 	bl	800122c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2202      	movs	r2, #2
 8002f24:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f36:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002f40:	d902      	bls.n	8002f48 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002f42:	2300      	movs	r3, #0
 8002f44:	60fb      	str	r3, [r7, #12]
 8002f46:	e002      	b.n	8002f4e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002f48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f4c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	68db      	ldr	r3, [r3, #12]
 8002f52:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002f56:	d007      	beq.n	8002f68 <HAL_SPI_Init+0xa0>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	68db      	ldr	r3, [r3, #12]
 8002f5c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002f60:	d002      	beq.n	8002f68 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2200      	movs	r2, #0
 8002f66:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002f78:	431a      	orrs	r2, r3
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	691b      	ldr	r3, [r3, #16]
 8002f7e:	f003 0302 	and.w	r3, r3, #2
 8002f82:	431a      	orrs	r2, r3
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	695b      	ldr	r3, [r3, #20]
 8002f88:	f003 0301 	and.w	r3, r3, #1
 8002f8c:	431a      	orrs	r2, r3
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	699b      	ldr	r3, [r3, #24]
 8002f92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f96:	431a      	orrs	r2, r3
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	69db      	ldr	r3, [r3, #28]
 8002f9c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002fa0:	431a      	orrs	r2, r3
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6a1b      	ldr	r3, [r3, #32]
 8002fa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002faa:	ea42 0103 	orr.w	r1, r2, r3
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fb2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	430a      	orrs	r2, r1
 8002fbc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	699b      	ldr	r3, [r3, #24]
 8002fc2:	0c1b      	lsrs	r3, r3, #16
 8002fc4:	f003 0204 	and.w	r2, r3, #4
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fcc:	f003 0310 	and.w	r3, r3, #16
 8002fd0:	431a      	orrs	r2, r3
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fd6:	f003 0308 	and.w	r3, r3, #8
 8002fda:	431a      	orrs	r2, r3
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	68db      	ldr	r3, [r3, #12]
 8002fe0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002fe4:	ea42 0103 	orr.w	r1, r2, r3
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	430a      	orrs	r2, r1
 8002ff4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2201      	movs	r2, #1
 8003000:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003004:	2300      	movs	r3, #0
}
 8003006:	4618      	mov	r0, r3
 8003008:	3710      	adds	r7, #16
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}

0800300e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800300e:	b580      	push	{r7, lr}
 8003010:	b088      	sub	sp, #32
 8003012:	af00      	add	r7, sp, #0
 8003014:	60f8      	str	r0, [r7, #12]
 8003016:	60b9      	str	r1, [r7, #8]
 8003018:	603b      	str	r3, [r7, #0]
 800301a:	4613      	mov	r3, r2
 800301c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800301e:	2300      	movs	r3, #0
 8003020:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003028:	2b01      	cmp	r3, #1
 800302a:	d101      	bne.n	8003030 <HAL_SPI_Transmit+0x22>
 800302c:	2302      	movs	r3, #2
 800302e:	e158      	b.n	80032e2 <HAL_SPI_Transmit+0x2d4>
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	2201      	movs	r2, #1
 8003034:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003038:	f7fe fa80 	bl	800153c <HAL_GetTick>
 800303c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800303e:	88fb      	ldrh	r3, [r7, #6]
 8003040:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003048:	b2db      	uxtb	r3, r3
 800304a:	2b01      	cmp	r3, #1
 800304c:	d002      	beq.n	8003054 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800304e:	2302      	movs	r3, #2
 8003050:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003052:	e13d      	b.n	80032d0 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d002      	beq.n	8003060 <HAL_SPI_Transmit+0x52>
 800305a:	88fb      	ldrh	r3, [r7, #6]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d102      	bne.n	8003066 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003064:	e134      	b.n	80032d0 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2203      	movs	r2, #3
 800306a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	2200      	movs	r2, #0
 8003072:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	68ba      	ldr	r2, [r7, #8]
 8003078:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	88fa      	ldrh	r2, [r7, #6]
 800307e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	88fa      	ldrh	r2, [r7, #6]
 8003084:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	2200      	movs	r2, #0
 800308a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2200      	movs	r2, #0
 8003090:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2200      	movs	r2, #0
 8003098:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	2200      	movs	r2, #0
 80030a0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2200      	movs	r2, #0
 80030a6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030b0:	d10f      	bne.n	80030d2 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030c0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80030d0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030dc:	2b40      	cmp	r3, #64	; 0x40
 80030de:	d007      	beq.n	80030f0 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	681a      	ldr	r2, [r3, #0]
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80030ee:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	68db      	ldr	r3, [r3, #12]
 80030f4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80030f8:	d94b      	bls.n	8003192 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d002      	beq.n	8003108 <HAL_SPI_Transmit+0xfa>
 8003102:	8afb      	ldrh	r3, [r7, #22]
 8003104:	2b01      	cmp	r3, #1
 8003106:	d13e      	bne.n	8003186 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800310c:	881a      	ldrh	r2, [r3, #0]
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003118:	1c9a      	adds	r2, r3, #2
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003122:	b29b      	uxth	r3, r3
 8003124:	3b01      	subs	r3, #1
 8003126:	b29a      	uxth	r2, r3
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800312c:	e02b      	b.n	8003186 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	f003 0302 	and.w	r3, r3, #2
 8003138:	2b02      	cmp	r3, #2
 800313a:	d112      	bne.n	8003162 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003140:	881a      	ldrh	r2, [r3, #0]
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800314c:	1c9a      	adds	r2, r3, #2
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003156:	b29b      	uxth	r3, r3
 8003158:	3b01      	subs	r3, #1
 800315a:	b29a      	uxth	r2, r3
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003160:	e011      	b.n	8003186 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003162:	f7fe f9eb 	bl	800153c <HAL_GetTick>
 8003166:	4602      	mov	r2, r0
 8003168:	69bb      	ldr	r3, [r7, #24]
 800316a:	1ad3      	subs	r3, r2, r3
 800316c:	683a      	ldr	r2, [r7, #0]
 800316e:	429a      	cmp	r2, r3
 8003170:	d803      	bhi.n	800317a <HAL_SPI_Transmit+0x16c>
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003178:	d102      	bne.n	8003180 <HAL_SPI_Transmit+0x172>
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d102      	bne.n	8003186 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8003180:	2303      	movs	r3, #3
 8003182:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003184:	e0a4      	b.n	80032d0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800318a:	b29b      	uxth	r3, r3
 800318c:	2b00      	cmp	r3, #0
 800318e:	d1ce      	bne.n	800312e <HAL_SPI_Transmit+0x120>
 8003190:	e07c      	b.n	800328c <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d002      	beq.n	80031a0 <HAL_SPI_Transmit+0x192>
 800319a:	8afb      	ldrh	r3, [r7, #22]
 800319c:	2b01      	cmp	r3, #1
 800319e:	d170      	bne.n	8003282 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031a4:	b29b      	uxth	r3, r3
 80031a6:	2b01      	cmp	r3, #1
 80031a8:	d912      	bls.n	80031d0 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ae:	881a      	ldrh	r2, [r3, #0]
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ba:	1c9a      	adds	r2, r3, #2
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031c4:	b29b      	uxth	r3, r3
 80031c6:	3b02      	subs	r3, #2
 80031c8:	b29a      	uxth	r2, r3
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80031ce:	e058      	b.n	8003282 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	330c      	adds	r3, #12
 80031da:	7812      	ldrb	r2, [r2, #0]
 80031dc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031e2:	1c5a      	adds	r2, r3, #1
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031ec:	b29b      	uxth	r3, r3
 80031ee:	3b01      	subs	r3, #1
 80031f0:	b29a      	uxth	r2, r3
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80031f6:	e044      	b.n	8003282 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	f003 0302 	and.w	r3, r3, #2
 8003202:	2b02      	cmp	r3, #2
 8003204:	d12b      	bne.n	800325e <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800320a:	b29b      	uxth	r3, r3
 800320c:	2b01      	cmp	r3, #1
 800320e:	d912      	bls.n	8003236 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003214:	881a      	ldrh	r2, [r3, #0]
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003220:	1c9a      	adds	r2, r3, #2
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800322a:	b29b      	uxth	r3, r3
 800322c:	3b02      	subs	r3, #2
 800322e:	b29a      	uxth	r2, r3
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003234:	e025      	b.n	8003282 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	330c      	adds	r3, #12
 8003240:	7812      	ldrb	r2, [r2, #0]
 8003242:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003248:	1c5a      	adds	r2, r3, #1
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003252:	b29b      	uxth	r3, r3
 8003254:	3b01      	subs	r3, #1
 8003256:	b29a      	uxth	r2, r3
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800325c:	e011      	b.n	8003282 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800325e:	f7fe f96d 	bl	800153c <HAL_GetTick>
 8003262:	4602      	mov	r2, r0
 8003264:	69bb      	ldr	r3, [r7, #24]
 8003266:	1ad3      	subs	r3, r2, r3
 8003268:	683a      	ldr	r2, [r7, #0]
 800326a:	429a      	cmp	r2, r3
 800326c:	d803      	bhi.n	8003276 <HAL_SPI_Transmit+0x268>
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003274:	d102      	bne.n	800327c <HAL_SPI_Transmit+0x26e>
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d102      	bne.n	8003282 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 800327c:	2303      	movs	r3, #3
 800327e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003280:	e026      	b.n	80032d0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003286:	b29b      	uxth	r3, r3
 8003288:	2b00      	cmp	r3, #0
 800328a:	d1b5      	bne.n	80031f8 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800328c:	69ba      	ldr	r2, [r7, #24]
 800328e:	6839      	ldr	r1, [r7, #0]
 8003290:	68f8      	ldr	r0, [r7, #12]
 8003292:	f000 f945 	bl	8003520 <SPI_EndRxTxTransaction>
 8003296:	4603      	mov	r3, r0
 8003298:	2b00      	cmp	r3, #0
 800329a:	d002      	beq.n	80032a2 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2220      	movs	r2, #32
 80032a0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d10a      	bne.n	80032c0 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80032aa:	2300      	movs	r3, #0
 80032ac:	613b      	str	r3, [r7, #16]
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	68db      	ldr	r3, [r3, #12]
 80032b4:	613b      	str	r3, [r7, #16]
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	613b      	str	r3, [r7, #16]
 80032be:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d002      	beq.n	80032ce <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	77fb      	strb	r3, [r7, #31]
 80032cc:	e000      	b.n	80032d0 <HAL_SPI_Transmit+0x2c2>
  }

error:
 80032ce:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	2201      	movs	r2, #1
 80032d4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	2200      	movs	r2, #0
 80032dc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80032e0:	7ffb      	ldrb	r3, [r7, #31]
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	3720      	adds	r7, #32
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}
	...

080032ec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b088      	sub	sp, #32
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	60f8      	str	r0, [r7, #12]
 80032f4:	60b9      	str	r1, [r7, #8]
 80032f6:	603b      	str	r3, [r7, #0]
 80032f8:	4613      	mov	r3, r2
 80032fa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80032fc:	f7fe f91e 	bl	800153c <HAL_GetTick>
 8003300:	4602      	mov	r2, r0
 8003302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003304:	1a9b      	subs	r3, r3, r2
 8003306:	683a      	ldr	r2, [r7, #0]
 8003308:	4413      	add	r3, r2
 800330a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800330c:	f7fe f916 	bl	800153c <HAL_GetTick>
 8003310:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003312:	4b39      	ldr	r3, [pc, #228]	; (80033f8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	015b      	lsls	r3, r3, #5
 8003318:	0d1b      	lsrs	r3, r3, #20
 800331a:	69fa      	ldr	r2, [r7, #28]
 800331c:	fb02 f303 	mul.w	r3, r2, r3
 8003320:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003322:	e054      	b.n	80033ce <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800332a:	d050      	beq.n	80033ce <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800332c:	f7fe f906 	bl	800153c <HAL_GetTick>
 8003330:	4602      	mov	r2, r0
 8003332:	69bb      	ldr	r3, [r7, #24]
 8003334:	1ad3      	subs	r3, r2, r3
 8003336:	69fa      	ldr	r2, [r7, #28]
 8003338:	429a      	cmp	r2, r3
 800333a:	d902      	bls.n	8003342 <SPI_WaitFlagStateUntilTimeout+0x56>
 800333c:	69fb      	ldr	r3, [r7, #28]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d13d      	bne.n	80033be <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	685a      	ldr	r2, [r3, #4]
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003350:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800335a:	d111      	bne.n	8003380 <SPI_WaitFlagStateUntilTimeout+0x94>
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003364:	d004      	beq.n	8003370 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800336e:	d107      	bne.n	8003380 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800337e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003384:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003388:	d10f      	bne.n	80033aa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	681a      	ldr	r2, [r3, #0]
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003398:	601a      	str	r2, [r3, #0]
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	681a      	ldr	r2, [r3, #0]
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80033a8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	2201      	movs	r2, #1
 80033ae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	2200      	movs	r2, #0
 80033b6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80033ba:	2303      	movs	r3, #3
 80033bc:	e017      	b.n	80033ee <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d101      	bne.n	80033c8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80033c4:	2300      	movs	r3, #0
 80033c6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	3b01      	subs	r3, #1
 80033cc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	689a      	ldr	r2, [r3, #8]
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	4013      	ands	r3, r2
 80033d8:	68ba      	ldr	r2, [r7, #8]
 80033da:	429a      	cmp	r2, r3
 80033dc:	bf0c      	ite	eq
 80033de:	2301      	moveq	r3, #1
 80033e0:	2300      	movne	r3, #0
 80033e2:	b2db      	uxtb	r3, r3
 80033e4:	461a      	mov	r2, r3
 80033e6:	79fb      	ldrb	r3, [r7, #7]
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d19b      	bne.n	8003324 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80033ec:	2300      	movs	r3, #0
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	3720      	adds	r7, #32
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}
 80033f6:	bf00      	nop
 80033f8:	20000018 	.word	0x20000018

080033fc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b088      	sub	sp, #32
 8003400:	af00      	add	r7, sp, #0
 8003402:	60f8      	str	r0, [r7, #12]
 8003404:	60b9      	str	r1, [r7, #8]
 8003406:	607a      	str	r2, [r7, #4]
 8003408:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800340a:	f7fe f897 	bl	800153c <HAL_GetTick>
 800340e:	4602      	mov	r2, r0
 8003410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003412:	1a9b      	subs	r3, r3, r2
 8003414:	683a      	ldr	r2, [r7, #0]
 8003416:	4413      	add	r3, r2
 8003418:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800341a:	f7fe f88f 	bl	800153c <HAL_GetTick>
 800341e:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003420:	4b3e      	ldr	r3, [pc, #248]	; (800351c <SPI_WaitFifoStateUntilTimeout+0x120>)
 8003422:	681a      	ldr	r2, [r3, #0]
 8003424:	4613      	mov	r3, r2
 8003426:	009b      	lsls	r3, r3, #2
 8003428:	4413      	add	r3, r2
 800342a:	00da      	lsls	r2, r3, #3
 800342c:	1ad3      	subs	r3, r2, r3
 800342e:	0d1b      	lsrs	r3, r3, #20
 8003430:	69fa      	ldr	r2, [r7, #28]
 8003432:	fb02 f303 	mul.w	r3, r2, r3
 8003436:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 8003438:	e062      	b.n	8003500 <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003440:	d109      	bne.n	8003456 <SPI_WaitFifoStateUntilTimeout+0x5a>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d106      	bne.n	8003456 <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	330c      	adds	r3, #12
 800344e:	781b      	ldrb	r3, [r3, #0]
 8003450:	b2db      	uxtb	r3, r3
 8003452:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8003454:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800345c:	d050      	beq.n	8003500 <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800345e:	f7fe f86d 	bl	800153c <HAL_GetTick>
 8003462:	4602      	mov	r2, r0
 8003464:	69bb      	ldr	r3, [r7, #24]
 8003466:	1ad3      	subs	r3, r2, r3
 8003468:	69fa      	ldr	r2, [r7, #28]
 800346a:	429a      	cmp	r2, r3
 800346c:	d902      	bls.n	8003474 <SPI_WaitFifoStateUntilTimeout+0x78>
 800346e:	69fb      	ldr	r3, [r7, #28]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d13d      	bne.n	80034f0 <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	685a      	ldr	r2, [r3, #4]
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003482:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800348c:	d111      	bne.n	80034b2 <SPI_WaitFifoStateUntilTimeout+0xb6>
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003496:	d004      	beq.n	80034a2 <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034a0:	d107      	bne.n	80034b2 <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034b0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034ba:	d10f      	bne.n	80034dc <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80034ca:	601a      	str	r2, [r3, #0]
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80034da:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2201      	movs	r2, #1
 80034e0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2200      	movs	r2, #0
 80034e8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80034ec:	2303      	movs	r3, #3
 80034ee:	e010      	b.n	8003512 <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d101      	bne.n	80034fa <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 80034f6:	2300      	movs	r3, #0
 80034f8:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	3b01      	subs	r3, #1
 80034fe:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	689a      	ldr	r2, [r3, #8]
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	4013      	ands	r3, r2
 800350a:	687a      	ldr	r2, [r7, #4]
 800350c:	429a      	cmp	r2, r3
 800350e:	d194      	bne.n	800343a <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8003510:	2300      	movs	r3, #0
}
 8003512:	4618      	mov	r0, r3
 8003514:	3720      	adds	r7, #32
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}
 800351a:	bf00      	nop
 800351c:	20000018 	.word	0x20000018

08003520 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b086      	sub	sp, #24
 8003524:	af02      	add	r7, sp, #8
 8003526:	60f8      	str	r0, [r7, #12]
 8003528:	60b9      	str	r1, [r7, #8]
 800352a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	9300      	str	r3, [sp, #0]
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	2200      	movs	r2, #0
 8003534:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003538:	68f8      	ldr	r0, [r7, #12]
 800353a:	f7ff ff5f 	bl	80033fc <SPI_WaitFifoStateUntilTimeout>
 800353e:	4603      	mov	r3, r0
 8003540:	2b00      	cmp	r3, #0
 8003542:	d007      	beq.n	8003554 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003548:	f043 0220 	orr.w	r2, r3, #32
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003550:	2303      	movs	r3, #3
 8003552:	e027      	b.n	80035a4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	9300      	str	r3, [sp, #0]
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	2200      	movs	r2, #0
 800355c:	2180      	movs	r1, #128	; 0x80
 800355e:	68f8      	ldr	r0, [r7, #12]
 8003560:	f7ff fec4 	bl	80032ec <SPI_WaitFlagStateUntilTimeout>
 8003564:	4603      	mov	r3, r0
 8003566:	2b00      	cmp	r3, #0
 8003568:	d007      	beq.n	800357a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800356e:	f043 0220 	orr.w	r2, r3, #32
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003576:	2303      	movs	r3, #3
 8003578:	e014      	b.n	80035a4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	9300      	str	r3, [sp, #0]
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	2200      	movs	r2, #0
 8003582:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003586:	68f8      	ldr	r0, [r7, #12]
 8003588:	f7ff ff38 	bl	80033fc <SPI_WaitFifoStateUntilTimeout>
 800358c:	4603      	mov	r3, r0
 800358e:	2b00      	cmp	r3, #0
 8003590:	d007      	beq.n	80035a2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003596:	f043 0220 	orr.w	r2, r3, #32
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800359e:	2303      	movs	r3, #3
 80035a0:	e000      	b.n	80035a4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80035a2:	2300      	movs	r3, #0
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	3710      	adds	r7, #16
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd80      	pop	{r7, pc}

080035ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b082      	sub	sp, #8
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d101      	bne.n	80035be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	e040      	b.n	8003640 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d106      	bne.n	80035d4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2200      	movs	r2, #0
 80035ca:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f7fd fe70 	bl	80012b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2224      	movs	r2, #36	; 0x24
 80035d8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f022 0201 	bic.w	r2, r2, #1
 80035e8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	f000 fa4e 	bl	8003a8c <UART_SetConfig>
 80035f0:	4603      	mov	r3, r0
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	d101      	bne.n	80035fa <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	e022      	b.n	8003640 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d002      	beq.n	8003608 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f000 fc76 	bl	8003ef4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	685a      	ldr	r2, [r3, #4]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003616:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	689a      	ldr	r2, [r3, #8]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003626:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f042 0201 	orr.w	r2, r2, #1
 8003636:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003638:	6878      	ldr	r0, [r7, #4]
 800363a:	f000 fcfd 	bl	8004038 <UART_CheckIdleState>
 800363e:	4603      	mov	r3, r0
}
 8003640:	4618      	mov	r0, r3
 8003642:	3708      	adds	r7, #8
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}

08003648 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b088      	sub	sp, #32
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	69db      	ldr	r3, [r3, #28]
 8003656:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003668:	69fa      	ldr	r2, [r7, #28]
 800366a:	f640 030f 	movw	r3, #2063	; 0x80f
 800366e:	4013      	ands	r3, r2
 8003670:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d113      	bne.n	80036a0 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003678:	69fb      	ldr	r3, [r7, #28]
 800367a:	f003 0320 	and.w	r3, r3, #32
 800367e:	2b00      	cmp	r3, #0
 8003680:	d00e      	beq.n	80036a0 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003682:	69bb      	ldr	r3, [r7, #24]
 8003684:	f003 0320 	and.w	r3, r3, #32
 8003688:	2b00      	cmp	r3, #0
 800368a:	d009      	beq.n	80036a0 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003690:	2b00      	cmp	r3, #0
 8003692:	f000 81ce 	beq.w	8003a32 <HAL_UART_IRQHandler+0x3ea>
      {
        huart->RxISR(huart);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	4798      	blx	r3
      }
      return;
 800369e:	e1c8      	b.n	8003a32 <HAL_UART_IRQHandler+0x3ea>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	f000 80e3 	beq.w	800386e <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	f003 0301 	and.w	r3, r3, #1
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d105      	bne.n	80036be <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80036b2:	69ba      	ldr	r2, [r7, #24]
 80036b4:	4ba6      	ldr	r3, [pc, #664]	; (8003950 <HAL_UART_IRQHandler+0x308>)
 80036b6:	4013      	ands	r3, r2
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	f000 80d8 	beq.w	800386e <HAL_UART_IRQHandler+0x226>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80036be:	69fb      	ldr	r3, [r7, #28]
 80036c0:	f003 0301 	and.w	r3, r3, #1
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d010      	beq.n	80036ea <HAL_UART_IRQHandler+0xa2>
 80036c8:	69bb      	ldr	r3, [r7, #24]
 80036ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d00b      	beq.n	80036ea <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	2201      	movs	r2, #1
 80036d8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80036e0:	f043 0201 	orr.w	r2, r3, #1
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80036ea:	69fb      	ldr	r3, [r7, #28]
 80036ec:	f003 0302 	and.w	r3, r3, #2
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d010      	beq.n	8003716 <HAL_UART_IRQHandler+0xce>
 80036f4:	697b      	ldr	r3, [r7, #20]
 80036f6:	f003 0301 	and.w	r3, r3, #1
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d00b      	beq.n	8003716 <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	2202      	movs	r2, #2
 8003704:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800370c:	f043 0204 	orr.w	r2, r3, #4
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003716:	69fb      	ldr	r3, [r7, #28]
 8003718:	f003 0304 	and.w	r3, r3, #4
 800371c:	2b00      	cmp	r3, #0
 800371e:	d010      	beq.n	8003742 <HAL_UART_IRQHandler+0xfa>
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	f003 0301 	and.w	r3, r3, #1
 8003726:	2b00      	cmp	r3, #0
 8003728:	d00b      	beq.n	8003742 <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	2204      	movs	r2, #4
 8003730:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003738:	f043 0202 	orr.w	r2, r3, #2
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003742:	69fb      	ldr	r3, [r7, #28]
 8003744:	f003 0308 	and.w	r3, r3, #8
 8003748:	2b00      	cmp	r3, #0
 800374a:	d015      	beq.n	8003778 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800374c:	69bb      	ldr	r3, [r7, #24]
 800374e:	f003 0320 	and.w	r3, r3, #32
 8003752:	2b00      	cmp	r3, #0
 8003754:	d104      	bne.n	8003760 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800375c:	2b00      	cmp	r3, #0
 800375e:	d00b      	beq.n	8003778 <HAL_UART_IRQHandler+0x130>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	2208      	movs	r2, #8
 8003766:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800376e:	f043 0208 	orr.w	r2, r3, #8
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003778:	69fb      	ldr	r3, [r7, #28]
 800377a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800377e:	2b00      	cmp	r3, #0
 8003780:	d011      	beq.n	80037a6 <HAL_UART_IRQHandler+0x15e>
 8003782:	69bb      	ldr	r3, [r7, #24]
 8003784:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003788:	2b00      	cmp	r3, #0
 800378a:	d00c      	beq.n	80037a6 <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003794:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800379c:	f043 0220 	orr.w	r2, r3, #32
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	f000 8142 	beq.w	8003a36 <HAL_UART_IRQHandler+0x3ee>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80037b2:	69fb      	ldr	r3, [r7, #28]
 80037b4:	f003 0320 	and.w	r3, r3, #32
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d00c      	beq.n	80037d6 <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80037bc:	69bb      	ldr	r3, [r7, #24]
 80037be:	f003 0320 	and.w	r3, r3, #32
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d007      	beq.n	80037d6 <HAL_UART_IRQHandler+0x18e>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d003      	beq.n	80037d6 <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80037d2:	6878      	ldr	r0, [r7, #4]
 80037d4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80037dc:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037e8:	2b40      	cmp	r3, #64	; 0x40
 80037ea:	d004      	beq.n	80037f6 <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d031      	beq.n	800385a <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f000 fce3 	bl	80041c2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003806:	2b40      	cmp	r3, #64	; 0x40
 8003808:	d123      	bne.n	8003852 <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	689a      	ldr	r2, [r3, #8]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003818:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800381e:	2b00      	cmp	r3, #0
 8003820:	d013      	beq.n	800384a <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003826:	4a4b      	ldr	r2, [pc, #300]	; (8003954 <HAL_UART_IRQHandler+0x30c>)
 8003828:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800382e:	4618      	mov	r0, r3
 8003830:	f7fe f803 	bl	800183a <HAL_DMA_Abort_IT>
 8003834:	4603      	mov	r3, r0
 8003836:	2b00      	cmp	r3, #0
 8003838:	d017      	beq.n	800386a <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800383e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003840:	687a      	ldr	r2, [r7, #4]
 8003842:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8003844:	4610      	mov	r0, r2
 8003846:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003848:	e00f      	b.n	800386a <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f000 f908 	bl	8003a60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003850:	e00b      	b.n	800386a <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f000 f904 	bl	8003a60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003858:	e007      	b.n	800386a <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f000 f900 	bl	8003a60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2200      	movs	r2, #0
 8003864:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8003868:	e0e5      	b.n	8003a36 <HAL_UART_IRQHandler+0x3ee>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800386a:	bf00      	nop
    return;
 800386c:	e0e3      	b.n	8003a36 <HAL_UART_IRQHandler+0x3ee>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003872:	2b01      	cmp	r3, #1
 8003874:	f040 80a9 	bne.w	80039ca <HAL_UART_IRQHandler+0x382>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8003878:	69fb      	ldr	r3, [r7, #28]
 800387a:	f003 0310 	and.w	r3, r3, #16
 800387e:	2b00      	cmp	r3, #0
 8003880:	f000 80a3 	beq.w	80039ca <HAL_UART_IRQHandler+0x382>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8003884:	69bb      	ldr	r3, [r7, #24]
 8003886:	f003 0310 	and.w	r3, r3, #16
 800388a:	2b00      	cmp	r3, #0
 800388c:	f000 809d 	beq.w	80039ca <HAL_UART_IRQHandler+0x382>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	2210      	movs	r2, #16
 8003896:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	689b      	ldr	r3, [r3, #8]
 800389e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038a2:	2b40      	cmp	r3, #64	; 0x40
 80038a4:	d158      	bne.n	8003958 <HAL_UART_IRQHandler+0x310>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 80038b0:	893b      	ldrh	r3, [r7, #8]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	f000 80c1 	beq.w	8003a3a <HAL_UART_IRQHandler+0x3f2>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80038be:	893a      	ldrh	r2, [r7, #8]
 80038c0:	429a      	cmp	r2, r3
 80038c2:	f080 80ba 	bcs.w	8003a3a <HAL_UART_IRQHandler+0x3f2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	893a      	ldrh	r2, [r7, #8]
 80038ca:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f003 0320 	and.w	r3, r3, #32
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d12a      	bne.n	8003934 <HAL_UART_IRQHandler+0x2ec>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	681a      	ldr	r2, [r3, #0]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80038ec:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	689a      	ldr	r2, [r3, #8]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f022 0201 	bic.w	r2, r2, #1
 80038fc:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	689a      	ldr	r2, [r3, #8]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800390c:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2220      	movs	r2, #32
 8003912:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2200      	movs	r2, #0
 8003918:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	681a      	ldr	r2, [r3, #0]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f022 0210 	bic.w	r2, r2, #16
 8003928:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800392e:	4618      	mov	r0, r3
 8003930:	f7fd ff45 	bl	80017be <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003940:	b29b      	uxth	r3, r3
 8003942:	1ad3      	subs	r3, r2, r3
 8003944:	b29b      	uxth	r3, r3
 8003946:	4619      	mov	r1, r3
 8003948:	6878      	ldr	r0, [r7, #4]
 800394a:	f000 f893 	bl	8003a74 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800394e:	e074      	b.n	8003a3a <HAL_UART_IRQHandler+0x3f2>
 8003950:	04000120 	.word	0x04000120
 8003954:	08004221 	.word	0x08004221
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003964:	b29b      	uxth	r3, r3
 8003966:	1ad3      	subs	r3, r2, r3
 8003968:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003970:	b29b      	uxth	r3, r3
 8003972:	2b00      	cmp	r3, #0
 8003974:	d063      	beq.n	8003a3e <HAL_UART_IRQHandler+0x3f6>
          &&(nb_rx_data > 0U) )
 8003976:	897b      	ldrh	r3, [r7, #10]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d060      	beq.n	8003a3e <HAL_UART_IRQHandler+0x3f6>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800398a:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	689a      	ldr	r2, [r3, #8]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f022 0201 	bic.w	r2, r2, #1
 800399a:	609a      	str	r2, [r3, #8]
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2220      	movs	r2, #32
 80039a0:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2200      	movs	r2, #0
 80039a6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2200      	movs	r2, #0
 80039ac:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	681a      	ldr	r2, [r3, #0]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f022 0210 	bic.w	r2, r2, #16
 80039bc:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80039be:	897b      	ldrh	r3, [r7, #10]
 80039c0:	4619      	mov	r1, r3
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f000 f856 	bl	8003a74 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80039c8:	e039      	b.n	8003a3e <HAL_UART_IRQHandler+0x3f6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80039ca:	69fb      	ldr	r3, [r7, #28]
 80039cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d00d      	beq.n	80039f0 <HAL_UART_IRQHandler+0x3a8>
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d008      	beq.n	80039f0 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80039e6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80039e8:	6878      	ldr	r0, [r7, #4]
 80039ea:	f000 fc48 	bl	800427e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80039ee:	e029      	b.n	8003a44 <HAL_UART_IRQHandler+0x3fc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80039f0:	69fb      	ldr	r3, [r7, #28]
 80039f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d00d      	beq.n	8003a16 <HAL_UART_IRQHandler+0x3ce>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80039fa:	69bb      	ldr	r3, [r7, #24]
 80039fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d008      	beq.n	8003a16 <HAL_UART_IRQHandler+0x3ce>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d01a      	beq.n	8003a42 <HAL_UART_IRQHandler+0x3fa>
    {
      huart->TxISR(huart);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a10:	6878      	ldr	r0, [r7, #4]
 8003a12:	4798      	blx	r3
    }
    return;
 8003a14:	e015      	b.n	8003a42 <HAL_UART_IRQHandler+0x3fa>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003a16:	69fb      	ldr	r3, [r7, #28]
 8003a18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d011      	beq.n	8003a44 <HAL_UART_IRQHandler+0x3fc>
 8003a20:	69bb      	ldr	r3, [r7, #24]
 8003a22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d00c      	beq.n	8003a44 <HAL_UART_IRQHandler+0x3fc>
  {
    UART_EndTransmit_IT(huart);
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f000 fc0e 	bl	800424c <UART_EndTransmit_IT>
    return;
 8003a30:	e008      	b.n	8003a44 <HAL_UART_IRQHandler+0x3fc>
      return;
 8003a32:	bf00      	nop
 8003a34:	e006      	b.n	8003a44 <HAL_UART_IRQHandler+0x3fc>
    return;
 8003a36:	bf00      	nop
 8003a38:	e004      	b.n	8003a44 <HAL_UART_IRQHandler+0x3fc>
      return;
 8003a3a:	bf00      	nop
 8003a3c:	e002      	b.n	8003a44 <HAL_UART_IRQHandler+0x3fc>
      return;
 8003a3e:	bf00      	nop
 8003a40:	e000      	b.n	8003a44 <HAL_UART_IRQHandler+0x3fc>
    return;
 8003a42:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003a44:	3720      	adds	r7, #32
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}
 8003a4a:	bf00      	nop

08003a4c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b083      	sub	sp, #12
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003a54:	bf00      	nop
 8003a56:	370c      	adds	r7, #12
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5e:	4770      	bx	lr

08003a60 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b083      	sub	sp, #12
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003a68:	bf00      	nop
 8003a6a:	370c      	adds	r7, #12
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a72:	4770      	bx	lr

08003a74 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b083      	sub	sp, #12
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
 8003a7c:	460b      	mov	r3, r1
 8003a7e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003a80:	bf00      	nop
 8003a82:	370c      	adds	r7, #12
 8003a84:	46bd      	mov	sp, r7
 8003a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8a:	4770      	bx	lr

08003a8c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a8c:	b5b0      	push	{r4, r5, r7, lr}
 8003a8e:	b088      	sub	sp, #32
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003a94:	2300      	movs	r3, #0
 8003a96:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	689a      	ldr	r2, [r3, #8]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	691b      	ldr	r3, [r3, #16]
 8003aa0:	431a      	orrs	r2, r3
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	695b      	ldr	r3, [r3, #20]
 8003aa6:	431a      	orrs	r2, r3
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	69db      	ldr	r3, [r3, #28]
 8003aac:	4313      	orrs	r3, r2
 8003aae:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	4baa      	ldr	r3, [pc, #680]	; (8003d60 <UART_SetConfig+0x2d4>)
 8003ab8:	4013      	ands	r3, r2
 8003aba:	687a      	ldr	r2, [r7, #4]
 8003abc:	6812      	ldr	r2, [r2, #0]
 8003abe:	69f9      	ldr	r1, [r7, #28]
 8003ac0:	430b      	orrs	r3, r1
 8003ac2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	68da      	ldr	r2, [r3, #12]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	430a      	orrs	r2, r1
 8003ad8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	699b      	ldr	r3, [r3, #24]
 8003ade:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a9f      	ldr	r2, [pc, #636]	; (8003d64 <UART_SetConfig+0x2d8>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d004      	beq.n	8003af4 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6a1b      	ldr	r3, [r3, #32]
 8003aee:	69fa      	ldr	r2, [r7, #28]
 8003af0:	4313      	orrs	r3, r2
 8003af2:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	69fa      	ldr	r2, [r7, #28]
 8003b04:	430a      	orrs	r2, r1
 8003b06:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a96      	ldr	r2, [pc, #600]	; (8003d68 <UART_SetConfig+0x2dc>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d121      	bne.n	8003b56 <UART_SetConfig+0xca>
 8003b12:	4b96      	ldr	r3, [pc, #600]	; (8003d6c <UART_SetConfig+0x2e0>)
 8003b14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b18:	f003 0303 	and.w	r3, r3, #3
 8003b1c:	2b03      	cmp	r3, #3
 8003b1e:	d817      	bhi.n	8003b50 <UART_SetConfig+0xc4>
 8003b20:	a201      	add	r2, pc, #4	; (adr r2, 8003b28 <UART_SetConfig+0x9c>)
 8003b22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b26:	bf00      	nop
 8003b28:	08003b39 	.word	0x08003b39
 8003b2c:	08003b45 	.word	0x08003b45
 8003b30:	08003b3f 	.word	0x08003b3f
 8003b34:	08003b4b 	.word	0x08003b4b
 8003b38:	2301      	movs	r3, #1
 8003b3a:	76fb      	strb	r3, [r7, #27]
 8003b3c:	e096      	b.n	8003c6c <UART_SetConfig+0x1e0>
 8003b3e:	2302      	movs	r3, #2
 8003b40:	76fb      	strb	r3, [r7, #27]
 8003b42:	e093      	b.n	8003c6c <UART_SetConfig+0x1e0>
 8003b44:	2304      	movs	r3, #4
 8003b46:	76fb      	strb	r3, [r7, #27]
 8003b48:	e090      	b.n	8003c6c <UART_SetConfig+0x1e0>
 8003b4a:	2308      	movs	r3, #8
 8003b4c:	76fb      	strb	r3, [r7, #27]
 8003b4e:	e08d      	b.n	8003c6c <UART_SetConfig+0x1e0>
 8003b50:	2310      	movs	r3, #16
 8003b52:	76fb      	strb	r3, [r7, #27]
 8003b54:	e08a      	b.n	8003c6c <UART_SetConfig+0x1e0>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a85      	ldr	r2, [pc, #532]	; (8003d70 <UART_SetConfig+0x2e4>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d132      	bne.n	8003bc6 <UART_SetConfig+0x13a>
 8003b60:	4b82      	ldr	r3, [pc, #520]	; (8003d6c <UART_SetConfig+0x2e0>)
 8003b62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b66:	f003 030c 	and.w	r3, r3, #12
 8003b6a:	2b0c      	cmp	r3, #12
 8003b6c:	d828      	bhi.n	8003bc0 <UART_SetConfig+0x134>
 8003b6e:	a201      	add	r2, pc, #4	; (adr r2, 8003b74 <UART_SetConfig+0xe8>)
 8003b70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b74:	08003ba9 	.word	0x08003ba9
 8003b78:	08003bc1 	.word	0x08003bc1
 8003b7c:	08003bc1 	.word	0x08003bc1
 8003b80:	08003bc1 	.word	0x08003bc1
 8003b84:	08003bb5 	.word	0x08003bb5
 8003b88:	08003bc1 	.word	0x08003bc1
 8003b8c:	08003bc1 	.word	0x08003bc1
 8003b90:	08003bc1 	.word	0x08003bc1
 8003b94:	08003baf 	.word	0x08003baf
 8003b98:	08003bc1 	.word	0x08003bc1
 8003b9c:	08003bc1 	.word	0x08003bc1
 8003ba0:	08003bc1 	.word	0x08003bc1
 8003ba4:	08003bbb 	.word	0x08003bbb
 8003ba8:	2300      	movs	r3, #0
 8003baa:	76fb      	strb	r3, [r7, #27]
 8003bac:	e05e      	b.n	8003c6c <UART_SetConfig+0x1e0>
 8003bae:	2302      	movs	r3, #2
 8003bb0:	76fb      	strb	r3, [r7, #27]
 8003bb2:	e05b      	b.n	8003c6c <UART_SetConfig+0x1e0>
 8003bb4:	2304      	movs	r3, #4
 8003bb6:	76fb      	strb	r3, [r7, #27]
 8003bb8:	e058      	b.n	8003c6c <UART_SetConfig+0x1e0>
 8003bba:	2308      	movs	r3, #8
 8003bbc:	76fb      	strb	r3, [r7, #27]
 8003bbe:	e055      	b.n	8003c6c <UART_SetConfig+0x1e0>
 8003bc0:	2310      	movs	r3, #16
 8003bc2:	76fb      	strb	r3, [r7, #27]
 8003bc4:	e052      	b.n	8003c6c <UART_SetConfig+0x1e0>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a6a      	ldr	r2, [pc, #424]	; (8003d74 <UART_SetConfig+0x2e8>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d120      	bne.n	8003c12 <UART_SetConfig+0x186>
 8003bd0:	4b66      	ldr	r3, [pc, #408]	; (8003d6c <UART_SetConfig+0x2e0>)
 8003bd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bd6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003bda:	2b30      	cmp	r3, #48	; 0x30
 8003bdc:	d013      	beq.n	8003c06 <UART_SetConfig+0x17a>
 8003bde:	2b30      	cmp	r3, #48	; 0x30
 8003be0:	d814      	bhi.n	8003c0c <UART_SetConfig+0x180>
 8003be2:	2b20      	cmp	r3, #32
 8003be4:	d009      	beq.n	8003bfa <UART_SetConfig+0x16e>
 8003be6:	2b20      	cmp	r3, #32
 8003be8:	d810      	bhi.n	8003c0c <UART_SetConfig+0x180>
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d002      	beq.n	8003bf4 <UART_SetConfig+0x168>
 8003bee:	2b10      	cmp	r3, #16
 8003bf0:	d006      	beq.n	8003c00 <UART_SetConfig+0x174>
 8003bf2:	e00b      	b.n	8003c0c <UART_SetConfig+0x180>
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	76fb      	strb	r3, [r7, #27]
 8003bf8:	e038      	b.n	8003c6c <UART_SetConfig+0x1e0>
 8003bfa:	2302      	movs	r3, #2
 8003bfc:	76fb      	strb	r3, [r7, #27]
 8003bfe:	e035      	b.n	8003c6c <UART_SetConfig+0x1e0>
 8003c00:	2304      	movs	r3, #4
 8003c02:	76fb      	strb	r3, [r7, #27]
 8003c04:	e032      	b.n	8003c6c <UART_SetConfig+0x1e0>
 8003c06:	2308      	movs	r3, #8
 8003c08:	76fb      	strb	r3, [r7, #27]
 8003c0a:	e02f      	b.n	8003c6c <UART_SetConfig+0x1e0>
 8003c0c:	2310      	movs	r3, #16
 8003c0e:	76fb      	strb	r3, [r7, #27]
 8003c10:	e02c      	b.n	8003c6c <UART_SetConfig+0x1e0>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a53      	ldr	r2, [pc, #332]	; (8003d64 <UART_SetConfig+0x2d8>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d125      	bne.n	8003c68 <UART_SetConfig+0x1dc>
 8003c1c:	4b53      	ldr	r3, [pc, #332]	; (8003d6c <UART_SetConfig+0x2e0>)
 8003c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c22:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003c26:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003c2a:	d017      	beq.n	8003c5c <UART_SetConfig+0x1d0>
 8003c2c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003c30:	d817      	bhi.n	8003c62 <UART_SetConfig+0x1d6>
 8003c32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c36:	d00b      	beq.n	8003c50 <UART_SetConfig+0x1c4>
 8003c38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c3c:	d811      	bhi.n	8003c62 <UART_SetConfig+0x1d6>
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d003      	beq.n	8003c4a <UART_SetConfig+0x1be>
 8003c42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c46:	d006      	beq.n	8003c56 <UART_SetConfig+0x1ca>
 8003c48:	e00b      	b.n	8003c62 <UART_SetConfig+0x1d6>
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	76fb      	strb	r3, [r7, #27]
 8003c4e:	e00d      	b.n	8003c6c <UART_SetConfig+0x1e0>
 8003c50:	2302      	movs	r3, #2
 8003c52:	76fb      	strb	r3, [r7, #27]
 8003c54:	e00a      	b.n	8003c6c <UART_SetConfig+0x1e0>
 8003c56:	2304      	movs	r3, #4
 8003c58:	76fb      	strb	r3, [r7, #27]
 8003c5a:	e007      	b.n	8003c6c <UART_SetConfig+0x1e0>
 8003c5c:	2308      	movs	r3, #8
 8003c5e:	76fb      	strb	r3, [r7, #27]
 8003c60:	e004      	b.n	8003c6c <UART_SetConfig+0x1e0>
 8003c62:	2310      	movs	r3, #16
 8003c64:	76fb      	strb	r3, [r7, #27]
 8003c66:	e001      	b.n	8003c6c <UART_SetConfig+0x1e0>
 8003c68:	2310      	movs	r3, #16
 8003c6a:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a3c      	ldr	r2, [pc, #240]	; (8003d64 <UART_SetConfig+0x2d8>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	f040 8082 	bne.w	8003d7c <UART_SetConfig+0x2f0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003c78:	7efb      	ldrb	r3, [r7, #27]
 8003c7a:	2b08      	cmp	r3, #8
 8003c7c:	d823      	bhi.n	8003cc6 <UART_SetConfig+0x23a>
 8003c7e:	a201      	add	r2, pc, #4	; (adr r2, 8003c84 <UART_SetConfig+0x1f8>)
 8003c80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c84:	08003ca9 	.word	0x08003ca9
 8003c88:	08003cc7 	.word	0x08003cc7
 8003c8c:	08003cb1 	.word	0x08003cb1
 8003c90:	08003cc7 	.word	0x08003cc7
 8003c94:	08003cb7 	.word	0x08003cb7
 8003c98:	08003cc7 	.word	0x08003cc7
 8003c9c:	08003cc7 	.word	0x08003cc7
 8003ca0:	08003cc7 	.word	0x08003cc7
 8003ca4:	08003cbf 	.word	0x08003cbf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ca8:	f7fe fefc 	bl	8002aa4 <HAL_RCC_GetPCLK1Freq>
 8003cac:	6178      	str	r0, [r7, #20]
        break;
 8003cae:	e00f      	b.n	8003cd0 <UART_SetConfig+0x244>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003cb0:	4b31      	ldr	r3, [pc, #196]	; (8003d78 <UART_SetConfig+0x2ec>)
 8003cb2:	617b      	str	r3, [r7, #20]
        break;
 8003cb4:	e00c      	b.n	8003cd0 <UART_SetConfig+0x244>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003cb6:	f7fe fe5d 	bl	8002974 <HAL_RCC_GetSysClockFreq>
 8003cba:	6178      	str	r0, [r7, #20]
        break;
 8003cbc:	e008      	b.n	8003cd0 <UART_SetConfig+0x244>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003cbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003cc2:	617b      	str	r3, [r7, #20]
        break;
 8003cc4:	e004      	b.n	8003cd0 <UART_SetConfig+0x244>
      default:
        pclk = 0U;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	76bb      	strb	r3, [r7, #26]
        break;
 8003cce:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	f000 8100 	beq.w	8003ed8 <UART_SetConfig+0x44c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	685a      	ldr	r2, [r3, #4]
 8003cdc:	4613      	mov	r3, r2
 8003cde:	005b      	lsls	r3, r3, #1
 8003ce0:	4413      	add	r3, r2
 8003ce2:	697a      	ldr	r2, [r7, #20]
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	d305      	bcc.n	8003cf4 <UART_SetConfig+0x268>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003cee:	697a      	ldr	r2, [r7, #20]
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	d902      	bls.n	8003cfa <UART_SetConfig+0x26e>
      {
        ret = HAL_ERROR;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	76bb      	strb	r3, [r7, #26]
 8003cf8:	e0ee      	b.n	8003ed8 <UART_SetConfig+0x44c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f04f 0100 	mov.w	r1, #0
 8003d02:	f04f 0200 	mov.w	r2, #0
 8003d06:	f04f 0300 	mov.w	r3, #0
 8003d0a:	020b      	lsls	r3, r1, #8
 8003d0c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003d10:	0202      	lsls	r2, r0, #8
 8003d12:	6879      	ldr	r1, [r7, #4]
 8003d14:	6849      	ldr	r1, [r1, #4]
 8003d16:	0849      	lsrs	r1, r1, #1
 8003d18:	4608      	mov	r0, r1
 8003d1a:	f04f 0100 	mov.w	r1, #0
 8003d1e:	1814      	adds	r4, r2, r0
 8003d20:	eb43 0501 	adc.w	r5, r3, r1
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	461a      	mov	r2, r3
 8003d2a:	f04f 0300 	mov.w	r3, #0
 8003d2e:	4620      	mov	r0, r4
 8003d30:	4629      	mov	r1, r5
 8003d32:	f7fc fa4b 	bl	80001cc <__aeabi_uldivmod>
 8003d36:	4602      	mov	r2, r0
 8003d38:	460b      	mov	r3, r1
 8003d3a:	4613      	mov	r3, r2
 8003d3c:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d44:	d308      	bcc.n	8003d58 <UART_SetConfig+0x2cc>
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d4c:	d204      	bcs.n	8003d58 <UART_SetConfig+0x2cc>
        {
          huart->Instance->BRR = usartdiv;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	693a      	ldr	r2, [r7, #16]
 8003d54:	60da      	str	r2, [r3, #12]
 8003d56:	e0bf      	b.n	8003ed8 <UART_SetConfig+0x44c>
        }
        else
        {
          ret = HAL_ERROR;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	76bb      	strb	r3, [r7, #26]
 8003d5c:	e0bc      	b.n	8003ed8 <UART_SetConfig+0x44c>
 8003d5e:	bf00      	nop
 8003d60:	efff69f3 	.word	0xefff69f3
 8003d64:	40008000 	.word	0x40008000
 8003d68:	40013800 	.word	0x40013800
 8003d6c:	40021000 	.word	0x40021000
 8003d70:	40004400 	.word	0x40004400
 8003d74:	40004800 	.word	0x40004800
 8003d78:	00f42400 	.word	0x00f42400
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	69db      	ldr	r3, [r3, #28]
 8003d80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d84:	d15c      	bne.n	8003e40 <UART_SetConfig+0x3b4>
  {
    switch (clocksource)
 8003d86:	7efb      	ldrb	r3, [r7, #27]
 8003d88:	2b08      	cmp	r3, #8
 8003d8a:	d828      	bhi.n	8003dde <UART_SetConfig+0x352>
 8003d8c:	a201      	add	r2, pc, #4	; (adr r2, 8003d94 <UART_SetConfig+0x308>)
 8003d8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d92:	bf00      	nop
 8003d94:	08003db9 	.word	0x08003db9
 8003d98:	08003dc1 	.word	0x08003dc1
 8003d9c:	08003dc9 	.word	0x08003dc9
 8003da0:	08003ddf 	.word	0x08003ddf
 8003da4:	08003dcf 	.word	0x08003dcf
 8003da8:	08003ddf 	.word	0x08003ddf
 8003dac:	08003ddf 	.word	0x08003ddf
 8003db0:	08003ddf 	.word	0x08003ddf
 8003db4:	08003dd7 	.word	0x08003dd7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003db8:	f7fe fe74 	bl	8002aa4 <HAL_RCC_GetPCLK1Freq>
 8003dbc:	6178      	str	r0, [r7, #20]
        break;
 8003dbe:	e013      	b.n	8003de8 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003dc0:	f7fe fe86 	bl	8002ad0 <HAL_RCC_GetPCLK2Freq>
 8003dc4:	6178      	str	r0, [r7, #20]
        break;
 8003dc6:	e00f      	b.n	8003de8 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003dc8:	4b49      	ldr	r3, [pc, #292]	; (8003ef0 <UART_SetConfig+0x464>)
 8003dca:	617b      	str	r3, [r7, #20]
        break;
 8003dcc:	e00c      	b.n	8003de8 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003dce:	f7fe fdd1 	bl	8002974 <HAL_RCC_GetSysClockFreq>
 8003dd2:	6178      	str	r0, [r7, #20]
        break;
 8003dd4:	e008      	b.n	8003de8 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003dd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003dda:	617b      	str	r3, [r7, #20]
        break;
 8003ddc:	e004      	b.n	8003de8 <UART_SetConfig+0x35c>
      default:
        pclk = 0U;
 8003dde:	2300      	movs	r3, #0
 8003de0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	76bb      	strb	r3, [r7, #26]
        break;
 8003de6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003de8:	697b      	ldr	r3, [r7, #20]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d074      	beq.n	8003ed8 <UART_SetConfig+0x44c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	005a      	lsls	r2, r3, #1
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	085b      	lsrs	r3, r3, #1
 8003df8:	441a      	add	r2, r3
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e02:	b29b      	uxth	r3, r3
 8003e04:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	2b0f      	cmp	r3, #15
 8003e0a:	d916      	bls.n	8003e3a <UART_SetConfig+0x3ae>
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e12:	d212      	bcs.n	8003e3a <UART_SetConfig+0x3ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	b29b      	uxth	r3, r3
 8003e18:	f023 030f 	bic.w	r3, r3, #15
 8003e1c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	085b      	lsrs	r3, r3, #1
 8003e22:	b29b      	uxth	r3, r3
 8003e24:	f003 0307 	and.w	r3, r3, #7
 8003e28:	b29a      	uxth	r2, r3
 8003e2a:	89fb      	ldrh	r3, [r7, #14]
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	89fa      	ldrh	r2, [r7, #14]
 8003e36:	60da      	str	r2, [r3, #12]
 8003e38:	e04e      	b.n	8003ed8 <UART_SetConfig+0x44c>
      }
      else
      {
        ret = HAL_ERROR;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	76bb      	strb	r3, [r7, #26]
 8003e3e:	e04b      	b.n	8003ed8 <UART_SetConfig+0x44c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003e40:	7efb      	ldrb	r3, [r7, #27]
 8003e42:	2b08      	cmp	r3, #8
 8003e44:	d827      	bhi.n	8003e96 <UART_SetConfig+0x40a>
 8003e46:	a201      	add	r2, pc, #4	; (adr r2, 8003e4c <UART_SetConfig+0x3c0>)
 8003e48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e4c:	08003e71 	.word	0x08003e71
 8003e50:	08003e79 	.word	0x08003e79
 8003e54:	08003e81 	.word	0x08003e81
 8003e58:	08003e97 	.word	0x08003e97
 8003e5c:	08003e87 	.word	0x08003e87
 8003e60:	08003e97 	.word	0x08003e97
 8003e64:	08003e97 	.word	0x08003e97
 8003e68:	08003e97 	.word	0x08003e97
 8003e6c:	08003e8f 	.word	0x08003e8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e70:	f7fe fe18 	bl	8002aa4 <HAL_RCC_GetPCLK1Freq>
 8003e74:	6178      	str	r0, [r7, #20]
        break;
 8003e76:	e013      	b.n	8003ea0 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e78:	f7fe fe2a 	bl	8002ad0 <HAL_RCC_GetPCLK2Freq>
 8003e7c:	6178      	str	r0, [r7, #20]
        break;
 8003e7e:	e00f      	b.n	8003ea0 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e80:	4b1b      	ldr	r3, [pc, #108]	; (8003ef0 <UART_SetConfig+0x464>)
 8003e82:	617b      	str	r3, [r7, #20]
        break;
 8003e84:	e00c      	b.n	8003ea0 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e86:	f7fe fd75 	bl	8002974 <HAL_RCC_GetSysClockFreq>
 8003e8a:	6178      	str	r0, [r7, #20]
        break;
 8003e8c:	e008      	b.n	8003ea0 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e92:	617b      	str	r3, [r7, #20]
        break;
 8003e94:	e004      	b.n	8003ea0 <UART_SetConfig+0x414>
      default:
        pclk = 0U;
 8003e96:	2300      	movs	r3, #0
 8003e98:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	76bb      	strb	r3, [r7, #26]
        break;
 8003e9e:	bf00      	nop
    }

    if (pclk != 0U)
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d018      	beq.n	8003ed8 <UART_SetConfig+0x44c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	085a      	lsrs	r2, r3, #1
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	441a      	add	r2, r3
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eb8:	b29b      	uxth	r3, r3
 8003eba:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ebc:	693b      	ldr	r3, [r7, #16]
 8003ebe:	2b0f      	cmp	r3, #15
 8003ec0:	d908      	bls.n	8003ed4 <UART_SetConfig+0x448>
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ec8:	d204      	bcs.n	8003ed4 <UART_SetConfig+0x448>
      {
        huart->Instance->BRR = usartdiv;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	693a      	ldr	r2, [r7, #16]
 8003ed0:	60da      	str	r2, [r3, #12]
 8003ed2:	e001      	b.n	8003ed8 <UART_SetConfig+0x44c>
      }
      else
      {
        ret = HAL_ERROR;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2200      	movs	r2, #0
 8003edc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003ee4:	7ebb      	ldrb	r3, [r7, #26]
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	3720      	adds	r7, #32
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bdb0      	pop	{r4, r5, r7, pc}
 8003eee:	bf00      	nop
 8003ef0:	00f42400 	.word	0x00f42400

08003ef4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b083      	sub	sp, #12
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f00:	f003 0301 	and.w	r3, r3, #1
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d00a      	beq.n	8003f1e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	430a      	orrs	r2, r1
 8003f1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f22:	f003 0302 	and.w	r3, r3, #2
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d00a      	beq.n	8003f40 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	430a      	orrs	r2, r1
 8003f3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f44:	f003 0304 	and.w	r3, r3, #4
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d00a      	beq.n	8003f62 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	430a      	orrs	r2, r1
 8003f60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f66:	f003 0308 	and.w	r3, r3, #8
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d00a      	beq.n	8003f84 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	430a      	orrs	r2, r1
 8003f82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f88:	f003 0310 	and.w	r3, r3, #16
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d00a      	beq.n	8003fa6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	430a      	orrs	r2, r1
 8003fa4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003faa:	f003 0320 	and.w	r3, r3, #32
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d00a      	beq.n	8003fc8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	430a      	orrs	r2, r1
 8003fc6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d01a      	beq.n	800400a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	430a      	orrs	r2, r1
 8003fe8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ff2:	d10a      	bne.n	800400a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	430a      	orrs	r2, r1
 8004008:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800400e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004012:	2b00      	cmp	r3, #0
 8004014:	d00a      	beq.n	800402c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	430a      	orrs	r2, r1
 800402a:	605a      	str	r2, [r3, #4]
  }
}
 800402c:	bf00      	nop
 800402e:	370c      	adds	r7, #12
 8004030:	46bd      	mov	sp, r7
 8004032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004036:	4770      	bx	lr

08004038 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b086      	sub	sp, #24
 800403c:	af02      	add	r7, sp, #8
 800403e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2200      	movs	r2, #0
 8004044:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004048:	f7fd fa78 	bl	800153c <HAL_GetTick>
 800404c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f003 0308 	and.w	r3, r3, #8
 8004058:	2b08      	cmp	r3, #8
 800405a:	d10e      	bne.n	800407a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800405c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004060:	9300      	str	r3, [sp, #0]
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	2200      	movs	r2, #0
 8004066:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f000 f82d 	bl	80040ca <UART_WaitOnFlagUntilTimeout>
 8004070:	4603      	mov	r3, r0
 8004072:	2b00      	cmp	r3, #0
 8004074:	d001      	beq.n	800407a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004076:	2303      	movs	r3, #3
 8004078:	e023      	b.n	80040c2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f003 0304 	and.w	r3, r3, #4
 8004084:	2b04      	cmp	r3, #4
 8004086:	d10e      	bne.n	80040a6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004088:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800408c:	9300      	str	r3, [sp, #0]
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2200      	movs	r2, #0
 8004092:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	f000 f817 	bl	80040ca <UART_WaitOnFlagUntilTimeout>
 800409c:	4603      	mov	r3, r0
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d001      	beq.n	80040a6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80040a2:	2303      	movs	r3, #3
 80040a4:	e00d      	b.n	80040c2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2220      	movs	r2, #32
 80040aa:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2220      	movs	r2, #32
 80040b0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2200      	movs	r2, #0
 80040b6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2200      	movs	r2, #0
 80040bc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80040c0:	2300      	movs	r3, #0
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	3710      	adds	r7, #16
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}

080040ca <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80040ca:	b580      	push	{r7, lr}
 80040cc:	b084      	sub	sp, #16
 80040ce:	af00      	add	r7, sp, #0
 80040d0:	60f8      	str	r0, [r7, #12]
 80040d2:	60b9      	str	r1, [r7, #8]
 80040d4:	603b      	str	r3, [r7, #0]
 80040d6:	4613      	mov	r3, r2
 80040d8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040da:	e05e      	b.n	800419a <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040dc:	69bb      	ldr	r3, [r7, #24]
 80040de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80040e2:	d05a      	beq.n	800419a <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040e4:	f7fd fa2a 	bl	800153c <HAL_GetTick>
 80040e8:	4602      	mov	r2, r0
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	1ad3      	subs	r3, r2, r3
 80040ee:	69ba      	ldr	r2, [r7, #24]
 80040f0:	429a      	cmp	r2, r3
 80040f2:	d302      	bcc.n	80040fa <UART_WaitOnFlagUntilTimeout+0x30>
 80040f4:	69bb      	ldr	r3, [r7, #24]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d11b      	bne.n	8004132 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	681a      	ldr	r2, [r3, #0]
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004108:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	689a      	ldr	r2, [r3, #8]
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f022 0201 	bic.w	r2, r2, #1
 8004118:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	2220      	movs	r2, #32
 800411e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2220      	movs	r2, #32
 8004124:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	2200      	movs	r2, #0
 800412a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800412e:	2303      	movs	r3, #3
 8004130:	e043      	b.n	80041ba <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f003 0304 	and.w	r3, r3, #4
 800413c:	2b00      	cmp	r3, #0
 800413e:	d02c      	beq.n	800419a <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	69db      	ldr	r3, [r3, #28]
 8004146:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800414a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800414e:	d124      	bne.n	800419a <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004158:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	681a      	ldr	r2, [r3, #0]
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004168:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	689a      	ldr	r2, [r3, #8]
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f022 0201 	bic.w	r2, r2, #1
 8004178:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	2220      	movs	r2, #32
 800417e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2220      	movs	r2, #32
 8004184:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	2220      	movs	r2, #32
 800418a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	2200      	movs	r2, #0
 8004192:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004196:	2303      	movs	r3, #3
 8004198:	e00f      	b.n	80041ba <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	69da      	ldr	r2, [r3, #28]
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	4013      	ands	r3, r2
 80041a4:	68ba      	ldr	r2, [r7, #8]
 80041a6:	429a      	cmp	r2, r3
 80041a8:	bf0c      	ite	eq
 80041aa:	2301      	moveq	r3, #1
 80041ac:	2300      	movne	r3, #0
 80041ae:	b2db      	uxtb	r3, r3
 80041b0:	461a      	mov	r2, r3
 80041b2:	79fb      	ldrb	r3, [r7, #7]
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d091      	beq.n	80040dc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80041b8:	2300      	movs	r3, #0
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	3710      	adds	r7, #16
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}

080041c2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80041c2:	b480      	push	{r7}
 80041c4:	b083      	sub	sp, #12
 80041c6:	af00      	add	r7, sp, #0
 80041c8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	681a      	ldr	r2, [r3, #0]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80041d8:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	689a      	ldr	r2, [r3, #8]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f022 0201 	bic.w	r2, r2, #1
 80041e8:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041ee:	2b01      	cmp	r3, #1
 80041f0:	d107      	bne.n	8004202 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	681a      	ldr	r2, [r3, #0]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f022 0210 	bic.w	r2, r2, #16
 8004200:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2220      	movs	r2, #32
 8004206:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2200      	movs	r2, #0
 800420c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2200      	movs	r2, #0
 8004212:	665a      	str	r2, [r3, #100]	; 0x64
}
 8004214:	bf00      	nop
 8004216:	370c      	adds	r7, #12
 8004218:	46bd      	mov	sp, r7
 800421a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421e:	4770      	bx	lr

08004220 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b084      	sub	sp, #16
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800422c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	2200      	movs	r2, #0
 8004232:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	2200      	movs	r2, #0
 800423a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800423e:	68f8      	ldr	r0, [r7, #12]
 8004240:	f7ff fc0e 	bl	8003a60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004244:	bf00      	nop
 8004246:	3710      	adds	r7, #16
 8004248:	46bd      	mov	sp, r7
 800424a:	bd80      	pop	{r7, pc}

0800424c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b082      	sub	sp, #8
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	681a      	ldr	r2, [r3, #0]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004262:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2220      	movs	r2, #32
 8004268:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2200      	movs	r2, #0
 800426e:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004270:	6878      	ldr	r0, [r7, #4]
 8004272:	f7ff fbeb 	bl	8003a4c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004276:	bf00      	nop
 8004278:	3708      	adds	r7, #8
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}

0800427e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800427e:	b480      	push	{r7}
 8004280:	b083      	sub	sp, #12
 8004282:	af00      	add	r7, sp, #0
 8004284:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004286:	bf00      	nop
 8004288:	370c      	adds	r7, #12
 800428a:	46bd      	mov	sp, r7
 800428c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004290:	4770      	bx	lr
	...

08004294 <__libc_init_array>:
 8004294:	b570      	push	{r4, r5, r6, lr}
 8004296:	4d0d      	ldr	r5, [pc, #52]	; (80042cc <__libc_init_array+0x38>)
 8004298:	4c0d      	ldr	r4, [pc, #52]	; (80042d0 <__libc_init_array+0x3c>)
 800429a:	1b64      	subs	r4, r4, r5
 800429c:	10a4      	asrs	r4, r4, #2
 800429e:	2600      	movs	r6, #0
 80042a0:	42a6      	cmp	r6, r4
 80042a2:	d109      	bne.n	80042b8 <__libc_init_array+0x24>
 80042a4:	4d0b      	ldr	r5, [pc, #44]	; (80042d4 <__libc_init_array+0x40>)
 80042a6:	4c0c      	ldr	r4, [pc, #48]	; (80042d8 <__libc_init_array+0x44>)
 80042a8:	f000 f820 	bl	80042ec <_init>
 80042ac:	1b64      	subs	r4, r4, r5
 80042ae:	10a4      	asrs	r4, r4, #2
 80042b0:	2600      	movs	r6, #0
 80042b2:	42a6      	cmp	r6, r4
 80042b4:	d105      	bne.n	80042c2 <__libc_init_array+0x2e>
 80042b6:	bd70      	pop	{r4, r5, r6, pc}
 80042b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80042bc:	4798      	blx	r3
 80042be:	3601      	adds	r6, #1
 80042c0:	e7ee      	b.n	80042a0 <__libc_init_array+0xc>
 80042c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80042c6:	4798      	blx	r3
 80042c8:	3601      	adds	r6, #1
 80042ca:	e7f2      	b.n	80042b2 <__libc_init_array+0x1e>
 80042cc:	08006c6c 	.word	0x08006c6c
 80042d0:	08006c6c 	.word	0x08006c6c
 80042d4:	08006c6c 	.word	0x08006c6c
 80042d8:	08006c70 	.word	0x08006c70

080042dc <memset>:
 80042dc:	4402      	add	r2, r0
 80042de:	4603      	mov	r3, r0
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d100      	bne.n	80042e6 <memset+0xa>
 80042e4:	4770      	bx	lr
 80042e6:	f803 1b01 	strb.w	r1, [r3], #1
 80042ea:	e7f9      	b.n	80042e0 <memset+0x4>

080042ec <_init>:
 80042ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042ee:	bf00      	nop
 80042f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042f2:	bc08      	pop	{r3}
 80042f4:	469e      	mov	lr, r3
 80042f6:	4770      	bx	lr

080042f8 <_fini>:
 80042f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042fa:	bf00      	nop
 80042fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042fe:	bc08      	pop	{r3}
 8004300:	469e      	mov	lr, r3
 8004302:	4770      	bx	lr
