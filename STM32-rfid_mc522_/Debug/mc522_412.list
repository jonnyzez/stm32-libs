
mc522_412.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b14  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001570  08005ca4  08005ca4  00015ca4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007214  08007214  000200dc  2**0
                  CONTENTS
  4 .ARM          00000008  08007214  08007214  00017214  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800721c  0800721c  000200dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800721c  0800721c  0001721c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007220  08007220  00017220  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000dc  20000000  08007224  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000064c  200000dc  08007300  000200dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000728  08007300  00020728  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015105  00000000  00000000  0002010c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c91  00000000  00000000  00035211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001068  00000000  00000000  00037ea8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f50  00000000  00000000  00038f10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b1d2  00000000  00000000  00039e60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013ea9  00000000  00000000  00055032  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a5258  00000000  00000000  00068edb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010e133  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000047a8  00000000  00000000  0010e188  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000dc 	.word	0x200000dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005c8c 	.word	0x08005c8c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000e0 	.word	0x200000e0
 80001cc:	08005c8c 	.word	0x08005c8c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <tela>:
                      HAL_MAX_DELAY);
    va_end(args);
}

//***********************************************************************************************
void tela(void){
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0


	  sprintf(msg1, "%hs", txBuffer);
 800056c:	4a09      	ldr	r2, [pc, #36]	; (8000594 <tela+0x2c>)
 800056e:	490a      	ldr	r1, [pc, #40]	; (8000598 <tela+0x30>)
 8000570:	480a      	ldr	r0, [pc, #40]	; (800059c <tela+0x34>)
 8000572:	f004 ff5d 	bl	8005430 <siprintf>
	  //sprintf(msg2, "%04hu", d2);
	  //sprintf(msg3, "%04hu", d3);

	  SSD1306_Clear();
 8000576:	f000 ff7a 	bl	800146e <SSD1306_Clear>

	  SSD1306_GotoXY (2, 7);
 800057a:	2107      	movs	r1, #7
 800057c:	2002      	movs	r0, #2
 800057e:	f000 febb 	bl	80012f8 <SSD1306_GotoXY>
	  SSD1306_Puts (msg1, &Font_7x10, 1);
 8000582:	2201      	movs	r2, #1
 8000584:	4906      	ldr	r1, [pc, #24]	; (80005a0 <tela+0x38>)
 8000586:	4805      	ldr	r0, [pc, #20]	; (800059c <tela+0x34>)
 8000588:	f000 ff4c 	bl	8001424 <SSD1306_Puts>

	  SSD1306_UpdateScreen();
 800058c:	f000 fe00 	bl	8001190 <SSD1306_UpdateScreen>


}
 8000590:	bf00      	nop
 8000592:	bd80      	pop	{r7, pc}
 8000594:	20000050 	.word	0x20000050
 8000598:	08005ca4 	.word	0x08005ca4
 800059c:	200005b4 	.word	0x200005b4
 80005a0:	20000000 	.word	0x20000000

080005a4 <char_to_hex>:
	if (rxBuffer[data] < 58) number = number+(rxBuffer[data]-48); else number = number+(rxBuffer[data]-55);
	return number;
}

// char number to string hex (FF) (Only big letters!)
void char_to_hex(uint8_t data) {
 80005a4:	b490      	push	{r4, r7}
 80005a6:	b086      	sub	sp, #24
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	4603      	mov	r3, r0
 80005ac:	71fb      	strb	r3, [r7, #7]
	uint8_t digits[] = {'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'};
 80005ae:	4b17      	ldr	r3, [pc, #92]	; (800060c <char_to_hex+0x68>)
 80005b0:	f107 0408 	add.w	r4, r7, #8
 80005b4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005b6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	if (data < 16) {
 80005ba:	79fb      	ldrb	r3, [r7, #7]
 80005bc:	2b0f      	cmp	r3, #15
 80005be:	d80b      	bhi.n	80005d8 <char_to_hex+0x34>
		retstr[0] = '0';
 80005c0:	4b13      	ldr	r3, [pc, #76]	; (8000610 <char_to_hex+0x6c>)
 80005c2:	2230      	movs	r2, #48	; 0x30
 80005c4:	701a      	strb	r2, [r3, #0]
		retstr[1] = digits[data];
 80005c6:	79fb      	ldrb	r3, [r7, #7]
 80005c8:	f107 0218 	add.w	r2, r7, #24
 80005cc:	4413      	add	r3, r2
 80005ce:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 80005d2:	4b0f      	ldr	r3, [pc, #60]	; (8000610 <char_to_hex+0x6c>)
 80005d4:	705a      	strb	r2, [r3, #1]
	} else {
		retstr[0] = digits[(data & 0xF0)>>4];
		retstr[1] = digits[(data & 0x0F)];
	}
}
 80005d6:	e013      	b.n	8000600 <char_to_hex+0x5c>
		retstr[0] = digits[(data & 0xF0)>>4];
 80005d8:	79fb      	ldrb	r3, [r7, #7]
 80005da:	091b      	lsrs	r3, r3, #4
 80005dc:	b2db      	uxtb	r3, r3
 80005de:	f107 0218 	add.w	r2, r7, #24
 80005e2:	4413      	add	r3, r2
 80005e4:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 80005e8:	4b09      	ldr	r3, [pc, #36]	; (8000610 <char_to_hex+0x6c>)
 80005ea:	701a      	strb	r2, [r3, #0]
		retstr[1] = digits[(data & 0x0F)];
 80005ec:	79fb      	ldrb	r3, [r7, #7]
 80005ee:	f003 030f 	and.w	r3, r3, #15
 80005f2:	f107 0218 	add.w	r2, r7, #24
 80005f6:	4413      	add	r3, r2
 80005f8:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 80005fc:	4b04      	ldr	r3, [pc, #16]	; (8000610 <char_to_hex+0x6c>)
 80005fe:	705a      	strb	r2, [r3, #1]
}
 8000600:	bf00      	nop
 8000602:	3718      	adds	r7, #24
 8000604:	46bd      	mov	sp, r7
 8000606:	bc90      	pop	{r4, r7}
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop
 800060c:	08005ca8 	.word	0x08005ca8
 8000610:	200005c4 	.word	0x200005c4

08000614 <led>:

void led(uint8_t n) {
 8000614:	b580      	push	{r7, lr}
 8000616:	b084      	sub	sp, #16
 8000618:	af00      	add	r7, sp, #0
 800061a:	4603      	mov	r3, r0
 800061c:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i=0; i<n; i++) {
 800061e:	2300      	movs	r3, #0
 8000620:	73fb      	strb	r3, [r7, #15]
 8000622:	e012      	b.n	800064a <led+0x36>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);			          // LED1 ON
 8000624:	2200      	movs	r2, #0
 8000626:	2110      	movs	r1, #16
 8000628:	480c      	ldr	r0, [pc, #48]	; (800065c <led+0x48>)
 800062a:	f001 fcfd 	bl	8002028 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 800062e:	2064      	movs	r0, #100	; 0x64
 8000630:	f001 f9d4 	bl	80019dc <HAL_Delay>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);				          // LED1 OFF
 8000634:	2201      	movs	r2, #1
 8000636:	2110      	movs	r1, #16
 8000638:	4808      	ldr	r0, [pc, #32]	; (800065c <led+0x48>)
 800063a:	f001 fcf5 	bl	8002028 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 800063e:	2064      	movs	r0, #100	; 0x64
 8000640:	f001 f9cc 	bl	80019dc <HAL_Delay>
	for (uint8_t i=0; i<n; i++) {
 8000644:	7bfb      	ldrb	r3, [r7, #15]
 8000646:	3301      	adds	r3, #1
 8000648:	73fb      	strb	r3, [r7, #15]
 800064a:	7bfa      	ldrb	r2, [r7, #15]
 800064c:	79fb      	ldrb	r3, [r7, #7]
 800064e:	429a      	cmp	r2, r3
 8000650:	d3e8      	bcc.n	8000624 <led+0x10>
	}
}
 8000652:	bf00      	nop
 8000654:	bf00      	nop
 8000656:	3710      	adds	r7, #16
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}
 800065c:	48000400 	.word	0x48000400

08000660 <main>:
/* USER CODE END 0 */
//************************************************************************************************
//        main
//************************************************************************************************
int main(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
  HAL_Init();
 8000664:	f001 f945 	bl	80018f2 <HAL_Init>
  SystemClock_Config();
 8000668:	f000 f91c 	bl	80008a4 <SystemClock_Config>
  MX_GPIO_Init();
 800066c:	f000 fa32 	bl	8000ad4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000670:	f000 f982 	bl	8000978 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000674:	f000 f9c0 	bl	80009f8 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000678:	f000 f9fc 	bl	8000a74 <MX_USART1_UART_Init>
  HAL_UART_Receive_IT(&huart1, (uint8_t *)UART1_rxBuffer, 40);
 800067c:	2228      	movs	r2, #40	; 0x28
 800067e:	4977      	ldr	r1, [pc, #476]	; (800085c <main+0x1fc>)
 8000680:	4877      	ldr	r0, [pc, #476]	; (8000860 <main+0x200>)
 8000682:	f003 fecf 	bl	8004424 <HAL_UART_Receive_IT>

  SSD1306_Init();
 8000686:	f000 fcbf 	bl	8001008 <SSD1306_Init>
  SSD1306_GotoXY (0,1);
 800068a:	2101      	movs	r1, #1
 800068c:	2000      	movs	r0, #0
 800068e:	f000 fe33 	bl	80012f8 <SSD1306_GotoXY>
  SSD1306_Puts ("    Teste", &Font_11x18, 1);
 8000692:	2201      	movs	r2, #1
 8000694:	4973      	ldr	r1, [pc, #460]	; (8000864 <main+0x204>)
 8000696:	4874      	ldr	r0, [pc, #464]	; (8000868 <main+0x208>)
 8000698:	f000 fec4 	bl	8001424 <SSD1306_Puts>
  SSD1306_GotoXY (3, 30);
 800069c:	211e      	movs	r1, #30
 800069e:	2003      	movs	r0, #3
 80006a0:	f000 fe2a 	bl	80012f8 <SSD1306_GotoXY>
  SSD1306_Puts (" RFID RC522", &Font_11x18, 1);
 80006a4:	2201      	movs	r2, #1
 80006a6:	496f      	ldr	r1, [pc, #444]	; (8000864 <main+0x204>)
 80006a8:	4870      	ldr	r0, [pc, #448]	; (800086c <main+0x20c>)
 80006aa:	f000 febb 	bl	8001424 <SSD1306_Puts>
  SSD1306_UpdateScreen();
 80006ae:	f000 fd6f 	bl	8001190 <SSD1306_UpdateScreen>
  HAL_Delay (1500);
 80006b2:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80006b6:	f001 f991 	bl	80019dc <HAL_Delay>

	led(1);
 80006ba:	2001      	movs	r0, #1
 80006bc:	f7ff ffaa 	bl	8000614 <led>
	MFRC522_Init();
 80006c0:	f000 fc60 	bl	8000f84 <MFRC522_Init>
	led(1);
 80006c4:	2001      	movs	r0, #1
 80006c6:	f7ff ffa5 	bl	8000614 <led>

	HAL_UART_Transmit(&huart1, text1, 63, 100);
 80006ca:	2364      	movs	r3, #100	; 0x64
 80006cc:	223f      	movs	r2, #63	; 0x3f
 80006ce:	4968      	ldr	r1, [pc, #416]	; (8000870 <main+0x210>)
 80006d0:	4863      	ldr	r0, [pc, #396]	; (8000860 <main+0x200>)
 80006d2:	f003 fe13 	bl	80042fc <HAL_UART_Transmit>

	led(1);
 80006d6:	2001      	movs	r0, #1
 80006d8:	f7ff ff9c 	bl	8000614 <led>
	HAL_UART_Receive_IT(&huart1,(uint8_t*)rxBuffer, 1);
 80006dc:	2201      	movs	r2, #1
 80006de:	4965      	ldr	r1, [pc, #404]	; (8000874 <main+0x214>)
 80006e0:	485f      	ldr	r0, [pc, #380]	; (8000860 <main+0x200>)
 80006e2:	f003 fe9f 	bl	8004424 <HAL_UART_Receive_IT>
//        Loop
//************************************************************************************************
  while (1)
  {

		if (!MFRC522_Request(PICC_REQIDL, str)) {
 80006e6:	4964      	ldr	r1, [pc, #400]	; (8000878 <main+0x218>)
 80006e8:	2026      	movs	r0, #38	; 0x26
 80006ea:	f000 fb1a 	bl	8000d22 <MFRC522_Request>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d1f8      	bne.n	80006e6 <main+0x86>
			if (!MFRC522_Anticoll(str)) {
 80006f4:	4860      	ldr	r0, [pc, #384]	; (8000878 <main+0x218>)
 80006f6:	f000 fc08 	bl	8000f0a <MFRC522_Anticoll>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d1f2      	bne.n	80006e6 <main+0x86>
				j = 0;
 8000700:	4b5e      	ldr	r3, [pc, #376]	; (800087c <main+0x21c>)
 8000702:	2200      	movs	r2, #0
 8000704:	701a      	strb	r2, [r3, #0]
				q = 0;
 8000706:	4b5e      	ldr	r3, [pc, #376]	; (8000880 <main+0x220>)
 8000708:	2200      	movs	r2, #0
 800070a:	701a      	strb	r2, [r3, #0]
				b = 9;
 800070c:	4b5d      	ldr	r3, [pc, #372]	; (8000884 <main+0x224>)
 800070e:	2209      	movs	r2, #9
 8000710:	701a      	strb	r2, [r3, #0]
				en = 1;
 8000712:	4b5d      	ldr	r3, [pc, #372]	; (8000888 <main+0x228>)
 8000714:	2201      	movs	r2, #1
 8000716:	701a      	strb	r2, [r3, #0]

				for (i=0; i<4; i++) if (lastID[i] != str[i]) j = 1;								// Repeat test
 8000718:	4b5c      	ldr	r3, [pc, #368]	; (800088c <main+0x22c>)
 800071a:	2200      	movs	r2, #0
 800071c:	701a      	strb	r2, [r3, #0]
 800071e:	e014      	b.n	800074a <main+0xea>
 8000720:	4b5a      	ldr	r3, [pc, #360]	; (800088c <main+0x22c>)
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	461a      	mov	r2, r3
 8000726:	4b5a      	ldr	r3, [pc, #360]	; (8000890 <main+0x230>)
 8000728:	5c9a      	ldrb	r2, [r3, r2]
 800072a:	4b58      	ldr	r3, [pc, #352]	; (800088c <main+0x22c>)
 800072c:	781b      	ldrb	r3, [r3, #0]
 800072e:	4619      	mov	r1, r3
 8000730:	4b51      	ldr	r3, [pc, #324]	; (8000878 <main+0x218>)
 8000732:	5c5b      	ldrb	r3, [r3, r1]
 8000734:	429a      	cmp	r2, r3
 8000736:	d002      	beq.n	800073e <main+0xde>
 8000738:	4b50      	ldr	r3, [pc, #320]	; (800087c <main+0x21c>)
 800073a:	2201      	movs	r2, #1
 800073c:	701a      	strb	r2, [r3, #0]
 800073e:	4b53      	ldr	r3, [pc, #332]	; (800088c <main+0x22c>)
 8000740:	781b      	ldrb	r3, [r3, #0]
 8000742:	3301      	adds	r3, #1
 8000744:	b2da      	uxtb	r2, r3
 8000746:	4b51      	ldr	r3, [pc, #324]	; (800088c <main+0x22c>)
 8000748:	701a      	strb	r2, [r3, #0]
 800074a:	4b50      	ldr	r3, [pc, #320]	; (800088c <main+0x22c>)
 800074c:	781b      	ldrb	r3, [r3, #0]
 800074e:	2b03      	cmp	r3, #3
 8000750:	d9e6      	bls.n	8000720 <main+0xc0>

				if (j && en) {
 8000752:	4b4a      	ldr	r3, [pc, #296]	; (800087c <main+0x21c>)
 8000754:	781b      	ldrb	r3, [r3, #0]
 8000756:	2b00      	cmp	r3, #0
 8000758:	d07a      	beq.n	8000850 <main+0x1f0>
 800075a:	4b4b      	ldr	r3, [pc, #300]	; (8000888 <main+0x228>)
 800075c:	781b      	ldrb	r3, [r3, #0]
 800075e:	2b00      	cmp	r3, #0
 8000760:	d076      	beq.n	8000850 <main+0x1f0>
					q = 0;
 8000762:	4b47      	ldr	r3, [pc, #284]	; (8000880 <main+0x220>)
 8000764:	2200      	movs	r2, #0
 8000766:	701a      	strb	r2, [r3, #0]
					en = 0;
 8000768:	4b47      	ldr	r3, [pc, #284]	; (8000888 <main+0x228>)
 800076a:	2200      	movs	r2, #0
 800076c:	701a      	strb	r2, [r3, #0]
					for (i=0; i<4; i++) lastID[i] = str[i];
 800076e:	4b47      	ldr	r3, [pc, #284]	; (800088c <main+0x22c>)
 8000770:	2200      	movs	r2, #0
 8000772:	701a      	strb	r2, [r3, #0]
 8000774:	e00f      	b.n	8000796 <main+0x136>
 8000776:	4b45      	ldr	r3, [pc, #276]	; (800088c <main+0x22c>)
 8000778:	781b      	ldrb	r3, [r3, #0]
 800077a:	4619      	mov	r1, r3
 800077c:	4b43      	ldr	r3, [pc, #268]	; (800088c <main+0x22c>)
 800077e:	781b      	ldrb	r3, [r3, #0]
 8000780:	461a      	mov	r2, r3
 8000782:	4b3d      	ldr	r3, [pc, #244]	; (8000878 <main+0x218>)
 8000784:	5c59      	ldrb	r1, [r3, r1]
 8000786:	4b42      	ldr	r3, [pc, #264]	; (8000890 <main+0x230>)
 8000788:	5499      	strb	r1, [r3, r2]
 800078a:	4b40      	ldr	r3, [pc, #256]	; (800088c <main+0x22c>)
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	3301      	adds	r3, #1
 8000790:	b2da      	uxtb	r2, r3
 8000792:	4b3e      	ldr	r3, [pc, #248]	; (800088c <main+0x22c>)
 8000794:	701a      	strb	r2, [r3, #0]
 8000796:	4b3d      	ldr	r3, [pc, #244]	; (800088c <main+0x22c>)
 8000798:	781b      	ldrb	r3, [r3, #0]
 800079a:	2b03      	cmp	r3, #3
 800079c:	d9eb      	bls.n	8000776 <main+0x116>

					for (i=0; i<4; i++) {
 800079e:	4b3b      	ldr	r3, [pc, #236]	; (800088c <main+0x22c>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	701a      	strb	r2, [r3, #0]
 80007a4:	e027      	b.n	80007f6 <main+0x196>
						char_to_hex(str[i]);
 80007a6:	4b39      	ldr	r3, [pc, #228]	; (800088c <main+0x22c>)
 80007a8:	781b      	ldrb	r3, [r3, #0]
 80007aa:	461a      	mov	r2, r3
 80007ac:	4b32      	ldr	r3, [pc, #200]	; (8000878 <main+0x218>)
 80007ae:	5c9b      	ldrb	r3, [r3, r2]
 80007b0:	4618      	mov	r0, r3
 80007b2:	f7ff fef7 	bl	80005a4 <char_to_hex>
						txBuffer[b] = retstr[0];
 80007b6:	4b33      	ldr	r3, [pc, #204]	; (8000884 <main+0x224>)
 80007b8:	781b      	ldrb	r3, [r3, #0]
 80007ba:	461a      	mov	r2, r3
 80007bc:	4b35      	ldr	r3, [pc, #212]	; (8000894 <main+0x234>)
 80007be:	7819      	ldrb	r1, [r3, #0]
 80007c0:	4b35      	ldr	r3, [pc, #212]	; (8000898 <main+0x238>)
 80007c2:	5499      	strb	r1, [r3, r2]
						b++;
 80007c4:	4b2f      	ldr	r3, [pc, #188]	; (8000884 <main+0x224>)
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	3301      	adds	r3, #1
 80007ca:	b2da      	uxtb	r2, r3
 80007cc:	4b2d      	ldr	r3, [pc, #180]	; (8000884 <main+0x224>)
 80007ce:	701a      	strb	r2, [r3, #0]
						txBuffer[b] = retstr[1];
 80007d0:	4b2c      	ldr	r3, [pc, #176]	; (8000884 <main+0x224>)
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	461a      	mov	r2, r3
 80007d6:	4b2f      	ldr	r3, [pc, #188]	; (8000894 <main+0x234>)
 80007d8:	7859      	ldrb	r1, [r3, #1]
 80007da:	4b2f      	ldr	r3, [pc, #188]	; (8000898 <main+0x238>)
 80007dc:	5499      	strb	r1, [r3, r2]
						b++;
 80007de:	4b29      	ldr	r3, [pc, #164]	; (8000884 <main+0x224>)
 80007e0:	781b      	ldrb	r3, [r3, #0]
 80007e2:	3301      	adds	r3, #1
 80007e4:	b2da      	uxtb	r2, r3
 80007e6:	4b27      	ldr	r3, [pc, #156]	; (8000884 <main+0x224>)
 80007e8:	701a      	strb	r2, [r3, #0]
					for (i=0; i<4; i++) {
 80007ea:	4b28      	ldr	r3, [pc, #160]	; (800088c <main+0x22c>)
 80007ec:	781b      	ldrb	r3, [r3, #0]
 80007ee:	3301      	adds	r3, #1
 80007f0:	b2da      	uxtb	r2, r3
 80007f2:	4b26      	ldr	r3, [pc, #152]	; (800088c <main+0x22c>)
 80007f4:	701a      	strb	r2, [r3, #0]
 80007f6:	4b25      	ldr	r3, [pc, #148]	; (800088c <main+0x22c>)
 80007f8:	781b      	ldrb	r3, [r3, #0]
 80007fa:	2b03      	cmp	r3, #3
 80007fc:	d9d3      	bls.n	80007a6 <main+0x146>
						//ToStr(str[i]);
						//HAL_UART_Transmit(&huart1, retstr, 10, 100);
					}
					//HAL_UART_Transmit(&huart1, end, 1, 100);
					HAL_UART_Transmit(&huart1, txBuffer, 18, 100);
 80007fe:	2364      	movs	r3, #100	; 0x64
 8000800:	2212      	movs	r2, #18
 8000802:	4925      	ldr	r1, [pc, #148]	; (8000898 <main+0x238>)
 8000804:	4816      	ldr	r0, [pc, #88]	; (8000860 <main+0x200>)
 8000806:	f003 fd79 	bl	80042fc <HAL_UART_Transmit>


					ok = 1;
 800080a:	4b24      	ldr	r3, [pc, #144]	; (800089c <main+0x23c>)
 800080c:	2201      	movs	r2, #1
 800080e:	701a      	strb	r2, [r3, #0]
					for (i=0; i<8; i++) if (txBuffer[9+i] != memID[i]) ok = 0;
 8000810:	4b1e      	ldr	r3, [pc, #120]	; (800088c <main+0x22c>)
 8000812:	2200      	movs	r2, #0
 8000814:	701a      	strb	r2, [r3, #0]
 8000816:	e014      	b.n	8000842 <main+0x1e2>
 8000818:	4b1c      	ldr	r3, [pc, #112]	; (800088c <main+0x22c>)
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	3309      	adds	r3, #9
 800081e:	4a1e      	ldr	r2, [pc, #120]	; (8000898 <main+0x238>)
 8000820:	5cd2      	ldrb	r2, [r2, r3]
 8000822:	4b1a      	ldr	r3, [pc, #104]	; (800088c <main+0x22c>)
 8000824:	781b      	ldrb	r3, [r3, #0]
 8000826:	4619      	mov	r1, r3
 8000828:	4b1d      	ldr	r3, [pc, #116]	; (80008a0 <main+0x240>)
 800082a:	5c5b      	ldrb	r3, [r3, r1]
 800082c:	429a      	cmp	r2, r3
 800082e:	d002      	beq.n	8000836 <main+0x1d6>
 8000830:	4b1a      	ldr	r3, [pc, #104]	; (800089c <main+0x23c>)
 8000832:	2200      	movs	r2, #0
 8000834:	701a      	strb	r2, [r3, #0]
 8000836:	4b15      	ldr	r3, [pc, #84]	; (800088c <main+0x22c>)
 8000838:	781b      	ldrb	r3, [r3, #0]
 800083a:	3301      	adds	r3, #1
 800083c:	b2da      	uxtb	r2, r3
 800083e:	4b13      	ldr	r3, [pc, #76]	; (800088c <main+0x22c>)
 8000840:	701a      	strb	r2, [r3, #0]
 8000842:	4b12      	ldr	r3, [pc, #72]	; (800088c <main+0x22c>)
 8000844:	781b      	ldrb	r3, [r3, #0]
 8000846:	2b07      	cmp	r3, #7
 8000848:	d9e6      	bls.n	8000818 <main+0x1b8>
					led(1);
 800084a:	2001      	movs	r0, #1
 800084c:	f7ff fee2 	bl	8000614 <led>
				}
                tela();
 8000850:	f7ff fe8a 	bl	8000568 <tela>
				led(1);
 8000854:	2001      	movs	r0, #1
 8000856:	f7ff fedd 	bl	8000614 <led>
		if (!MFRC522_Request(PICC_REQIDL, str)) {
 800085a:	e744      	b.n	80006e6 <main+0x86>
 800085c:	200000f8 	.word	0x200000f8
 8000860:	200005d4 	.word	0x200005d4
 8000864:	20000008 	.word	0x20000008
 8000868:	08005cb8 	.word	0x08005cb8
 800086c:	08005cc4 	.word	0x08005cc4
 8000870:	20000010 	.word	0x20000010
 8000874:	2000065c 	.word	0x2000065c
 8000878:	200006cc 	.word	0x200006cc
 800087c:	2000052b 	.word	0x2000052b
 8000880:	200006dc 	.word	0x200006dc
 8000884:	2000052a 	.word	0x2000052a
 8000888:	200005ce 	.word	0x200005ce
 800088c:	200005cf 	.word	0x200005cf
 8000890:	200005d0 	.word	0x200005d0
 8000894:	200005c4 	.word	0x200005c4
 8000898:	20000050 	.word	0x20000050
 800089c:	20000665 	.word	0x20000665
 80008a0:	20000064 	.word	0x20000064

080008a4 <SystemClock_Config>:




void SystemClock_Config(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b0a4      	sub	sp, #144	; 0x90
 80008a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008aa:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80008ae:	2244      	movs	r2, #68	; 0x44
 80008b0:	2100      	movs	r1, #0
 80008b2:	4618      	mov	r0, r3
 80008b4:	f004 fdb4 	bl	8005420 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008b8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80008bc:	2200      	movs	r2, #0
 80008be:	601a      	str	r2, [r3, #0]
 80008c0:	605a      	str	r2, [r3, #4]
 80008c2:	609a      	str	r2, [r3, #8]
 80008c4:	60da      	str	r2, [r3, #12]
 80008c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008c8:	1d3b      	adds	r3, r7, #4
 80008ca:	2234      	movs	r2, #52	; 0x34
 80008cc:	2100      	movs	r1, #0
 80008ce:	4618      	mov	r0, r3
 80008d0:	f004 fda6 	bl	8005420 <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80008d4:	f44f 7000 	mov.w	r0, #512	; 0x200
 80008d8:	f002 f864 	bl	80029a4 <HAL_PWREx_ControlVoltageScaling>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <SystemClock_Config+0x42>
  {
    Error_Handler();
 80008e2:	f000 f957 	bl	8000b94 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008e6:	2302      	movs	r3, #2
 80008e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008ee:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008f0:	2340      	movs	r3, #64	; 0x40
 80008f2:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008f4:	2302      	movs	r3, #2
 80008f6:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008f8:	2302      	movs	r3, #2
 80008fa:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80008fc:	2301      	movs	r3, #1
 80008fe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000902:	2308      	movs	r3, #8
 8000904:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000908:	2302      	movs	r3, #2
 800090a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800090e:	2302      	movs	r3, #2
 8000910:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000914:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000918:	4618      	mov	r0, r3
 800091a:	f002 f899 	bl	8002a50 <HAL_RCC_OscConfig>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000924:	f000 f936 	bl	8000b94 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000928:	230f      	movs	r3, #15
 800092a:	63bb      	str	r3, [r7, #56]	; 0x38
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800092c:	2303      	movs	r3, #3
 800092e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000930:	2300      	movs	r3, #0
 8000932:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000934:	2300      	movs	r3, #0
 8000936:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000938:	2300      	movs	r3, #0
 800093a:	64bb      	str	r3, [r7, #72]	; 0x48

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800093c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000940:	2103      	movs	r1, #3
 8000942:	4618      	mov	r0, r3
 8000944:	f002 fcea 	bl	800331c <HAL_RCC_ClockConfig>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800094e:	f000 f921 	bl	8000b94 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8000952:	2341      	movs	r3, #65	; 0x41
 8000954:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000956:	2300      	movs	r3, #0
 8000958:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800095a:	2300      	movs	r3, #0
 800095c:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800095e:	1d3b      	adds	r3, r7, #4
 8000960:	4618      	mov	r0, r3
 8000962:	f002 fee1 	bl	8003728 <HAL_RCCEx_PeriphCLKConfig>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 800096c:	f000 f912 	bl	8000b94 <Error_Handler>
  }
}
 8000970:	bf00      	nop
 8000972:	3790      	adds	r7, #144	; 0x90
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}

08000978 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800097c:	4b1b      	ldr	r3, [pc, #108]	; (80009ec <MX_I2C1_Init+0x74>)
 800097e:	4a1c      	ldr	r2, [pc, #112]	; (80009f0 <MX_I2C1_Init+0x78>)
 8000980:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00602173;
 8000982:	4b1a      	ldr	r3, [pc, #104]	; (80009ec <MX_I2C1_Init+0x74>)
 8000984:	4a1b      	ldr	r2, [pc, #108]	; (80009f4 <MX_I2C1_Init+0x7c>)
 8000986:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000988:	4b18      	ldr	r3, [pc, #96]	; (80009ec <MX_I2C1_Init+0x74>)
 800098a:	2200      	movs	r2, #0
 800098c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800098e:	4b17      	ldr	r3, [pc, #92]	; (80009ec <MX_I2C1_Init+0x74>)
 8000990:	2201      	movs	r2, #1
 8000992:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000994:	4b15      	ldr	r3, [pc, #84]	; (80009ec <MX_I2C1_Init+0x74>)
 8000996:	2200      	movs	r2, #0
 8000998:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800099a:	4b14      	ldr	r3, [pc, #80]	; (80009ec <MX_I2C1_Init+0x74>)
 800099c:	2200      	movs	r2, #0
 800099e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80009a0:	4b12      	ldr	r3, [pc, #72]	; (80009ec <MX_I2C1_Init+0x74>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009a6:	4b11      	ldr	r3, [pc, #68]	; (80009ec <MX_I2C1_Init+0x74>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009ac:	4b0f      	ldr	r3, [pc, #60]	; (80009ec <MX_I2C1_Init+0x74>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009b2:	480e      	ldr	r0, [pc, #56]	; (80009ec <MX_I2C1_Init+0x74>)
 80009b4:	f001 fb50 	bl	8002058 <HAL_I2C_Init>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80009be:	f000 f8e9 	bl	8000b94 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009c2:	2100      	movs	r1, #0
 80009c4:	4809      	ldr	r0, [pc, #36]	; (80009ec <MX_I2C1_Init+0x74>)
 80009c6:	f001 ff47 	bl	8002858 <HAL_I2CEx_ConfigAnalogFilter>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80009d0:	f000 f8e0 	bl	8000b94 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80009d4:	2100      	movs	r1, #0
 80009d6:	4805      	ldr	r0, [pc, #20]	; (80009ec <MX_I2C1_Init+0x74>)
 80009d8:	f001 ff89 	bl	80028ee <HAL_I2CEx_ConfigDigitalFilter>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80009e2:	f000 f8d7 	bl	8000b94 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009e6:	bf00      	nop
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	20000568 	.word	0x20000568
 80009f0:	40005400 	.word	0x40005400
 80009f4:	00602173 	.word	0x00602173

080009f8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80009fc:	4b1b      	ldr	r3, [pc, #108]	; (8000a6c <MX_SPI1_Init+0x74>)
 80009fe:	4a1c      	ldr	r2, [pc, #112]	; (8000a70 <MX_SPI1_Init+0x78>)
 8000a00:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a02:	4b1a      	ldr	r3, [pc, #104]	; (8000a6c <MX_SPI1_Init+0x74>)
 8000a04:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a08:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a0a:	4b18      	ldr	r3, [pc, #96]	; (8000a6c <MX_SPI1_Init+0x74>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a10:	4b16      	ldr	r3, [pc, #88]	; (8000a6c <MX_SPI1_Init+0x74>)
 8000a12:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000a16:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a18:	4b14      	ldr	r3, [pc, #80]	; (8000a6c <MX_SPI1_Init+0x74>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a1e:	4b13      	ldr	r3, [pc, #76]	; (8000a6c <MX_SPI1_Init+0x74>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a24:	4b11      	ldr	r3, [pc, #68]	; (8000a6c <MX_SPI1_Init+0x74>)
 8000a26:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a2a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000a2c:	4b0f      	ldr	r3, [pc, #60]	; (8000a6c <MX_SPI1_Init+0x74>)
 8000a2e:	2210      	movs	r2, #16
 8000a30:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a32:	4b0e      	ldr	r3, [pc, #56]	; (8000a6c <MX_SPI1_Init+0x74>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a38:	4b0c      	ldr	r3, [pc, #48]	; (8000a6c <MX_SPI1_Init+0x74>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a3e:	4b0b      	ldr	r3, [pc, #44]	; (8000a6c <MX_SPI1_Init+0x74>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000a44:	4b09      	ldr	r3, [pc, #36]	; (8000a6c <MX_SPI1_Init+0x74>)
 8000a46:	2207      	movs	r2, #7
 8000a48:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a4a:	4b08      	ldr	r3, [pc, #32]	; (8000a6c <MX_SPI1_Init+0x74>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a50:	4b06      	ldr	r3, [pc, #24]	; (8000a6c <MX_SPI1_Init+0x74>)
 8000a52:	2208      	movs	r2, #8
 8000a54:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a56:	4805      	ldr	r0, [pc, #20]	; (8000a6c <MX_SPI1_Init+0x74>)
 8000a58:	f002 ffec 	bl	8003a34 <HAL_SPI_Init>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000a62:	f000 f897 	bl	8000b94 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a66:	bf00      	nop
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	20000668 	.word	0x20000668
 8000a70:	40013000 	.word	0x40013000

08000a74 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a78:	4b14      	ldr	r3, [pc, #80]	; (8000acc <MX_USART1_UART_Init+0x58>)
 8000a7a:	4a15      	ldr	r2, [pc, #84]	; (8000ad0 <MX_USART1_UART_Init+0x5c>)
 8000a7c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000a7e:	4b13      	ldr	r3, [pc, #76]	; (8000acc <MX_USART1_UART_Init+0x58>)
 8000a80:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000a84:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a86:	4b11      	ldr	r3, [pc, #68]	; (8000acc <MX_USART1_UART_Init+0x58>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a8c:	4b0f      	ldr	r3, [pc, #60]	; (8000acc <MX_USART1_UART_Init+0x58>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a92:	4b0e      	ldr	r3, [pc, #56]	; (8000acc <MX_USART1_UART_Init+0x58>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a98:	4b0c      	ldr	r3, [pc, #48]	; (8000acc <MX_USART1_UART_Init+0x58>)
 8000a9a:	220c      	movs	r2, #12
 8000a9c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a9e:	4b0b      	ldr	r3, [pc, #44]	; (8000acc <MX_USART1_UART_Init+0x58>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000aa4:	4b09      	ldr	r3, [pc, #36]	; (8000acc <MX_USART1_UART_Init+0x58>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000aaa:	4b08      	ldr	r3, [pc, #32]	; (8000acc <MX_USART1_UART_Init+0x58>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ab0:	4b06      	ldr	r3, [pc, #24]	; (8000acc <MX_USART1_UART_Init+0x58>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ab6:	4805      	ldr	r0, [pc, #20]	; (8000acc <MX_USART1_UART_Init+0x58>)
 8000ab8:	f003 fbd2 	bl	8004260 <HAL_UART_Init>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000ac2:	f000 f867 	bl	8000b94 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ac6:	bf00      	nop
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	200005d4 	.word	0x200005d4
 8000ad0:	40013800 	.word	0x40013800

08000ad4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b088      	sub	sp, #32
 8000ad8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ada:	f107 030c 	add.w	r3, r7, #12
 8000ade:	2200      	movs	r2, #0
 8000ae0:	601a      	str	r2, [r3, #0]
 8000ae2:	605a      	str	r2, [r3, #4]
 8000ae4:	609a      	str	r2, [r3, #8]
 8000ae6:	60da      	str	r2, [r3, #12]
 8000ae8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aea:	4b28      	ldr	r3, [pc, #160]	; (8000b8c <MX_GPIO_Init+0xb8>)
 8000aec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aee:	4a27      	ldr	r2, [pc, #156]	; (8000b8c <MX_GPIO_Init+0xb8>)
 8000af0:	f043 0301 	orr.w	r3, r3, #1
 8000af4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000af6:	4b25      	ldr	r3, [pc, #148]	; (8000b8c <MX_GPIO_Init+0xb8>)
 8000af8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000afa:	f003 0301 	and.w	r3, r3, #1
 8000afe:	60bb      	str	r3, [r7, #8]
 8000b00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b02:	4b22      	ldr	r3, [pc, #136]	; (8000b8c <MX_GPIO_Init+0xb8>)
 8000b04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b06:	4a21      	ldr	r2, [pc, #132]	; (8000b8c <MX_GPIO_Init+0xb8>)
 8000b08:	f043 0302 	orr.w	r3, r3, #2
 8000b0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b0e:	4b1f      	ldr	r3, [pc, #124]	; (8000b8c <MX_GPIO_Init+0xb8>)
 8000b10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b12:	f003 0302 	and.w	r3, r3, #2
 8000b16:	607b      	str	r3, [r7, #4]
 8000b18:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	2104      	movs	r1, #4
 8000b1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b22:	f001 fa81 	bl	8002028 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 8000b26:	2200      	movs	r2, #0
 8000b28:	2118      	movs	r1, #24
 8000b2a:	4819      	ldr	r0, [pc, #100]	; (8000b90 <MX_GPIO_Init+0xbc>)
 8000b2c:	f001 fa7c 	bl	8002028 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000b30:	2304      	movs	r3, #4
 8000b32:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b34:	2301      	movs	r3, #1
 8000b36:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b40:	f107 030c 	add.w	r3, r7, #12
 8000b44:	4619      	mov	r1, r3
 8000b46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b4a:	f001 f8fb 	bl	8001d44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b4e:	23c0      	movs	r3, #192	; 0xc0
 8000b50:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b52:	2300      	movs	r3, #0
 8000b54:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b56:	2301      	movs	r3, #1
 8000b58:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b5a:	f107 030c 	add.w	r3, r7, #12
 8000b5e:	4619      	mov	r1, r3
 8000b60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b64:	f001 f8ee 	bl	8001d44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8000b68:	2318      	movs	r3, #24
 8000b6a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b70:	2300      	movs	r3, #0
 8000b72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b74:	2300      	movs	r3, #0
 8000b76:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b78:	f107 030c 	add.w	r3, r7, #12
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	4804      	ldr	r0, [pc, #16]	; (8000b90 <MX_GPIO_Init+0xbc>)
 8000b80:	f001 f8e0 	bl	8001d44 <HAL_GPIO_Init>

}
 8000b84:	bf00      	nop
 8000b86:	3720      	adds	r7, #32
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	40021000 	.word	0x40021000
 8000b90:	48000400 	.word	0x48000400

08000b94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b98:	b672      	cpsid	i
}
 8000b9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b9c:	e7fe      	b.n	8000b9c <Error_Handler+0x8>
	...

08000ba0 <SPI1SendByte>:
extern void MFRC522_Reset(void);
extern void MFRC522_AntennaOn(void);
extern void MFRC522_AntennaOff(void);
extern void MFRC522_Halt(void);

uint8_t SPI1SendByte(uint8_t data) {
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b086      	sub	sp, #24
 8000ba4:	af02      	add	r7, sp, #8
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	71fb      	strb	r3, [r7, #7]
	unsigned char writeCommand[1];
	unsigned char readValue[1];
	
	writeCommand[0] = data;
 8000baa:	79fb      	ldrb	r3, [r7, #7]
 8000bac:	733b      	strb	r3, [r7, #12]
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&writeCommand, (uint8_t*)&readValue, 1, 10);
 8000bae:	f107 0208 	add.w	r2, r7, #8
 8000bb2:	f107 010c 	add.w	r1, r7, #12
 8000bb6:	230a      	movs	r3, #10
 8000bb8:	9300      	str	r3, [sp, #0]
 8000bba:	2301      	movs	r3, #1
 8000bbc:	4803      	ldr	r0, [pc, #12]	; (8000bcc <SPI1SendByte+0x2c>)
 8000bbe:	f002 ffdc 	bl	8003b7a <HAL_SPI_TransmitReceive>
	return readValue[0];
 8000bc2:	7a3b      	ldrb	r3, [r7, #8]
	//SPI1->DR = data;															// вывод в SPI1
	//while (!(SPI1->SR & SPI_SR_RXNE));     				// ждем окончания обмена (STM32F103)
	//for (uint8_t i=0; i<50; i++) {};
	//data = SPI1->DR;															// читаем принятые данные
	//return data;
}
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	3710      	adds	r7, #16
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	20000668 	.word	0x20000668

08000bd0 <SPI1_WriteReg>:

void SPI1_WriteReg(uint8_t address, uint8_t value) {
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	460a      	mov	r2, r1
 8000bda:	71fb      	strb	r3, [r7, #7]
 8000bdc:	4613      	mov	r3, r2
 8000bde:	71bb      	strb	r3, [r7, #6]
	cs_reset();
 8000be0:	2200      	movs	r2, #0
 8000be2:	2104      	movs	r1, #4
 8000be4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000be8:	f001 fa1e 	bl	8002028 <HAL_GPIO_WritePin>
	SPI1SendByte(address);
 8000bec:	79fb      	ldrb	r3, [r7, #7]
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f7ff ffd6 	bl	8000ba0 <SPI1SendByte>
	SPI1SendByte(value);
 8000bf4:	79bb      	ldrb	r3, [r7, #6]
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f7ff ffd2 	bl	8000ba0 <SPI1SendByte>
	cs_set();
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	2104      	movs	r1, #4
 8000c00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c04:	f001 fa10 	bl	8002028 <HAL_GPIO_WritePin>
}
 8000c08:	bf00      	nop
 8000c0a:	3708      	adds	r7, #8
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}

08000c10 <SPI1_ReadReg>:

uint8_t SPI1_ReadReg(uint8_t address) {
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b084      	sub	sp, #16
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	4603      	mov	r3, r0
 8000c18:	71fb      	strb	r3, [r7, #7]
	uint8_t	val;

	cs_reset();
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	2104      	movs	r1, #4
 8000c1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c22:	f001 fa01 	bl	8002028 <HAL_GPIO_WritePin>
	SPI1SendByte(address);
 8000c26:	79fb      	ldrb	r3, [r7, #7]
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f7ff ffb9 	bl	8000ba0 <SPI1SendByte>
	val = SPI1SendByte(0x00);
 8000c2e:	2000      	movs	r0, #0
 8000c30:	f7ff ffb6 	bl	8000ba0 <SPI1SendByte>
 8000c34:	4603      	mov	r3, r0
 8000c36:	73fb      	strb	r3, [r7, #15]
	cs_set();
 8000c38:	2201      	movs	r2, #1
 8000c3a:	2104      	movs	r1, #4
 8000c3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c40:	f001 f9f2 	bl	8002028 <HAL_GPIO_WritePin>
	return val;
 8000c44:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	3710      	adds	r7, #16
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}

08000c4e <MFRC522_WriteRegister>:

void MFRC522_WriteRegister(uint8_t addr, uint8_t val) {
 8000c4e:	b580      	push	{r7, lr}
 8000c50:	b082      	sub	sp, #8
 8000c52:	af00      	add	r7, sp, #0
 8000c54:	4603      	mov	r3, r0
 8000c56:	460a      	mov	r2, r1
 8000c58:	71fb      	strb	r3, [r7, #7]
 8000c5a:	4613      	mov	r3, r2
 8000c5c:	71bb      	strb	r3, [r7, #6]
	addr = (addr << 1) & 0x7E;															// Address format: 0XXXXXX0
 8000c5e:	79fb      	ldrb	r3, [r7, #7]
 8000c60:	005b      	lsls	r3, r3, #1
 8000c62:	b2db      	uxtb	r3, r3
 8000c64:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8000c68:	71fb      	strb	r3, [r7, #7]
  SPI1_WriteReg(addr, val);
 8000c6a:	79ba      	ldrb	r2, [r7, #6]
 8000c6c:	79fb      	ldrb	r3, [r7, #7]
 8000c6e:	4611      	mov	r1, r2
 8000c70:	4618      	mov	r0, r3
 8000c72:	f7ff ffad 	bl	8000bd0 <SPI1_WriteReg>
}
 8000c76:	bf00      	nop
 8000c78:	3708      	adds	r7, #8
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}

08000c7e <MFRC522_ReadRegister>:

uint8_t MFRC522_ReadRegister(uint8_t addr) {
 8000c7e:	b580      	push	{r7, lr}
 8000c80:	b084      	sub	sp, #16
 8000c82:	af00      	add	r7, sp, #0
 8000c84:	4603      	mov	r3, r0
 8000c86:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	addr = ((addr << 1) & 0x7E) | 0x80;
 8000c88:	79fb      	ldrb	r3, [r7, #7]
 8000c8a:	005b      	lsls	r3, r3, #1
 8000c8c:	b25b      	sxtb	r3, r3
 8000c8e:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8000c92:	b25b      	sxtb	r3, r3
 8000c94:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000c98:	b25b      	sxtb	r3, r3
 8000c9a:	71fb      	strb	r3, [r7, #7]
	val = SPI1_ReadReg(addr);
 8000c9c:	79fb      	ldrb	r3, [r7, #7]
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f7ff ffb6 	bl	8000c10 <SPI1_ReadReg>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	73fb      	strb	r3, [r7, #15]
	return val;	
 8000ca8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	3710      	adds	r7, #16
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}

08000cb2 <MFRC522_SetBitMask>:
		if (CardID[i] != CompareID[i]) return MI_ERR;
	}
	return MI_OK;
}

void MFRC522_SetBitMask(uint8_t reg, uint8_t mask) {
 8000cb2:	b580      	push	{r7, lr}
 8000cb4:	b082      	sub	sp, #8
 8000cb6:	af00      	add	r7, sp, #0
 8000cb8:	4603      	mov	r3, r0
 8000cba:	460a      	mov	r2, r1
 8000cbc:	71fb      	strb	r3, [r7, #7]
 8000cbe:	4613      	mov	r3, r2
 8000cc0:	71bb      	strb	r3, [r7, #6]
	MFRC522_WriteRegister(reg, MFRC522_ReadRegister(reg) | mask);
 8000cc2:	79fb      	ldrb	r3, [r7, #7]
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f7ff ffda 	bl	8000c7e <MFRC522_ReadRegister>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	461a      	mov	r2, r3
 8000cce:	79bb      	ldrb	r3, [r7, #6]
 8000cd0:	4313      	orrs	r3, r2
 8000cd2:	b2da      	uxtb	r2, r3
 8000cd4:	79fb      	ldrb	r3, [r7, #7]
 8000cd6:	4611      	mov	r1, r2
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f7ff ffb8 	bl	8000c4e <MFRC522_WriteRegister>
}
 8000cde:	bf00      	nop
 8000ce0:	3708      	adds	r7, #8
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}

08000ce6 <MFRC522_ClearBitMask>:

void MFRC522_ClearBitMask(uint8_t reg, uint8_t mask){
 8000ce6:	b580      	push	{r7, lr}
 8000ce8:	b082      	sub	sp, #8
 8000cea:	af00      	add	r7, sp, #0
 8000cec:	4603      	mov	r3, r0
 8000cee:	460a      	mov	r2, r1
 8000cf0:	71fb      	strb	r3, [r7, #7]
 8000cf2:	4613      	mov	r3, r2
 8000cf4:	71bb      	strb	r3, [r7, #6]
	MFRC522_WriteRegister(reg, MFRC522_ReadRegister(reg) & (~mask));
 8000cf6:	79fb      	ldrb	r3, [r7, #7]
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f7ff ffc0 	bl	8000c7e <MFRC522_ReadRegister>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	b25a      	sxtb	r2, r3
 8000d02:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000d06:	43db      	mvns	r3, r3
 8000d08:	b25b      	sxtb	r3, r3
 8000d0a:	4013      	ands	r3, r2
 8000d0c:	b25b      	sxtb	r3, r3
 8000d0e:	b2da      	uxtb	r2, r3
 8000d10:	79fb      	ldrb	r3, [r7, #7]
 8000d12:	4611      	mov	r1, r2
 8000d14:	4618      	mov	r0, r3
 8000d16:	f7ff ff9a 	bl	8000c4e <MFRC522_WriteRegister>
}
 8000d1a:	bf00      	nop
 8000d1c:	3708      	adds	r7, #8
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}

08000d22 <MFRC522_Request>:

uint8_t MFRC522_Request(uint8_t reqMode, uint8_t* TagType) {
 8000d22:	b580      	push	{r7, lr}
 8000d24:	b086      	sub	sp, #24
 8000d26:	af02      	add	r7, sp, #8
 8000d28:	4603      	mov	r3, r0
 8000d2a:	6039      	str	r1, [r7, #0]
 8000d2c:	71fb      	strb	r3, [r7, #7]
	uint8_t status;  
	uint16_t backBits;																			// The received data bits

	MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x07);		// TxLastBists = BitFramingReg[2..0]
 8000d2e:	2107      	movs	r1, #7
 8000d30:	200d      	movs	r0, #13
 8000d32:	f7ff ff8c 	bl	8000c4e <MFRC522_WriteRegister>
	TagType[0] = reqMode;
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	79fa      	ldrb	r2, [r7, #7]
 8000d3a:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 8000d3c:	f107 030c 	add.w	r3, r7, #12
 8000d40:	9300      	str	r3, [sp, #0]
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	2201      	movs	r2, #1
 8000d46:	6839      	ldr	r1, [r7, #0]
 8000d48:	200c      	movs	r0, #12
 8000d4a:	f000 f80f 	bl	8000d6c <MFRC522_ToCard>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	73fb      	strb	r3, [r7, #15]
	if ((status != MI_OK) || (backBits != 0x10)) status = MI_ERR;
 8000d52:	7bfb      	ldrb	r3, [r7, #15]
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d102      	bne.n	8000d5e <MFRC522_Request+0x3c>
 8000d58:	89bb      	ldrh	r3, [r7, #12]
 8000d5a:	2b10      	cmp	r3, #16
 8000d5c:	d001      	beq.n	8000d62 <MFRC522_Request+0x40>
 8000d5e:	2302      	movs	r3, #2
 8000d60:	73fb      	strb	r3, [r7, #15]
	return status;
 8000d62:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d64:	4618      	mov	r0, r3
 8000d66:	3710      	adds	r7, #16
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}

08000d6c <MFRC522_ToCard>:

uint8_t MFRC522_ToCard(uint8_t command, uint8_t* sendData, uint8_t sendLen, uint8_t* backData, uint16_t* backLen) {
 8000d6c:	b590      	push	{r4, r7, lr}
 8000d6e:	b087      	sub	sp, #28
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	60b9      	str	r1, [r7, #8]
 8000d74:	607b      	str	r3, [r7, #4]
 8000d76:	4603      	mov	r3, r0
 8000d78:	73fb      	strb	r3, [r7, #15]
 8000d7a:	4613      	mov	r3, r2
 8000d7c:	73bb      	strb	r3, [r7, #14]
	uint8_t status = MI_ERR;
 8000d7e:	2302      	movs	r3, #2
 8000d80:	75fb      	strb	r3, [r7, #23]
	uint8_t irqEn = 0x00;
 8000d82:	2300      	movs	r3, #0
 8000d84:	75bb      	strb	r3, [r7, #22]
	uint8_t waitIRq = 0x00;
 8000d86:	2300      	movs	r3, #0
 8000d88:	757b      	strb	r3, [r7, #21]
	uint8_t lastBits;
	uint8_t n;
	uint16_t i;

	switch (command) {
 8000d8a:	7bfb      	ldrb	r3, [r7, #15]
 8000d8c:	2b0c      	cmp	r3, #12
 8000d8e:	d006      	beq.n	8000d9e <MFRC522_ToCard+0x32>
 8000d90:	2b0e      	cmp	r3, #14
 8000d92:	d109      	bne.n	8000da8 <MFRC522_ToCard+0x3c>
		case PCD_AUTHENT: {
			irqEn = 0x12;
 8000d94:	2312      	movs	r3, #18
 8000d96:	75bb      	strb	r3, [r7, #22]
			waitIRq = 0x10;
 8000d98:	2310      	movs	r3, #16
 8000d9a:	757b      	strb	r3, [r7, #21]
			break;
 8000d9c:	e005      	b.n	8000daa <MFRC522_ToCard+0x3e>
		}
		case PCD_TRANSCEIVE: {
			irqEn = 0x77;
 8000d9e:	2377      	movs	r3, #119	; 0x77
 8000da0:	75bb      	strb	r3, [r7, #22]
			waitIRq = 0x30;
 8000da2:	2330      	movs	r3, #48	; 0x30
 8000da4:	757b      	strb	r3, [r7, #21]
			break;
 8000da6:	e000      	b.n	8000daa <MFRC522_ToCard+0x3e>
		}
		default:
		break;
 8000da8:	bf00      	nop
	}

	MFRC522_WriteRegister(MFRC522_REG_COMM_IE_N, irqEn | 0x80);
 8000daa:	7dbb      	ldrb	r3, [r7, #22]
 8000dac:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000db0:	b2db      	uxtb	r3, r3
 8000db2:	4619      	mov	r1, r3
 8000db4:	2002      	movs	r0, #2
 8000db6:	f7ff ff4a 	bl	8000c4e <MFRC522_WriteRegister>
	MFRC522_ClearBitMask(MFRC522_REG_COMM_IRQ, 0x80);
 8000dba:	2180      	movs	r1, #128	; 0x80
 8000dbc:	2004      	movs	r0, #4
 8000dbe:	f7ff ff92 	bl	8000ce6 <MFRC522_ClearBitMask>
	MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);
 8000dc2:	2180      	movs	r1, #128	; 0x80
 8000dc4:	200a      	movs	r0, #10
 8000dc6:	f7ff ff74 	bl	8000cb2 <MFRC522_SetBitMask>
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_IDLE);
 8000dca:	2100      	movs	r1, #0
 8000dcc:	2001      	movs	r0, #1
 8000dce:	f7ff ff3e 	bl	8000c4e <MFRC522_WriteRegister>

	// Writing data to the FIFO
	for (i = 0; i < sendLen; i++) MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, sendData[i]);
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	827b      	strh	r3, [r7, #18]
 8000dd6:	e00a      	b.n	8000dee <MFRC522_ToCard+0x82>
 8000dd8:	8a7b      	ldrh	r3, [r7, #18]
 8000dda:	68ba      	ldr	r2, [r7, #8]
 8000ddc:	4413      	add	r3, r2
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	4619      	mov	r1, r3
 8000de2:	2009      	movs	r0, #9
 8000de4:	f7ff ff33 	bl	8000c4e <MFRC522_WriteRegister>
 8000de8:	8a7b      	ldrh	r3, [r7, #18]
 8000dea:	3301      	adds	r3, #1
 8000dec:	827b      	strh	r3, [r7, #18]
 8000dee:	7bbb      	ldrb	r3, [r7, #14]
 8000df0:	b29b      	uxth	r3, r3
 8000df2:	8a7a      	ldrh	r2, [r7, #18]
 8000df4:	429a      	cmp	r2, r3
 8000df6:	d3ef      	bcc.n	8000dd8 <MFRC522_ToCard+0x6c>

	// Execute the command
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, command);
 8000df8:	7bfb      	ldrb	r3, [r7, #15]
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	2001      	movs	r0, #1
 8000dfe:	f7ff ff26 	bl	8000c4e <MFRC522_WriteRegister>
	if (command == PCD_TRANSCEIVE) MFRC522_SetBitMask(MFRC522_REG_BIT_FRAMING, 0x80);		// StartSend=1,transmission of data starts 
 8000e02:	7bfb      	ldrb	r3, [r7, #15]
 8000e04:	2b0c      	cmp	r3, #12
 8000e06:	d103      	bne.n	8000e10 <MFRC522_ToCard+0xa4>
 8000e08:	2180      	movs	r1, #128	; 0x80
 8000e0a:	200d      	movs	r0, #13
 8000e0c:	f7ff ff51 	bl	8000cb2 <MFRC522_SetBitMask>

	// Waiting to receive data to complete
	i = 2000;	// i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms
 8000e10:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000e14:	827b      	strh	r3, [r7, #18]
	do {
		// CommIrqReg[7..0]
		// Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
		n = MFRC522_ReadRegister(MFRC522_REG_COMM_IRQ);
 8000e16:	2004      	movs	r0, #4
 8000e18:	f7ff ff31 	bl	8000c7e <MFRC522_ReadRegister>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	753b      	strb	r3, [r7, #20]
		i--;
 8000e20:	8a7b      	ldrh	r3, [r7, #18]
 8000e22:	3b01      	subs	r3, #1
 8000e24:	827b      	strh	r3, [r7, #18]
	} while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 8000e26:	8a7b      	ldrh	r3, [r7, #18]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d00a      	beq.n	8000e42 <MFRC522_ToCard+0xd6>
 8000e2c:	7d3b      	ldrb	r3, [r7, #20]
 8000e2e:	f003 0301 	and.w	r3, r3, #1
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d105      	bne.n	8000e42 <MFRC522_ToCard+0xd6>
 8000e36:	7d3a      	ldrb	r2, [r7, #20]
 8000e38:	7d7b      	ldrb	r3, [r7, #21]
 8000e3a:	4013      	ands	r3, r2
 8000e3c:	b2db      	uxtb	r3, r3
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d0e9      	beq.n	8000e16 <MFRC522_ToCard+0xaa>

	MFRC522_ClearBitMask(MFRC522_REG_BIT_FRAMING, 0x80);																// StartSend=0
 8000e42:	2180      	movs	r1, #128	; 0x80
 8000e44:	200d      	movs	r0, #13
 8000e46:	f7ff ff4e 	bl	8000ce6 <MFRC522_ClearBitMask>

	if (i != 0)  {
 8000e4a:	8a7b      	ldrh	r3, [r7, #18]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d057      	beq.n	8000f00 <MFRC522_ToCard+0x194>
		if (!(MFRC522_ReadRegister(MFRC522_REG_ERROR) & 0x1B)) {
 8000e50:	2006      	movs	r0, #6
 8000e52:	f7ff ff14 	bl	8000c7e <MFRC522_ReadRegister>
 8000e56:	4603      	mov	r3, r0
 8000e58:	f003 031b 	and.w	r3, r3, #27
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d14d      	bne.n	8000efc <MFRC522_ToCard+0x190>
			status = MI_OK;
 8000e60:	2300      	movs	r3, #0
 8000e62:	75fb      	strb	r3, [r7, #23]
			if (n & irqEn & 0x01) status = MI_NOTAGERR;
 8000e64:	7d3a      	ldrb	r2, [r7, #20]
 8000e66:	7dbb      	ldrb	r3, [r7, #22]
 8000e68:	4013      	ands	r3, r2
 8000e6a:	b2db      	uxtb	r3, r3
 8000e6c:	f003 0301 	and.w	r3, r3, #1
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d001      	beq.n	8000e78 <MFRC522_ToCard+0x10c>
 8000e74:	2301      	movs	r3, #1
 8000e76:	75fb      	strb	r3, [r7, #23]
			if (command == PCD_TRANSCEIVE) {
 8000e78:	7bfb      	ldrb	r3, [r7, #15]
 8000e7a:	2b0c      	cmp	r3, #12
 8000e7c:	d140      	bne.n	8000f00 <MFRC522_ToCard+0x194>
				n = MFRC522_ReadRegister(MFRC522_REG_FIFO_LEVEL);
 8000e7e:	200a      	movs	r0, #10
 8000e80:	f7ff fefd 	bl	8000c7e <MFRC522_ReadRegister>
 8000e84:	4603      	mov	r3, r0
 8000e86:	753b      	strb	r3, [r7, #20]
				lastBits = MFRC522_ReadRegister(MFRC522_REG_CONTROL) & 0x07;
 8000e88:	200c      	movs	r0, #12
 8000e8a:	f7ff fef8 	bl	8000c7e <MFRC522_ReadRegister>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	f003 0307 	and.w	r3, r3, #7
 8000e94:	747b      	strb	r3, [r7, #17]
				if (lastBits) *backLen = (n-1)*8+lastBits; else *backLen = n*8;
 8000e96:	7c7b      	ldrb	r3, [r7, #17]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d00b      	beq.n	8000eb4 <MFRC522_ToCard+0x148>
 8000e9c:	7d3b      	ldrb	r3, [r7, #20]
 8000e9e:	3b01      	subs	r3, #1
 8000ea0:	b29b      	uxth	r3, r3
 8000ea2:	00db      	lsls	r3, r3, #3
 8000ea4:	b29a      	uxth	r2, r3
 8000ea6:	7c7b      	ldrb	r3, [r7, #17]
 8000ea8:	b29b      	uxth	r3, r3
 8000eaa:	4413      	add	r3, r2
 8000eac:	b29a      	uxth	r2, r3
 8000eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000eb0:	801a      	strh	r2, [r3, #0]
 8000eb2:	e005      	b.n	8000ec0 <MFRC522_ToCard+0x154>
 8000eb4:	7d3b      	ldrb	r3, [r7, #20]
 8000eb6:	b29b      	uxth	r3, r3
 8000eb8:	00db      	lsls	r3, r3, #3
 8000eba:	b29a      	uxth	r2, r3
 8000ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ebe:	801a      	strh	r2, [r3, #0]
				if (n == 0) n = 1;
 8000ec0:	7d3b      	ldrb	r3, [r7, #20]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d101      	bne.n	8000eca <MFRC522_ToCard+0x15e>
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	753b      	strb	r3, [r7, #20]
				if (n > MFRC522_MAX_LEN) n = MFRC522_MAX_LEN;
 8000eca:	7d3b      	ldrb	r3, [r7, #20]
 8000ecc:	2b10      	cmp	r3, #16
 8000ece:	d901      	bls.n	8000ed4 <MFRC522_ToCard+0x168>
 8000ed0:	2310      	movs	r3, #16
 8000ed2:	753b      	strb	r3, [r7, #20]
				for (i = 0; i < n; i++) backData[i] = MFRC522_ReadRegister(MFRC522_REG_FIFO_DATA);		// Reading the received data in FIFO
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	827b      	strh	r3, [r7, #18]
 8000ed8:	e00a      	b.n	8000ef0 <MFRC522_ToCard+0x184>
 8000eda:	8a7b      	ldrh	r3, [r7, #18]
 8000edc:	687a      	ldr	r2, [r7, #4]
 8000ede:	18d4      	adds	r4, r2, r3
 8000ee0:	2009      	movs	r0, #9
 8000ee2:	f7ff fecc 	bl	8000c7e <MFRC522_ReadRegister>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	7023      	strb	r3, [r4, #0]
 8000eea:	8a7b      	ldrh	r3, [r7, #18]
 8000eec:	3301      	adds	r3, #1
 8000eee:	827b      	strh	r3, [r7, #18]
 8000ef0:	7d3b      	ldrb	r3, [r7, #20]
 8000ef2:	b29b      	uxth	r3, r3
 8000ef4:	8a7a      	ldrh	r2, [r7, #18]
 8000ef6:	429a      	cmp	r2, r3
 8000ef8:	d3ef      	bcc.n	8000eda <MFRC522_ToCard+0x16e>
 8000efa:	e001      	b.n	8000f00 <MFRC522_ToCard+0x194>
			}
		} else status = MI_ERR;
 8000efc:	2302      	movs	r3, #2
 8000efe:	75fb      	strb	r3, [r7, #23]
	}
	return status;
 8000f00:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	371c      	adds	r7, #28
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd90      	pop	{r4, r7, pc}

08000f0a <MFRC522_Anticoll>:

uint8_t MFRC522_Anticoll(uint8_t* serNum) {
 8000f0a:	b580      	push	{r7, lr}
 8000f0c:	b086      	sub	sp, #24
 8000f0e:	af02      	add	r7, sp, #8
 8000f10:	6078      	str	r0, [r7, #4]
	uint8_t status;
	uint8_t i;
	uint8_t serNumCheck = 0;
 8000f12:	2300      	movs	r3, #0
 8000f14:	737b      	strb	r3, [r7, #13]
	uint16_t unLen;

	MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x00);												// TxLastBists = BitFramingReg[2..0]
 8000f16:	2100      	movs	r1, #0
 8000f18:	200d      	movs	r0, #13
 8000f1a:	f7ff fe98 	bl	8000c4e <MFRC522_WriteRegister>
	serNum[0] = PICC_ANTICOLL;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	2293      	movs	r2, #147	; 0x93
 8000f22:	701a      	strb	r2, [r3, #0]
	serNum[1] = 0x20;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	3301      	adds	r3, #1
 8000f28:	2220      	movs	r2, #32
 8000f2a:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 8000f2c:	f107 030a 	add.w	r3, r7, #10
 8000f30:	9300      	str	r3, [sp, #0]
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	2202      	movs	r2, #2
 8000f36:	6879      	ldr	r1, [r7, #4]
 8000f38:	200c      	movs	r0, #12
 8000f3a:	f7ff ff17 	bl	8000d6c <MFRC522_ToCard>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	73fb      	strb	r3, [r7, #15]
	if (status == MI_OK) {
 8000f42:	7bfb      	ldrb	r3, [r7, #15]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d118      	bne.n	8000f7a <MFRC522_Anticoll+0x70>
		// Check card serial number
		for (i = 0; i < 4; i++) serNumCheck ^= serNum[i];
 8000f48:	2300      	movs	r3, #0
 8000f4a:	73bb      	strb	r3, [r7, #14]
 8000f4c:	e009      	b.n	8000f62 <MFRC522_Anticoll+0x58>
 8000f4e:	7bbb      	ldrb	r3, [r7, #14]
 8000f50:	687a      	ldr	r2, [r7, #4]
 8000f52:	4413      	add	r3, r2
 8000f54:	781a      	ldrb	r2, [r3, #0]
 8000f56:	7b7b      	ldrb	r3, [r7, #13]
 8000f58:	4053      	eors	r3, r2
 8000f5a:	737b      	strb	r3, [r7, #13]
 8000f5c:	7bbb      	ldrb	r3, [r7, #14]
 8000f5e:	3301      	adds	r3, #1
 8000f60:	73bb      	strb	r3, [r7, #14]
 8000f62:	7bbb      	ldrb	r3, [r7, #14]
 8000f64:	2b03      	cmp	r3, #3
 8000f66:	d9f2      	bls.n	8000f4e <MFRC522_Anticoll+0x44>
		if (serNumCheck != serNum[i]) status = MI_ERR;
 8000f68:	7bbb      	ldrb	r3, [r7, #14]
 8000f6a:	687a      	ldr	r2, [r7, #4]
 8000f6c:	4413      	add	r3, r2
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	7b7a      	ldrb	r2, [r7, #13]
 8000f72:	429a      	cmp	r2, r3
 8000f74:	d001      	beq.n	8000f7a <MFRC522_Anticoll+0x70>
 8000f76:	2302      	movs	r3, #2
 8000f78:	73fb      	strb	r3, [r7, #15]
	}
	return status;
 8000f7a:	7bfb      	ldrb	r3, [r7, #15]
} 
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	3710      	adds	r7, #16
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}

08000f84 <MFRC522_Init>:
		if ((status != MI_OK) || (recvBits != 4) || ((buff[0] & 0x0F) != 0x0A)) status = MI_ERR;
	}
	return status;
}

void MFRC522_Init(void) {
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
	MFRC522_Reset();
 8000f88:	f000 f820 	bl	8000fcc <MFRC522_Reset>
	MFRC522_WriteRegister(MFRC522_REG_T_MODE, 0x8D);
 8000f8c:	218d      	movs	r1, #141	; 0x8d
 8000f8e:	202a      	movs	r0, #42	; 0x2a
 8000f90:	f7ff fe5d 	bl	8000c4e <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_T_PRESCALER, 0x3E);
 8000f94:	213e      	movs	r1, #62	; 0x3e
 8000f96:	202b      	movs	r0, #43	; 0x2b
 8000f98:	f7ff fe59 	bl	8000c4e <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_L, 30);           
 8000f9c:	211e      	movs	r1, #30
 8000f9e:	202d      	movs	r0, #45	; 0x2d
 8000fa0:	f7ff fe55 	bl	8000c4e <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_H, 0);
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	202c      	movs	r0, #44	; 0x2c
 8000fa8:	f7ff fe51 	bl	8000c4e <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_RF_CFG, 0x70);				// 48dB gain	
 8000fac:	2170      	movs	r1, #112	; 0x70
 8000fae:	2026      	movs	r0, #38	; 0x26
 8000fb0:	f7ff fe4d 	bl	8000c4e <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_TX_AUTO, 0x40);
 8000fb4:	2140      	movs	r1, #64	; 0x40
 8000fb6:	2015      	movs	r0, #21
 8000fb8:	f7ff fe49 	bl	8000c4e <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_MODE, 0x3D);
 8000fbc:	213d      	movs	r1, #61	; 0x3d
 8000fbe:	2011      	movs	r0, #17
 8000fc0:	f7ff fe45 	bl	8000c4e <MFRC522_WriteRegister>
	MFRC522_AntennaOn();																		// Open the antenna
 8000fc4:	f000 f80a 	bl	8000fdc <MFRC522_AntennaOn>
}
 8000fc8:	bf00      	nop
 8000fca:	bd80      	pop	{r7, pc}

08000fcc <MFRC522_Reset>:

void MFRC522_Reset(void) {
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_RESETPHASE);
 8000fd0:	210f      	movs	r1, #15
 8000fd2:	2001      	movs	r0, #1
 8000fd4:	f7ff fe3b 	bl	8000c4e <MFRC522_WriteRegister>
}
 8000fd8:	bf00      	nop
 8000fda:	bd80      	pop	{r7, pc}

08000fdc <MFRC522_AntennaOn>:

void MFRC522_AntennaOn(void) {
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
	uint8_t temp;

	temp = MFRC522_ReadRegister(MFRC522_REG_TX_CONTROL);
 8000fe2:	2014      	movs	r0, #20
 8000fe4:	f7ff fe4b 	bl	8000c7e <MFRC522_ReadRegister>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	71fb      	strb	r3, [r7, #7]
	if (!(temp & 0x03)) MFRC522_SetBitMask(MFRC522_REG_TX_CONTROL, 0x03);
 8000fec:	79fb      	ldrb	r3, [r7, #7]
 8000fee:	f003 0303 	and.w	r3, r3, #3
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d103      	bne.n	8000ffe <MFRC522_AntennaOn+0x22>
 8000ff6:	2103      	movs	r1, #3
 8000ff8:	2014      	movs	r0, #20
 8000ffa:	f7ff fe5a 	bl	8000cb2 <MFRC522_SetBitMask>
}
 8000ffe:	bf00      	nop
 8001000:	3708      	adds	r7, #8
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
	...

08001008 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 800100e:	f000 fa37 	bl	8001480 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8001012:	f644 6320 	movw	r3, #20000	; 0x4e20
 8001016:	2201      	movs	r2, #1
 8001018:	2178      	movs	r1, #120	; 0x78
 800101a:	485b      	ldr	r0, [pc, #364]	; (8001188 <SSD1306_Init+0x180>)
 800101c:	f001 f9a0 	bl	8002360 <HAL_I2C_IsDeviceReady>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8001026:	2300      	movs	r3, #0
 8001028:	e0a9      	b.n	800117e <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 800102a:	f640 13c4 	movw	r3, #2500	; 0x9c4
 800102e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001030:	e002      	b.n	8001038 <SSD1306_Init+0x30>
		p--;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	3b01      	subs	r3, #1
 8001036:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d1f9      	bne.n	8001032 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 800103e:	22ae      	movs	r2, #174	; 0xae
 8001040:	2100      	movs	r1, #0
 8001042:	2078      	movs	r0, #120	; 0x78
 8001044:	f000 fa7a 	bl	800153c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8001048:	2220      	movs	r2, #32
 800104a:	2100      	movs	r1, #0
 800104c:	2078      	movs	r0, #120	; 0x78
 800104e:	f000 fa75 	bl	800153c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001052:	2210      	movs	r2, #16
 8001054:	2100      	movs	r1, #0
 8001056:	2078      	movs	r0, #120	; 0x78
 8001058:	f000 fa70 	bl	800153c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800105c:	22b0      	movs	r2, #176	; 0xb0
 800105e:	2100      	movs	r1, #0
 8001060:	2078      	movs	r0, #120	; 0x78
 8001062:	f000 fa6b 	bl	800153c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8001066:	22c8      	movs	r2, #200	; 0xc8
 8001068:	2100      	movs	r1, #0
 800106a:	2078      	movs	r0, #120	; 0x78
 800106c:	f000 fa66 	bl	800153c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8001070:	2200      	movs	r2, #0
 8001072:	2100      	movs	r1, #0
 8001074:	2078      	movs	r0, #120	; 0x78
 8001076:	f000 fa61 	bl	800153c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 800107a:	2210      	movs	r2, #16
 800107c:	2100      	movs	r1, #0
 800107e:	2078      	movs	r0, #120	; 0x78
 8001080:	f000 fa5c 	bl	800153c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8001084:	2240      	movs	r2, #64	; 0x40
 8001086:	2100      	movs	r1, #0
 8001088:	2078      	movs	r0, #120	; 0x78
 800108a:	f000 fa57 	bl	800153c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 800108e:	2281      	movs	r2, #129	; 0x81
 8001090:	2100      	movs	r1, #0
 8001092:	2078      	movs	r0, #120	; 0x78
 8001094:	f000 fa52 	bl	800153c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8001098:	22ff      	movs	r2, #255	; 0xff
 800109a:	2100      	movs	r1, #0
 800109c:	2078      	movs	r0, #120	; 0x78
 800109e:	f000 fa4d 	bl	800153c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80010a2:	22a1      	movs	r2, #161	; 0xa1
 80010a4:	2100      	movs	r1, #0
 80010a6:	2078      	movs	r0, #120	; 0x78
 80010a8:	f000 fa48 	bl	800153c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80010ac:	22a6      	movs	r2, #166	; 0xa6
 80010ae:	2100      	movs	r1, #0
 80010b0:	2078      	movs	r0, #120	; 0x78
 80010b2:	f000 fa43 	bl	800153c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 80010b6:	22a8      	movs	r2, #168	; 0xa8
 80010b8:	2100      	movs	r1, #0
 80010ba:	2078      	movs	r0, #120	; 0x78
 80010bc:	f000 fa3e 	bl	800153c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 80010c0:	223f      	movs	r2, #63	; 0x3f
 80010c2:	2100      	movs	r1, #0
 80010c4:	2078      	movs	r0, #120	; 0x78
 80010c6:	f000 fa39 	bl	800153c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80010ca:	22a4      	movs	r2, #164	; 0xa4
 80010cc:	2100      	movs	r1, #0
 80010ce:	2078      	movs	r0, #120	; 0x78
 80010d0:	f000 fa34 	bl	800153c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 80010d4:	22d3      	movs	r2, #211	; 0xd3
 80010d6:	2100      	movs	r1, #0
 80010d8:	2078      	movs	r0, #120	; 0x78
 80010da:	f000 fa2f 	bl	800153c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 80010de:	2200      	movs	r2, #0
 80010e0:	2100      	movs	r1, #0
 80010e2:	2078      	movs	r0, #120	; 0x78
 80010e4:	f000 fa2a 	bl	800153c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80010e8:	22d5      	movs	r2, #213	; 0xd5
 80010ea:	2100      	movs	r1, #0
 80010ec:	2078      	movs	r0, #120	; 0x78
 80010ee:	f000 fa25 	bl	800153c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80010f2:	22f0      	movs	r2, #240	; 0xf0
 80010f4:	2100      	movs	r1, #0
 80010f6:	2078      	movs	r0, #120	; 0x78
 80010f8:	f000 fa20 	bl	800153c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80010fc:	22d9      	movs	r2, #217	; 0xd9
 80010fe:	2100      	movs	r1, #0
 8001100:	2078      	movs	r0, #120	; 0x78
 8001102:	f000 fa1b 	bl	800153c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8001106:	2222      	movs	r2, #34	; 0x22
 8001108:	2100      	movs	r1, #0
 800110a:	2078      	movs	r0, #120	; 0x78
 800110c:	f000 fa16 	bl	800153c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001110:	22da      	movs	r2, #218	; 0xda
 8001112:	2100      	movs	r1, #0
 8001114:	2078      	movs	r0, #120	; 0x78
 8001116:	f000 fa11 	bl	800153c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 800111a:	2212      	movs	r2, #18
 800111c:	2100      	movs	r1, #0
 800111e:	2078      	movs	r0, #120	; 0x78
 8001120:	f000 fa0c 	bl	800153c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8001124:	22db      	movs	r2, #219	; 0xdb
 8001126:	2100      	movs	r1, #0
 8001128:	2078      	movs	r0, #120	; 0x78
 800112a:	f000 fa07 	bl	800153c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 800112e:	2220      	movs	r2, #32
 8001130:	2100      	movs	r1, #0
 8001132:	2078      	movs	r0, #120	; 0x78
 8001134:	f000 fa02 	bl	800153c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001138:	228d      	movs	r2, #141	; 0x8d
 800113a:	2100      	movs	r1, #0
 800113c:	2078      	movs	r0, #120	; 0x78
 800113e:	f000 f9fd 	bl	800153c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8001142:	2214      	movs	r2, #20
 8001144:	2100      	movs	r1, #0
 8001146:	2078      	movs	r0, #120	; 0x78
 8001148:	f000 f9f8 	bl	800153c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 800114c:	22af      	movs	r2, #175	; 0xaf
 800114e:	2100      	movs	r1, #0
 8001150:	2078      	movs	r0, #120	; 0x78
 8001152:	f000 f9f3 	bl	800153c <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8001156:	222e      	movs	r2, #46	; 0x2e
 8001158:	2100      	movs	r1, #0
 800115a:	2078      	movs	r0, #120	; 0x78
 800115c:	f000 f9ee 	bl	800153c <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001160:	2000      	movs	r0, #0
 8001162:	f000 f847 	bl	80011f4 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8001166:	f000 f813 	bl	8001190 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 800116a:	4b08      	ldr	r3, [pc, #32]	; (800118c <SSD1306_Init+0x184>)
 800116c:	2200      	movs	r2, #0
 800116e:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001170:	4b06      	ldr	r3, [pc, #24]	; (800118c <SSD1306_Init+0x184>)
 8001172:	2200      	movs	r2, #0
 8001174:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8001176:	4b05      	ldr	r3, [pc, #20]	; (800118c <SSD1306_Init+0x184>)
 8001178:	2201      	movs	r2, #1
 800117a:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 800117c:	2301      	movs	r3, #1
}
 800117e:	4618      	mov	r0, r3
 8001180:	3708      	adds	r7, #8
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	20000568 	.word	0x20000568
 800118c:	20000510 	.word	0x20000510

08001190 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8001196:	2300      	movs	r3, #0
 8001198:	71fb      	strb	r3, [r7, #7]
 800119a:	e021      	b.n	80011e0 <SSD1306_UpdateScreen+0x50>
		SSD1306_WRITECOMMAND(0xB0 + m);
 800119c:	79fb      	ldrb	r3, [r7, #7]
 800119e:	3b50      	subs	r3, #80	; 0x50
 80011a0:	b2db      	uxtb	r3, r3
 80011a2:	461a      	mov	r2, r3
 80011a4:	2100      	movs	r1, #0
 80011a6:	2078      	movs	r0, #120	; 0x78
 80011a8:	f000 f9c8 	bl	800153c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80011ac:	2200      	movs	r2, #0
 80011ae:	2100      	movs	r1, #0
 80011b0:	2078      	movs	r0, #120	; 0x78
 80011b2:	f000 f9c3 	bl	800153c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80011b6:	2210      	movs	r2, #16
 80011b8:	2100      	movs	r1, #0
 80011ba:	2078      	movs	r0, #120	; 0x78
 80011bc:	f000 f9be 	bl	800153c <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80011c0:	79fa      	ldrb	r2, [r7, #7]
 80011c2:	4613      	mov	r3, r2
 80011c4:	019b      	lsls	r3, r3, #6
 80011c6:	4413      	add	r3, r2
 80011c8:	005b      	lsls	r3, r3, #1
 80011ca:	461a      	mov	r2, r3
 80011cc:	4b08      	ldr	r3, [pc, #32]	; (80011f0 <SSD1306_UpdateScreen+0x60>)
 80011ce:	441a      	add	r2, r3
 80011d0:	2382      	movs	r3, #130	; 0x82
 80011d2:	2140      	movs	r1, #64	; 0x40
 80011d4:	2078      	movs	r0, #120	; 0x78
 80011d6:	f000 f969 	bl	80014ac <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80011da:	79fb      	ldrb	r3, [r7, #7]
 80011dc:	3301      	adds	r3, #1
 80011de:	71fb      	strb	r3, [r7, #7]
 80011e0:	79fb      	ldrb	r3, [r7, #7]
 80011e2:	2b07      	cmp	r3, #7
 80011e4:	d9da      	bls.n	800119c <SSD1306_UpdateScreen+0xc>
	}
}
 80011e6:	bf00      	nop
 80011e8:	bf00      	nop
 80011ea:	3708      	adds	r7, #8
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	20000100 	.word	0x20000100

080011f4 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	4603      	mov	r3, r0
 80011fc:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80011fe:	79fb      	ldrb	r3, [r7, #7]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d101      	bne.n	8001208 <SSD1306_Fill+0x14>
 8001204:	2300      	movs	r3, #0
 8001206:	e000      	b.n	800120a <SSD1306_Fill+0x16>
 8001208:	23ff      	movs	r3, #255	; 0xff
 800120a:	f44f 6282 	mov.w	r2, #1040	; 0x410
 800120e:	4619      	mov	r1, r3
 8001210:	4803      	ldr	r0, [pc, #12]	; (8001220 <SSD1306_Fill+0x2c>)
 8001212:	f004 f905 	bl	8005420 <memset>
}
 8001216:	bf00      	nop
 8001218:	3708      	adds	r7, #8
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	20000100 	.word	0x20000100

08001224 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001224:	b490      	push	{r4, r7}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
 800122a:	4603      	mov	r3, r0
 800122c:	80fb      	strh	r3, [r7, #6]
 800122e:	460b      	mov	r3, r1
 8001230:	80bb      	strh	r3, [r7, #4]
 8001232:	4613      	mov	r3, r2
 8001234:	70fb      	strb	r3, [r7, #3]
	if (
 8001236:	88fb      	ldrh	r3, [r7, #6]
 8001238:	2b81      	cmp	r3, #129	; 0x81
 800123a:	d854      	bhi.n	80012e6 <SSD1306_DrawPixel+0xc2>
		x >= SSD1306_WIDTH ||
 800123c:	88bb      	ldrh	r3, [r7, #4]
 800123e:	2b3f      	cmp	r3, #63	; 0x3f
 8001240:	d851      	bhi.n	80012e6 <SSD1306_DrawPixel+0xc2>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8001242:	4b2b      	ldr	r3, [pc, #172]	; (80012f0 <SSD1306_DrawPixel+0xcc>)
 8001244:	791b      	ldrb	r3, [r3, #4]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d006      	beq.n	8001258 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 800124a:	78fb      	ldrb	r3, [r7, #3]
 800124c:	2b00      	cmp	r3, #0
 800124e:	bf0c      	ite	eq
 8001250:	2301      	moveq	r3, #1
 8001252:	2300      	movne	r3, #0
 8001254:	b2db      	uxtb	r3, r3
 8001256:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001258:	78fb      	ldrb	r3, [r7, #3]
 800125a:	2b01      	cmp	r3, #1
 800125c:	d120      	bne.n	80012a0 <SSD1306_DrawPixel+0x7c>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800125e:	88fa      	ldrh	r2, [r7, #6]
 8001260:	88bb      	ldrh	r3, [r7, #4]
 8001262:	08db      	lsrs	r3, r3, #3
 8001264:	b298      	uxth	r0, r3
 8001266:	4601      	mov	r1, r0
 8001268:	460b      	mov	r3, r1
 800126a:	019b      	lsls	r3, r3, #6
 800126c:	440b      	add	r3, r1
 800126e:	005b      	lsls	r3, r3, #1
 8001270:	4413      	add	r3, r2
 8001272:	4a20      	ldr	r2, [pc, #128]	; (80012f4 <SSD1306_DrawPixel+0xd0>)
 8001274:	5cd3      	ldrb	r3, [r2, r3]
 8001276:	b25a      	sxtb	r2, r3
 8001278:	88bb      	ldrh	r3, [r7, #4]
 800127a:	f003 0307 	and.w	r3, r3, #7
 800127e:	2101      	movs	r1, #1
 8001280:	fa01 f303 	lsl.w	r3, r1, r3
 8001284:	b25b      	sxtb	r3, r3
 8001286:	4313      	orrs	r3, r2
 8001288:	b25c      	sxtb	r4, r3
 800128a:	88fa      	ldrh	r2, [r7, #6]
 800128c:	4601      	mov	r1, r0
 800128e:	460b      	mov	r3, r1
 8001290:	019b      	lsls	r3, r3, #6
 8001292:	440b      	add	r3, r1
 8001294:	005b      	lsls	r3, r3, #1
 8001296:	4413      	add	r3, r2
 8001298:	b2e1      	uxtb	r1, r4
 800129a:	4a16      	ldr	r2, [pc, #88]	; (80012f4 <SSD1306_DrawPixel+0xd0>)
 800129c:	54d1      	strb	r1, [r2, r3]
 800129e:	e023      	b.n	80012e8 <SSD1306_DrawPixel+0xc4>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80012a0:	88fa      	ldrh	r2, [r7, #6]
 80012a2:	88bb      	ldrh	r3, [r7, #4]
 80012a4:	08db      	lsrs	r3, r3, #3
 80012a6:	b298      	uxth	r0, r3
 80012a8:	4601      	mov	r1, r0
 80012aa:	460b      	mov	r3, r1
 80012ac:	019b      	lsls	r3, r3, #6
 80012ae:	440b      	add	r3, r1
 80012b0:	005b      	lsls	r3, r3, #1
 80012b2:	4413      	add	r3, r2
 80012b4:	4a0f      	ldr	r2, [pc, #60]	; (80012f4 <SSD1306_DrawPixel+0xd0>)
 80012b6:	5cd3      	ldrb	r3, [r2, r3]
 80012b8:	b25a      	sxtb	r2, r3
 80012ba:	88bb      	ldrh	r3, [r7, #4]
 80012bc:	f003 0307 	and.w	r3, r3, #7
 80012c0:	2101      	movs	r1, #1
 80012c2:	fa01 f303 	lsl.w	r3, r1, r3
 80012c6:	b25b      	sxtb	r3, r3
 80012c8:	43db      	mvns	r3, r3
 80012ca:	b25b      	sxtb	r3, r3
 80012cc:	4013      	ands	r3, r2
 80012ce:	b25c      	sxtb	r4, r3
 80012d0:	88fa      	ldrh	r2, [r7, #6]
 80012d2:	4601      	mov	r1, r0
 80012d4:	460b      	mov	r3, r1
 80012d6:	019b      	lsls	r3, r3, #6
 80012d8:	440b      	add	r3, r1
 80012da:	005b      	lsls	r3, r3, #1
 80012dc:	4413      	add	r3, r2
 80012de:	b2e1      	uxtb	r1, r4
 80012e0:	4a04      	ldr	r2, [pc, #16]	; (80012f4 <SSD1306_DrawPixel+0xd0>)
 80012e2:	54d1      	strb	r1, [r2, r3]
 80012e4:	e000      	b.n	80012e8 <SSD1306_DrawPixel+0xc4>
		return;
 80012e6:	bf00      	nop
	}
}
 80012e8:	3708      	adds	r7, #8
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bc90      	pop	{r4, r7}
 80012ee:	4770      	bx	lr
 80012f0:	20000510 	.word	0x20000510
 80012f4:	20000100 	.word	0x20000100

080012f8 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 80012f8:	b480      	push	{r7}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	4603      	mov	r3, r0
 8001300:	460a      	mov	r2, r1
 8001302:	80fb      	strh	r3, [r7, #6]
 8001304:	4613      	mov	r3, r2
 8001306:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001308:	4a05      	ldr	r2, [pc, #20]	; (8001320 <SSD1306_GotoXY+0x28>)
 800130a:	88fb      	ldrh	r3, [r7, #6]
 800130c:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 800130e:	4a04      	ldr	r2, [pc, #16]	; (8001320 <SSD1306_GotoXY+0x28>)
 8001310:	88bb      	ldrh	r3, [r7, #4]
 8001312:	8053      	strh	r3, [r2, #2]
}
 8001314:	bf00      	nop
 8001316:	370c      	adds	r7, #12
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr
 8001320:	20000510 	.word	0x20000510

08001324 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001324:	b580      	push	{r7, lr}
 8001326:	b086      	sub	sp, #24
 8001328:	af00      	add	r7, sp, #0
 800132a:	4603      	mov	r3, r0
 800132c:	6039      	str	r1, [r7, #0]
 800132e:	71fb      	strb	r3, [r7, #7]
 8001330:	4613      	mov	r3, r2
 8001332:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001334:	4b3a      	ldr	r3, [pc, #232]	; (8001420 <SSD1306_Putc+0xfc>)
 8001336:	881b      	ldrh	r3, [r3, #0]
 8001338:	461a      	mov	r2, r3
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	4413      	add	r3, r2
	if (
 8001340:	2b81      	cmp	r3, #129	; 0x81
 8001342:	dc07      	bgt.n	8001354 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001344:	4b36      	ldr	r3, [pc, #216]	; (8001420 <SSD1306_Putc+0xfc>)
 8001346:	885b      	ldrh	r3, [r3, #2]
 8001348:	461a      	mov	r2, r3
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	785b      	ldrb	r3, [r3, #1]
 800134e:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001350:	2b3f      	cmp	r3, #63	; 0x3f
 8001352:	dd01      	ble.n	8001358 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8001354:	2300      	movs	r3, #0
 8001356:	e05e      	b.n	8001416 <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001358:	2300      	movs	r3, #0
 800135a:	617b      	str	r3, [r7, #20]
 800135c:	e04b      	b.n	80013f6 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	685a      	ldr	r2, [r3, #4]
 8001362:	79fb      	ldrb	r3, [r7, #7]
 8001364:	3b20      	subs	r3, #32
 8001366:	6839      	ldr	r1, [r7, #0]
 8001368:	7849      	ldrb	r1, [r1, #1]
 800136a:	fb01 f303 	mul.w	r3, r1, r3
 800136e:	4619      	mov	r1, r3
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	440b      	add	r3, r1
 8001374:	005b      	lsls	r3, r3, #1
 8001376:	4413      	add	r3, r2
 8001378:	881b      	ldrh	r3, [r3, #0]
 800137a:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 800137c:	2300      	movs	r3, #0
 800137e:	613b      	str	r3, [r7, #16]
 8001380:	e030      	b.n	80013e4 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8001382:	68fa      	ldr	r2, [r7, #12]
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	fa02 f303 	lsl.w	r3, r2, r3
 800138a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800138e:	2b00      	cmp	r3, #0
 8001390:	d010      	beq.n	80013b4 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001392:	4b23      	ldr	r3, [pc, #140]	; (8001420 <SSD1306_Putc+0xfc>)
 8001394:	881a      	ldrh	r2, [r3, #0]
 8001396:	693b      	ldr	r3, [r7, #16]
 8001398:	b29b      	uxth	r3, r3
 800139a:	4413      	add	r3, r2
 800139c:	b298      	uxth	r0, r3
 800139e:	4b20      	ldr	r3, [pc, #128]	; (8001420 <SSD1306_Putc+0xfc>)
 80013a0:	885a      	ldrh	r2, [r3, #2]
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	b29b      	uxth	r3, r3
 80013a6:	4413      	add	r3, r2
 80013a8:	b29b      	uxth	r3, r3
 80013aa:	79ba      	ldrb	r2, [r7, #6]
 80013ac:	4619      	mov	r1, r3
 80013ae:	f7ff ff39 	bl	8001224 <SSD1306_DrawPixel>
 80013b2:	e014      	b.n	80013de <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80013b4:	4b1a      	ldr	r3, [pc, #104]	; (8001420 <SSD1306_Putc+0xfc>)
 80013b6:	881a      	ldrh	r2, [r3, #0]
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	b29b      	uxth	r3, r3
 80013bc:	4413      	add	r3, r2
 80013be:	b298      	uxth	r0, r3
 80013c0:	4b17      	ldr	r3, [pc, #92]	; (8001420 <SSD1306_Putc+0xfc>)
 80013c2:	885a      	ldrh	r2, [r3, #2]
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	b29b      	uxth	r3, r3
 80013c8:	4413      	add	r3, r2
 80013ca:	b299      	uxth	r1, r3
 80013cc:	79bb      	ldrb	r3, [r7, #6]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	bf0c      	ite	eq
 80013d2:	2301      	moveq	r3, #1
 80013d4:	2300      	movne	r3, #0
 80013d6:	b2db      	uxtb	r3, r3
 80013d8:	461a      	mov	r2, r3
 80013da:	f7ff ff23 	bl	8001224 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	3301      	adds	r3, #1
 80013e2:	613b      	str	r3, [r7, #16]
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	461a      	mov	r2, r3
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	4293      	cmp	r3, r2
 80013ee:	d3c8      	bcc.n	8001382 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	3301      	adds	r3, #1
 80013f4:	617b      	str	r3, [r7, #20]
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	785b      	ldrb	r3, [r3, #1]
 80013fa:	461a      	mov	r2, r3
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	4293      	cmp	r3, r2
 8001400:	d3ad      	bcc.n	800135e <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001402:	4b07      	ldr	r3, [pc, #28]	; (8001420 <SSD1306_Putc+0xfc>)
 8001404:	881a      	ldrh	r2, [r3, #0]
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	b29b      	uxth	r3, r3
 800140c:	4413      	add	r3, r2
 800140e:	b29a      	uxth	r2, r3
 8001410:	4b03      	ldr	r3, [pc, #12]	; (8001420 <SSD1306_Putc+0xfc>)
 8001412:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8001414:	79fb      	ldrb	r3, [r7, #7]
}
 8001416:	4618      	mov	r0, r3
 8001418:	3718      	adds	r7, #24
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	20000510 	.word	0x20000510

08001424 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001424:	b580      	push	{r7, lr}
 8001426:	b084      	sub	sp, #16
 8001428:	af00      	add	r7, sp, #0
 800142a:	60f8      	str	r0, [r7, #12]
 800142c:	60b9      	str	r1, [r7, #8]
 800142e:	4613      	mov	r3, r2
 8001430:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8001432:	e012      	b.n	800145a <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	79fa      	ldrb	r2, [r7, #7]
 800143a:	68b9      	ldr	r1, [r7, #8]
 800143c:	4618      	mov	r0, r3
 800143e:	f7ff ff71 	bl	8001324 <SSD1306_Putc>
 8001442:	4603      	mov	r3, r0
 8001444:	461a      	mov	r2, r3
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	429a      	cmp	r2, r3
 800144c:	d002      	beq.n	8001454 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	e008      	b.n	8001466 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	3301      	adds	r3, #1
 8001458:	60fb      	str	r3, [r7, #12]
	while (*str) {
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d1e8      	bne.n	8001434 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	781b      	ldrb	r3, [r3, #0]
}
 8001466:	4618      	mov	r0, r3
 8001468:	3710      	adds	r7, #16
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}

0800146e <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 800146e:	b580      	push	{r7, lr}
 8001470:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8001472:	2000      	movs	r0, #0
 8001474:	f7ff febe 	bl	80011f4 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8001478:	f7ff fe8a 	bl	8001190 <SSD1306_UpdateScreen>
}
 800147c:	bf00      	nop
 800147e:	bd80      	pop	{r7, pc}

08001480 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001480:	b480      	push	{r7}
 8001482:	b083      	sub	sp, #12
 8001484:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001486:	4b08      	ldr	r3, [pc, #32]	; (80014a8 <ssd1306_I2C_Init+0x28>)
 8001488:	607b      	str	r3, [r7, #4]
	while(p>0)
 800148a:	e002      	b.n	8001492 <ssd1306_I2C_Init+0x12>
		p--;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	3b01      	subs	r3, #1
 8001490:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d1f9      	bne.n	800148c <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001498:	bf00      	nop
 800149a:	bf00      	nop
 800149c:	370c      	adds	r7, #12
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr
 80014a6:	bf00      	nop
 80014a8:	0003d090 	.word	0x0003d090

080014ac <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 80014ac:	b590      	push	{r4, r7, lr}
 80014ae:	b0c7      	sub	sp, #284	; 0x11c
 80014b0:	af02      	add	r7, sp, #8
 80014b2:	4604      	mov	r4, r0
 80014b4:	4608      	mov	r0, r1
 80014b6:	4639      	mov	r1, r7
 80014b8:	600a      	str	r2, [r1, #0]
 80014ba:	4619      	mov	r1, r3
 80014bc:	1dfb      	adds	r3, r7, #7
 80014be:	4622      	mov	r2, r4
 80014c0:	701a      	strb	r2, [r3, #0]
 80014c2:	1dbb      	adds	r3, r7, #6
 80014c4:	4602      	mov	r2, r0
 80014c6:	701a      	strb	r2, [r3, #0]
 80014c8:	1d3b      	adds	r3, r7, #4
 80014ca:	460a      	mov	r2, r1
 80014cc:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 80014ce:	f107 030c 	add.w	r3, r7, #12
 80014d2:	1dba      	adds	r2, r7, #6
 80014d4:	7812      	ldrb	r2, [r2, #0]
 80014d6:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 80014d8:	2300      	movs	r3, #0
 80014da:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80014de:	e010      	b.n	8001502 <ssd1306_I2C_WriteMulti+0x56>
dt[i+1] = data[i];
 80014e0:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80014e4:	463a      	mov	r2, r7
 80014e6:	6812      	ldr	r2, [r2, #0]
 80014e8:	441a      	add	r2, r3
 80014ea:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80014ee:	3301      	adds	r3, #1
 80014f0:	7811      	ldrb	r1, [r2, #0]
 80014f2:	f107 020c 	add.w	r2, r7, #12
 80014f6:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 80014f8:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80014fc:	3301      	adds	r3, #1
 80014fe:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001502:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001506:	b29b      	uxth	r3, r3
 8001508:	1d3a      	adds	r2, r7, #4
 800150a:	8812      	ldrh	r2, [r2, #0]
 800150c:	429a      	cmp	r2, r3
 800150e:	d8e7      	bhi.n	80014e0 <ssd1306_I2C_WriteMulti+0x34>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8001510:	1dfb      	adds	r3, r7, #7
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	b299      	uxth	r1, r3
 8001516:	1d3b      	adds	r3, r7, #4
 8001518:	881b      	ldrh	r3, [r3, #0]
 800151a:	3301      	adds	r3, #1
 800151c:	b29b      	uxth	r3, r3
 800151e:	f107 020c 	add.w	r2, r7, #12
 8001522:	200a      	movs	r0, #10
 8001524:	9000      	str	r0, [sp, #0]
 8001526:	4804      	ldr	r0, [pc, #16]	; (8001538 <ssd1306_I2C_WriteMulti+0x8c>)
 8001528:	f000 fe26 	bl	8002178 <HAL_I2C_Master_Transmit>
}
 800152c:	bf00      	nop
 800152e:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8001532:	46bd      	mov	sp, r7
 8001534:	bd90      	pop	{r4, r7, pc}
 8001536:	bf00      	nop
 8001538:	20000568 	.word	0x20000568

0800153c <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 800153c:	b580      	push	{r7, lr}
 800153e:	b086      	sub	sp, #24
 8001540:	af02      	add	r7, sp, #8
 8001542:	4603      	mov	r3, r0
 8001544:	71fb      	strb	r3, [r7, #7]
 8001546:	460b      	mov	r3, r1
 8001548:	71bb      	strb	r3, [r7, #6]
 800154a:	4613      	mov	r3, r2
 800154c:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 800154e:	79bb      	ldrb	r3, [r7, #6]
 8001550:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001552:	797b      	ldrb	r3, [r7, #5]
 8001554:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001556:	79fb      	ldrb	r3, [r7, #7]
 8001558:	b299      	uxth	r1, r3
 800155a:	f107 020c 	add.w	r2, r7, #12
 800155e:	230a      	movs	r3, #10
 8001560:	9300      	str	r3, [sp, #0]
 8001562:	2302      	movs	r3, #2
 8001564:	4803      	ldr	r0, [pc, #12]	; (8001574 <ssd1306_I2C_Write+0x38>)
 8001566:	f000 fe07 	bl	8002178 <HAL_I2C_Master_Transmit>
}
 800156a:	bf00      	nop
 800156c:	3710      	adds	r7, #16
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	20000568 	.word	0x20000568

08001578 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800157e:	4b0f      	ldr	r3, [pc, #60]	; (80015bc <HAL_MspInit+0x44>)
 8001580:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001582:	4a0e      	ldr	r2, [pc, #56]	; (80015bc <HAL_MspInit+0x44>)
 8001584:	f043 0301 	orr.w	r3, r3, #1
 8001588:	6613      	str	r3, [r2, #96]	; 0x60
 800158a:	4b0c      	ldr	r3, [pc, #48]	; (80015bc <HAL_MspInit+0x44>)
 800158c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800158e:	f003 0301 	and.w	r3, r3, #1
 8001592:	607b      	str	r3, [r7, #4]
 8001594:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001596:	4b09      	ldr	r3, [pc, #36]	; (80015bc <HAL_MspInit+0x44>)
 8001598:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800159a:	4a08      	ldr	r2, [pc, #32]	; (80015bc <HAL_MspInit+0x44>)
 800159c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015a0:	6593      	str	r3, [r2, #88]	; 0x58
 80015a2:	4b06      	ldr	r3, [pc, #24]	; (80015bc <HAL_MspInit+0x44>)
 80015a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015aa:	603b      	str	r3, [r7, #0]
 80015ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015ae:	bf00      	nop
 80015b0:	370c      	adds	r7, #12
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr
 80015ba:	bf00      	nop
 80015bc:	40021000 	.word	0x40021000

080015c0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b08a      	sub	sp, #40	; 0x28
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c8:	f107 0314 	add.w	r3, r7, #20
 80015cc:	2200      	movs	r2, #0
 80015ce:	601a      	str	r2, [r3, #0]
 80015d0:	605a      	str	r2, [r3, #4]
 80015d2:	609a      	str	r2, [r3, #8]
 80015d4:	60da      	str	r2, [r3, #12]
 80015d6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a17      	ldr	r2, [pc, #92]	; (800163c <HAL_I2C_MspInit+0x7c>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d127      	bne.n	8001632 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015e2:	4b17      	ldr	r3, [pc, #92]	; (8001640 <HAL_I2C_MspInit+0x80>)
 80015e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015e6:	4a16      	ldr	r2, [pc, #88]	; (8001640 <HAL_I2C_MspInit+0x80>)
 80015e8:	f043 0302 	orr.w	r3, r3, #2
 80015ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015ee:	4b14      	ldr	r3, [pc, #80]	; (8001640 <HAL_I2C_MspInit+0x80>)
 80015f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015f2:	f003 0302 	and.w	r3, r3, #2
 80015f6:	613b      	str	r3, [r7, #16]
 80015f8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80015fa:	23c0      	movs	r3, #192	; 0xc0
 80015fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015fe:	2312      	movs	r3, #18
 8001600:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001602:	2301      	movs	r3, #1
 8001604:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001606:	2303      	movs	r3, #3
 8001608:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800160a:	2304      	movs	r3, #4
 800160c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800160e:	f107 0314 	add.w	r3, r7, #20
 8001612:	4619      	mov	r1, r3
 8001614:	480b      	ldr	r0, [pc, #44]	; (8001644 <HAL_I2C_MspInit+0x84>)
 8001616:	f000 fb95 	bl	8001d44 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800161a:	4b09      	ldr	r3, [pc, #36]	; (8001640 <HAL_I2C_MspInit+0x80>)
 800161c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800161e:	4a08      	ldr	r2, [pc, #32]	; (8001640 <HAL_I2C_MspInit+0x80>)
 8001620:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001624:	6593      	str	r3, [r2, #88]	; 0x58
 8001626:	4b06      	ldr	r3, [pc, #24]	; (8001640 <HAL_I2C_MspInit+0x80>)
 8001628:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800162a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800162e:	60fb      	str	r3, [r7, #12]
 8001630:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001632:	bf00      	nop
 8001634:	3728      	adds	r7, #40	; 0x28
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	40005400 	.word	0x40005400
 8001640:	40021000 	.word	0x40021000
 8001644:	48000400 	.word	0x48000400

08001648 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b08a      	sub	sp, #40	; 0x28
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001650:	f107 0314 	add.w	r3, r7, #20
 8001654:	2200      	movs	r2, #0
 8001656:	601a      	str	r2, [r3, #0]
 8001658:	605a      	str	r2, [r3, #4]
 800165a:	609a      	str	r2, [r3, #8]
 800165c:	60da      	str	r2, [r3, #12]
 800165e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a18      	ldr	r2, [pc, #96]	; (80016c8 <HAL_SPI_MspInit+0x80>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d129      	bne.n	80016be <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800166a:	4b18      	ldr	r3, [pc, #96]	; (80016cc <HAL_SPI_MspInit+0x84>)
 800166c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800166e:	4a17      	ldr	r2, [pc, #92]	; (80016cc <HAL_SPI_MspInit+0x84>)
 8001670:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001674:	6613      	str	r3, [r2, #96]	; 0x60
 8001676:	4b15      	ldr	r3, [pc, #84]	; (80016cc <HAL_SPI_MspInit+0x84>)
 8001678:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800167a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800167e:	613b      	str	r3, [r7, #16]
 8001680:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001682:	4b12      	ldr	r3, [pc, #72]	; (80016cc <HAL_SPI_MspInit+0x84>)
 8001684:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001686:	4a11      	ldr	r2, [pc, #68]	; (80016cc <HAL_SPI_MspInit+0x84>)
 8001688:	f043 0301 	orr.w	r3, r3, #1
 800168c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800168e:	4b0f      	ldr	r3, [pc, #60]	; (80016cc <HAL_SPI_MspInit+0x84>)
 8001690:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001692:	f003 0301 	and.w	r3, r3, #1
 8001696:	60fb      	str	r3, [r7, #12]
 8001698:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA11     ------> SPI1_MISO
    PA12     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_12;
 800169a:	f641 0302 	movw	r3, #6146	; 0x1802
 800169e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a0:	2302      	movs	r3, #2
 80016a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a4:	2300      	movs	r3, #0
 80016a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016a8:	2303      	movs	r3, #3
 80016aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80016ac:	2305      	movs	r3, #5
 80016ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016b0:	f107 0314 	add.w	r3, r7, #20
 80016b4:	4619      	mov	r1, r3
 80016b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016ba:	f000 fb43 	bl	8001d44 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80016be:	bf00      	nop
 80016c0:	3728      	adds	r7, #40	; 0x28
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	40013000 	.word	0x40013000
 80016cc:	40021000 	.word	0x40021000

080016d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b08a      	sub	sp, #40	; 0x28
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d8:	f107 0314 	add.w	r3, r7, #20
 80016dc:	2200      	movs	r2, #0
 80016de:	601a      	str	r2, [r3, #0]
 80016e0:	605a      	str	r2, [r3, #4]
 80016e2:	609a      	str	r2, [r3, #8]
 80016e4:	60da      	str	r2, [r3, #12]
 80016e6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a1c      	ldr	r2, [pc, #112]	; (8001760 <HAL_UART_MspInit+0x90>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d131      	bne.n	8001756 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80016f2:	4b1c      	ldr	r3, [pc, #112]	; (8001764 <HAL_UART_MspInit+0x94>)
 80016f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016f6:	4a1b      	ldr	r2, [pc, #108]	; (8001764 <HAL_UART_MspInit+0x94>)
 80016f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016fc:	6613      	str	r3, [r2, #96]	; 0x60
 80016fe:	4b19      	ldr	r3, [pc, #100]	; (8001764 <HAL_UART_MspInit+0x94>)
 8001700:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001702:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001706:	613b      	str	r3, [r7, #16]
 8001708:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800170a:	4b16      	ldr	r3, [pc, #88]	; (8001764 <HAL_UART_MspInit+0x94>)
 800170c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800170e:	4a15      	ldr	r2, [pc, #84]	; (8001764 <HAL_UART_MspInit+0x94>)
 8001710:	f043 0301 	orr.w	r3, r3, #1
 8001714:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001716:	4b13      	ldr	r3, [pc, #76]	; (8001764 <HAL_UART_MspInit+0x94>)
 8001718:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800171a:	f003 0301 	and.w	r3, r3, #1
 800171e:	60fb      	str	r3, [r7, #12]
 8001720:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001722:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001726:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001728:	2302      	movs	r3, #2
 800172a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172c:	2300      	movs	r3, #0
 800172e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001730:	2303      	movs	r3, #3
 8001732:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001734:	2307      	movs	r3, #7
 8001736:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001738:	f107 0314 	add.w	r3, r7, #20
 800173c:	4619      	mov	r1, r3
 800173e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001742:	f000 faff 	bl	8001d44 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 4, 0);
 8001746:	2200      	movs	r2, #0
 8001748:	2104      	movs	r1, #4
 800174a:	2025      	movs	r0, #37	; 0x25
 800174c:	f000 fa45 	bl	8001bda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001750:	2025      	movs	r0, #37	; 0x25
 8001752:	f000 fa5e 	bl	8001c12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001756:	bf00      	nop
 8001758:	3728      	adds	r7, #40	; 0x28
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	40013800 	.word	0x40013800
 8001764:	40021000 	.word	0x40021000

08001768 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800176c:	e7fe      	b.n	800176c <NMI_Handler+0x4>

0800176e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800176e:	b480      	push	{r7}
 8001770:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001772:	e7fe      	b.n	8001772 <HardFault_Handler+0x4>

08001774 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001778:	e7fe      	b.n	8001778 <MemManage_Handler+0x4>

0800177a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800177a:	b480      	push	{r7}
 800177c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800177e:	e7fe      	b.n	800177e <BusFault_Handler+0x4>

08001780 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001784:	e7fe      	b.n	8001784 <UsageFault_Handler+0x4>

08001786 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001786:	b480      	push	{r7}
 8001788:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800178a:	bf00      	nop
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr

08001794 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001798:	bf00      	nop
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr

080017a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017a2:	b480      	push	{r7}
 80017a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017a6:	bf00      	nop
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr

080017b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017b4:	f000 f8f2 	bl	800199c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017b8:	bf00      	nop
 80017ba:	bd80      	pop	{r7, pc}

080017bc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80017c0:	4802      	ldr	r0, [pc, #8]	; (80017cc <USART1_IRQHandler+0x10>)
 80017c2:	f002 fe73 	bl	80044ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80017c6:	bf00      	nop
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	200005d4 	.word	0x200005d4

080017d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b086      	sub	sp, #24
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017d8:	4a14      	ldr	r2, [pc, #80]	; (800182c <_sbrk+0x5c>)
 80017da:	4b15      	ldr	r3, [pc, #84]	; (8001830 <_sbrk+0x60>)
 80017dc:	1ad3      	subs	r3, r2, r3
 80017de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017e4:	4b13      	ldr	r3, [pc, #76]	; (8001834 <_sbrk+0x64>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d102      	bne.n	80017f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017ec:	4b11      	ldr	r3, [pc, #68]	; (8001834 <_sbrk+0x64>)
 80017ee:	4a12      	ldr	r2, [pc, #72]	; (8001838 <_sbrk+0x68>)
 80017f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017f2:	4b10      	ldr	r3, [pc, #64]	; (8001834 <_sbrk+0x64>)
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	4413      	add	r3, r2
 80017fa:	693a      	ldr	r2, [r7, #16]
 80017fc:	429a      	cmp	r2, r3
 80017fe:	d207      	bcs.n	8001810 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001800:	f003 fde4 	bl	80053cc <__errno>
 8001804:	4603      	mov	r3, r0
 8001806:	220c      	movs	r2, #12
 8001808:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800180a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800180e:	e009      	b.n	8001824 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001810:	4b08      	ldr	r3, [pc, #32]	; (8001834 <_sbrk+0x64>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001816:	4b07      	ldr	r3, [pc, #28]	; (8001834 <_sbrk+0x64>)
 8001818:	681a      	ldr	r2, [r3, #0]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	4413      	add	r3, r2
 800181e:	4a05      	ldr	r2, [pc, #20]	; (8001834 <_sbrk+0x64>)
 8001820:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001822:	68fb      	ldr	r3, [r7, #12]
}
 8001824:	4618      	mov	r0, r3
 8001826:	3718      	adds	r7, #24
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	2000a000 	.word	0x2000a000
 8001830:	00000400 	.word	0x00000400
 8001834:	20000518 	.word	0x20000518
 8001838:	20000728 	.word	0x20000728

0800183c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001840:	4b15      	ldr	r3, [pc, #84]	; (8001898 <SystemInit+0x5c>)
 8001842:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001846:	4a14      	ldr	r2, [pc, #80]	; (8001898 <SystemInit+0x5c>)
 8001848:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800184c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001850:	4b12      	ldr	r3, [pc, #72]	; (800189c <SystemInit+0x60>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a11      	ldr	r2, [pc, #68]	; (800189c <SystemInit+0x60>)
 8001856:	f043 0301 	orr.w	r3, r3, #1
 800185a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800185c:	4b0f      	ldr	r3, [pc, #60]	; (800189c <SystemInit+0x60>)
 800185e:	2200      	movs	r2, #0
 8001860:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001862:	4b0e      	ldr	r3, [pc, #56]	; (800189c <SystemInit+0x60>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4a0d      	ldr	r2, [pc, #52]	; (800189c <SystemInit+0x60>)
 8001868:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800186c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001870:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001872:	4b0a      	ldr	r3, [pc, #40]	; (800189c <SystemInit+0x60>)
 8001874:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001878:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800187a:	4b08      	ldr	r3, [pc, #32]	; (800189c <SystemInit+0x60>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4a07      	ldr	r2, [pc, #28]	; (800189c <SystemInit+0x60>)
 8001880:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001884:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001886:	4b05      	ldr	r3, [pc, #20]	; (800189c <SystemInit+0x60>)
 8001888:	2200      	movs	r2, #0
 800188a:	619a      	str	r2, [r3, #24]
}
 800188c:	bf00      	nop
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr
 8001896:	bf00      	nop
 8001898:	e000ed00 	.word	0xe000ed00
 800189c:	40021000 	.word	0x40021000

080018a0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80018a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018d8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80018a4:	f7ff ffca 	bl	800183c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80018a8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80018aa:	e003      	b.n	80018b4 <LoopCopyDataInit>

080018ac <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80018ac:	4b0b      	ldr	r3, [pc, #44]	; (80018dc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80018ae:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80018b0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80018b2:	3104      	adds	r1, #4

080018b4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80018b4:	480a      	ldr	r0, [pc, #40]	; (80018e0 <LoopForever+0xa>)
	ldr	r3, =_edata
 80018b6:	4b0b      	ldr	r3, [pc, #44]	; (80018e4 <LoopForever+0xe>)
	adds	r2, r0, r1
 80018b8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80018ba:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80018bc:	d3f6      	bcc.n	80018ac <CopyDataInit>
	ldr	r2, =_sbss
 80018be:	4a0a      	ldr	r2, [pc, #40]	; (80018e8 <LoopForever+0x12>)
	b	LoopFillZerobss
 80018c0:	e002      	b.n	80018c8 <LoopFillZerobss>

080018c2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80018c2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80018c4:	f842 3b04 	str.w	r3, [r2], #4

080018c8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80018c8:	4b08      	ldr	r3, [pc, #32]	; (80018ec <LoopForever+0x16>)
	cmp	r2, r3
 80018ca:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80018cc:	d3f9      	bcc.n	80018c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018ce:	f003 fd83 	bl	80053d8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80018d2:	f7fe fec5 	bl	8000660 <main>

080018d6 <LoopForever>:

LoopForever:
    b LoopForever
 80018d6:	e7fe      	b.n	80018d6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80018d8:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 80018dc:	08007224 	.word	0x08007224
	ldr	r0, =_sdata
 80018e0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80018e4:	200000dc 	.word	0x200000dc
	ldr	r2, =_sbss
 80018e8:	200000dc 	.word	0x200000dc
	ldr	r3, = _ebss
 80018ec:	20000728 	.word	0x20000728

080018f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80018f0:	e7fe      	b.n	80018f0 <ADC1_2_IRQHandler>

080018f2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018f2:	b580      	push	{r7, lr}
 80018f4:	b082      	sub	sp, #8
 80018f6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80018f8:	2300      	movs	r3, #0
 80018fa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018fc:	2003      	movs	r0, #3
 80018fe:	f000 f961 	bl	8001bc4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001902:	2000      	movs	r0, #0
 8001904:	f000 f80e 	bl	8001924 <HAL_InitTick>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d002      	beq.n	8001914 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800190e:	2301      	movs	r3, #1
 8001910:	71fb      	strb	r3, [r7, #7]
 8001912:	e001      	b.n	8001918 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001914:	f7ff fe30 	bl	8001578 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001918:	79fb      	ldrb	r3, [r7, #7]
}
 800191a:	4618      	mov	r0, r3
 800191c:	3708      	adds	r7, #8
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
	...

08001924 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b084      	sub	sp, #16
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800192c:	2300      	movs	r3, #0
 800192e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001930:	4b17      	ldr	r3, [pc, #92]	; (8001990 <HAL_InitTick+0x6c>)
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d023      	beq.n	8001980 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001938:	4b16      	ldr	r3, [pc, #88]	; (8001994 <HAL_InitTick+0x70>)
 800193a:	681a      	ldr	r2, [r3, #0]
 800193c:	4b14      	ldr	r3, [pc, #80]	; (8001990 <HAL_InitTick+0x6c>)
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	4619      	mov	r1, r3
 8001942:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001946:	fbb3 f3f1 	udiv	r3, r3, r1
 800194a:	fbb2 f3f3 	udiv	r3, r2, r3
 800194e:	4618      	mov	r0, r3
 8001950:	f000 f96d 	bl	8001c2e <HAL_SYSTICK_Config>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d10f      	bne.n	800197a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2b0f      	cmp	r3, #15
 800195e:	d809      	bhi.n	8001974 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001960:	2200      	movs	r2, #0
 8001962:	6879      	ldr	r1, [r7, #4]
 8001964:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001968:	f000 f937 	bl	8001bda <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800196c:	4a0a      	ldr	r2, [pc, #40]	; (8001998 <HAL_InitTick+0x74>)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6013      	str	r3, [r2, #0]
 8001972:	e007      	b.n	8001984 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001974:	2301      	movs	r3, #1
 8001976:	73fb      	strb	r3, [r7, #15]
 8001978:	e004      	b.n	8001984 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800197a:	2301      	movs	r3, #1
 800197c:	73fb      	strb	r3, [r7, #15]
 800197e:	e001      	b.n	8001984 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001980:	2301      	movs	r3, #1
 8001982:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001984:	7bfb      	ldrb	r3, [r7, #15]
}
 8001986:	4618      	mov	r0, r3
 8001988:	3710      	adds	r7, #16
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	20000074 	.word	0x20000074
 8001994:	2000006c 	.word	0x2000006c
 8001998:	20000070 	.word	0x20000070

0800199c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80019a0:	4b06      	ldr	r3, [pc, #24]	; (80019bc <HAL_IncTick+0x20>)
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	461a      	mov	r2, r3
 80019a6:	4b06      	ldr	r3, [pc, #24]	; (80019c0 <HAL_IncTick+0x24>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4413      	add	r3, r2
 80019ac:	4a04      	ldr	r2, [pc, #16]	; (80019c0 <HAL_IncTick+0x24>)
 80019ae:	6013      	str	r3, [r2, #0]
}
 80019b0:	bf00      	nop
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr
 80019ba:	bf00      	nop
 80019bc:	20000074 	.word	0x20000074
 80019c0:	20000714 	.word	0x20000714

080019c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0
  return uwTick;
 80019c8:	4b03      	ldr	r3, [pc, #12]	; (80019d8 <HAL_GetTick+0x14>)
 80019ca:	681b      	ldr	r3, [r3, #0]
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr
 80019d6:	bf00      	nop
 80019d8:	20000714 	.word	0x20000714

080019dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b084      	sub	sp, #16
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019e4:	f7ff ffee 	bl	80019c4 <HAL_GetTick>
 80019e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80019f4:	d005      	beq.n	8001a02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80019f6:	4b0a      	ldr	r3, [pc, #40]	; (8001a20 <HAL_Delay+0x44>)
 80019f8:	781b      	ldrb	r3, [r3, #0]
 80019fa:	461a      	mov	r2, r3
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	4413      	add	r3, r2
 8001a00:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a02:	bf00      	nop
 8001a04:	f7ff ffde 	bl	80019c4 <HAL_GetTick>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	68bb      	ldr	r3, [r7, #8]
 8001a0c:	1ad3      	subs	r3, r2, r3
 8001a0e:	68fa      	ldr	r2, [r7, #12]
 8001a10:	429a      	cmp	r2, r3
 8001a12:	d8f7      	bhi.n	8001a04 <HAL_Delay+0x28>
  {
  }
}
 8001a14:	bf00      	nop
 8001a16:	bf00      	nop
 8001a18:	3710      	adds	r7, #16
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	20000074 	.word	0x20000074

08001a24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b085      	sub	sp, #20
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	f003 0307 	and.w	r3, r3, #7
 8001a32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a34:	4b0c      	ldr	r3, [pc, #48]	; (8001a68 <__NVIC_SetPriorityGrouping+0x44>)
 8001a36:	68db      	ldr	r3, [r3, #12]
 8001a38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a3a:	68ba      	ldr	r2, [r7, #8]
 8001a3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a40:	4013      	ands	r3, r2
 8001a42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a48:	68bb      	ldr	r3, [r7, #8]
 8001a4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a56:	4a04      	ldr	r2, [pc, #16]	; (8001a68 <__NVIC_SetPriorityGrouping+0x44>)
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	60d3      	str	r3, [r2, #12]
}
 8001a5c:	bf00      	nop
 8001a5e:	3714      	adds	r7, #20
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr
 8001a68:	e000ed00 	.word	0xe000ed00

08001a6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a70:	4b04      	ldr	r3, [pc, #16]	; (8001a84 <__NVIC_GetPriorityGrouping+0x18>)
 8001a72:	68db      	ldr	r3, [r3, #12]
 8001a74:	0a1b      	lsrs	r3, r3, #8
 8001a76:	f003 0307 	and.w	r3, r3, #7
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr
 8001a84:	e000ed00 	.word	0xe000ed00

08001a88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	4603      	mov	r3, r0
 8001a90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	db0b      	blt.n	8001ab2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a9a:	79fb      	ldrb	r3, [r7, #7]
 8001a9c:	f003 021f 	and.w	r2, r3, #31
 8001aa0:	4907      	ldr	r1, [pc, #28]	; (8001ac0 <__NVIC_EnableIRQ+0x38>)
 8001aa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aa6:	095b      	lsrs	r3, r3, #5
 8001aa8:	2001      	movs	r0, #1
 8001aaa:	fa00 f202 	lsl.w	r2, r0, r2
 8001aae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001ab2:	bf00      	nop
 8001ab4:	370c      	adds	r7, #12
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop
 8001ac0:	e000e100 	.word	0xe000e100

08001ac4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b083      	sub	sp, #12
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	4603      	mov	r3, r0
 8001acc:	6039      	str	r1, [r7, #0]
 8001ace:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ad0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	db0a      	blt.n	8001aee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	b2da      	uxtb	r2, r3
 8001adc:	490c      	ldr	r1, [pc, #48]	; (8001b10 <__NVIC_SetPriority+0x4c>)
 8001ade:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ae2:	0112      	lsls	r2, r2, #4
 8001ae4:	b2d2      	uxtb	r2, r2
 8001ae6:	440b      	add	r3, r1
 8001ae8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001aec:	e00a      	b.n	8001b04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	b2da      	uxtb	r2, r3
 8001af2:	4908      	ldr	r1, [pc, #32]	; (8001b14 <__NVIC_SetPriority+0x50>)
 8001af4:	79fb      	ldrb	r3, [r7, #7]
 8001af6:	f003 030f 	and.w	r3, r3, #15
 8001afa:	3b04      	subs	r3, #4
 8001afc:	0112      	lsls	r2, r2, #4
 8001afe:	b2d2      	uxtb	r2, r2
 8001b00:	440b      	add	r3, r1
 8001b02:	761a      	strb	r2, [r3, #24]
}
 8001b04:	bf00      	nop
 8001b06:	370c      	adds	r7, #12
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0e:	4770      	bx	lr
 8001b10:	e000e100 	.word	0xe000e100
 8001b14:	e000ed00 	.word	0xe000ed00

08001b18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b089      	sub	sp, #36	; 0x24
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	60f8      	str	r0, [r7, #12]
 8001b20:	60b9      	str	r1, [r7, #8]
 8001b22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	f003 0307 	and.w	r3, r3, #7
 8001b2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b2c:	69fb      	ldr	r3, [r7, #28]
 8001b2e:	f1c3 0307 	rsb	r3, r3, #7
 8001b32:	2b04      	cmp	r3, #4
 8001b34:	bf28      	it	cs
 8001b36:	2304      	movcs	r3, #4
 8001b38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b3a:	69fb      	ldr	r3, [r7, #28]
 8001b3c:	3304      	adds	r3, #4
 8001b3e:	2b06      	cmp	r3, #6
 8001b40:	d902      	bls.n	8001b48 <NVIC_EncodePriority+0x30>
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	3b03      	subs	r3, #3
 8001b46:	e000      	b.n	8001b4a <NVIC_EncodePriority+0x32>
 8001b48:	2300      	movs	r3, #0
 8001b4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b4c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001b50:	69bb      	ldr	r3, [r7, #24]
 8001b52:	fa02 f303 	lsl.w	r3, r2, r3
 8001b56:	43da      	mvns	r2, r3
 8001b58:	68bb      	ldr	r3, [r7, #8]
 8001b5a:	401a      	ands	r2, r3
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b60:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	fa01 f303 	lsl.w	r3, r1, r3
 8001b6a:	43d9      	mvns	r1, r3
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b70:	4313      	orrs	r3, r2
         );
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	3724      	adds	r7, #36	; 0x24
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr
	...

08001b80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b082      	sub	sp, #8
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	3b01      	subs	r3, #1
 8001b8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b90:	d301      	bcc.n	8001b96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b92:	2301      	movs	r3, #1
 8001b94:	e00f      	b.n	8001bb6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b96:	4a0a      	ldr	r2, [pc, #40]	; (8001bc0 <SysTick_Config+0x40>)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	3b01      	subs	r3, #1
 8001b9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b9e:	210f      	movs	r1, #15
 8001ba0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ba4:	f7ff ff8e 	bl	8001ac4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ba8:	4b05      	ldr	r3, [pc, #20]	; (8001bc0 <SysTick_Config+0x40>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bae:	4b04      	ldr	r3, [pc, #16]	; (8001bc0 <SysTick_Config+0x40>)
 8001bb0:	2207      	movs	r2, #7
 8001bb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bb4:	2300      	movs	r3, #0
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3708      	adds	r7, #8
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	e000e010 	.word	0xe000e010

08001bc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b082      	sub	sp, #8
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bcc:	6878      	ldr	r0, [r7, #4]
 8001bce:	f7ff ff29 	bl	8001a24 <__NVIC_SetPriorityGrouping>
}
 8001bd2:	bf00      	nop
 8001bd4:	3708      	adds	r7, #8
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}

08001bda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bda:	b580      	push	{r7, lr}
 8001bdc:	b086      	sub	sp, #24
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	4603      	mov	r3, r0
 8001be2:	60b9      	str	r1, [r7, #8]
 8001be4:	607a      	str	r2, [r7, #4]
 8001be6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001be8:	2300      	movs	r3, #0
 8001bea:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001bec:	f7ff ff3e 	bl	8001a6c <__NVIC_GetPriorityGrouping>
 8001bf0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bf2:	687a      	ldr	r2, [r7, #4]
 8001bf4:	68b9      	ldr	r1, [r7, #8]
 8001bf6:	6978      	ldr	r0, [r7, #20]
 8001bf8:	f7ff ff8e 	bl	8001b18 <NVIC_EncodePriority>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c02:	4611      	mov	r1, r2
 8001c04:	4618      	mov	r0, r3
 8001c06:	f7ff ff5d 	bl	8001ac4 <__NVIC_SetPriority>
}
 8001c0a:	bf00      	nop
 8001c0c:	3718      	adds	r7, #24
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}

08001c12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c12:	b580      	push	{r7, lr}
 8001c14:	b082      	sub	sp, #8
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	4603      	mov	r3, r0
 8001c1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c20:	4618      	mov	r0, r3
 8001c22:	f7ff ff31 	bl	8001a88 <__NVIC_EnableIRQ>
}
 8001c26:	bf00      	nop
 8001c28:	3708      	adds	r7, #8
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}

08001c2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c2e:	b580      	push	{r7, lr}
 8001c30:	b082      	sub	sp, #8
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f7ff ffa2 	bl	8001b80 <SysTick_Config>
 8001c3c:	4603      	mov	r3, r0
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3708      	adds	r7, #8
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}

08001c46 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c46:	b480      	push	{r7}
 8001c48:	b085      	sub	sp, #20
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	2b02      	cmp	r3, #2
 8001c5c:	d008      	beq.n	8001c70 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2204      	movs	r2, #4
 8001c62:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2200      	movs	r2, #0
 8001c68:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	e022      	b.n	8001cb6 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f022 020e 	bic.w	r2, r2, #14
 8001c7e:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	681a      	ldr	r2, [r3, #0]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f022 0201 	bic.w	r2, r2, #1
 8001c8e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c94:	f003 021c 	and.w	r2, r3, #28
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c9c:	2101      	movs	r1, #1
 8001c9e:	fa01 f202 	lsl.w	r2, r1, r2
 8001ca2:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2200      	movs	r2, #0
 8001cb0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001cb4:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	3714      	adds	r7, #20
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr

08001cc2 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001cc2:	b580      	push	{r7, lr}
 8001cc4:	b084      	sub	sp, #16
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	2b02      	cmp	r3, #2
 8001cd8:	d005      	beq.n	8001ce6 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2204      	movs	r2, #4
 8001cde:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	73fb      	strb	r3, [r7, #15]
 8001ce4:	e029      	b.n	8001d3a <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f022 020e 	bic.w	r2, r2, #14
 8001cf4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f022 0201 	bic.w	r2, r2, #1
 8001d04:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d0a:	f003 021c 	and.w	r2, r3, #28
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d12:	2101      	movs	r1, #1
 8001d14:	fa01 f202 	lsl.w	r2, r1, r2
 8001d18:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2200      	movs	r2, #0
 8001d26:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d003      	beq.n	8001d3a <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	4798      	blx	r3
    }
  }
  return status;
 8001d3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	3710      	adds	r7, #16
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}

08001d44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b087      	sub	sp, #28
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
 8001d4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d52:	e14e      	b.n	8001ff2 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	681a      	ldr	r2, [r3, #0]
 8001d58:	2101      	movs	r1, #1
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d60:	4013      	ands	r3, r2
 8001d62:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	f000 8140 	beq.w	8001fec <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	2b01      	cmp	r3, #1
 8001d72:	d00b      	beq.n	8001d8c <HAL_GPIO_Init+0x48>
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	2b02      	cmp	r3, #2
 8001d7a:	d007      	beq.n	8001d8c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d80:	2b11      	cmp	r3, #17
 8001d82:	d003      	beq.n	8001d8c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	2b12      	cmp	r3, #18
 8001d8a:	d130      	bne.n	8001dee <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	005b      	lsls	r3, r3, #1
 8001d96:	2203      	movs	r2, #3
 8001d98:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9c:	43db      	mvns	r3, r3
 8001d9e:	693a      	ldr	r2, [r7, #16]
 8001da0:	4013      	ands	r3, r2
 8001da2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	68da      	ldr	r2, [r3, #12]
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	005b      	lsls	r3, r3, #1
 8001dac:	fa02 f303 	lsl.w	r3, r2, r3
 8001db0:	693a      	ldr	r2, [r7, #16]
 8001db2:	4313      	orrs	r3, r2
 8001db4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	693a      	ldr	r2, [r7, #16]
 8001dba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dca:	43db      	mvns	r3, r3
 8001dcc:	693a      	ldr	r2, [r7, #16]
 8001dce:	4013      	ands	r3, r2
 8001dd0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	091b      	lsrs	r3, r3, #4
 8001dd8:	f003 0201 	and.w	r2, r3, #1
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	fa02 f303 	lsl.w	r3, r2, r3
 8001de2:	693a      	ldr	r2, [r7, #16]
 8001de4:	4313      	orrs	r3, r2
 8001de6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	693a      	ldr	r2, [r7, #16]
 8001dec:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	68db      	ldr	r3, [r3, #12]
 8001df2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	005b      	lsls	r3, r3, #1
 8001df8:	2203      	movs	r2, #3
 8001dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfe:	43db      	mvns	r3, r3
 8001e00:	693a      	ldr	r2, [r7, #16]
 8001e02:	4013      	ands	r3, r2
 8001e04:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	689a      	ldr	r2, [r3, #8]
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	005b      	lsls	r3, r3, #1
 8001e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e12:	693a      	ldr	r2, [r7, #16]
 8001e14:	4313      	orrs	r3, r2
 8001e16:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	693a      	ldr	r2, [r7, #16]
 8001e1c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	2b02      	cmp	r3, #2
 8001e24:	d003      	beq.n	8001e2e <HAL_GPIO_Init+0xea>
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	2b12      	cmp	r3, #18
 8001e2c:	d123      	bne.n	8001e76 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	08da      	lsrs	r2, r3, #3
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	3208      	adds	r2, #8
 8001e36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e3a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	f003 0307 	and.w	r3, r3, #7
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	220f      	movs	r2, #15
 8001e46:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4a:	43db      	mvns	r3, r3
 8001e4c:	693a      	ldr	r2, [r7, #16]
 8001e4e:	4013      	ands	r3, r2
 8001e50:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	691a      	ldr	r2, [r3, #16]
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	f003 0307 	and.w	r3, r3, #7
 8001e5c:	009b      	lsls	r3, r3, #2
 8001e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e62:	693a      	ldr	r2, [r7, #16]
 8001e64:	4313      	orrs	r3, r2
 8001e66:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	08da      	lsrs	r2, r3, #3
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	3208      	adds	r2, #8
 8001e70:	6939      	ldr	r1, [r7, #16]
 8001e72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	005b      	lsls	r3, r3, #1
 8001e80:	2203      	movs	r2, #3
 8001e82:	fa02 f303 	lsl.w	r3, r2, r3
 8001e86:	43db      	mvns	r3, r3
 8001e88:	693a      	ldr	r2, [r7, #16]
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	f003 0203 	and.w	r2, r3, #3
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	005b      	lsls	r3, r3, #1
 8001e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9e:	693a      	ldr	r2, [r7, #16]
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	693a      	ldr	r2, [r7, #16]
 8001ea8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	f000 809a 	beq.w	8001fec <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eb8:	4b55      	ldr	r3, [pc, #340]	; (8002010 <HAL_GPIO_Init+0x2cc>)
 8001eba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ebc:	4a54      	ldr	r2, [pc, #336]	; (8002010 <HAL_GPIO_Init+0x2cc>)
 8001ebe:	f043 0301 	orr.w	r3, r3, #1
 8001ec2:	6613      	str	r3, [r2, #96]	; 0x60
 8001ec4:	4b52      	ldr	r3, [pc, #328]	; (8002010 <HAL_GPIO_Init+0x2cc>)
 8001ec6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ec8:	f003 0301 	and.w	r3, r3, #1
 8001ecc:	60bb      	str	r3, [r7, #8]
 8001ece:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001ed0:	4a50      	ldr	r2, [pc, #320]	; (8002014 <HAL_GPIO_Init+0x2d0>)
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	089b      	lsrs	r3, r3, #2
 8001ed6:	3302      	adds	r3, #2
 8001ed8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001edc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	f003 0303 	and.w	r3, r3, #3
 8001ee4:	009b      	lsls	r3, r3, #2
 8001ee6:	220f      	movs	r2, #15
 8001ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eec:	43db      	mvns	r3, r3
 8001eee:	693a      	ldr	r2, [r7, #16]
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001efa:	d013      	beq.n	8001f24 <HAL_GPIO_Init+0x1e0>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	4a46      	ldr	r2, [pc, #280]	; (8002018 <HAL_GPIO_Init+0x2d4>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d00d      	beq.n	8001f20 <HAL_GPIO_Init+0x1dc>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	4a45      	ldr	r2, [pc, #276]	; (800201c <HAL_GPIO_Init+0x2d8>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d007      	beq.n	8001f1c <HAL_GPIO_Init+0x1d8>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	4a44      	ldr	r2, [pc, #272]	; (8002020 <HAL_GPIO_Init+0x2dc>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d101      	bne.n	8001f18 <HAL_GPIO_Init+0x1d4>
 8001f14:	2303      	movs	r3, #3
 8001f16:	e006      	b.n	8001f26 <HAL_GPIO_Init+0x1e2>
 8001f18:	2307      	movs	r3, #7
 8001f1a:	e004      	b.n	8001f26 <HAL_GPIO_Init+0x1e2>
 8001f1c:	2302      	movs	r3, #2
 8001f1e:	e002      	b.n	8001f26 <HAL_GPIO_Init+0x1e2>
 8001f20:	2301      	movs	r3, #1
 8001f22:	e000      	b.n	8001f26 <HAL_GPIO_Init+0x1e2>
 8001f24:	2300      	movs	r3, #0
 8001f26:	697a      	ldr	r2, [r7, #20]
 8001f28:	f002 0203 	and.w	r2, r2, #3
 8001f2c:	0092      	lsls	r2, r2, #2
 8001f2e:	4093      	lsls	r3, r2
 8001f30:	693a      	ldr	r2, [r7, #16]
 8001f32:	4313      	orrs	r3, r2
 8001f34:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001f36:	4937      	ldr	r1, [pc, #220]	; (8002014 <HAL_GPIO_Init+0x2d0>)
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	089b      	lsrs	r3, r3, #2
 8001f3c:	3302      	adds	r3, #2
 8001f3e:	693a      	ldr	r2, [r7, #16]
 8001f40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001f44:	4b37      	ldr	r3, [pc, #220]	; (8002024 <HAL_GPIO_Init+0x2e0>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	43db      	mvns	r3, r3
 8001f4e:	693a      	ldr	r2, [r7, #16]
 8001f50:	4013      	ands	r3, r2
 8001f52:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d003      	beq.n	8001f68 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001f60:	693a      	ldr	r2, [r7, #16]
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	4313      	orrs	r3, r2
 8001f66:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001f68:	4a2e      	ldr	r2, [pc, #184]	; (8002024 <HAL_GPIO_Init+0x2e0>)
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001f6e:	4b2d      	ldr	r3, [pc, #180]	; (8002024 <HAL_GPIO_Init+0x2e0>)
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	43db      	mvns	r3, r3
 8001f78:	693a      	ldr	r2, [r7, #16]
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d003      	beq.n	8001f92 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001f8a:	693a      	ldr	r2, [r7, #16]
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001f92:	4a24      	ldr	r2, [pc, #144]	; (8002024 <HAL_GPIO_Init+0x2e0>)
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001f98:	4b22      	ldr	r3, [pc, #136]	; (8002024 <HAL_GPIO_Init+0x2e0>)
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	43db      	mvns	r3, r3
 8001fa2:	693a      	ldr	r2, [r7, #16]
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d003      	beq.n	8001fbc <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001fb4:	693a      	ldr	r2, [r7, #16]
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001fbc:	4a19      	ldr	r2, [pc, #100]	; (8002024 <HAL_GPIO_Init+0x2e0>)
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001fc2:	4b18      	ldr	r3, [pc, #96]	; (8002024 <HAL_GPIO_Init+0x2e0>)
 8001fc4:	68db      	ldr	r3, [r3, #12]
 8001fc6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	43db      	mvns	r3, r3
 8001fcc:	693a      	ldr	r2, [r7, #16]
 8001fce:	4013      	ands	r3, r2
 8001fd0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d003      	beq.n	8001fe6 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001fde:	693a      	ldr	r2, [r7, #16]
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001fe6:	4a0f      	ldr	r2, [pc, #60]	; (8002024 <HAL_GPIO_Init+0x2e0>)
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	3301      	adds	r3, #1
 8001ff0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	fa22 f303 	lsr.w	r3, r2, r3
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	f47f aea9 	bne.w	8001d54 <HAL_GPIO_Init+0x10>
  }
}
 8002002:	bf00      	nop
 8002004:	bf00      	nop
 8002006:	371c      	adds	r7, #28
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr
 8002010:	40021000 	.word	0x40021000
 8002014:	40010000 	.word	0x40010000
 8002018:	48000400 	.word	0x48000400
 800201c:	48000800 	.word	0x48000800
 8002020:	48000c00 	.word	0x48000c00
 8002024:	40010400 	.word	0x40010400

08002028 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	460b      	mov	r3, r1
 8002032:	807b      	strh	r3, [r7, #2]
 8002034:	4613      	mov	r3, r2
 8002036:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002038:	787b      	ldrb	r3, [r7, #1]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d003      	beq.n	8002046 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800203e:	887a      	ldrh	r2, [r7, #2]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002044:	e002      	b.n	800204c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002046:	887a      	ldrh	r2, [r7, #2]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800204c:	bf00      	nop
 800204e:	370c      	adds	r7, #12
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr

08002058 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b082      	sub	sp, #8
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d101      	bne.n	800206a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e081      	b.n	800216e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002070:	b2db      	uxtb	r3, r3
 8002072:	2b00      	cmp	r3, #0
 8002074:	d106      	bne.n	8002084 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2200      	movs	r2, #0
 800207a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f7ff fa9e 	bl	80015c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2224      	movs	r2, #36	; 0x24
 8002088:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f022 0201 	bic.w	r2, r2, #1
 800209a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	685a      	ldr	r2, [r3, #4]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80020a8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	689a      	ldr	r2, [r3, #8]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80020b8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	68db      	ldr	r3, [r3, #12]
 80020be:	2b01      	cmp	r3, #1
 80020c0:	d107      	bne.n	80020d2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	689a      	ldr	r2, [r3, #8]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80020ce:	609a      	str	r2, [r3, #8]
 80020d0:	e006      	b.n	80020e0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	689a      	ldr	r2, [r3, #8]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80020de:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	2b02      	cmp	r3, #2
 80020e6:	d104      	bne.n	80020f2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80020f0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	687a      	ldr	r2, [r7, #4]
 80020fa:	6812      	ldr	r2, [r2, #0]
 80020fc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002100:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002104:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	68da      	ldr	r2, [r3, #12]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002114:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	691a      	ldr	r2, [r3, #16]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	695b      	ldr	r3, [r3, #20]
 800211e:	ea42 0103 	orr.w	r1, r2, r3
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	699b      	ldr	r3, [r3, #24]
 8002126:	021a      	lsls	r2, r3, #8
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	430a      	orrs	r2, r1
 800212e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	69d9      	ldr	r1, [r3, #28]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6a1a      	ldr	r2, [r3, #32]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	430a      	orrs	r2, r1
 800213e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f042 0201 	orr.w	r2, r2, #1
 800214e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2200      	movs	r2, #0
 8002154:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2220      	movs	r2, #32
 800215a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2200      	movs	r2, #0
 8002162:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2200      	movs	r2, #0
 8002168:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800216c:	2300      	movs	r3, #0
}
 800216e:	4618      	mov	r0, r3
 8002170:	3708      	adds	r7, #8
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
	...

08002178 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b088      	sub	sp, #32
 800217c:	af02      	add	r7, sp, #8
 800217e:	60f8      	str	r0, [r7, #12]
 8002180:	607a      	str	r2, [r7, #4]
 8002182:	461a      	mov	r2, r3
 8002184:	460b      	mov	r3, r1
 8002186:	817b      	strh	r3, [r7, #10]
 8002188:	4613      	mov	r3, r2
 800218a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002192:	b2db      	uxtb	r3, r3
 8002194:	2b20      	cmp	r3, #32
 8002196:	f040 80da 	bne.w	800234e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	d101      	bne.n	80021a8 <HAL_I2C_Master_Transmit+0x30>
 80021a4:	2302      	movs	r3, #2
 80021a6:	e0d3      	b.n	8002350 <HAL_I2C_Master_Transmit+0x1d8>
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	2201      	movs	r2, #1
 80021ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80021b0:	f7ff fc08 	bl	80019c4 <HAL_GetTick>
 80021b4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	9300      	str	r3, [sp, #0]
 80021ba:	2319      	movs	r3, #25
 80021bc:	2201      	movs	r2, #1
 80021be:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80021c2:	68f8      	ldr	r0, [r7, #12]
 80021c4:	f000 f9f7 	bl	80025b6 <I2C_WaitOnFlagUntilTimeout>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d001      	beq.n	80021d2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	e0be      	b.n	8002350 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	2221      	movs	r2, #33	; 0x21
 80021d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	2210      	movs	r2, #16
 80021de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	2200      	movs	r2, #0
 80021e6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	687a      	ldr	r2, [r7, #4]
 80021ec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	893a      	ldrh	r2, [r7, #8]
 80021f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	2200      	movs	r2, #0
 80021f8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021fe:	b29b      	uxth	r3, r3
 8002200:	2bff      	cmp	r3, #255	; 0xff
 8002202:	d90e      	bls.n	8002222 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	22ff      	movs	r2, #255	; 0xff
 8002208:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800220e:	b2da      	uxtb	r2, r3
 8002210:	8979      	ldrh	r1, [r7, #10]
 8002212:	4b51      	ldr	r3, [pc, #324]	; (8002358 <HAL_I2C_Master_Transmit+0x1e0>)
 8002214:	9300      	str	r3, [sp, #0]
 8002216:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800221a:	68f8      	ldr	r0, [r7, #12]
 800221c:	f000 faee 	bl	80027fc <I2C_TransferConfig>
 8002220:	e06c      	b.n	80022fc <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002226:	b29a      	uxth	r2, r3
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002230:	b2da      	uxtb	r2, r3
 8002232:	8979      	ldrh	r1, [r7, #10]
 8002234:	4b48      	ldr	r3, [pc, #288]	; (8002358 <HAL_I2C_Master_Transmit+0x1e0>)
 8002236:	9300      	str	r3, [sp, #0]
 8002238:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800223c:	68f8      	ldr	r0, [r7, #12]
 800223e:	f000 fadd 	bl	80027fc <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8002242:	e05b      	b.n	80022fc <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002244:	697a      	ldr	r2, [r7, #20]
 8002246:	6a39      	ldr	r1, [r7, #32]
 8002248:	68f8      	ldr	r0, [r7, #12]
 800224a:	f000 f9f4 	bl	8002636 <I2C_WaitOnTXISFlagUntilTimeout>
 800224e:	4603      	mov	r3, r0
 8002250:	2b00      	cmp	r3, #0
 8002252:	d001      	beq.n	8002258 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002254:	2301      	movs	r3, #1
 8002256:	e07b      	b.n	8002350 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800225c:	781a      	ldrb	r2, [r3, #0]
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002268:	1c5a      	adds	r2, r3, #1
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002272:	b29b      	uxth	r3, r3
 8002274:	3b01      	subs	r3, #1
 8002276:	b29a      	uxth	r2, r3
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002280:	3b01      	subs	r3, #1
 8002282:	b29a      	uxth	r2, r3
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800228c:	b29b      	uxth	r3, r3
 800228e:	2b00      	cmp	r3, #0
 8002290:	d034      	beq.n	80022fc <HAL_I2C_Master_Transmit+0x184>
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002296:	2b00      	cmp	r3, #0
 8002298:	d130      	bne.n	80022fc <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	9300      	str	r3, [sp, #0]
 800229e:	6a3b      	ldr	r3, [r7, #32]
 80022a0:	2200      	movs	r2, #0
 80022a2:	2180      	movs	r1, #128	; 0x80
 80022a4:	68f8      	ldr	r0, [r7, #12]
 80022a6:	f000 f986 	bl	80025b6 <I2C_WaitOnFlagUntilTimeout>
 80022aa:	4603      	mov	r3, r0
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d001      	beq.n	80022b4 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80022b0:	2301      	movs	r3, #1
 80022b2:	e04d      	b.n	8002350 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022b8:	b29b      	uxth	r3, r3
 80022ba:	2bff      	cmp	r3, #255	; 0xff
 80022bc:	d90e      	bls.n	80022dc <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	22ff      	movs	r2, #255	; 0xff
 80022c2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022c8:	b2da      	uxtb	r2, r3
 80022ca:	8979      	ldrh	r1, [r7, #10]
 80022cc:	2300      	movs	r3, #0
 80022ce:	9300      	str	r3, [sp, #0]
 80022d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80022d4:	68f8      	ldr	r0, [r7, #12]
 80022d6:	f000 fa91 	bl	80027fc <I2C_TransferConfig>
 80022da:	e00f      	b.n	80022fc <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022e0:	b29a      	uxth	r2, r3
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022ea:	b2da      	uxtb	r2, r3
 80022ec:	8979      	ldrh	r1, [r7, #10]
 80022ee:	2300      	movs	r3, #0
 80022f0:	9300      	str	r3, [sp, #0]
 80022f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80022f6:	68f8      	ldr	r0, [r7, #12]
 80022f8:	f000 fa80 	bl	80027fc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002300:	b29b      	uxth	r3, r3
 8002302:	2b00      	cmp	r3, #0
 8002304:	d19e      	bne.n	8002244 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002306:	697a      	ldr	r2, [r7, #20]
 8002308:	6a39      	ldr	r1, [r7, #32]
 800230a:	68f8      	ldr	r0, [r7, #12]
 800230c:	f000 f9d3 	bl	80026b6 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002310:	4603      	mov	r3, r0
 8002312:	2b00      	cmp	r3, #0
 8002314:	d001      	beq.n	800231a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e01a      	b.n	8002350 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	2220      	movs	r2, #32
 8002320:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	6859      	ldr	r1, [r3, #4]
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	4b0b      	ldr	r3, [pc, #44]	; (800235c <HAL_I2C_Master_Transmit+0x1e4>)
 800232e:	400b      	ands	r3, r1
 8002330:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	2220      	movs	r2, #32
 8002336:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	2200      	movs	r2, #0
 800233e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	2200      	movs	r2, #0
 8002346:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800234a:	2300      	movs	r3, #0
 800234c:	e000      	b.n	8002350 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800234e:	2302      	movs	r3, #2
  }
}
 8002350:	4618      	mov	r0, r3
 8002352:	3718      	adds	r7, #24
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}
 8002358:	80002000 	.word	0x80002000
 800235c:	fe00e800 	.word	0xfe00e800

08002360 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b08a      	sub	sp, #40	; 0x28
 8002364:	af02      	add	r7, sp, #8
 8002366:	60f8      	str	r0, [r7, #12]
 8002368:	607a      	str	r2, [r7, #4]
 800236a:	603b      	str	r3, [r7, #0]
 800236c:	460b      	mov	r3, r1
 800236e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8002370:	2300      	movs	r3, #0
 8002372:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800237a:	b2db      	uxtb	r3, r3
 800237c:	2b20      	cmp	r3, #32
 800237e:	f040 80f1 	bne.w	8002564 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	699b      	ldr	r3, [r3, #24]
 8002388:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800238c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002390:	d101      	bne.n	8002396 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8002392:	2302      	movs	r3, #2
 8002394:	e0e7      	b.n	8002566 <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800239c:	2b01      	cmp	r3, #1
 800239e:	d101      	bne.n	80023a4 <HAL_I2C_IsDeviceReady+0x44>
 80023a0:	2302      	movs	r3, #2
 80023a2:	e0e0      	b.n	8002566 <HAL_I2C_IsDeviceReady+0x206>
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	2201      	movs	r2, #1
 80023a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	2224      	movs	r2, #36	; 0x24
 80023b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	2200      	movs	r2, #0
 80023b8:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	68db      	ldr	r3, [r3, #12]
 80023be:	2b01      	cmp	r3, #1
 80023c0:	d107      	bne.n	80023d2 <HAL_I2C_IsDeviceReady+0x72>
 80023c2:	897b      	ldrh	r3, [r7, #10]
 80023c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80023c8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80023cc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80023d0:	e004      	b.n	80023dc <HAL_I2C_IsDeviceReady+0x7c>
 80023d2:	897b      	ldrh	r3, [r7, #10]
 80023d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80023d8:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 80023dc:	68fa      	ldr	r2, [r7, #12]
 80023de:	6812      	ldr	r2, [r2, #0]
 80023e0:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80023e2:	f7ff faef 	bl	80019c4 <HAL_GetTick>
 80023e6:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	699b      	ldr	r3, [r3, #24]
 80023ee:	f003 0320 	and.w	r3, r3, #32
 80023f2:	2b20      	cmp	r3, #32
 80023f4:	bf0c      	ite	eq
 80023f6:	2301      	moveq	r3, #1
 80023f8:	2300      	movne	r3, #0
 80023fa:	b2db      	uxtb	r3, r3
 80023fc:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	699b      	ldr	r3, [r3, #24]
 8002404:	f003 0310 	and.w	r3, r3, #16
 8002408:	2b10      	cmp	r3, #16
 800240a:	bf0c      	ite	eq
 800240c:	2301      	moveq	r3, #1
 800240e:	2300      	movne	r3, #0
 8002410:	b2db      	uxtb	r3, r3
 8002412:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002414:	e034      	b.n	8002480 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800241c:	d01a      	beq.n	8002454 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800241e:	f7ff fad1 	bl	80019c4 <HAL_GetTick>
 8002422:	4602      	mov	r2, r0
 8002424:	69bb      	ldr	r3, [r7, #24]
 8002426:	1ad3      	subs	r3, r2, r3
 8002428:	683a      	ldr	r2, [r7, #0]
 800242a:	429a      	cmp	r2, r3
 800242c:	d302      	bcc.n	8002434 <HAL_I2C_IsDeviceReady+0xd4>
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d10f      	bne.n	8002454 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	2220      	movs	r2, #32
 8002438:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002440:	f043 0220 	orr.w	r2, r3, #32
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	2200      	movs	r2, #0
 800244c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	e088      	b.n	8002566 <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	699b      	ldr	r3, [r3, #24]
 800245a:	f003 0320 	and.w	r3, r3, #32
 800245e:	2b20      	cmp	r3, #32
 8002460:	bf0c      	ite	eq
 8002462:	2301      	moveq	r3, #1
 8002464:	2300      	movne	r3, #0
 8002466:	b2db      	uxtb	r3, r3
 8002468:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	699b      	ldr	r3, [r3, #24]
 8002470:	f003 0310 	and.w	r3, r3, #16
 8002474:	2b10      	cmp	r3, #16
 8002476:	bf0c      	ite	eq
 8002478:	2301      	moveq	r3, #1
 800247a:	2300      	movne	r3, #0
 800247c:	b2db      	uxtb	r3, r3
 800247e:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002480:	7ffb      	ldrb	r3, [r7, #31]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d102      	bne.n	800248c <HAL_I2C_IsDeviceReady+0x12c>
 8002486:	7fbb      	ldrb	r3, [r7, #30]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d0c4      	beq.n	8002416 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	699b      	ldr	r3, [r3, #24]
 8002492:	f003 0310 	and.w	r3, r3, #16
 8002496:	2b10      	cmp	r3, #16
 8002498:	d01a      	beq.n	80024d0 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800249a:	69bb      	ldr	r3, [r7, #24]
 800249c:	9300      	str	r3, [sp, #0]
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	2200      	movs	r2, #0
 80024a2:	2120      	movs	r1, #32
 80024a4:	68f8      	ldr	r0, [r7, #12]
 80024a6:	f000 f886 	bl	80025b6 <I2C_WaitOnFlagUntilTimeout>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d001      	beq.n	80024b4 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 80024b0:	2301      	movs	r3, #1
 80024b2:	e058      	b.n	8002566 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	2220      	movs	r2, #32
 80024ba:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	2220      	movs	r2, #32
 80024c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	2200      	movs	r2, #0
 80024c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 80024cc:	2300      	movs	r3, #0
 80024ce:	e04a      	b.n	8002566 <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80024d0:	69bb      	ldr	r3, [r7, #24]
 80024d2:	9300      	str	r3, [sp, #0]
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	2200      	movs	r2, #0
 80024d8:	2120      	movs	r1, #32
 80024da:	68f8      	ldr	r0, [r7, #12]
 80024dc:	f000 f86b 	bl	80025b6 <I2C_WaitOnFlagUntilTimeout>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d001      	beq.n	80024ea <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e03d      	b.n	8002566 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	2210      	movs	r2, #16
 80024f0:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	2220      	movs	r2, #32
 80024f8:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	687a      	ldr	r2, [r7, #4]
 80024fe:	429a      	cmp	r2, r3
 8002500:	d118      	bne.n	8002534 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	685a      	ldr	r2, [r3, #4]
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002510:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002512:	69bb      	ldr	r3, [r7, #24]
 8002514:	9300      	str	r3, [sp, #0]
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	2200      	movs	r2, #0
 800251a:	2120      	movs	r1, #32
 800251c:	68f8      	ldr	r0, [r7, #12]
 800251e:	f000 f84a 	bl	80025b6 <I2C_WaitOnFlagUntilTimeout>
 8002522:	4603      	mov	r3, r0
 8002524:	2b00      	cmp	r3, #0
 8002526:	d001      	beq.n	800252c <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	e01c      	b.n	8002566 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	2220      	movs	r2, #32
 8002532:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	3301      	adds	r3, #1
 8002538:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	687a      	ldr	r2, [r7, #4]
 800253e:	429a      	cmp	r2, r3
 8002540:	f63f af3b 	bhi.w	80023ba <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	2220      	movs	r2, #32
 8002548:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002550:	f043 0220 	orr.w	r2, r3, #32
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	2200      	movs	r2, #0
 800255c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	e000      	b.n	8002566 <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8002564:	2302      	movs	r3, #2
  }
}
 8002566:	4618      	mov	r0, r3
 8002568:	3720      	adds	r7, #32
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}

0800256e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800256e:	b480      	push	{r7}
 8002570:	b083      	sub	sp, #12
 8002572:	af00      	add	r7, sp, #0
 8002574:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	699b      	ldr	r3, [r3, #24]
 800257c:	f003 0302 	and.w	r3, r3, #2
 8002580:	2b02      	cmp	r3, #2
 8002582:	d103      	bne.n	800258c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	2200      	movs	r2, #0
 800258a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	699b      	ldr	r3, [r3, #24]
 8002592:	f003 0301 	and.w	r3, r3, #1
 8002596:	2b01      	cmp	r3, #1
 8002598:	d007      	beq.n	80025aa <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	699a      	ldr	r2, [r3, #24]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f042 0201 	orr.w	r2, r2, #1
 80025a8:	619a      	str	r2, [r3, #24]
  }
}
 80025aa:	bf00      	nop
 80025ac:	370c      	adds	r7, #12
 80025ae:	46bd      	mov	sp, r7
 80025b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b4:	4770      	bx	lr

080025b6 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80025b6:	b580      	push	{r7, lr}
 80025b8:	b084      	sub	sp, #16
 80025ba:	af00      	add	r7, sp, #0
 80025bc:	60f8      	str	r0, [r7, #12]
 80025be:	60b9      	str	r1, [r7, #8]
 80025c0:	603b      	str	r3, [r7, #0]
 80025c2:	4613      	mov	r3, r2
 80025c4:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80025c6:	e022      	b.n	800260e <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80025ce:	d01e      	beq.n	800260e <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025d0:	f7ff f9f8 	bl	80019c4 <HAL_GetTick>
 80025d4:	4602      	mov	r2, r0
 80025d6:	69bb      	ldr	r3, [r7, #24]
 80025d8:	1ad3      	subs	r3, r2, r3
 80025da:	683a      	ldr	r2, [r7, #0]
 80025dc:	429a      	cmp	r2, r3
 80025de:	d302      	bcc.n	80025e6 <I2C_WaitOnFlagUntilTimeout+0x30>
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d113      	bne.n	800260e <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ea:	f043 0220 	orr.w	r2, r3, #32
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	2220      	movs	r2, #32
 80025f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	2200      	movs	r2, #0
 80025fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	2200      	movs	r2, #0
 8002606:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e00f      	b.n	800262e <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	699a      	ldr	r2, [r3, #24]
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	4013      	ands	r3, r2
 8002618:	68ba      	ldr	r2, [r7, #8]
 800261a:	429a      	cmp	r2, r3
 800261c:	bf0c      	ite	eq
 800261e:	2301      	moveq	r3, #1
 8002620:	2300      	movne	r3, #0
 8002622:	b2db      	uxtb	r3, r3
 8002624:	461a      	mov	r2, r3
 8002626:	79fb      	ldrb	r3, [r7, #7]
 8002628:	429a      	cmp	r2, r3
 800262a:	d0cd      	beq.n	80025c8 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800262c:	2300      	movs	r3, #0
}
 800262e:	4618      	mov	r0, r3
 8002630:	3710      	adds	r7, #16
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}

08002636 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002636:	b580      	push	{r7, lr}
 8002638:	b084      	sub	sp, #16
 800263a:	af00      	add	r7, sp, #0
 800263c:	60f8      	str	r0, [r7, #12]
 800263e:	60b9      	str	r1, [r7, #8]
 8002640:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002642:	e02c      	b.n	800269e <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002644:	687a      	ldr	r2, [r7, #4]
 8002646:	68b9      	ldr	r1, [r7, #8]
 8002648:	68f8      	ldr	r0, [r7, #12]
 800264a:	f000 f871 	bl	8002730 <I2C_IsAcknowledgeFailed>
 800264e:	4603      	mov	r3, r0
 8002650:	2b00      	cmp	r3, #0
 8002652:	d001      	beq.n	8002658 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	e02a      	b.n	80026ae <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800265e:	d01e      	beq.n	800269e <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002660:	f7ff f9b0 	bl	80019c4 <HAL_GetTick>
 8002664:	4602      	mov	r2, r0
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	1ad3      	subs	r3, r2, r3
 800266a:	68ba      	ldr	r2, [r7, #8]
 800266c:	429a      	cmp	r2, r3
 800266e:	d302      	bcc.n	8002676 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d113      	bne.n	800269e <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800267a:	f043 0220 	orr.w	r2, r3, #32
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	2220      	movs	r2, #32
 8002686:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	2200      	movs	r2, #0
 800268e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	2200      	movs	r2, #0
 8002696:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e007      	b.n	80026ae <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	699b      	ldr	r3, [r3, #24]
 80026a4:	f003 0302 	and.w	r3, r3, #2
 80026a8:	2b02      	cmp	r3, #2
 80026aa:	d1cb      	bne.n	8002644 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80026ac:	2300      	movs	r3, #0
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3710      	adds	r7, #16
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}

080026b6 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80026b6:	b580      	push	{r7, lr}
 80026b8:	b084      	sub	sp, #16
 80026ba:	af00      	add	r7, sp, #0
 80026bc:	60f8      	str	r0, [r7, #12]
 80026be:	60b9      	str	r1, [r7, #8]
 80026c0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80026c2:	e028      	b.n	8002716 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80026c4:	687a      	ldr	r2, [r7, #4]
 80026c6:	68b9      	ldr	r1, [r7, #8]
 80026c8:	68f8      	ldr	r0, [r7, #12]
 80026ca:	f000 f831 	bl	8002730 <I2C_IsAcknowledgeFailed>
 80026ce:	4603      	mov	r3, r0
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d001      	beq.n	80026d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80026d4:	2301      	movs	r3, #1
 80026d6:	e026      	b.n	8002726 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026d8:	f7ff f974 	bl	80019c4 <HAL_GetTick>
 80026dc:	4602      	mov	r2, r0
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	1ad3      	subs	r3, r2, r3
 80026e2:	68ba      	ldr	r2, [r7, #8]
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d302      	bcc.n	80026ee <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d113      	bne.n	8002716 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026f2:	f043 0220 	orr.w	r2, r3, #32
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	2220      	movs	r2, #32
 80026fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	2200      	movs	r2, #0
 8002706:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	2200      	movs	r2, #0
 800270e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e007      	b.n	8002726 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	699b      	ldr	r3, [r3, #24]
 800271c:	f003 0320 	and.w	r3, r3, #32
 8002720:	2b20      	cmp	r3, #32
 8002722:	d1cf      	bne.n	80026c4 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002724:	2300      	movs	r3, #0
}
 8002726:	4618      	mov	r0, r3
 8002728:	3710      	adds	r7, #16
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
	...

08002730 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b084      	sub	sp, #16
 8002734:	af00      	add	r7, sp, #0
 8002736:	60f8      	str	r0, [r7, #12]
 8002738:	60b9      	str	r1, [r7, #8]
 800273a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	699b      	ldr	r3, [r3, #24]
 8002742:	f003 0310 	and.w	r3, r3, #16
 8002746:	2b10      	cmp	r3, #16
 8002748:	d151      	bne.n	80027ee <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800274a:	e022      	b.n	8002792 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002752:	d01e      	beq.n	8002792 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002754:	f7ff f936 	bl	80019c4 <HAL_GetTick>
 8002758:	4602      	mov	r2, r0
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	68ba      	ldr	r2, [r7, #8]
 8002760:	429a      	cmp	r2, r3
 8002762:	d302      	bcc.n	800276a <I2C_IsAcknowledgeFailed+0x3a>
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d113      	bne.n	8002792 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800276e:	f043 0220 	orr.w	r2, r3, #32
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	2220      	movs	r2, #32
 800277a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	2200      	movs	r2, #0
 8002782:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	2200      	movs	r2, #0
 800278a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	e02e      	b.n	80027f0 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	699b      	ldr	r3, [r3, #24]
 8002798:	f003 0320 	and.w	r3, r3, #32
 800279c:	2b20      	cmp	r3, #32
 800279e:	d1d5      	bne.n	800274c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	2210      	movs	r2, #16
 80027a6:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	2220      	movs	r2, #32
 80027ae:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80027b0:	68f8      	ldr	r0, [r7, #12]
 80027b2:	f7ff fedc 	bl	800256e <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	6859      	ldr	r1, [r3, #4]
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	4b0d      	ldr	r3, [pc, #52]	; (80027f8 <I2C_IsAcknowledgeFailed+0xc8>)
 80027c2:	400b      	ands	r3, r1
 80027c4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ca:	f043 0204 	orr.w	r2, r3, #4
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	2220      	movs	r2, #32
 80027d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	2200      	movs	r2, #0
 80027de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	2200      	movs	r2, #0
 80027e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e000      	b.n	80027f0 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80027ee:	2300      	movs	r3, #0
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	3710      	adds	r7, #16
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}
 80027f8:	fe00e800 	.word	0xfe00e800

080027fc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b085      	sub	sp, #20
 8002800:	af00      	add	r7, sp, #0
 8002802:	60f8      	str	r0, [r7, #12]
 8002804:	607b      	str	r3, [r7, #4]
 8002806:	460b      	mov	r3, r1
 8002808:	817b      	strh	r3, [r7, #10]
 800280a:	4613      	mov	r3, r2
 800280c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	685a      	ldr	r2, [r3, #4]
 8002814:	69bb      	ldr	r3, [r7, #24]
 8002816:	0d5b      	lsrs	r3, r3, #21
 8002818:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800281c:	4b0d      	ldr	r3, [pc, #52]	; (8002854 <I2C_TransferConfig+0x58>)
 800281e:	430b      	orrs	r3, r1
 8002820:	43db      	mvns	r3, r3
 8002822:	ea02 0103 	and.w	r1, r2, r3
 8002826:	897b      	ldrh	r3, [r7, #10]
 8002828:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800282c:	7a7b      	ldrb	r3, [r7, #9]
 800282e:	041b      	lsls	r3, r3, #16
 8002830:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002834:	431a      	orrs	r2, r3
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	431a      	orrs	r2, r3
 800283a:	69bb      	ldr	r3, [r7, #24]
 800283c:	431a      	orrs	r2, r3
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	430a      	orrs	r2, r1
 8002844:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8002846:	bf00      	nop
 8002848:	3714      	adds	r7, #20
 800284a:	46bd      	mov	sp, r7
 800284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002850:	4770      	bx	lr
 8002852:	bf00      	nop
 8002854:	03ff63ff 	.word	0x03ff63ff

08002858 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002858:	b480      	push	{r7}
 800285a:	b083      	sub	sp, #12
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
 8002860:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002868:	b2db      	uxtb	r3, r3
 800286a:	2b20      	cmp	r3, #32
 800286c:	d138      	bne.n	80028e0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002874:	2b01      	cmp	r3, #1
 8002876:	d101      	bne.n	800287c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002878:	2302      	movs	r3, #2
 800287a:	e032      	b.n	80028e2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2201      	movs	r2, #1
 8002880:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2224      	movs	r2, #36	; 0x24
 8002888:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f022 0201 	bic.w	r2, r2, #1
 800289a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80028aa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	6819      	ldr	r1, [r3, #0]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	683a      	ldr	r2, [r7, #0]
 80028b8:	430a      	orrs	r2, r1
 80028ba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f042 0201 	orr.w	r2, r2, #1
 80028ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2220      	movs	r2, #32
 80028d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2200      	movs	r2, #0
 80028d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80028dc:	2300      	movs	r3, #0
 80028de:	e000      	b.n	80028e2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80028e0:	2302      	movs	r3, #2
  }
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	370c      	adds	r7, #12
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr

080028ee <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80028ee:	b480      	push	{r7}
 80028f0:	b085      	sub	sp, #20
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	6078      	str	r0, [r7, #4]
 80028f6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028fe:	b2db      	uxtb	r3, r3
 8002900:	2b20      	cmp	r3, #32
 8002902:	d139      	bne.n	8002978 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800290a:	2b01      	cmp	r3, #1
 800290c:	d101      	bne.n	8002912 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800290e:	2302      	movs	r3, #2
 8002910:	e033      	b.n	800297a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2201      	movs	r2, #1
 8002916:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2224      	movs	r2, #36	; 0x24
 800291e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f022 0201 	bic.w	r2, r2, #1
 8002930:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002940:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	021b      	lsls	r3, r3, #8
 8002946:	68fa      	ldr	r2, [r7, #12]
 8002948:	4313      	orrs	r3, r2
 800294a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	68fa      	ldr	r2, [r7, #12]
 8002952:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f042 0201 	orr.w	r2, r2, #1
 8002962:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2220      	movs	r2, #32
 8002968:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2200      	movs	r2, #0
 8002970:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002974:	2300      	movs	r3, #0
 8002976:	e000      	b.n	800297a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002978:	2302      	movs	r3, #2
  }
}
 800297a:	4618      	mov	r0, r3
 800297c:	3714      	adds	r7, #20
 800297e:	46bd      	mov	sp, r7
 8002980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002984:	4770      	bx	lr
	...

08002988 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002988:	b480      	push	{r7}
 800298a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800298c:	4b04      	ldr	r3, [pc, #16]	; (80029a0 <HAL_PWREx_GetVoltageRange+0x18>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002994:	4618      	mov	r0, r3
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr
 800299e:	bf00      	nop
 80029a0:	40007000 	.word	0x40007000

080029a4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b085      	sub	sp, #20
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80029b2:	d130      	bne.n	8002a16 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80029b4:	4b23      	ldr	r3, [pc, #140]	; (8002a44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80029bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80029c0:	d038      	beq.n	8002a34 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80029c2:	4b20      	ldr	r3, [pc, #128]	; (8002a44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80029ca:	4a1e      	ldr	r2, [pc, #120]	; (8002a44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029cc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80029d0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80029d2:	4b1d      	ldr	r3, [pc, #116]	; (8002a48 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	2232      	movs	r2, #50	; 0x32
 80029d8:	fb02 f303 	mul.w	r3, r2, r3
 80029dc:	4a1b      	ldr	r2, [pc, #108]	; (8002a4c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80029de:	fba2 2303 	umull	r2, r3, r2, r3
 80029e2:	0c9b      	lsrs	r3, r3, #18
 80029e4:	3301      	adds	r3, #1
 80029e6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80029e8:	e002      	b.n	80029f0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	3b01      	subs	r3, #1
 80029ee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80029f0:	4b14      	ldr	r3, [pc, #80]	; (8002a44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029f2:	695b      	ldr	r3, [r3, #20]
 80029f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029fc:	d102      	bne.n	8002a04 <HAL_PWREx_ControlVoltageScaling+0x60>
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d1f2      	bne.n	80029ea <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002a04:	4b0f      	ldr	r3, [pc, #60]	; (8002a44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a06:	695b      	ldr	r3, [r3, #20]
 8002a08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a10:	d110      	bne.n	8002a34 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002a12:	2303      	movs	r3, #3
 8002a14:	e00f      	b.n	8002a36 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002a16:	4b0b      	ldr	r3, [pc, #44]	; (8002a44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002a1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a22:	d007      	beq.n	8002a34 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002a24:	4b07      	ldr	r3, [pc, #28]	; (8002a44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002a2c:	4a05      	ldr	r2, [pc, #20]	; (8002a44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a2e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a32:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002a34:	2300      	movs	r3, #0
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	3714      	adds	r7, #20
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a40:	4770      	bx	lr
 8002a42:	bf00      	nop
 8002a44:	40007000 	.word	0x40007000
 8002a48:	2000006c 	.word	0x2000006c
 8002a4c:	431bde83 	.word	0x431bde83

08002a50 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b08a      	sub	sp, #40	; 0x28
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d102      	bne.n	8002a64 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	f000 bc56 	b.w	8003310 <HAL_RCC_OscConfig+0x8c0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a64:	4ba1      	ldr	r3, [pc, #644]	; (8002cec <HAL_RCC_OscConfig+0x29c>)
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	f003 030c 	and.w	r3, r3, #12
 8002a6c:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a6e:	4b9f      	ldr	r3, [pc, #636]	; (8002cec <HAL_RCC_OscConfig+0x29c>)
 8002a70:	68db      	ldr	r3, [r3, #12]
 8002a72:	f003 0303 	and.w	r3, r3, #3
 8002a76:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 0310 	and.w	r3, r3, #16
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	f000 80e6 	beq.w	8002c52 <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002a86:	6a3b      	ldr	r3, [r7, #32]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d007      	beq.n	8002a9c <HAL_RCC_OscConfig+0x4c>
 8002a8c:	6a3b      	ldr	r3, [r7, #32]
 8002a8e:	2b0c      	cmp	r3, #12
 8002a90:	f040 808d 	bne.w	8002bae <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002a94:	69fb      	ldr	r3, [r7, #28]
 8002a96:	2b01      	cmp	r3, #1
 8002a98:	f040 8089 	bne.w	8002bae <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002a9c:	4b93      	ldr	r3, [pc, #588]	; (8002cec <HAL_RCC_OscConfig+0x29c>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 0302 	and.w	r3, r3, #2
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d006      	beq.n	8002ab6 <HAL_RCC_OscConfig+0x66>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	69db      	ldr	r3, [r3, #28]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d102      	bne.n	8002ab6 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	f000 bc2d 	b.w	8003310 <HAL_RCC_OscConfig+0x8c0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002aba:	4b8c      	ldr	r3, [pc, #560]	; (8002cec <HAL_RCC_OscConfig+0x29c>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 0308 	and.w	r3, r3, #8
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d004      	beq.n	8002ad0 <HAL_RCC_OscConfig+0x80>
 8002ac6:	4b89      	ldr	r3, [pc, #548]	; (8002cec <HAL_RCC_OscConfig+0x29c>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ace:	e005      	b.n	8002adc <HAL_RCC_OscConfig+0x8c>
 8002ad0:	4b86      	ldr	r3, [pc, #536]	; (8002cec <HAL_RCC_OscConfig+0x29c>)
 8002ad2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ad6:	091b      	lsrs	r3, r3, #4
 8002ad8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d224      	bcs.n	8002b2a <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f000 fdbf 	bl	8003668 <RCC_SetFlashLatencyFromMSIRange>
 8002aea:	4603      	mov	r3, r0
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d002      	beq.n	8002af6 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8002af0:	2301      	movs	r3, #1
 8002af2:	f000 bc0d 	b.w	8003310 <HAL_RCC_OscConfig+0x8c0>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002af6:	4b7d      	ldr	r3, [pc, #500]	; (8002cec <HAL_RCC_OscConfig+0x29c>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a7c      	ldr	r2, [pc, #496]	; (8002cec <HAL_RCC_OscConfig+0x29c>)
 8002afc:	f043 0308 	orr.w	r3, r3, #8
 8002b00:	6013      	str	r3, [r2, #0]
 8002b02:	4b7a      	ldr	r3, [pc, #488]	; (8002cec <HAL_RCC_OscConfig+0x29c>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b0e:	4977      	ldr	r1, [pc, #476]	; (8002cec <HAL_RCC_OscConfig+0x29c>)
 8002b10:	4313      	orrs	r3, r2
 8002b12:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b14:	4b75      	ldr	r3, [pc, #468]	; (8002cec <HAL_RCC_OscConfig+0x29c>)
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6a1b      	ldr	r3, [r3, #32]
 8002b20:	021b      	lsls	r3, r3, #8
 8002b22:	4972      	ldr	r1, [pc, #456]	; (8002cec <HAL_RCC_OscConfig+0x29c>)
 8002b24:	4313      	orrs	r3, r2
 8002b26:	604b      	str	r3, [r1, #4]
 8002b28:	e025      	b.n	8002b76 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b2a:	4b70      	ldr	r3, [pc, #448]	; (8002cec <HAL_RCC_OscConfig+0x29c>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a6f      	ldr	r2, [pc, #444]	; (8002cec <HAL_RCC_OscConfig+0x29c>)
 8002b30:	f043 0308 	orr.w	r3, r3, #8
 8002b34:	6013      	str	r3, [r2, #0]
 8002b36:	4b6d      	ldr	r3, [pc, #436]	; (8002cec <HAL_RCC_OscConfig+0x29c>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b42:	496a      	ldr	r1, [pc, #424]	; (8002cec <HAL_RCC_OscConfig+0x29c>)
 8002b44:	4313      	orrs	r3, r2
 8002b46:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b48:	4b68      	ldr	r3, [pc, #416]	; (8002cec <HAL_RCC_OscConfig+0x29c>)
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6a1b      	ldr	r3, [r3, #32]
 8002b54:	021b      	lsls	r3, r3, #8
 8002b56:	4965      	ldr	r1, [pc, #404]	; (8002cec <HAL_RCC_OscConfig+0x29c>)
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b5c:	6a3b      	ldr	r3, [r7, #32]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d109      	bne.n	8002b76 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b66:	4618      	mov	r0, r3
 8002b68:	f000 fd7e 	bl	8003668 <RCC_SetFlashLatencyFromMSIRange>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d001      	beq.n	8002b76 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	e3cc      	b.n	8003310 <HAL_RCC_OscConfig+0x8c0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002b76:	f000 fcb3 	bl	80034e0 <HAL_RCC_GetSysClockFreq>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	4b5b      	ldr	r3, [pc, #364]	; (8002cec <HAL_RCC_OscConfig+0x29c>)
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	091b      	lsrs	r3, r3, #4
 8002b82:	f003 030f 	and.w	r3, r3, #15
 8002b86:	495a      	ldr	r1, [pc, #360]	; (8002cf0 <HAL_RCC_OscConfig+0x2a0>)
 8002b88:	5ccb      	ldrb	r3, [r1, r3]
 8002b8a:	f003 031f 	and.w	r3, r3, #31
 8002b8e:	fa22 f303 	lsr.w	r3, r2, r3
 8002b92:	4a58      	ldr	r2, [pc, #352]	; (8002cf4 <HAL_RCC_OscConfig+0x2a4>)
 8002b94:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002b96:	4b58      	ldr	r3, [pc, #352]	; (8002cf8 <HAL_RCC_OscConfig+0x2a8>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f7fe fec2 	bl	8001924 <HAL_InitTick>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8002ba4:	7dfb      	ldrb	r3, [r7, #23]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d052      	beq.n	8002c50 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8002baa:	7dfb      	ldrb	r3, [r7, #23]
 8002bac:	e3b0      	b.n	8003310 <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	69db      	ldr	r3, [r3, #28]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d032      	beq.n	8002c1c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002bb6:	4b4d      	ldr	r3, [pc, #308]	; (8002cec <HAL_RCC_OscConfig+0x29c>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a4c      	ldr	r2, [pc, #304]	; (8002cec <HAL_RCC_OscConfig+0x29c>)
 8002bbc:	f043 0301 	orr.w	r3, r3, #1
 8002bc0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002bc2:	f7fe feff 	bl	80019c4 <HAL_GetTick>
 8002bc6:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002bc8:	e008      	b.n	8002bdc <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002bca:	f7fe fefb 	bl	80019c4 <HAL_GetTick>
 8002bce:	4602      	mov	r2, r0
 8002bd0:	69bb      	ldr	r3, [r7, #24]
 8002bd2:	1ad3      	subs	r3, r2, r3
 8002bd4:	2b02      	cmp	r3, #2
 8002bd6:	d901      	bls.n	8002bdc <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8002bd8:	2303      	movs	r3, #3
 8002bda:	e399      	b.n	8003310 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002bdc:	4b43      	ldr	r3, [pc, #268]	; (8002cec <HAL_RCC_OscConfig+0x29c>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f003 0302 	and.w	r3, r3, #2
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d0f0      	beq.n	8002bca <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002be8:	4b40      	ldr	r3, [pc, #256]	; (8002cec <HAL_RCC_OscConfig+0x29c>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a3f      	ldr	r2, [pc, #252]	; (8002cec <HAL_RCC_OscConfig+0x29c>)
 8002bee:	f043 0308 	orr.w	r3, r3, #8
 8002bf2:	6013      	str	r3, [r2, #0]
 8002bf4:	4b3d      	ldr	r3, [pc, #244]	; (8002cec <HAL_RCC_OscConfig+0x29c>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c00:	493a      	ldr	r1, [pc, #232]	; (8002cec <HAL_RCC_OscConfig+0x29c>)
 8002c02:	4313      	orrs	r3, r2
 8002c04:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c06:	4b39      	ldr	r3, [pc, #228]	; (8002cec <HAL_RCC_OscConfig+0x29c>)
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6a1b      	ldr	r3, [r3, #32]
 8002c12:	021b      	lsls	r3, r3, #8
 8002c14:	4935      	ldr	r1, [pc, #212]	; (8002cec <HAL_RCC_OscConfig+0x29c>)
 8002c16:	4313      	orrs	r3, r2
 8002c18:	604b      	str	r3, [r1, #4]
 8002c1a:	e01a      	b.n	8002c52 <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002c1c:	4b33      	ldr	r3, [pc, #204]	; (8002cec <HAL_RCC_OscConfig+0x29c>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a32      	ldr	r2, [pc, #200]	; (8002cec <HAL_RCC_OscConfig+0x29c>)
 8002c22:	f023 0301 	bic.w	r3, r3, #1
 8002c26:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002c28:	f7fe fecc 	bl	80019c4 <HAL_GetTick>
 8002c2c:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002c2e:	e008      	b.n	8002c42 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002c30:	f7fe fec8 	bl	80019c4 <HAL_GetTick>
 8002c34:	4602      	mov	r2, r0
 8002c36:	69bb      	ldr	r3, [r7, #24]
 8002c38:	1ad3      	subs	r3, r2, r3
 8002c3a:	2b02      	cmp	r3, #2
 8002c3c:	d901      	bls.n	8002c42 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002c3e:	2303      	movs	r3, #3
 8002c40:	e366      	b.n	8003310 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002c42:	4b2a      	ldr	r3, [pc, #168]	; (8002cec <HAL_RCC_OscConfig+0x29c>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f003 0302 	and.w	r3, r3, #2
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d1f0      	bne.n	8002c30 <HAL_RCC_OscConfig+0x1e0>
 8002c4e:	e000      	b.n	8002c52 <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002c50:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f003 0301 	and.w	r3, r3, #1
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d073      	beq.n	8002d46 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002c5e:	6a3b      	ldr	r3, [r7, #32]
 8002c60:	2b08      	cmp	r3, #8
 8002c62:	d005      	beq.n	8002c70 <HAL_RCC_OscConfig+0x220>
 8002c64:	6a3b      	ldr	r3, [r7, #32]
 8002c66:	2b0c      	cmp	r3, #12
 8002c68:	d10e      	bne.n	8002c88 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002c6a:	69fb      	ldr	r3, [r7, #28]
 8002c6c:	2b03      	cmp	r3, #3
 8002c6e:	d10b      	bne.n	8002c88 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c70:	4b1e      	ldr	r3, [pc, #120]	; (8002cec <HAL_RCC_OscConfig+0x29c>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d063      	beq.n	8002d44 <HAL_RCC_OscConfig+0x2f4>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d15f      	bne.n	8002d44 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8002c84:	2301      	movs	r3, #1
 8002c86:	e343      	b.n	8003310 <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c90:	d106      	bne.n	8002ca0 <HAL_RCC_OscConfig+0x250>
 8002c92:	4b16      	ldr	r3, [pc, #88]	; (8002cec <HAL_RCC_OscConfig+0x29c>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a15      	ldr	r2, [pc, #84]	; (8002cec <HAL_RCC_OscConfig+0x29c>)
 8002c98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c9c:	6013      	str	r3, [r2, #0]
 8002c9e:	e01d      	b.n	8002cdc <HAL_RCC_OscConfig+0x28c>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ca8:	d10c      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x274>
 8002caa:	4b10      	ldr	r3, [pc, #64]	; (8002cec <HAL_RCC_OscConfig+0x29c>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a0f      	ldr	r2, [pc, #60]	; (8002cec <HAL_RCC_OscConfig+0x29c>)
 8002cb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cb4:	6013      	str	r3, [r2, #0]
 8002cb6:	4b0d      	ldr	r3, [pc, #52]	; (8002cec <HAL_RCC_OscConfig+0x29c>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a0c      	ldr	r2, [pc, #48]	; (8002cec <HAL_RCC_OscConfig+0x29c>)
 8002cbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cc0:	6013      	str	r3, [r2, #0]
 8002cc2:	e00b      	b.n	8002cdc <HAL_RCC_OscConfig+0x28c>
 8002cc4:	4b09      	ldr	r3, [pc, #36]	; (8002cec <HAL_RCC_OscConfig+0x29c>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a08      	ldr	r2, [pc, #32]	; (8002cec <HAL_RCC_OscConfig+0x29c>)
 8002cca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cce:	6013      	str	r3, [r2, #0]
 8002cd0:	4b06      	ldr	r3, [pc, #24]	; (8002cec <HAL_RCC_OscConfig+0x29c>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a05      	ldr	r2, [pc, #20]	; (8002cec <HAL_RCC_OscConfig+0x29c>)
 8002cd6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cda:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d01b      	beq.n	8002d1c <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ce4:	f7fe fe6e 	bl	80019c4 <HAL_GetTick>
 8002ce8:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002cea:	e010      	b.n	8002d0e <HAL_RCC_OscConfig+0x2be>
 8002cec:	40021000 	.word	0x40021000
 8002cf0:	08007198 	.word	0x08007198
 8002cf4:	2000006c 	.word	0x2000006c
 8002cf8:	20000070 	.word	0x20000070
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cfc:	f7fe fe62 	bl	80019c4 <HAL_GetTick>
 8002d00:	4602      	mov	r2, r0
 8002d02:	69bb      	ldr	r3, [r7, #24]
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	2b64      	cmp	r3, #100	; 0x64
 8002d08:	d901      	bls.n	8002d0e <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8002d0a:	2303      	movs	r3, #3
 8002d0c:	e300      	b.n	8003310 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d0e:	4ba0      	ldr	r3, [pc, #640]	; (8002f90 <HAL_RCC_OscConfig+0x540>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d0f0      	beq.n	8002cfc <HAL_RCC_OscConfig+0x2ac>
 8002d1a:	e014      	b.n	8002d46 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d1c:	f7fe fe52 	bl	80019c4 <HAL_GetTick>
 8002d20:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002d22:	e008      	b.n	8002d36 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d24:	f7fe fe4e 	bl	80019c4 <HAL_GetTick>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	69bb      	ldr	r3, [r7, #24]
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	2b64      	cmp	r3, #100	; 0x64
 8002d30:	d901      	bls.n	8002d36 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8002d32:	2303      	movs	r3, #3
 8002d34:	e2ec      	b.n	8003310 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002d36:	4b96      	ldr	r3, [pc, #600]	; (8002f90 <HAL_RCC_OscConfig+0x540>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d1f0      	bne.n	8002d24 <HAL_RCC_OscConfig+0x2d4>
 8002d42:	e000      	b.n	8002d46 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 0302 	and.w	r3, r3, #2
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d060      	beq.n	8002e14 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002d52:	6a3b      	ldr	r3, [r7, #32]
 8002d54:	2b04      	cmp	r3, #4
 8002d56:	d005      	beq.n	8002d64 <HAL_RCC_OscConfig+0x314>
 8002d58:	6a3b      	ldr	r3, [r7, #32]
 8002d5a:	2b0c      	cmp	r3, #12
 8002d5c:	d119      	bne.n	8002d92 <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002d5e:	69fb      	ldr	r3, [r7, #28]
 8002d60:	2b02      	cmp	r3, #2
 8002d62:	d116      	bne.n	8002d92 <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d64:	4b8a      	ldr	r3, [pc, #552]	; (8002f90 <HAL_RCC_OscConfig+0x540>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d005      	beq.n	8002d7c <HAL_RCC_OscConfig+0x32c>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	68db      	ldr	r3, [r3, #12]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d101      	bne.n	8002d7c <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	e2c9      	b.n	8003310 <HAL_RCC_OscConfig+0x8c0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d7c:	4b84      	ldr	r3, [pc, #528]	; (8002f90 <HAL_RCC_OscConfig+0x540>)
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	691b      	ldr	r3, [r3, #16]
 8002d88:	061b      	lsls	r3, r3, #24
 8002d8a:	4981      	ldr	r1, [pc, #516]	; (8002f90 <HAL_RCC_OscConfig+0x540>)
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d90:	e040      	b.n	8002e14 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	68db      	ldr	r3, [r3, #12]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d023      	beq.n	8002de2 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d9a:	4b7d      	ldr	r3, [pc, #500]	; (8002f90 <HAL_RCC_OscConfig+0x540>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a7c      	ldr	r2, [pc, #496]	; (8002f90 <HAL_RCC_OscConfig+0x540>)
 8002da0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002da4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002da6:	f7fe fe0d 	bl	80019c4 <HAL_GetTick>
 8002daa:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002dac:	e008      	b.n	8002dc0 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dae:	f7fe fe09 	bl	80019c4 <HAL_GetTick>
 8002db2:	4602      	mov	r2, r0
 8002db4:	69bb      	ldr	r3, [r7, #24]
 8002db6:	1ad3      	subs	r3, r2, r3
 8002db8:	2b02      	cmp	r3, #2
 8002dba:	d901      	bls.n	8002dc0 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8002dbc:	2303      	movs	r3, #3
 8002dbe:	e2a7      	b.n	8003310 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002dc0:	4b73      	ldr	r3, [pc, #460]	; (8002f90 <HAL_RCC_OscConfig+0x540>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d0f0      	beq.n	8002dae <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dcc:	4b70      	ldr	r3, [pc, #448]	; (8002f90 <HAL_RCC_OscConfig+0x540>)
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	691b      	ldr	r3, [r3, #16]
 8002dd8:	061b      	lsls	r3, r3, #24
 8002dda:	496d      	ldr	r1, [pc, #436]	; (8002f90 <HAL_RCC_OscConfig+0x540>)
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	604b      	str	r3, [r1, #4]
 8002de0:	e018      	b.n	8002e14 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002de2:	4b6b      	ldr	r3, [pc, #428]	; (8002f90 <HAL_RCC_OscConfig+0x540>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a6a      	ldr	r2, [pc, #424]	; (8002f90 <HAL_RCC_OscConfig+0x540>)
 8002de8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002dec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dee:	f7fe fde9 	bl	80019c4 <HAL_GetTick>
 8002df2:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002df4:	e008      	b.n	8002e08 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002df6:	f7fe fde5 	bl	80019c4 <HAL_GetTick>
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	69bb      	ldr	r3, [r7, #24]
 8002dfe:	1ad3      	subs	r3, r2, r3
 8002e00:	2b02      	cmp	r3, #2
 8002e02:	d901      	bls.n	8002e08 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8002e04:	2303      	movs	r3, #3
 8002e06:	e283      	b.n	8003310 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002e08:	4b61      	ldr	r3, [pc, #388]	; (8002f90 <HAL_RCC_OscConfig+0x540>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d1f0      	bne.n	8002df6 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 0308 	and.w	r3, r3, #8
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d07f      	beq.n	8002f20 <HAL_RCC_OscConfig+0x4d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	695b      	ldr	r3, [r3, #20]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d05f      	beq.n	8002ee8 <HAL_RCC_OscConfig+0x498>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8002e28:	4b59      	ldr	r3, [pc, #356]	; (8002f90 <HAL_RCC_OscConfig+0x540>)
 8002e2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e2e:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	699a      	ldr	r2, [r3, #24]
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	f003 0310 	and.w	r3, r3, #16
 8002e3a:	429a      	cmp	r2, r3
 8002e3c:	d037      	beq.n	8002eae <HAL_RCC_OscConfig+0x45e>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	f003 0302 	and.w	r3, r3, #2
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d006      	beq.n	8002e56 <HAL_RCC_OscConfig+0x406>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d101      	bne.n	8002e56 <HAL_RCC_OscConfig+0x406>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e25c      	b.n	8003310 <HAL_RCC_OscConfig+0x8c0>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	f003 0301 	and.w	r3, r3, #1
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d01b      	beq.n	8002e98 <HAL_RCC_OscConfig+0x448>
        {
          __HAL_RCC_LSI_DISABLE();
 8002e60:	4b4b      	ldr	r3, [pc, #300]	; (8002f90 <HAL_RCC_OscConfig+0x540>)
 8002e62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e66:	4a4a      	ldr	r2, [pc, #296]	; (8002f90 <HAL_RCC_OscConfig+0x540>)
 8002e68:	f023 0301 	bic.w	r3, r3, #1
 8002e6c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002e70:	f7fe fda8 	bl	80019c4 <HAL_GetTick>
 8002e74:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e76:	e008      	b.n	8002e8a <HAL_RCC_OscConfig+0x43a>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e78:	f7fe fda4 	bl	80019c4 <HAL_GetTick>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	69bb      	ldr	r3, [r7, #24]
 8002e80:	1ad3      	subs	r3, r2, r3
 8002e82:	2b11      	cmp	r3, #17
 8002e84:	d901      	bls.n	8002e8a <HAL_RCC_OscConfig+0x43a>
            {
              return HAL_TIMEOUT;
 8002e86:	2303      	movs	r3, #3
 8002e88:	e242      	b.n	8003310 <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e8a:	4b41      	ldr	r3, [pc, #260]	; (8002f90 <HAL_RCC_OscConfig+0x540>)
 8002e8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e90:	f003 0302 	and.w	r3, r3, #2
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d1ef      	bne.n	8002e78 <HAL_RCC_OscConfig+0x428>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8002e98:	4b3d      	ldr	r3, [pc, #244]	; (8002f90 <HAL_RCC_OscConfig+0x540>)
 8002e9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e9e:	f023 0210 	bic.w	r2, r3, #16
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	699b      	ldr	r3, [r3, #24]
 8002ea6:	493a      	ldr	r1, [pc, #232]	; (8002f90 <HAL_RCC_OscConfig+0x540>)
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002eae:	4b38      	ldr	r3, [pc, #224]	; (8002f90 <HAL_RCC_OscConfig+0x540>)
 8002eb0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002eb4:	4a36      	ldr	r2, [pc, #216]	; (8002f90 <HAL_RCC_OscConfig+0x540>)
 8002eb6:	f043 0301 	orr.w	r3, r3, #1
 8002eba:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ebe:	f7fe fd81 	bl	80019c4 <HAL_GetTick>
 8002ec2:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002ec4:	e008      	b.n	8002ed8 <HAL_RCC_OscConfig+0x488>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ec6:	f7fe fd7d 	bl	80019c4 <HAL_GetTick>
 8002eca:	4602      	mov	r2, r0
 8002ecc:	69bb      	ldr	r3, [r7, #24]
 8002ece:	1ad3      	subs	r3, r2, r3
 8002ed0:	2b11      	cmp	r3, #17
 8002ed2:	d901      	bls.n	8002ed8 <HAL_RCC_OscConfig+0x488>
        {
          return HAL_TIMEOUT;
 8002ed4:	2303      	movs	r3, #3
 8002ed6:	e21b      	b.n	8003310 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002ed8:	4b2d      	ldr	r3, [pc, #180]	; (8002f90 <HAL_RCC_OscConfig+0x540>)
 8002eda:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ede:	f003 0302 	and.w	r3, r3, #2
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d0ef      	beq.n	8002ec6 <HAL_RCC_OscConfig+0x476>
 8002ee6:	e01b      	b.n	8002f20 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ee8:	4b29      	ldr	r3, [pc, #164]	; (8002f90 <HAL_RCC_OscConfig+0x540>)
 8002eea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002eee:	4a28      	ldr	r2, [pc, #160]	; (8002f90 <HAL_RCC_OscConfig+0x540>)
 8002ef0:	f023 0301 	bic.w	r3, r3, #1
 8002ef4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ef8:	f7fe fd64 	bl	80019c4 <HAL_GetTick>
 8002efc:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002efe:	e008      	b.n	8002f12 <HAL_RCC_OscConfig+0x4c2>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f00:	f7fe fd60 	bl	80019c4 <HAL_GetTick>
 8002f04:	4602      	mov	r2, r0
 8002f06:	69bb      	ldr	r3, [r7, #24]
 8002f08:	1ad3      	subs	r3, r2, r3
 8002f0a:	2b11      	cmp	r3, #17
 8002f0c:	d901      	bls.n	8002f12 <HAL_RCC_OscConfig+0x4c2>
        {
          return HAL_TIMEOUT;
 8002f0e:	2303      	movs	r3, #3
 8002f10:	e1fe      	b.n	8003310 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f12:	4b1f      	ldr	r3, [pc, #124]	; (8002f90 <HAL_RCC_OscConfig+0x540>)
 8002f14:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f18:	f003 0302 	and.w	r3, r3, #2
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d1ef      	bne.n	8002f00 <HAL_RCC_OscConfig+0x4b0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f003 0304 	and.w	r3, r3, #4
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	f000 80c1 	beq.w	80030b0 <HAL_RCC_OscConfig+0x660>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002f34:	4b16      	ldr	r3, [pc, #88]	; (8002f90 <HAL_RCC_OscConfig+0x540>)
 8002f36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d10e      	bne.n	8002f5e <HAL_RCC_OscConfig+0x50e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f40:	4b13      	ldr	r3, [pc, #76]	; (8002f90 <HAL_RCC_OscConfig+0x540>)
 8002f42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f44:	4a12      	ldr	r2, [pc, #72]	; (8002f90 <HAL_RCC_OscConfig+0x540>)
 8002f46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f4a:	6593      	str	r3, [r2, #88]	; 0x58
 8002f4c:	4b10      	ldr	r3, [pc, #64]	; (8002f90 <HAL_RCC_OscConfig+0x540>)
 8002f4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f54:	60fb      	str	r3, [r7, #12]
 8002f56:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f5e:	4b0d      	ldr	r3, [pc, #52]	; (8002f94 <HAL_RCC_OscConfig+0x544>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d11c      	bne.n	8002fa4 <HAL_RCC_OscConfig+0x554>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f6a:	4b0a      	ldr	r3, [pc, #40]	; (8002f94 <HAL_RCC_OscConfig+0x544>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a09      	ldr	r2, [pc, #36]	; (8002f94 <HAL_RCC_OscConfig+0x544>)
 8002f70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f76:	f7fe fd25 	bl	80019c4 <HAL_GetTick>
 8002f7a:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f7c:	e00c      	b.n	8002f98 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f7e:	f7fe fd21 	bl	80019c4 <HAL_GetTick>
 8002f82:	4602      	mov	r2, r0
 8002f84:	69bb      	ldr	r3, [r7, #24]
 8002f86:	1ad3      	subs	r3, r2, r3
 8002f88:	2b02      	cmp	r3, #2
 8002f8a:	d905      	bls.n	8002f98 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002f8c:	2303      	movs	r3, #3
 8002f8e:	e1bf      	b.n	8003310 <HAL_RCC_OscConfig+0x8c0>
 8002f90:	40021000 	.word	0x40021000
 8002f94:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f98:	4bb1      	ldr	r3, [pc, #708]	; (8003260 <HAL_RCC_OscConfig+0x810>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d0ec      	beq.n	8002f7e <HAL_RCC_OscConfig+0x52e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	f003 0301 	and.w	r3, r3, #1
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d02c      	beq.n	800300a <HAL_RCC_OscConfig+0x5ba>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8002fb0:	4bac      	ldr	r3, [pc, #688]	; (8003264 <HAL_RCC_OscConfig+0x814>)
 8002fb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fb6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fc2:	49a8      	ldr	r1, [pc, #672]	; (8003264 <HAL_RCC_OscConfig+0x814>)
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	f003 0304 	and.w	r3, r3, #4
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d010      	beq.n	8002ff8 <HAL_RCC_OscConfig+0x5a8>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002fd6:	4ba3      	ldr	r3, [pc, #652]	; (8003264 <HAL_RCC_OscConfig+0x814>)
 8002fd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fdc:	4aa1      	ldr	r2, [pc, #644]	; (8003264 <HAL_RCC_OscConfig+0x814>)
 8002fde:	f043 0304 	orr.w	r3, r3, #4
 8002fe2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002fe6:	4b9f      	ldr	r3, [pc, #636]	; (8003264 <HAL_RCC_OscConfig+0x814>)
 8002fe8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fec:	4a9d      	ldr	r2, [pc, #628]	; (8003264 <HAL_RCC_OscConfig+0x814>)
 8002fee:	f043 0301 	orr.w	r3, r3, #1
 8002ff2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ff6:	e018      	b.n	800302a <HAL_RCC_OscConfig+0x5da>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002ff8:	4b9a      	ldr	r3, [pc, #616]	; (8003264 <HAL_RCC_OscConfig+0x814>)
 8002ffa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ffe:	4a99      	ldr	r2, [pc, #612]	; (8003264 <HAL_RCC_OscConfig+0x814>)
 8003000:	f043 0301 	orr.w	r3, r3, #1
 8003004:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003008:	e00f      	b.n	800302a <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800300a:	4b96      	ldr	r3, [pc, #600]	; (8003264 <HAL_RCC_OscConfig+0x814>)
 800300c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003010:	4a94      	ldr	r2, [pc, #592]	; (8003264 <HAL_RCC_OscConfig+0x814>)
 8003012:	f023 0301 	bic.w	r3, r3, #1
 8003016:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800301a:	4b92      	ldr	r3, [pc, #584]	; (8003264 <HAL_RCC_OscConfig+0x814>)
 800301c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003020:	4a90      	ldr	r2, [pc, #576]	; (8003264 <HAL_RCC_OscConfig+0x814>)
 8003022:	f023 0304 	bic.w	r3, r3, #4
 8003026:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d016      	beq.n	8003060 <HAL_RCC_OscConfig+0x610>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003032:	f7fe fcc7 	bl	80019c4 <HAL_GetTick>
 8003036:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003038:	e00a      	b.n	8003050 <HAL_RCC_OscConfig+0x600>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800303a:	f7fe fcc3 	bl	80019c4 <HAL_GetTick>
 800303e:	4602      	mov	r2, r0
 8003040:	69bb      	ldr	r3, [r7, #24]
 8003042:	1ad3      	subs	r3, r2, r3
 8003044:	f241 3288 	movw	r2, #5000	; 0x1388
 8003048:	4293      	cmp	r3, r2
 800304a:	d901      	bls.n	8003050 <HAL_RCC_OscConfig+0x600>
        {
          return HAL_TIMEOUT;
 800304c:	2303      	movs	r3, #3
 800304e:	e15f      	b.n	8003310 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003050:	4b84      	ldr	r3, [pc, #528]	; (8003264 <HAL_RCC_OscConfig+0x814>)
 8003052:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003056:	f003 0302 	and.w	r3, r3, #2
 800305a:	2b00      	cmp	r3, #0
 800305c:	d0ed      	beq.n	800303a <HAL_RCC_OscConfig+0x5ea>
 800305e:	e01d      	b.n	800309c <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003060:	f7fe fcb0 	bl	80019c4 <HAL_GetTick>
 8003064:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003066:	e00a      	b.n	800307e <HAL_RCC_OscConfig+0x62e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003068:	f7fe fcac 	bl	80019c4 <HAL_GetTick>
 800306c:	4602      	mov	r2, r0
 800306e:	69bb      	ldr	r3, [r7, #24]
 8003070:	1ad3      	subs	r3, r2, r3
 8003072:	f241 3288 	movw	r2, #5000	; 0x1388
 8003076:	4293      	cmp	r3, r2
 8003078:	d901      	bls.n	800307e <HAL_RCC_OscConfig+0x62e>
        {
          return HAL_TIMEOUT;
 800307a:	2303      	movs	r3, #3
 800307c:	e148      	b.n	8003310 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800307e:	4b79      	ldr	r3, [pc, #484]	; (8003264 <HAL_RCC_OscConfig+0x814>)
 8003080:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003084:	f003 0302 	and.w	r3, r3, #2
 8003088:	2b00      	cmp	r3, #0
 800308a:	d1ed      	bne.n	8003068 <HAL_RCC_OscConfig+0x618>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 800308c:	4b75      	ldr	r3, [pc, #468]	; (8003264 <HAL_RCC_OscConfig+0x814>)
 800308e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003092:	4a74      	ldr	r2, [pc, #464]	; (8003264 <HAL_RCC_OscConfig+0x814>)
 8003094:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003098:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800309c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80030a0:	2b01      	cmp	r3, #1
 80030a2:	d105      	bne.n	80030b0 <HAL_RCC_OscConfig+0x660>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030a4:	4b6f      	ldr	r3, [pc, #444]	; (8003264 <HAL_RCC_OscConfig+0x814>)
 80030a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030a8:	4a6e      	ldr	r2, [pc, #440]	; (8003264 <HAL_RCC_OscConfig+0x814>)
 80030aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030ae:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f003 0320 	and.w	r3, r3, #32
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d03c      	beq.n	8003136 <HAL_RCC_OscConfig+0x6e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d01c      	beq.n	80030fe <HAL_RCC_OscConfig+0x6ae>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80030c4:	4b67      	ldr	r3, [pc, #412]	; (8003264 <HAL_RCC_OscConfig+0x814>)
 80030c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80030ca:	4a66      	ldr	r2, [pc, #408]	; (8003264 <HAL_RCC_OscConfig+0x814>)
 80030cc:	f043 0301 	orr.w	r3, r3, #1
 80030d0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030d4:	f7fe fc76 	bl	80019c4 <HAL_GetTick>
 80030d8:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80030da:	e008      	b.n	80030ee <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80030dc:	f7fe fc72 	bl	80019c4 <HAL_GetTick>
 80030e0:	4602      	mov	r2, r0
 80030e2:	69bb      	ldr	r3, [r7, #24]
 80030e4:	1ad3      	subs	r3, r2, r3
 80030e6:	2b02      	cmp	r3, #2
 80030e8:	d901      	bls.n	80030ee <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 80030ea:	2303      	movs	r3, #3
 80030ec:	e110      	b.n	8003310 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80030ee:	4b5d      	ldr	r3, [pc, #372]	; (8003264 <HAL_RCC_OscConfig+0x814>)
 80030f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80030f4:	f003 0302 	and.w	r3, r3, #2
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d0ef      	beq.n	80030dc <HAL_RCC_OscConfig+0x68c>
 80030fc:	e01b      	b.n	8003136 <HAL_RCC_OscConfig+0x6e6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80030fe:	4b59      	ldr	r3, [pc, #356]	; (8003264 <HAL_RCC_OscConfig+0x814>)
 8003100:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003104:	4a57      	ldr	r2, [pc, #348]	; (8003264 <HAL_RCC_OscConfig+0x814>)
 8003106:	f023 0301 	bic.w	r3, r3, #1
 800310a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800310e:	f7fe fc59 	bl	80019c4 <HAL_GetTick>
 8003112:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003114:	e008      	b.n	8003128 <HAL_RCC_OscConfig+0x6d8>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003116:	f7fe fc55 	bl	80019c4 <HAL_GetTick>
 800311a:	4602      	mov	r2, r0
 800311c:	69bb      	ldr	r3, [r7, #24]
 800311e:	1ad3      	subs	r3, r2, r3
 8003120:	2b02      	cmp	r3, #2
 8003122:	d901      	bls.n	8003128 <HAL_RCC_OscConfig+0x6d8>
        {
          return HAL_TIMEOUT;
 8003124:	2303      	movs	r3, #3
 8003126:	e0f3      	b.n	8003310 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003128:	4b4e      	ldr	r3, [pc, #312]	; (8003264 <HAL_RCC_OscConfig+0x814>)
 800312a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800312e:	f003 0302 	and.w	r3, r3, #2
 8003132:	2b00      	cmp	r3, #0
 8003134:	d1ef      	bne.n	8003116 <HAL_RCC_OscConfig+0x6c6>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800313a:	2b00      	cmp	r3, #0
 800313c:	f000 80e7 	beq.w	800330e <HAL_RCC_OscConfig+0x8be>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003144:	2b02      	cmp	r3, #2
 8003146:	f040 80b7 	bne.w	80032b8 <HAL_RCC_OscConfig+0x868>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800314a:	4b46      	ldr	r3, [pc, #280]	; (8003264 <HAL_RCC_OscConfig+0x814>)
 800314c:	68db      	ldr	r3, [r3, #12]
 800314e:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003150:	69fb      	ldr	r3, [r7, #28]
 8003152:	f003 0203 	and.w	r2, r3, #3
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800315a:	429a      	cmp	r2, r3
 800315c:	d124      	bne.n	80031a8 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800315e:	69fb      	ldr	r3, [r7, #28]
 8003160:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003168:	3b01      	subs	r3, #1
 800316a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800316c:	429a      	cmp	r2, r3
 800316e:	d11b      	bne.n	80031a8 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003170:	69fb      	ldr	r3, [r7, #28]
 8003172:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800317a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800317c:	429a      	cmp	r2, r3
 800317e:	d113      	bne.n	80031a8 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003180:	69fb      	ldr	r3, [r7, #28]
 8003182:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800318a:	085b      	lsrs	r3, r3, #1
 800318c:	3b01      	subs	r3, #1
 800318e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003190:	429a      	cmp	r2, r3
 8003192:	d109      	bne.n	80031a8 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003194:	69fb      	ldr	r3, [r7, #28]
 8003196:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319e:	085b      	lsrs	r3, r3, #1
 80031a0:	3b01      	subs	r3, #1
 80031a2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80031a4:	429a      	cmp	r2, r3
 80031a6:	d061      	beq.n	800326c <HAL_RCC_OscConfig+0x81c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80031a8:	6a3b      	ldr	r3, [r7, #32]
 80031aa:	2b0c      	cmp	r3, #12
 80031ac:	d056      	beq.n	800325c <HAL_RCC_OscConfig+0x80c>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80031ae:	4b2d      	ldr	r3, [pc, #180]	; (8003264 <HAL_RCC_OscConfig+0x814>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a2c      	ldr	r2, [pc, #176]	; (8003264 <HAL_RCC_OscConfig+0x814>)
 80031b4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80031b8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80031ba:	f7fe fc03 	bl	80019c4 <HAL_GetTick>
 80031be:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031c0:	e008      	b.n	80031d4 <HAL_RCC_OscConfig+0x784>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031c2:	f7fe fbff 	bl	80019c4 <HAL_GetTick>
 80031c6:	4602      	mov	r2, r0
 80031c8:	69bb      	ldr	r3, [r7, #24]
 80031ca:	1ad3      	subs	r3, r2, r3
 80031cc:	2b02      	cmp	r3, #2
 80031ce:	d901      	bls.n	80031d4 <HAL_RCC_OscConfig+0x784>
              {
                return HAL_TIMEOUT;
 80031d0:	2303      	movs	r3, #3
 80031d2:	e09d      	b.n	8003310 <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031d4:	4b23      	ldr	r3, [pc, #140]	; (8003264 <HAL_RCC_OscConfig+0x814>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d1f0      	bne.n	80031c2 <HAL_RCC_OscConfig+0x772>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80031e0:	4b20      	ldr	r3, [pc, #128]	; (8003264 <HAL_RCC_OscConfig+0x814>)
 80031e2:	68da      	ldr	r2, [r3, #12]
 80031e4:	4b20      	ldr	r3, [pc, #128]	; (8003268 <HAL_RCC_OscConfig+0x818>)
 80031e6:	4013      	ands	r3, r2
 80031e8:	687a      	ldr	r2, [r7, #4]
 80031ea:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80031ec:	687a      	ldr	r2, [r7, #4]
 80031ee:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80031f0:	3a01      	subs	r2, #1
 80031f2:	0112      	lsls	r2, r2, #4
 80031f4:	4311      	orrs	r1, r2
 80031f6:	687a      	ldr	r2, [r7, #4]
 80031f8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80031fa:	0212      	lsls	r2, r2, #8
 80031fc:	4311      	orrs	r1, r2
 80031fe:	687a      	ldr	r2, [r7, #4]
 8003200:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003202:	0852      	lsrs	r2, r2, #1
 8003204:	3a01      	subs	r2, #1
 8003206:	0552      	lsls	r2, r2, #21
 8003208:	4311      	orrs	r1, r2
 800320a:	687a      	ldr	r2, [r7, #4]
 800320c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800320e:	0852      	lsrs	r2, r2, #1
 8003210:	3a01      	subs	r2, #1
 8003212:	0652      	lsls	r2, r2, #25
 8003214:	430a      	orrs	r2, r1
 8003216:	4913      	ldr	r1, [pc, #76]	; (8003264 <HAL_RCC_OscConfig+0x814>)
 8003218:	4313      	orrs	r3, r2
 800321a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800321c:	4b11      	ldr	r3, [pc, #68]	; (8003264 <HAL_RCC_OscConfig+0x814>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a10      	ldr	r2, [pc, #64]	; (8003264 <HAL_RCC_OscConfig+0x814>)
 8003222:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003226:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003228:	4b0e      	ldr	r3, [pc, #56]	; (8003264 <HAL_RCC_OscConfig+0x814>)
 800322a:	68db      	ldr	r3, [r3, #12]
 800322c:	4a0d      	ldr	r2, [pc, #52]	; (8003264 <HAL_RCC_OscConfig+0x814>)
 800322e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003232:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003234:	f7fe fbc6 	bl	80019c4 <HAL_GetTick>
 8003238:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800323a:	e008      	b.n	800324e <HAL_RCC_OscConfig+0x7fe>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800323c:	f7fe fbc2 	bl	80019c4 <HAL_GetTick>
 8003240:	4602      	mov	r2, r0
 8003242:	69bb      	ldr	r3, [r7, #24]
 8003244:	1ad3      	subs	r3, r2, r3
 8003246:	2b02      	cmp	r3, #2
 8003248:	d901      	bls.n	800324e <HAL_RCC_OscConfig+0x7fe>
              {
                return HAL_TIMEOUT;
 800324a:	2303      	movs	r3, #3
 800324c:	e060      	b.n	8003310 <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800324e:	4b05      	ldr	r3, [pc, #20]	; (8003264 <HAL_RCC_OscConfig+0x814>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003256:	2b00      	cmp	r3, #0
 8003258:	d0f0      	beq.n	800323c <HAL_RCC_OscConfig+0x7ec>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800325a:	e058      	b.n	800330e <HAL_RCC_OscConfig+0x8be>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	e057      	b.n	8003310 <HAL_RCC_OscConfig+0x8c0>
 8003260:	40007000 	.word	0x40007000
 8003264:	40021000 	.word	0x40021000
 8003268:	f99f808c 	.word	0xf99f808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800326c:	4b2a      	ldr	r3, [pc, #168]	; (8003318 <HAL_RCC_OscConfig+0x8c8>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003274:	2b00      	cmp	r3, #0
 8003276:	d14a      	bne.n	800330e <HAL_RCC_OscConfig+0x8be>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003278:	4b27      	ldr	r3, [pc, #156]	; (8003318 <HAL_RCC_OscConfig+0x8c8>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a26      	ldr	r2, [pc, #152]	; (8003318 <HAL_RCC_OscConfig+0x8c8>)
 800327e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003282:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003284:	4b24      	ldr	r3, [pc, #144]	; (8003318 <HAL_RCC_OscConfig+0x8c8>)
 8003286:	68db      	ldr	r3, [r3, #12]
 8003288:	4a23      	ldr	r2, [pc, #140]	; (8003318 <HAL_RCC_OscConfig+0x8c8>)
 800328a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800328e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003290:	f7fe fb98 	bl	80019c4 <HAL_GetTick>
 8003294:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003296:	e008      	b.n	80032aa <HAL_RCC_OscConfig+0x85a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003298:	f7fe fb94 	bl	80019c4 <HAL_GetTick>
 800329c:	4602      	mov	r2, r0
 800329e:	69bb      	ldr	r3, [r7, #24]
 80032a0:	1ad3      	subs	r3, r2, r3
 80032a2:	2b02      	cmp	r3, #2
 80032a4:	d901      	bls.n	80032aa <HAL_RCC_OscConfig+0x85a>
            {
              return HAL_TIMEOUT;
 80032a6:	2303      	movs	r3, #3
 80032a8:	e032      	b.n	8003310 <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032aa:	4b1b      	ldr	r3, [pc, #108]	; (8003318 <HAL_RCC_OscConfig+0x8c8>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d0f0      	beq.n	8003298 <HAL_RCC_OscConfig+0x848>
 80032b6:	e02a      	b.n	800330e <HAL_RCC_OscConfig+0x8be>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80032b8:	6a3b      	ldr	r3, [r7, #32]
 80032ba:	2b0c      	cmp	r3, #12
 80032bc:	d025      	beq.n	800330a <HAL_RCC_OscConfig+0x8ba>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032be:	4b16      	ldr	r3, [pc, #88]	; (8003318 <HAL_RCC_OscConfig+0x8c8>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a15      	ldr	r2, [pc, #84]	; (8003318 <HAL_RCC_OscConfig+0x8c8>)
 80032c4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80032c8:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80032ca:	4b13      	ldr	r3, [pc, #76]	; (8003318 <HAL_RCC_OscConfig+0x8c8>)
 80032cc:	68db      	ldr	r3, [r3, #12]
 80032ce:	4a12      	ldr	r2, [pc, #72]	; (8003318 <HAL_RCC_OscConfig+0x8c8>)
 80032d0:	f023 0303 	bic.w	r3, r3, #3
 80032d4:	60d3      	str	r3, [r2, #12]
#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 80032d6:	4b10      	ldr	r3, [pc, #64]	; (8003318 <HAL_RCC_OscConfig+0x8c8>)
 80032d8:	68db      	ldr	r3, [r3, #12]
 80032da:	4a0f      	ldr	r2, [pc, #60]	; (8003318 <HAL_RCC_OscConfig+0x8c8>)
 80032dc:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80032e0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032e2:	f7fe fb6f 	bl	80019c4 <HAL_GetTick>
 80032e6:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032e8:	e008      	b.n	80032fc <HAL_RCC_OscConfig+0x8ac>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032ea:	f7fe fb6b 	bl	80019c4 <HAL_GetTick>
 80032ee:	4602      	mov	r2, r0
 80032f0:	69bb      	ldr	r3, [r7, #24]
 80032f2:	1ad3      	subs	r3, r2, r3
 80032f4:	2b02      	cmp	r3, #2
 80032f6:	d901      	bls.n	80032fc <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 80032f8:	2303      	movs	r3, #3
 80032fa:	e009      	b.n	8003310 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032fc:	4b06      	ldr	r3, [pc, #24]	; (8003318 <HAL_RCC_OscConfig+0x8c8>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003304:	2b00      	cmp	r3, #0
 8003306:	d1f0      	bne.n	80032ea <HAL_RCC_OscConfig+0x89a>
 8003308:	e001      	b.n	800330e <HAL_RCC_OscConfig+0x8be>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e000      	b.n	8003310 <HAL_RCC_OscConfig+0x8c0>
      }
    }
  }
  return HAL_OK;
 800330e:	2300      	movs	r3, #0
}
 8003310:	4618      	mov	r0, r3
 8003312:	3728      	adds	r7, #40	; 0x28
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}
 8003318:	40021000 	.word	0x40021000

0800331c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b084      	sub	sp, #16
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
 8003324:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d101      	bne.n	8003330 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	e0c8      	b.n	80034c2 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003330:	4b66      	ldr	r3, [pc, #408]	; (80034cc <HAL_RCC_ClockConfig+0x1b0>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f003 0307 	and.w	r3, r3, #7
 8003338:	683a      	ldr	r2, [r7, #0]
 800333a:	429a      	cmp	r2, r3
 800333c:	d910      	bls.n	8003360 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800333e:	4b63      	ldr	r3, [pc, #396]	; (80034cc <HAL_RCC_ClockConfig+0x1b0>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f023 0207 	bic.w	r2, r3, #7
 8003346:	4961      	ldr	r1, [pc, #388]	; (80034cc <HAL_RCC_ClockConfig+0x1b0>)
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	4313      	orrs	r3, r2
 800334c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800334e:	4b5f      	ldr	r3, [pc, #380]	; (80034cc <HAL_RCC_ClockConfig+0x1b0>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f003 0307 	and.w	r3, r3, #7
 8003356:	683a      	ldr	r2, [r7, #0]
 8003358:	429a      	cmp	r2, r3
 800335a:	d001      	beq.n	8003360 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	e0b0      	b.n	80034c2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f003 0301 	and.w	r3, r3, #1
 8003368:	2b00      	cmp	r3, #0
 800336a:	d04c      	beq.n	8003406 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	2b03      	cmp	r3, #3
 8003372:	d107      	bne.n	8003384 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003374:	4b56      	ldr	r3, [pc, #344]	; (80034d0 <HAL_RCC_ClockConfig+0x1b4>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800337c:	2b00      	cmp	r3, #0
 800337e:	d121      	bne.n	80033c4 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003380:	2301      	movs	r3, #1
 8003382:	e09e      	b.n	80034c2 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	2b02      	cmp	r3, #2
 800338a:	d107      	bne.n	800339c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800338c:	4b50      	ldr	r3, [pc, #320]	; (80034d0 <HAL_RCC_ClockConfig+0x1b4>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003394:	2b00      	cmp	r3, #0
 8003396:	d115      	bne.n	80033c4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	e092      	b.n	80034c2 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d107      	bne.n	80033b4 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80033a4:	4b4a      	ldr	r3, [pc, #296]	; (80034d0 <HAL_RCC_ClockConfig+0x1b4>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f003 0302 	and.w	r3, r3, #2
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d109      	bne.n	80033c4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	e086      	b.n	80034c2 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80033b4:	4b46      	ldr	r3, [pc, #280]	; (80034d0 <HAL_RCC_ClockConfig+0x1b4>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d101      	bne.n	80033c4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80033c0:	2301      	movs	r3, #1
 80033c2:	e07e      	b.n	80034c2 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80033c4:	4b42      	ldr	r3, [pc, #264]	; (80034d0 <HAL_RCC_ClockConfig+0x1b4>)
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	f023 0203 	bic.w	r2, r3, #3
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	493f      	ldr	r1, [pc, #252]	; (80034d0 <HAL_RCC_ClockConfig+0x1b4>)
 80033d2:	4313      	orrs	r3, r2
 80033d4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033d6:	f7fe faf5 	bl	80019c4 <HAL_GetTick>
 80033da:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033dc:	e00a      	b.n	80033f4 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033de:	f7fe faf1 	bl	80019c4 <HAL_GetTick>
 80033e2:	4602      	mov	r2, r0
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	1ad3      	subs	r3, r2, r3
 80033e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d901      	bls.n	80033f4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80033f0:	2303      	movs	r3, #3
 80033f2:	e066      	b.n	80034c2 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033f4:	4b36      	ldr	r3, [pc, #216]	; (80034d0 <HAL_RCC_ClockConfig+0x1b4>)
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	f003 020c 	and.w	r2, r3, #12
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	009b      	lsls	r3, r3, #2
 8003402:	429a      	cmp	r2, r3
 8003404:	d1eb      	bne.n	80033de <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 0302 	and.w	r3, r3, #2
 800340e:	2b00      	cmp	r3, #0
 8003410:	d008      	beq.n	8003424 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003412:	4b2f      	ldr	r3, [pc, #188]	; (80034d0 <HAL_RCC_ClockConfig+0x1b4>)
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	492c      	ldr	r1, [pc, #176]	; (80034d0 <HAL_RCC_ClockConfig+0x1b4>)
 8003420:	4313      	orrs	r3, r2
 8003422:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003424:	4b29      	ldr	r3, [pc, #164]	; (80034cc <HAL_RCC_ClockConfig+0x1b0>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f003 0307 	and.w	r3, r3, #7
 800342c:	683a      	ldr	r2, [r7, #0]
 800342e:	429a      	cmp	r2, r3
 8003430:	d210      	bcs.n	8003454 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003432:	4b26      	ldr	r3, [pc, #152]	; (80034cc <HAL_RCC_ClockConfig+0x1b0>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f023 0207 	bic.w	r2, r3, #7
 800343a:	4924      	ldr	r1, [pc, #144]	; (80034cc <HAL_RCC_ClockConfig+0x1b0>)
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	4313      	orrs	r3, r2
 8003440:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003442:	4b22      	ldr	r3, [pc, #136]	; (80034cc <HAL_RCC_ClockConfig+0x1b0>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 0307 	and.w	r3, r3, #7
 800344a:	683a      	ldr	r2, [r7, #0]
 800344c:	429a      	cmp	r2, r3
 800344e:	d001      	beq.n	8003454 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	e036      	b.n	80034c2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f003 0304 	and.w	r3, r3, #4
 800345c:	2b00      	cmp	r3, #0
 800345e:	d008      	beq.n	8003472 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003460:	4b1b      	ldr	r3, [pc, #108]	; (80034d0 <HAL_RCC_ClockConfig+0x1b4>)
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	68db      	ldr	r3, [r3, #12]
 800346c:	4918      	ldr	r1, [pc, #96]	; (80034d0 <HAL_RCC_ClockConfig+0x1b4>)
 800346e:	4313      	orrs	r3, r2
 8003470:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f003 0308 	and.w	r3, r3, #8
 800347a:	2b00      	cmp	r3, #0
 800347c:	d009      	beq.n	8003492 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800347e:	4b14      	ldr	r3, [pc, #80]	; (80034d0 <HAL_RCC_ClockConfig+0x1b4>)
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	691b      	ldr	r3, [r3, #16]
 800348a:	00db      	lsls	r3, r3, #3
 800348c:	4910      	ldr	r1, [pc, #64]	; (80034d0 <HAL_RCC_ClockConfig+0x1b4>)
 800348e:	4313      	orrs	r3, r2
 8003490:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003492:	f000 f825 	bl	80034e0 <HAL_RCC_GetSysClockFreq>
 8003496:	4602      	mov	r2, r0
 8003498:	4b0d      	ldr	r3, [pc, #52]	; (80034d0 <HAL_RCC_ClockConfig+0x1b4>)
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	091b      	lsrs	r3, r3, #4
 800349e:	f003 030f 	and.w	r3, r3, #15
 80034a2:	490c      	ldr	r1, [pc, #48]	; (80034d4 <HAL_RCC_ClockConfig+0x1b8>)
 80034a4:	5ccb      	ldrb	r3, [r1, r3]
 80034a6:	f003 031f 	and.w	r3, r3, #31
 80034aa:	fa22 f303 	lsr.w	r3, r2, r3
 80034ae:	4a0a      	ldr	r2, [pc, #40]	; (80034d8 <HAL_RCC_ClockConfig+0x1bc>)
 80034b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80034b2:	4b0a      	ldr	r3, [pc, #40]	; (80034dc <HAL_RCC_ClockConfig+0x1c0>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4618      	mov	r0, r3
 80034b8:	f7fe fa34 	bl	8001924 <HAL_InitTick>
 80034bc:	4603      	mov	r3, r0
 80034be:	72fb      	strb	r3, [r7, #11]

  return status;
 80034c0:	7afb      	ldrb	r3, [r7, #11]
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	3710      	adds	r7, #16
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}
 80034ca:	bf00      	nop
 80034cc:	40022000 	.word	0x40022000
 80034d0:	40021000 	.word	0x40021000
 80034d4:	08007198 	.word	0x08007198
 80034d8:	2000006c 	.word	0x2000006c
 80034dc:	20000070 	.word	0x20000070

080034e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b089      	sub	sp, #36	; 0x24
 80034e4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80034e6:	2300      	movs	r3, #0
 80034e8:	61fb      	str	r3, [r7, #28]
 80034ea:	2300      	movs	r3, #0
 80034ec:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80034ee:	4b3e      	ldr	r3, [pc, #248]	; (80035e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	f003 030c 	and.w	r3, r3, #12
 80034f6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80034f8:	4b3b      	ldr	r3, [pc, #236]	; (80035e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80034fa:	68db      	ldr	r3, [r3, #12]
 80034fc:	f003 0303 	and.w	r3, r3, #3
 8003500:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d005      	beq.n	8003514 <HAL_RCC_GetSysClockFreq+0x34>
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	2b0c      	cmp	r3, #12
 800350c:	d121      	bne.n	8003552 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2b01      	cmp	r3, #1
 8003512:	d11e      	bne.n	8003552 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003514:	4b34      	ldr	r3, [pc, #208]	; (80035e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f003 0308 	and.w	r3, r3, #8
 800351c:	2b00      	cmp	r3, #0
 800351e:	d107      	bne.n	8003530 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003520:	4b31      	ldr	r3, [pc, #196]	; (80035e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003522:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003526:	0a1b      	lsrs	r3, r3, #8
 8003528:	f003 030f 	and.w	r3, r3, #15
 800352c:	61fb      	str	r3, [r7, #28]
 800352e:	e005      	b.n	800353c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003530:	4b2d      	ldr	r3, [pc, #180]	; (80035e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	091b      	lsrs	r3, r3, #4
 8003536:	f003 030f 	and.w	r3, r3, #15
 800353a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800353c:	4a2b      	ldr	r2, [pc, #172]	; (80035ec <HAL_RCC_GetSysClockFreq+0x10c>)
 800353e:	69fb      	ldr	r3, [r7, #28]
 8003540:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003544:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d10d      	bne.n	8003568 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800354c:	69fb      	ldr	r3, [r7, #28]
 800354e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003550:	e00a      	b.n	8003568 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	2b04      	cmp	r3, #4
 8003556:	d102      	bne.n	800355e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003558:	4b25      	ldr	r3, [pc, #148]	; (80035f0 <HAL_RCC_GetSysClockFreq+0x110>)
 800355a:	61bb      	str	r3, [r7, #24]
 800355c:	e004      	b.n	8003568 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	2b08      	cmp	r3, #8
 8003562:	d101      	bne.n	8003568 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003564:	4b23      	ldr	r3, [pc, #140]	; (80035f4 <HAL_RCC_GetSysClockFreq+0x114>)
 8003566:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	2b0c      	cmp	r3, #12
 800356c:	d134      	bne.n	80035d8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800356e:	4b1e      	ldr	r3, [pc, #120]	; (80035e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003570:	68db      	ldr	r3, [r3, #12]
 8003572:	f003 0303 	and.w	r3, r3, #3
 8003576:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	2b02      	cmp	r3, #2
 800357c:	d003      	beq.n	8003586 <HAL_RCC_GetSysClockFreq+0xa6>
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	2b03      	cmp	r3, #3
 8003582:	d003      	beq.n	800358c <HAL_RCC_GetSysClockFreq+0xac>
 8003584:	e005      	b.n	8003592 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003586:	4b1a      	ldr	r3, [pc, #104]	; (80035f0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003588:	617b      	str	r3, [r7, #20]
      break;
 800358a:	e005      	b.n	8003598 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800358c:	4b19      	ldr	r3, [pc, #100]	; (80035f4 <HAL_RCC_GetSysClockFreq+0x114>)
 800358e:	617b      	str	r3, [r7, #20]
      break;
 8003590:	e002      	b.n	8003598 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003592:	69fb      	ldr	r3, [r7, #28]
 8003594:	617b      	str	r3, [r7, #20]
      break;
 8003596:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003598:	4b13      	ldr	r3, [pc, #76]	; (80035e8 <HAL_RCC_GetSysClockFreq+0x108>)
 800359a:	68db      	ldr	r3, [r3, #12]
 800359c:	091b      	lsrs	r3, r3, #4
 800359e:	f003 0307 	and.w	r3, r3, #7
 80035a2:	3301      	adds	r3, #1
 80035a4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80035a6:	4b10      	ldr	r3, [pc, #64]	; (80035e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80035a8:	68db      	ldr	r3, [r3, #12]
 80035aa:	0a1b      	lsrs	r3, r3, #8
 80035ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80035b0:	697a      	ldr	r2, [r7, #20]
 80035b2:	fb02 f203 	mul.w	r2, r2, r3
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80035bc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80035be:	4b0a      	ldr	r3, [pc, #40]	; (80035e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80035c0:	68db      	ldr	r3, [r3, #12]
 80035c2:	0e5b      	lsrs	r3, r3, #25
 80035c4:	f003 0303 	and.w	r3, r3, #3
 80035c8:	3301      	adds	r3, #1
 80035ca:	005b      	lsls	r3, r3, #1
 80035cc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80035ce:	697a      	ldr	r2, [r7, #20]
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80035d6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80035d8:	69bb      	ldr	r3, [r7, #24]
}
 80035da:	4618      	mov	r0, r3
 80035dc:	3724      	adds	r7, #36	; 0x24
 80035de:	46bd      	mov	sp, r7
 80035e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e4:	4770      	bx	lr
 80035e6:	bf00      	nop
 80035e8:	40021000 	.word	0x40021000
 80035ec:	080071b0 	.word	0x080071b0
 80035f0:	00f42400 	.word	0x00f42400
 80035f4:	007a1200 	.word	0x007a1200

080035f8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035f8:	b480      	push	{r7}
 80035fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035fc:	4b03      	ldr	r3, [pc, #12]	; (800360c <HAL_RCC_GetHCLKFreq+0x14>)
 80035fe:	681b      	ldr	r3, [r3, #0]
}
 8003600:	4618      	mov	r0, r3
 8003602:	46bd      	mov	sp, r7
 8003604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003608:	4770      	bx	lr
 800360a:	bf00      	nop
 800360c:	2000006c 	.word	0x2000006c

08003610 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003614:	f7ff fff0 	bl	80035f8 <HAL_RCC_GetHCLKFreq>
 8003618:	4602      	mov	r2, r0
 800361a:	4b06      	ldr	r3, [pc, #24]	; (8003634 <HAL_RCC_GetPCLK1Freq+0x24>)
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	0a1b      	lsrs	r3, r3, #8
 8003620:	f003 0307 	and.w	r3, r3, #7
 8003624:	4904      	ldr	r1, [pc, #16]	; (8003638 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003626:	5ccb      	ldrb	r3, [r1, r3]
 8003628:	f003 031f 	and.w	r3, r3, #31
 800362c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003630:	4618      	mov	r0, r3
 8003632:	bd80      	pop	{r7, pc}
 8003634:	40021000 	.word	0x40021000
 8003638:	080071a8 	.word	0x080071a8

0800363c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003640:	f7ff ffda 	bl	80035f8 <HAL_RCC_GetHCLKFreq>
 8003644:	4602      	mov	r2, r0
 8003646:	4b06      	ldr	r3, [pc, #24]	; (8003660 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	0adb      	lsrs	r3, r3, #11
 800364c:	f003 0307 	and.w	r3, r3, #7
 8003650:	4904      	ldr	r1, [pc, #16]	; (8003664 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003652:	5ccb      	ldrb	r3, [r1, r3]
 8003654:	f003 031f 	and.w	r3, r3, #31
 8003658:	fa22 f303 	lsr.w	r3, r2, r3
}
 800365c:	4618      	mov	r0, r3
 800365e:	bd80      	pop	{r7, pc}
 8003660:	40021000 	.word	0x40021000
 8003664:	080071a8 	.word	0x080071a8

08003668 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b086      	sub	sp, #24
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003670:	2300      	movs	r3, #0
 8003672:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003674:	4b2a      	ldr	r3, [pc, #168]	; (8003720 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003676:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003678:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800367c:	2b00      	cmp	r3, #0
 800367e:	d003      	beq.n	8003688 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003680:	f7ff f982 	bl	8002988 <HAL_PWREx_GetVoltageRange>
 8003684:	6178      	str	r0, [r7, #20]
 8003686:	e014      	b.n	80036b2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003688:	4b25      	ldr	r3, [pc, #148]	; (8003720 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800368a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800368c:	4a24      	ldr	r2, [pc, #144]	; (8003720 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800368e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003692:	6593      	str	r3, [r2, #88]	; 0x58
 8003694:	4b22      	ldr	r3, [pc, #136]	; (8003720 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003696:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003698:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800369c:	60fb      	str	r3, [r7, #12]
 800369e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80036a0:	f7ff f972 	bl	8002988 <HAL_PWREx_GetVoltageRange>
 80036a4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80036a6:	4b1e      	ldr	r3, [pc, #120]	; (8003720 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80036a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036aa:	4a1d      	ldr	r2, [pc, #116]	; (8003720 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80036ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036b0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036b8:	d10b      	bne.n	80036d2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2b80      	cmp	r3, #128	; 0x80
 80036be:	d919      	bls.n	80036f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2ba0      	cmp	r3, #160	; 0xa0
 80036c4:	d902      	bls.n	80036cc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80036c6:	2302      	movs	r3, #2
 80036c8:	613b      	str	r3, [r7, #16]
 80036ca:	e013      	b.n	80036f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80036cc:	2301      	movs	r3, #1
 80036ce:	613b      	str	r3, [r7, #16]
 80036d0:	e010      	b.n	80036f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2b80      	cmp	r3, #128	; 0x80
 80036d6:	d902      	bls.n	80036de <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80036d8:	2303      	movs	r3, #3
 80036da:	613b      	str	r3, [r7, #16]
 80036dc:	e00a      	b.n	80036f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2b80      	cmp	r3, #128	; 0x80
 80036e2:	d102      	bne.n	80036ea <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80036e4:	2302      	movs	r3, #2
 80036e6:	613b      	str	r3, [r7, #16]
 80036e8:	e004      	b.n	80036f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2b70      	cmp	r3, #112	; 0x70
 80036ee:	d101      	bne.n	80036f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80036f0:	2301      	movs	r3, #1
 80036f2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80036f4:	4b0b      	ldr	r3, [pc, #44]	; (8003724 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f023 0207 	bic.w	r2, r3, #7
 80036fc:	4909      	ldr	r1, [pc, #36]	; (8003724 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	4313      	orrs	r3, r2
 8003702:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003704:	4b07      	ldr	r3, [pc, #28]	; (8003724 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f003 0307 	and.w	r3, r3, #7
 800370c:	693a      	ldr	r2, [r7, #16]
 800370e:	429a      	cmp	r2, r3
 8003710:	d001      	beq.n	8003716 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	e000      	b.n	8003718 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003716:	2300      	movs	r3, #0
}
 8003718:	4618      	mov	r0, r3
 800371a:	3718      	adds	r7, #24
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}
 8003720:	40021000 	.word	0x40021000
 8003724:	40022000 	.word	0x40022000

08003728 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b086      	sub	sp, #24
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003730:	2300      	movs	r3, #0
 8003732:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003734:	2300      	movs	r3, #0
 8003736:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003740:	2b00      	cmp	r3, #0
 8003742:	f000 809e 	beq.w	8003882 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003746:	2300      	movs	r3, #0
 8003748:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800374a:	4b46      	ldr	r3, [pc, #280]	; (8003864 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800374c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800374e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003752:	2b00      	cmp	r3, #0
 8003754:	d101      	bne.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003756:	2301      	movs	r3, #1
 8003758:	e000      	b.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x34>
 800375a:	2300      	movs	r3, #0
 800375c:	2b00      	cmp	r3, #0
 800375e:	d00d      	beq.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003760:	4b40      	ldr	r3, [pc, #256]	; (8003864 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003762:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003764:	4a3f      	ldr	r2, [pc, #252]	; (8003864 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003766:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800376a:	6593      	str	r3, [r2, #88]	; 0x58
 800376c:	4b3d      	ldr	r3, [pc, #244]	; (8003864 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800376e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003770:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003774:	60bb      	str	r3, [r7, #8]
 8003776:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003778:	2301      	movs	r3, #1
 800377a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800377c:	4b3a      	ldr	r3, [pc, #232]	; (8003868 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a39      	ldr	r2, [pc, #228]	; (8003868 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8003782:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003786:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003788:	f7fe f91c 	bl	80019c4 <HAL_GetTick>
 800378c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800378e:	e009      	b.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003790:	f7fe f918 	bl	80019c4 <HAL_GetTick>
 8003794:	4602      	mov	r2, r0
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	1ad3      	subs	r3, r2, r3
 800379a:	2b02      	cmp	r3, #2
 800379c:	d902      	bls.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 800379e:	2303      	movs	r3, #3
 80037a0:	74fb      	strb	r3, [r7, #19]
        break;
 80037a2:	e005      	b.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80037a4:	4b30      	ldr	r3, [pc, #192]	; (8003868 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d0ef      	beq.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 80037b0:	7cfb      	ldrb	r3, [r7, #19]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d15a      	bne.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80037b6:	4b2b      	ldr	r3, [pc, #172]	; (8003864 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80037b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037c0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80037c2:	697b      	ldr	r3, [r7, #20]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d01e      	beq.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0xde>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037cc:	697a      	ldr	r2, [r7, #20]
 80037ce:	429a      	cmp	r2, r3
 80037d0:	d019      	beq.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80037d2:	4b24      	ldr	r3, [pc, #144]	; (8003864 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80037d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037dc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80037de:	4b21      	ldr	r3, [pc, #132]	; (8003864 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80037e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037e4:	4a1f      	ldr	r2, [pc, #124]	; (8003864 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80037e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80037ee:	4b1d      	ldr	r3, [pc, #116]	; (8003864 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80037f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037f4:	4a1b      	ldr	r2, [pc, #108]	; (8003864 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80037f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80037fe:	4a19      	ldr	r2, [pc, #100]	; (8003864 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	f003 0301 	and.w	r3, r3, #1
 800380c:	2b00      	cmp	r3, #0
 800380e:	d016      	beq.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003810:	f7fe f8d8 	bl	80019c4 <HAL_GetTick>
 8003814:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003816:	e00b      	b.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003818:	f7fe f8d4 	bl	80019c4 <HAL_GetTick>
 800381c:	4602      	mov	r2, r0
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	1ad3      	subs	r3, r2, r3
 8003822:	f241 3288 	movw	r2, #5000	; 0x1388
 8003826:	4293      	cmp	r3, r2
 8003828:	d902      	bls.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 800382a:	2303      	movs	r3, #3
 800382c:	74fb      	strb	r3, [r7, #19]
            break;
 800382e:	e006      	b.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003830:	4b0c      	ldr	r3, [pc, #48]	; (8003864 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003832:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003836:	f003 0302 	and.w	r3, r3, #2
 800383a:	2b00      	cmp	r3, #0
 800383c:	d0ec      	beq.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 800383e:	7cfb      	ldrb	r3, [r7, #19]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d10b      	bne.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003844:	4b07      	ldr	r3, [pc, #28]	; (8003864 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003846:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800384a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003852:	4904      	ldr	r1, [pc, #16]	; (8003864 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003854:	4313      	orrs	r3, r2
 8003856:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800385a:	e009      	b.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800385c:	7cfb      	ldrb	r3, [r7, #19]
 800385e:	74bb      	strb	r3, [r7, #18]
 8003860:	e006      	b.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x148>
 8003862:	bf00      	nop
 8003864:	40021000 	.word	0x40021000
 8003868:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800386c:	7cfb      	ldrb	r3, [r7, #19]
 800386e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003870:	7c7b      	ldrb	r3, [r7, #17]
 8003872:	2b01      	cmp	r3, #1
 8003874:	d105      	bne.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003876:	4b6e      	ldr	r3, [pc, #440]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003878:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800387a:	4a6d      	ldr	r2, [pc, #436]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800387c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003880:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f003 0301 	and.w	r3, r3, #1
 800388a:	2b00      	cmp	r3, #0
 800388c:	d00a      	beq.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800388e:	4b68      	ldr	r3, [pc, #416]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003890:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003894:	f023 0203 	bic.w	r2, r3, #3
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	4964      	ldr	r1, [pc, #400]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800389e:	4313      	orrs	r3, r2
 80038a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f003 0302 	and.w	r3, r3, #2
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d00a      	beq.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80038b0:	4b5f      	ldr	r3, [pc, #380]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80038b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038b6:	f023 020c 	bic.w	r2, r3, #12
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	495c      	ldr	r1, [pc, #368]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80038c0:	4313      	orrs	r3, r2
 80038c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 0304 	and.w	r3, r3, #4
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d00a      	beq.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80038d2:	4b57      	ldr	r3, [pc, #348]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80038d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038d8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	68db      	ldr	r3, [r3, #12]
 80038e0:	4953      	ldr	r1, [pc, #332]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80038e2:	4313      	orrs	r3, r2
 80038e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f003 0320 	and.w	r3, r3, #32
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d00a      	beq.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80038f4:	4b4e      	ldr	r3, [pc, #312]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80038f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038fa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	691b      	ldr	r3, [r3, #16]
 8003902:	494b      	ldr	r1, [pc, #300]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003904:	4313      	orrs	r3, r2
 8003906:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003912:	2b00      	cmp	r3, #0
 8003914:	d00a      	beq.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003916:	4b46      	ldr	r3, [pc, #280]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003918:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800391c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6a1b      	ldr	r3, [r3, #32]
 8003924:	4942      	ldr	r1, [pc, #264]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003926:	4313      	orrs	r3, r2
 8003928:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003934:	2b00      	cmp	r3, #0
 8003936:	d00a      	beq.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003938:	4b3d      	ldr	r3, [pc, #244]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800393a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800393e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003946:	493a      	ldr	r1, [pc, #232]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003948:	4313      	orrs	r3, r2
 800394a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003956:	2b00      	cmp	r3, #0
 8003958:	d00a      	beq.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800395a:	4b35      	ldr	r3, [pc, #212]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800395c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003960:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	695b      	ldr	r3, [r3, #20]
 8003968:	4931      	ldr	r1, [pc, #196]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800396a:	4313      	orrs	r3, r2
 800396c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003978:	2b00      	cmp	r3, #0
 800397a:	d00a      	beq.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800397c:	4b2c      	ldr	r3, [pc, #176]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800397e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003982:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	699b      	ldr	r3, [r3, #24]
 800398a:	4929      	ldr	r1, [pc, #164]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800398c:	4313      	orrs	r3, r2
 800398e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800399a:	2b00      	cmp	r3, #0
 800399c:	d00a      	beq.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800399e:	4b24      	ldr	r3, [pc, #144]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80039a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039a4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	69db      	ldr	r3, [r3, #28]
 80039ac:	4920      	ldr	r1, [pc, #128]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80039ae:	4313      	orrs	r3, r2
 80039b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d015      	beq.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80039c0:	4b1b      	ldr	r3, [pc, #108]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80039c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039c6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ce:	4918      	ldr	r1, [pc, #96]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80039d0:	4313      	orrs	r3, r2
 80039d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80039de:	d105      	bne.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80039e0:	4b13      	ldr	r3, [pc, #76]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80039e2:	68db      	ldr	r3, [r3, #12]
 80039e4:	4a12      	ldr	r2, [pc, #72]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80039e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80039ea:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d015      	beq.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80039f8:	4b0d      	ldr	r3, [pc, #52]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80039fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039fe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a06:	490a      	ldr	r1, [pc, #40]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a12:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a16:	d105      	bne.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a18:	4b05      	ldr	r3, [pc, #20]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003a1a:	68db      	ldr	r3, [r3, #12]
 8003a1c:	4a04      	ldr	r2, [pc, #16]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003a1e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a22:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003a24:	7cbb      	ldrb	r3, [r7, #18]
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	3718      	adds	r7, #24
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}
 8003a2e:	bf00      	nop
 8003a30:	40021000 	.word	0x40021000

08003a34 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b084      	sub	sp, #16
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d101      	bne.n	8003a46 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	e095      	b.n	8003b72 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d108      	bne.n	8003a60 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a56:	d009      	beq.n	8003a6c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	61da      	str	r2, [r3, #28]
 8003a5e:	e005      	b.n	8003a6c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2200      	movs	r2, #0
 8003a64:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003a78:	b2db      	uxtb	r3, r3
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d106      	bne.n	8003a8c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2200      	movs	r2, #0
 8003a82:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	f7fd fdde 	bl	8001648 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2202      	movs	r2, #2
 8003a90:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003aa2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	68db      	ldr	r3, [r3, #12]
 8003aa8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003aac:	d902      	bls.n	8003ab4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	60fb      	str	r3, [r7, #12]
 8003ab2:	e002      	b.n	8003aba <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003ab4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003ab8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	68db      	ldr	r3, [r3, #12]
 8003abe:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003ac2:	d007      	beq.n	8003ad4 <HAL_SPI_Init+0xa0>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	68db      	ldr	r3, [r3, #12]
 8003ac8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003acc:	d002      	beq.n	8003ad4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003ae4:	431a      	orrs	r2, r3
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	691b      	ldr	r3, [r3, #16]
 8003aea:	f003 0302 	and.w	r3, r3, #2
 8003aee:	431a      	orrs	r2, r3
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	695b      	ldr	r3, [r3, #20]
 8003af4:	f003 0301 	and.w	r3, r3, #1
 8003af8:	431a      	orrs	r2, r3
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	699b      	ldr	r3, [r3, #24]
 8003afe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b02:	431a      	orrs	r2, r3
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	69db      	ldr	r3, [r3, #28]
 8003b08:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003b0c:	431a      	orrs	r2, r3
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6a1b      	ldr	r3, [r3, #32]
 8003b12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b16:	ea42 0103 	orr.w	r1, r2, r3
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b1e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	430a      	orrs	r2, r1
 8003b28:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	699b      	ldr	r3, [r3, #24]
 8003b2e:	0c1b      	lsrs	r3, r3, #16
 8003b30:	f003 0204 	and.w	r2, r3, #4
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b38:	f003 0310 	and.w	r3, r3, #16
 8003b3c:	431a      	orrs	r2, r3
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b42:	f003 0308 	and.w	r3, r3, #8
 8003b46:	431a      	orrs	r2, r3
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	68db      	ldr	r3, [r3, #12]
 8003b4c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003b50:	ea42 0103 	orr.w	r1, r2, r3
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	430a      	orrs	r2, r1
 8003b60:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2200      	movs	r2, #0
 8003b66:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003b70:	2300      	movs	r3, #0
}
 8003b72:	4618      	mov	r0, r3
 8003b74:	3710      	adds	r7, #16
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}

08003b7a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003b7a:	b580      	push	{r7, lr}
 8003b7c:	b08a      	sub	sp, #40	; 0x28
 8003b7e:	af00      	add	r7, sp, #0
 8003b80:	60f8      	str	r0, [r7, #12]
 8003b82:	60b9      	str	r1, [r7, #8]
 8003b84:	607a      	str	r2, [r7, #4]
 8003b86:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003b98:	2b01      	cmp	r3, #1
 8003b9a:	d101      	bne.n	8003ba0 <HAL_SPI_TransmitReceive+0x26>
 8003b9c:	2302      	movs	r3, #2
 8003b9e:	e1fb      	b.n	8003f98 <HAL_SPI_TransmitReceive+0x41e>
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003ba8:	f7fd ff0c 	bl	80019c4 <HAL_GetTick>
 8003bac:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003bb4:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003bbc:	887b      	ldrh	r3, [r7, #2]
 8003bbe:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003bc0:	887b      	ldrh	r3, [r7, #2]
 8003bc2:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003bc4:	7efb      	ldrb	r3, [r7, #27]
 8003bc6:	2b01      	cmp	r3, #1
 8003bc8:	d00e      	beq.n	8003be8 <HAL_SPI_TransmitReceive+0x6e>
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003bd0:	d106      	bne.n	8003be0 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d102      	bne.n	8003be0 <HAL_SPI_TransmitReceive+0x66>
 8003bda:	7efb      	ldrb	r3, [r7, #27]
 8003bdc:	2b04      	cmp	r3, #4
 8003bde:	d003      	beq.n	8003be8 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003be0:	2302      	movs	r3, #2
 8003be2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003be6:	e1cd      	b.n	8003f84 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d005      	beq.n	8003bfa <HAL_SPI_TransmitReceive+0x80>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d002      	beq.n	8003bfa <HAL_SPI_TransmitReceive+0x80>
 8003bf4:	887b      	ldrh	r3, [r7, #2]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d103      	bne.n	8003c02 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003c00:	e1c0      	b.n	8003f84 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003c08:	b2db      	uxtb	r3, r3
 8003c0a:	2b04      	cmp	r3, #4
 8003c0c:	d003      	beq.n	8003c16 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2205      	movs	r2, #5
 8003c12:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	687a      	ldr	r2, [r7, #4]
 8003c20:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	887a      	ldrh	r2, [r7, #2]
 8003c26:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	887a      	ldrh	r2, [r7, #2]
 8003c2e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	68ba      	ldr	r2, [r7, #8]
 8003c36:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	887a      	ldrh	r2, [r7, #2]
 8003c3c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	887a      	ldrh	r2, [r7, #2]
 8003c42:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2200      	movs	r2, #0
 8003c48:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	68db      	ldr	r3, [r3, #12]
 8003c54:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003c58:	d802      	bhi.n	8003c60 <HAL_SPI_TransmitReceive+0xe6>
 8003c5a:	8a3b      	ldrh	r3, [r7, #16]
 8003c5c:	2b01      	cmp	r3, #1
 8003c5e:	d908      	bls.n	8003c72 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	685a      	ldr	r2, [r3, #4]
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003c6e:	605a      	str	r2, [r3, #4]
 8003c70:	e007      	b.n	8003c82 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	685a      	ldr	r2, [r3, #4]
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003c80:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c8c:	2b40      	cmp	r3, #64	; 0x40
 8003c8e:	d007      	beq.n	8003ca0 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	681a      	ldr	r2, [r3, #0]
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c9e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	68db      	ldr	r3, [r3, #12]
 8003ca4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003ca8:	d97c      	bls.n	8003da4 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d002      	beq.n	8003cb8 <HAL_SPI_TransmitReceive+0x13e>
 8003cb2:	8a7b      	ldrh	r3, [r7, #18]
 8003cb4:	2b01      	cmp	r3, #1
 8003cb6:	d169      	bne.n	8003d8c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cbc:	881a      	ldrh	r2, [r3, #0]
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cc8:	1c9a      	adds	r2, r3, #2
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cd2:	b29b      	uxth	r3, r3
 8003cd4:	3b01      	subs	r3, #1
 8003cd6:	b29a      	uxth	r2, r3
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003cdc:	e056      	b.n	8003d8c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	f003 0302 	and.w	r3, r3, #2
 8003ce8:	2b02      	cmp	r3, #2
 8003cea:	d11b      	bne.n	8003d24 <HAL_SPI_TransmitReceive+0x1aa>
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cf0:	b29b      	uxth	r3, r3
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d016      	beq.n	8003d24 <HAL_SPI_TransmitReceive+0x1aa>
 8003cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	d113      	bne.n	8003d24 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d00:	881a      	ldrh	r2, [r3, #0]
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d0c:	1c9a      	adds	r2, r3, #2
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d16:	b29b      	uxth	r3, r3
 8003d18:	3b01      	subs	r3, #1
 8003d1a:	b29a      	uxth	r2, r3
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003d20:	2300      	movs	r3, #0
 8003d22:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	f003 0301 	and.w	r3, r3, #1
 8003d2e:	2b01      	cmp	r3, #1
 8003d30:	d11c      	bne.n	8003d6c <HAL_SPI_TransmitReceive+0x1f2>
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003d38:	b29b      	uxth	r3, r3
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d016      	beq.n	8003d6c <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	68da      	ldr	r2, [r3, #12]
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d48:	b292      	uxth	r2, r2
 8003d4a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d50:	1c9a      	adds	r2, r3, #2
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003d5c:	b29b      	uxth	r3, r3
 8003d5e:	3b01      	subs	r3, #1
 8003d60:	b29a      	uxth	r2, r3
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003d6c:	f7fd fe2a 	bl	80019c4 <HAL_GetTick>
 8003d70:	4602      	mov	r2, r0
 8003d72:	69fb      	ldr	r3, [r7, #28]
 8003d74:	1ad3      	subs	r3, r2, r3
 8003d76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d78:	429a      	cmp	r2, r3
 8003d7a:	d807      	bhi.n	8003d8c <HAL_SPI_TransmitReceive+0x212>
 8003d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d7e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d82:	d003      	beq.n	8003d8c <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8003d84:	2303      	movs	r3, #3
 8003d86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003d8a:	e0fb      	b.n	8003f84 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d90:	b29b      	uxth	r3, r3
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d1a3      	bne.n	8003cde <HAL_SPI_TransmitReceive+0x164>
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003d9c:	b29b      	uxth	r3, r3
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d19d      	bne.n	8003cde <HAL_SPI_TransmitReceive+0x164>
 8003da2:	e0df      	b.n	8003f64 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d003      	beq.n	8003db4 <HAL_SPI_TransmitReceive+0x23a>
 8003dac:	8a7b      	ldrh	r3, [r7, #18]
 8003dae:	2b01      	cmp	r3, #1
 8003db0:	f040 80cb 	bne.w	8003f4a <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003db8:	b29b      	uxth	r3, r3
 8003dba:	2b01      	cmp	r3, #1
 8003dbc:	d912      	bls.n	8003de4 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dc2:	881a      	ldrh	r2, [r3, #0]
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dce:	1c9a      	adds	r2, r3, #2
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003dd8:	b29b      	uxth	r3, r3
 8003dda:	3b02      	subs	r3, #2
 8003ddc:	b29a      	uxth	r2, r3
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003de2:	e0b2      	b.n	8003f4a <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	330c      	adds	r3, #12
 8003dee:	7812      	ldrb	r2, [r2, #0]
 8003df0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003df6:	1c5a      	adds	r2, r3, #1
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e00:	b29b      	uxth	r3, r3
 8003e02:	3b01      	subs	r3, #1
 8003e04:	b29a      	uxth	r2, r3
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e0a:	e09e      	b.n	8003f4a <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	f003 0302 	and.w	r3, r3, #2
 8003e16:	2b02      	cmp	r3, #2
 8003e18:	d134      	bne.n	8003e84 <HAL_SPI_TransmitReceive+0x30a>
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e1e:	b29b      	uxth	r3, r3
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d02f      	beq.n	8003e84 <HAL_SPI_TransmitReceive+0x30a>
 8003e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e26:	2b01      	cmp	r3, #1
 8003e28:	d12c      	bne.n	8003e84 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e2e:	b29b      	uxth	r3, r3
 8003e30:	2b01      	cmp	r3, #1
 8003e32:	d912      	bls.n	8003e5a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e38:	881a      	ldrh	r2, [r3, #0]
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e44:	1c9a      	adds	r2, r3, #2
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e4e:	b29b      	uxth	r3, r3
 8003e50:	3b02      	subs	r3, #2
 8003e52:	b29a      	uxth	r2, r3
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003e58:	e012      	b.n	8003e80 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	330c      	adds	r3, #12
 8003e64:	7812      	ldrb	r2, [r2, #0]
 8003e66:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e6c:	1c5a      	adds	r2, r3, #1
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e76:	b29b      	uxth	r3, r3
 8003e78:	3b01      	subs	r3, #1
 8003e7a:	b29a      	uxth	r2, r3
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003e80:	2300      	movs	r3, #0
 8003e82:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	f003 0301 	and.w	r3, r3, #1
 8003e8e:	2b01      	cmp	r3, #1
 8003e90:	d148      	bne.n	8003f24 <HAL_SPI_TransmitReceive+0x3aa>
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003e98:	b29b      	uxth	r3, r3
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d042      	beq.n	8003f24 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003ea4:	b29b      	uxth	r3, r3
 8003ea6:	2b01      	cmp	r3, #1
 8003ea8:	d923      	bls.n	8003ef2 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	68da      	ldr	r2, [r3, #12]
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb4:	b292      	uxth	r2, r2
 8003eb6:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ebc:	1c9a      	adds	r2, r3, #2
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003ec8:	b29b      	uxth	r3, r3
 8003eca:	3b02      	subs	r3, #2
 8003ecc:	b29a      	uxth	r2, r3
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003eda:	b29b      	uxth	r3, r3
 8003edc:	2b01      	cmp	r3, #1
 8003ede:	d81f      	bhi.n	8003f20 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	685a      	ldr	r2, [r3, #4]
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003eee:	605a      	str	r2, [r3, #4]
 8003ef0:	e016      	b.n	8003f20 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f103 020c 	add.w	r2, r3, #12
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003efe:	7812      	ldrb	r2, [r2, #0]
 8003f00:	b2d2      	uxtb	r2, r2
 8003f02:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f08:	1c5a      	adds	r2, r3, #1
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003f14:	b29b      	uxth	r3, r3
 8003f16:	3b01      	subs	r3, #1
 8003f18:	b29a      	uxth	r2, r3
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003f20:	2301      	movs	r3, #1
 8003f22:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003f24:	f7fd fd4e 	bl	80019c4 <HAL_GetTick>
 8003f28:	4602      	mov	r2, r0
 8003f2a:	69fb      	ldr	r3, [r7, #28]
 8003f2c:	1ad3      	subs	r3, r2, r3
 8003f2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f30:	429a      	cmp	r2, r3
 8003f32:	d803      	bhi.n	8003f3c <HAL_SPI_TransmitReceive+0x3c2>
 8003f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f3a:	d102      	bne.n	8003f42 <HAL_SPI_TransmitReceive+0x3c8>
 8003f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d103      	bne.n	8003f4a <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8003f42:	2303      	movs	r3, #3
 8003f44:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003f48:	e01c      	b.n	8003f84 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f4e:	b29b      	uxth	r3, r3
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	f47f af5b 	bne.w	8003e0c <HAL_SPI_TransmitReceive+0x292>
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003f5c:	b29b      	uxth	r3, r3
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	f47f af54 	bne.w	8003e0c <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003f64:	69fa      	ldr	r2, [r7, #28]
 8003f66:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003f68:	68f8      	ldr	r0, [r7, #12]
 8003f6a:	f000 f933 	bl	80041d4 <SPI_EndRxTxTransaction>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d006      	beq.n	8003f82 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8003f74:	2301      	movs	r3, #1
 8003f76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	2220      	movs	r2, #32
 8003f7e:	661a      	str	r2, [r3, #96]	; 0x60
 8003f80:	e000      	b.n	8003f84 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8003f82:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2201      	movs	r2, #1
 8003f88:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003f94:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8003f98:	4618      	mov	r0, r3
 8003f9a:	3728      	adds	r7, #40	; 0x28
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}

08003fa0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b088      	sub	sp, #32
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	60f8      	str	r0, [r7, #12]
 8003fa8:	60b9      	str	r1, [r7, #8]
 8003faa:	603b      	str	r3, [r7, #0]
 8003fac:	4613      	mov	r3, r2
 8003fae:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003fb0:	f7fd fd08 	bl	80019c4 <HAL_GetTick>
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fb8:	1a9b      	subs	r3, r3, r2
 8003fba:	683a      	ldr	r2, [r7, #0]
 8003fbc:	4413      	add	r3, r2
 8003fbe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003fc0:	f7fd fd00 	bl	80019c4 <HAL_GetTick>
 8003fc4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003fc6:	4b39      	ldr	r3, [pc, #228]	; (80040ac <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	015b      	lsls	r3, r3, #5
 8003fcc:	0d1b      	lsrs	r3, r3, #20
 8003fce:	69fa      	ldr	r2, [r7, #28]
 8003fd0:	fb02 f303 	mul.w	r3, r2, r3
 8003fd4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003fd6:	e054      	b.n	8004082 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003fde:	d050      	beq.n	8004082 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003fe0:	f7fd fcf0 	bl	80019c4 <HAL_GetTick>
 8003fe4:	4602      	mov	r2, r0
 8003fe6:	69bb      	ldr	r3, [r7, #24]
 8003fe8:	1ad3      	subs	r3, r2, r3
 8003fea:	69fa      	ldr	r2, [r7, #28]
 8003fec:	429a      	cmp	r2, r3
 8003fee:	d902      	bls.n	8003ff6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003ff0:	69fb      	ldr	r3, [r7, #28]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d13d      	bne.n	8004072 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	685a      	ldr	r2, [r3, #4]
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004004:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800400e:	d111      	bne.n	8004034 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004018:	d004      	beq.n	8004024 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004022:	d107      	bne.n	8004034 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004032:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004038:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800403c:	d10f      	bne.n	800405e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	681a      	ldr	r2, [r3, #0]
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800404c:	601a      	str	r2, [r3, #0]
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	681a      	ldr	r2, [r3, #0]
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800405c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	2201      	movs	r2, #1
 8004062:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	2200      	movs	r2, #0
 800406a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800406e:	2303      	movs	r3, #3
 8004070:	e017      	b.n	80040a2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d101      	bne.n	800407c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004078:	2300      	movs	r3, #0
 800407a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	3b01      	subs	r3, #1
 8004080:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	689a      	ldr	r2, [r3, #8]
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	4013      	ands	r3, r2
 800408c:	68ba      	ldr	r2, [r7, #8]
 800408e:	429a      	cmp	r2, r3
 8004090:	bf0c      	ite	eq
 8004092:	2301      	moveq	r3, #1
 8004094:	2300      	movne	r3, #0
 8004096:	b2db      	uxtb	r3, r3
 8004098:	461a      	mov	r2, r3
 800409a:	79fb      	ldrb	r3, [r7, #7]
 800409c:	429a      	cmp	r2, r3
 800409e:	d19b      	bne.n	8003fd8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80040a0:	2300      	movs	r3, #0
}
 80040a2:	4618      	mov	r0, r3
 80040a4:	3720      	adds	r7, #32
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}
 80040aa:	bf00      	nop
 80040ac:	2000006c 	.word	0x2000006c

080040b0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b088      	sub	sp, #32
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	60f8      	str	r0, [r7, #12]
 80040b8:	60b9      	str	r1, [r7, #8]
 80040ba:	607a      	str	r2, [r7, #4]
 80040bc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80040be:	f7fd fc81 	bl	80019c4 <HAL_GetTick>
 80040c2:	4602      	mov	r2, r0
 80040c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040c6:	1a9b      	subs	r3, r3, r2
 80040c8:	683a      	ldr	r2, [r7, #0]
 80040ca:	4413      	add	r3, r2
 80040cc:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80040ce:	f7fd fc79 	bl	80019c4 <HAL_GetTick>
 80040d2:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80040d4:	4b3e      	ldr	r3, [pc, #248]	; (80041d0 <SPI_WaitFifoStateUntilTimeout+0x120>)
 80040d6:	681a      	ldr	r2, [r3, #0]
 80040d8:	4613      	mov	r3, r2
 80040da:	009b      	lsls	r3, r3, #2
 80040dc:	4413      	add	r3, r2
 80040de:	00da      	lsls	r2, r3, #3
 80040e0:	1ad3      	subs	r3, r2, r3
 80040e2:	0d1b      	lsrs	r3, r3, #20
 80040e4:	69fa      	ldr	r2, [r7, #28]
 80040e6:	fb02 f303 	mul.w	r3, r2, r3
 80040ea:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 80040ec:	e062      	b.n	80041b4 <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80040f4:	d109      	bne.n	800410a <SPI_WaitFifoStateUntilTimeout+0x5a>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d106      	bne.n	800410a <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	330c      	adds	r3, #12
 8004102:	781b      	ldrb	r3, [r3, #0]
 8004104:	b2db      	uxtb	r3, r3
 8004106:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8004108:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004110:	d050      	beq.n	80041b4 <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004112:	f7fd fc57 	bl	80019c4 <HAL_GetTick>
 8004116:	4602      	mov	r2, r0
 8004118:	69bb      	ldr	r3, [r7, #24]
 800411a:	1ad3      	subs	r3, r2, r3
 800411c:	69fa      	ldr	r2, [r7, #28]
 800411e:	429a      	cmp	r2, r3
 8004120:	d902      	bls.n	8004128 <SPI_WaitFifoStateUntilTimeout+0x78>
 8004122:	69fb      	ldr	r3, [r7, #28]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d13d      	bne.n	80041a4 <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	685a      	ldr	r2, [r3, #4]
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004136:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004140:	d111      	bne.n	8004166 <SPI_WaitFifoStateUntilTimeout+0xb6>
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800414a:	d004      	beq.n	8004156 <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004154:	d107      	bne.n	8004166 <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	681a      	ldr	r2, [r3, #0]
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004164:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800416a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800416e:	d10f      	bne.n	8004190 <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	681a      	ldr	r2, [r3, #0]
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800417e:	601a      	str	r2, [r3, #0]
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800418e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	2201      	movs	r2, #1
 8004194:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2200      	movs	r2, #0
 800419c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80041a0:	2303      	movs	r3, #3
 80041a2:	e010      	b.n	80041c6 <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80041a4:	693b      	ldr	r3, [r7, #16]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d101      	bne.n	80041ae <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 80041aa:	2300      	movs	r3, #0
 80041ac:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	3b01      	subs	r3, #1
 80041b2:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	689a      	ldr	r2, [r3, #8]
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	4013      	ands	r3, r2
 80041be:	687a      	ldr	r2, [r7, #4]
 80041c0:	429a      	cmp	r2, r3
 80041c2:	d194      	bne.n	80040ee <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 80041c4:	2300      	movs	r3, #0
}
 80041c6:	4618      	mov	r0, r3
 80041c8:	3720      	adds	r7, #32
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}
 80041ce:	bf00      	nop
 80041d0:	2000006c 	.word	0x2000006c

080041d4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b086      	sub	sp, #24
 80041d8:	af02      	add	r7, sp, #8
 80041da:	60f8      	str	r0, [r7, #12]
 80041dc:	60b9      	str	r1, [r7, #8]
 80041de:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	9300      	str	r3, [sp, #0]
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	2200      	movs	r2, #0
 80041e8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80041ec:	68f8      	ldr	r0, [r7, #12]
 80041ee:	f7ff ff5f 	bl	80040b0 <SPI_WaitFifoStateUntilTimeout>
 80041f2:	4603      	mov	r3, r0
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d007      	beq.n	8004208 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041fc:	f043 0220 	orr.w	r2, r3, #32
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004204:	2303      	movs	r3, #3
 8004206:	e027      	b.n	8004258 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	9300      	str	r3, [sp, #0]
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	2200      	movs	r2, #0
 8004210:	2180      	movs	r1, #128	; 0x80
 8004212:	68f8      	ldr	r0, [r7, #12]
 8004214:	f7ff fec4 	bl	8003fa0 <SPI_WaitFlagStateUntilTimeout>
 8004218:	4603      	mov	r3, r0
 800421a:	2b00      	cmp	r3, #0
 800421c:	d007      	beq.n	800422e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004222:	f043 0220 	orr.w	r2, r3, #32
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800422a:	2303      	movs	r3, #3
 800422c:	e014      	b.n	8004258 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	9300      	str	r3, [sp, #0]
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	2200      	movs	r2, #0
 8004236:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800423a:	68f8      	ldr	r0, [r7, #12]
 800423c:	f7ff ff38 	bl	80040b0 <SPI_WaitFifoStateUntilTimeout>
 8004240:	4603      	mov	r3, r0
 8004242:	2b00      	cmp	r3, #0
 8004244:	d007      	beq.n	8004256 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800424a:	f043 0220 	orr.w	r2, r3, #32
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004252:	2303      	movs	r3, #3
 8004254:	e000      	b.n	8004258 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004256:	2300      	movs	r3, #0
}
 8004258:	4618      	mov	r0, r3
 800425a:	3710      	adds	r7, #16
 800425c:	46bd      	mov	sp, r7
 800425e:	bd80      	pop	{r7, pc}

08004260 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b082      	sub	sp, #8
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d101      	bne.n	8004272 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	e040      	b.n	80042f4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004276:	2b00      	cmp	r3, #0
 8004278:	d106      	bne.n	8004288 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2200      	movs	r2, #0
 800427e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f7fd fa24 	bl	80016d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2224      	movs	r2, #36	; 0x24
 800428c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	681a      	ldr	r2, [r3, #0]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f022 0201 	bic.w	r2, r2, #1
 800429c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800429e:	6878      	ldr	r0, [r7, #4]
 80042a0:	f000 fb30 	bl	8004904 <UART_SetConfig>
 80042a4:	4603      	mov	r3, r0
 80042a6:	2b01      	cmp	r3, #1
 80042a8:	d101      	bne.n	80042ae <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
 80042ac:	e022      	b.n	80042f4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d002      	beq.n	80042bc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	f000 fd58 	bl	8004d6c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	685a      	ldr	r2, [r3, #4]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80042ca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	689a      	ldr	r2, [r3, #8]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80042da:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	681a      	ldr	r2, [r3, #0]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f042 0201 	orr.w	r2, r2, #1
 80042ea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80042ec:	6878      	ldr	r0, [r7, #4]
 80042ee:	f000 fddf 	bl	8004eb0 <UART_CheckIdleState>
 80042f2:	4603      	mov	r3, r0
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	3708      	adds	r7, #8
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd80      	pop	{r7, pc}

080042fc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b08a      	sub	sp, #40	; 0x28
 8004300:	af02      	add	r7, sp, #8
 8004302:	60f8      	str	r0, [r7, #12]
 8004304:	60b9      	str	r1, [r7, #8]
 8004306:	603b      	str	r3, [r7, #0]
 8004308:	4613      	mov	r3, r2
 800430a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004310:	2b20      	cmp	r3, #32
 8004312:	f040 8082 	bne.w	800441a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d002      	beq.n	8004322 <HAL_UART_Transmit+0x26>
 800431c:	88fb      	ldrh	r3, [r7, #6]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d101      	bne.n	8004326 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004322:	2301      	movs	r3, #1
 8004324:	e07a      	b.n	800441c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800432c:	2b01      	cmp	r3, #1
 800432e:	d101      	bne.n	8004334 <HAL_UART_Transmit+0x38>
 8004330:	2302      	movs	r3, #2
 8004332:	e073      	b.n	800441c <HAL_UART_Transmit+0x120>
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	2201      	movs	r2, #1
 8004338:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2200      	movs	r2, #0
 8004340:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	2221      	movs	r2, #33	; 0x21
 8004348:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800434a:	f7fd fb3b 	bl	80019c4 <HAL_GetTick>
 800434e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	88fa      	ldrh	r2, [r7, #6]
 8004354:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	88fa      	ldrh	r2, [r7, #6]
 800435c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	689b      	ldr	r3, [r3, #8]
 8004364:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004368:	d108      	bne.n	800437c <HAL_UART_Transmit+0x80>
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	691b      	ldr	r3, [r3, #16]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d104      	bne.n	800437c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004372:	2300      	movs	r3, #0
 8004374:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	61bb      	str	r3, [r7, #24]
 800437a:	e003      	b.n	8004384 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004380:	2300      	movs	r3, #0
 8004382:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	2200      	movs	r2, #0
 8004388:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800438c:	e02d      	b.n	80043ea <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	9300      	str	r3, [sp, #0]
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	2200      	movs	r2, #0
 8004396:	2180      	movs	r1, #128	; 0x80
 8004398:	68f8      	ldr	r0, [r7, #12]
 800439a:	f000 fdd2 	bl	8004f42 <UART_WaitOnFlagUntilTimeout>
 800439e:	4603      	mov	r3, r0
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d001      	beq.n	80043a8 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80043a4:	2303      	movs	r3, #3
 80043a6:	e039      	b.n	800441c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80043a8:	69fb      	ldr	r3, [r7, #28]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d10b      	bne.n	80043c6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80043ae:	69bb      	ldr	r3, [r7, #24]
 80043b0:	881a      	ldrh	r2, [r3, #0]
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80043ba:	b292      	uxth	r2, r2
 80043bc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80043be:	69bb      	ldr	r3, [r7, #24]
 80043c0:	3302      	adds	r3, #2
 80043c2:	61bb      	str	r3, [r7, #24]
 80043c4:	e008      	b.n	80043d8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80043c6:	69fb      	ldr	r3, [r7, #28]
 80043c8:	781a      	ldrb	r2, [r3, #0]
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	b292      	uxth	r2, r2
 80043d0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80043d2:	69fb      	ldr	r3, [r7, #28]
 80043d4:	3301      	adds	r3, #1
 80043d6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80043de:	b29b      	uxth	r3, r3
 80043e0:	3b01      	subs	r3, #1
 80043e2:	b29a      	uxth	r2, r3
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80043f0:	b29b      	uxth	r3, r3
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d1cb      	bne.n	800438e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	9300      	str	r3, [sp, #0]
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	2200      	movs	r2, #0
 80043fe:	2140      	movs	r1, #64	; 0x40
 8004400:	68f8      	ldr	r0, [r7, #12]
 8004402:	f000 fd9e 	bl	8004f42 <UART_WaitOnFlagUntilTimeout>
 8004406:	4603      	mov	r3, r0
 8004408:	2b00      	cmp	r3, #0
 800440a:	d001      	beq.n	8004410 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800440c:	2303      	movs	r3, #3
 800440e:	e005      	b.n	800441c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2220      	movs	r2, #32
 8004414:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004416:	2300      	movs	r3, #0
 8004418:	e000      	b.n	800441c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800441a:	2302      	movs	r3, #2
  }
}
 800441c:	4618      	mov	r0, r3
 800441e:	3720      	adds	r7, #32
 8004420:	46bd      	mov	sp, r7
 8004422:	bd80      	pop	{r7, pc}

08004424 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b084      	sub	sp, #16
 8004428:	af00      	add	r7, sp, #0
 800442a:	60f8      	str	r0, [r7, #12]
 800442c:	60b9      	str	r1, [r7, #8]
 800442e:	4613      	mov	r3, r2
 8004430:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004436:	2b20      	cmp	r3, #32
 8004438:	d131      	bne.n	800449e <HAL_UART_Receive_IT+0x7a>
  {
    if ((pData == NULL) || (Size == 0U))
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d002      	beq.n	8004446 <HAL_UART_Receive_IT+0x22>
 8004440:	88fb      	ldrh	r3, [r7, #6]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d101      	bne.n	800444a <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8004446:	2301      	movs	r3, #1
 8004448:	e02a      	b.n	80044a0 <HAL_UART_Receive_IT+0x7c>
    }

    __HAL_LOCK(huart);
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004450:	2b01      	cmp	r3, #1
 8004452:	d101      	bne.n	8004458 <HAL_UART_Receive_IT+0x34>
 8004454:	2302      	movs	r3, #2
 8004456:	e023      	b.n	80044a0 <HAL_UART_Receive_IT+0x7c>
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	2201      	movs	r2, #1
 800445c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	2200      	movs	r2, #0
 8004464:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4a0f      	ldr	r2, [pc, #60]	; (80044a8 <HAL_UART_Receive_IT+0x84>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d00e      	beq.n	800448e <HAL_UART_Receive_IT+0x6a>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800447a:	2b00      	cmp	r3, #0
 800447c:	d007      	beq.n	800448e <HAL_UART_Receive_IT+0x6a>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	681a      	ldr	r2, [r3, #0]
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800448c:	601a      	str	r2, [r3, #0]
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 800448e:	88fb      	ldrh	r3, [r7, #6]
 8004490:	461a      	mov	r2, r3
 8004492:	68b9      	ldr	r1, [r7, #8]
 8004494:	68f8      	ldr	r0, [r7, #12]
 8004496:	f000 fdd1 	bl	800503c <UART_Start_Receive_IT>
 800449a:	4603      	mov	r3, r0
 800449c:	e000      	b.n	80044a0 <HAL_UART_Receive_IT+0x7c>
  }
  else
  {
    return HAL_BUSY;
 800449e:	2302      	movs	r3, #2
  }
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	3710      	adds	r7, #16
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd80      	pop	{r7, pc}
 80044a8:	40008000 	.word	0x40008000

080044ac <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b088      	sub	sp, #32
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	69db      	ldr	r3, [r3, #28]
 80044ba:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	689b      	ldr	r3, [r3, #8]
 80044ca:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80044cc:	69fa      	ldr	r2, [r7, #28]
 80044ce:	f640 030f 	movw	r3, #2063	; 0x80f
 80044d2:	4013      	ands	r3, r2
 80044d4:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d113      	bne.n	8004504 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80044dc:	69fb      	ldr	r3, [r7, #28]
 80044de:	f003 0320 	and.w	r3, r3, #32
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d00e      	beq.n	8004504 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80044e6:	69bb      	ldr	r3, [r7, #24]
 80044e8:	f003 0320 	and.w	r3, r3, #32
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d009      	beq.n	8004504 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	f000 81ce 	beq.w	8004896 <HAL_UART_IRQHandler+0x3ea>
      {
        huart->RxISR(huart);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	4798      	blx	r3
      }
      return;
 8004502:	e1c8      	b.n	8004896 <HAL_UART_IRQHandler+0x3ea>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	2b00      	cmp	r3, #0
 8004508:	f000 80e3 	beq.w	80046d2 <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	f003 0301 	and.w	r3, r3, #1
 8004512:	2b00      	cmp	r3, #0
 8004514:	d105      	bne.n	8004522 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004516:	69ba      	ldr	r2, [r7, #24]
 8004518:	4ba6      	ldr	r3, [pc, #664]	; (80047b4 <HAL_UART_IRQHandler+0x308>)
 800451a:	4013      	ands	r3, r2
 800451c:	2b00      	cmp	r3, #0
 800451e:	f000 80d8 	beq.w	80046d2 <HAL_UART_IRQHandler+0x226>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004522:	69fb      	ldr	r3, [r7, #28]
 8004524:	f003 0301 	and.w	r3, r3, #1
 8004528:	2b00      	cmp	r3, #0
 800452a:	d010      	beq.n	800454e <HAL_UART_IRQHandler+0xa2>
 800452c:	69bb      	ldr	r3, [r7, #24]
 800452e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004532:	2b00      	cmp	r3, #0
 8004534:	d00b      	beq.n	800454e <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	2201      	movs	r2, #1
 800453c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004544:	f043 0201 	orr.w	r2, r3, #1
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800454e:	69fb      	ldr	r3, [r7, #28]
 8004550:	f003 0302 	and.w	r3, r3, #2
 8004554:	2b00      	cmp	r3, #0
 8004556:	d010      	beq.n	800457a <HAL_UART_IRQHandler+0xce>
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	f003 0301 	and.w	r3, r3, #1
 800455e:	2b00      	cmp	r3, #0
 8004560:	d00b      	beq.n	800457a <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	2202      	movs	r2, #2
 8004568:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004570:	f043 0204 	orr.w	r2, r3, #4
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800457a:	69fb      	ldr	r3, [r7, #28]
 800457c:	f003 0304 	and.w	r3, r3, #4
 8004580:	2b00      	cmp	r3, #0
 8004582:	d010      	beq.n	80045a6 <HAL_UART_IRQHandler+0xfa>
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	f003 0301 	and.w	r3, r3, #1
 800458a:	2b00      	cmp	r3, #0
 800458c:	d00b      	beq.n	80045a6 <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	2204      	movs	r2, #4
 8004594:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800459c:	f043 0202 	orr.w	r2, r3, #2
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80045a6:	69fb      	ldr	r3, [r7, #28]
 80045a8:	f003 0308 	and.w	r3, r3, #8
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d015      	beq.n	80045dc <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80045b0:	69bb      	ldr	r3, [r7, #24]
 80045b2:	f003 0320 	and.w	r3, r3, #32
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d104      	bne.n	80045c4 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d00b      	beq.n	80045dc <HAL_UART_IRQHandler+0x130>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	2208      	movs	r2, #8
 80045ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80045d2:	f043 0208 	orr.w	r2, r3, #8
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80045dc:	69fb      	ldr	r3, [r7, #28]
 80045de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d011      	beq.n	800460a <HAL_UART_IRQHandler+0x15e>
 80045e6:	69bb      	ldr	r3, [r7, #24]
 80045e8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d00c      	beq.n	800460a <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80045f8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004600:	f043 0220 	orr.w	r2, r3, #32
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004610:	2b00      	cmp	r3, #0
 8004612:	f000 8142 	beq.w	800489a <HAL_UART_IRQHandler+0x3ee>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004616:	69fb      	ldr	r3, [r7, #28]
 8004618:	f003 0320 	and.w	r3, r3, #32
 800461c:	2b00      	cmp	r3, #0
 800461e:	d00c      	beq.n	800463a <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004620:	69bb      	ldr	r3, [r7, #24]
 8004622:	f003 0320 	and.w	r3, r3, #32
 8004626:	2b00      	cmp	r3, #0
 8004628:	d007      	beq.n	800463a <HAL_UART_IRQHandler+0x18e>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800462e:	2b00      	cmp	r3, #0
 8004630:	d003      	beq.n	800463a <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004640:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	689b      	ldr	r3, [r3, #8]
 8004648:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800464c:	2b40      	cmp	r3, #64	; 0x40
 800464e:	d004      	beq.n	800465a <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004656:	2b00      	cmp	r3, #0
 8004658:	d031      	beq.n	80046be <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800465a:	6878      	ldr	r0, [r7, #4]
 800465c:	f000 fd76 	bl	800514c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800466a:	2b40      	cmp	r3, #64	; 0x40
 800466c:	d123      	bne.n	80046b6 <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	689a      	ldr	r2, [r3, #8]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800467c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004682:	2b00      	cmp	r3, #0
 8004684:	d013      	beq.n	80046ae <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800468a:	4a4b      	ldr	r2, [pc, #300]	; (80047b8 <HAL_UART_IRQHandler+0x30c>)
 800468c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004692:	4618      	mov	r0, r3
 8004694:	f7fd fb15 	bl	8001cc2 <HAL_DMA_Abort_IT>
 8004698:	4603      	mov	r3, r0
 800469a:	2b00      	cmp	r3, #0
 800469c:	d017      	beq.n	80046ce <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046a4:	687a      	ldr	r2, [r7, #4]
 80046a6:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80046a8:	4610      	mov	r0, r2
 80046aa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046ac:	e00f      	b.n	80046ce <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	f000 f912 	bl	80048d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046b4:	e00b      	b.n	80046ce <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	f000 f90e 	bl	80048d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046bc:	e007      	b.n	80046ce <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80046be:	6878      	ldr	r0, [r7, #4]
 80046c0:	f000 f90a 	bl	80048d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2200      	movs	r2, #0
 80046c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80046cc:	e0e5      	b.n	800489a <HAL_UART_IRQHandler+0x3ee>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046ce:	bf00      	nop
    return;
 80046d0:	e0e3      	b.n	800489a <HAL_UART_IRQHandler+0x3ee>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046d6:	2b01      	cmp	r3, #1
 80046d8:	f040 80a9 	bne.w	800482e <HAL_UART_IRQHandler+0x382>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 80046dc:	69fb      	ldr	r3, [r7, #28]
 80046de:	f003 0310 	and.w	r3, r3, #16
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	f000 80a3 	beq.w	800482e <HAL_UART_IRQHandler+0x382>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 80046e8:	69bb      	ldr	r3, [r7, #24]
 80046ea:	f003 0310 	and.w	r3, r3, #16
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	f000 809d 	beq.w	800482e <HAL_UART_IRQHandler+0x382>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	2210      	movs	r2, #16
 80046fa:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	689b      	ldr	r3, [r3, #8]
 8004702:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004706:	2b40      	cmp	r3, #64	; 0x40
 8004708:	d158      	bne.n	80047bc <HAL_UART_IRQHandler+0x310>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 8004714:	893b      	ldrh	r3, [r7, #8]
 8004716:	2b00      	cmp	r3, #0
 8004718:	f000 80c1 	beq.w	800489e <HAL_UART_IRQHandler+0x3f2>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004722:	893a      	ldrh	r2, [r7, #8]
 8004724:	429a      	cmp	r2, r3
 8004726:	f080 80ba 	bcs.w	800489e <HAL_UART_IRQHandler+0x3f2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	893a      	ldrh	r2, [r7, #8]
 800472e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f003 0320 	and.w	r3, r3, #32
 800473e:	2b00      	cmp	r3, #0
 8004740:	d12a      	bne.n	8004798 <HAL_UART_IRQHandler+0x2ec>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	681a      	ldr	r2, [r3, #0]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004750:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	689a      	ldr	r2, [r3, #8]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f022 0201 	bic.w	r2, r2, #1
 8004760:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	689a      	ldr	r2, [r3, #8]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004770:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2220      	movs	r2, #32
 8004776:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2200      	movs	r2, #0
 800477c:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	681a      	ldr	r2, [r3, #0]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f022 0210 	bic.w	r2, r2, #16
 800478c:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004792:	4618      	mov	r0, r3
 8004794:	f7fd fa57 	bl	8001c46 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80047a4:	b29b      	uxth	r3, r3
 80047a6:	1ad3      	subs	r3, r2, r3
 80047a8:	b29b      	uxth	r3, r3
 80047aa:	4619      	mov	r1, r3
 80047ac:	6878      	ldr	r0, [r7, #4]
 80047ae:	f000 f89d 	bl	80048ec <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80047b2:	e074      	b.n	800489e <HAL_UART_IRQHandler+0x3f2>
 80047b4:	04000120 	.word	0x04000120
 80047b8:	080051ab 	.word	0x080051ab
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80047c8:	b29b      	uxth	r3, r3
 80047ca:	1ad3      	subs	r3, r2, r3
 80047cc:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80047d4:	b29b      	uxth	r3, r3
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d063      	beq.n	80048a2 <HAL_UART_IRQHandler+0x3f6>
          &&(nb_rx_data > 0U) )
 80047da:	897b      	ldrh	r3, [r7, #10]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d060      	beq.n	80048a2 <HAL_UART_IRQHandler+0x3f6>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	681a      	ldr	r2, [r3, #0]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80047ee:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	689a      	ldr	r2, [r3, #8]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f022 0201 	bic.w	r2, r2, #1
 80047fe:	609a      	str	r2, [r3, #8]
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2220      	movs	r2, #32
 8004804:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2200      	movs	r2, #0
 800480a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2200      	movs	r2, #0
 8004810:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	681a      	ldr	r2, [r3, #0]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f022 0210 	bic.w	r2, r2, #16
 8004820:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004822:	897b      	ldrh	r3, [r7, #10]
 8004824:	4619      	mov	r1, r3
 8004826:	6878      	ldr	r0, [r7, #4]
 8004828:	f000 f860 	bl	80048ec <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800482c:	e039      	b.n	80048a2 <HAL_UART_IRQHandler+0x3f6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800482e:	69fb      	ldr	r3, [r7, #28]
 8004830:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004834:	2b00      	cmp	r3, #0
 8004836:	d00d      	beq.n	8004854 <HAL_UART_IRQHandler+0x3a8>
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800483e:	2b00      	cmp	r3, #0
 8004840:	d008      	beq.n	8004854 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800484a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800484c:	6878      	ldr	r0, [r7, #4]
 800484e:	f000 fdb3 	bl	80053b8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004852:	e029      	b.n	80048a8 <HAL_UART_IRQHandler+0x3fc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004854:	69fb      	ldr	r3, [r7, #28]
 8004856:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800485a:	2b00      	cmp	r3, #0
 800485c:	d00d      	beq.n	800487a <HAL_UART_IRQHandler+0x3ce>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800485e:	69bb      	ldr	r3, [r7, #24]
 8004860:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004864:	2b00      	cmp	r3, #0
 8004866:	d008      	beq.n	800487a <HAL_UART_IRQHandler+0x3ce>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800486c:	2b00      	cmp	r3, #0
 800486e:	d01a      	beq.n	80048a6 <HAL_UART_IRQHandler+0x3fa>
    {
      huart->TxISR(huart);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004874:	6878      	ldr	r0, [r7, #4]
 8004876:	4798      	blx	r3
    }
    return;
 8004878:	e015      	b.n	80048a6 <HAL_UART_IRQHandler+0x3fa>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800487a:	69fb      	ldr	r3, [r7, #28]
 800487c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004880:	2b00      	cmp	r3, #0
 8004882:	d011      	beq.n	80048a8 <HAL_UART_IRQHandler+0x3fc>
 8004884:	69bb      	ldr	r3, [r7, #24]
 8004886:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800488a:	2b00      	cmp	r3, #0
 800488c:	d00c      	beq.n	80048a8 <HAL_UART_IRQHandler+0x3fc>
  {
    UART_EndTransmit_IT(huart);
 800488e:	6878      	ldr	r0, [r7, #4]
 8004890:	f000 fca1 	bl	80051d6 <UART_EndTransmit_IT>
    return;
 8004894:	e008      	b.n	80048a8 <HAL_UART_IRQHandler+0x3fc>
      return;
 8004896:	bf00      	nop
 8004898:	e006      	b.n	80048a8 <HAL_UART_IRQHandler+0x3fc>
    return;
 800489a:	bf00      	nop
 800489c:	e004      	b.n	80048a8 <HAL_UART_IRQHandler+0x3fc>
      return;
 800489e:	bf00      	nop
 80048a0:	e002      	b.n	80048a8 <HAL_UART_IRQHandler+0x3fc>
      return;
 80048a2:	bf00      	nop
 80048a4:	e000      	b.n	80048a8 <HAL_UART_IRQHandler+0x3fc>
    return;
 80048a6:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80048a8:	3720      	adds	r7, #32
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bd80      	pop	{r7, pc}
 80048ae:	bf00      	nop

080048b0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80048b0:	b480      	push	{r7}
 80048b2:	b083      	sub	sp, #12
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80048b8:	bf00      	nop
 80048ba:	370c      	adds	r7, #12
 80048bc:	46bd      	mov	sp, r7
 80048be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c2:	4770      	bx	lr

080048c4 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80048c4:	b480      	push	{r7}
 80048c6:	b083      	sub	sp, #12
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80048cc:	bf00      	nop
 80048ce:	370c      	adds	r7, #12
 80048d0:	46bd      	mov	sp, r7
 80048d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d6:	4770      	bx	lr

080048d8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80048d8:	b480      	push	{r7}
 80048da:	b083      	sub	sp, #12
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80048e0:	bf00      	nop
 80048e2:	370c      	adds	r7, #12
 80048e4:	46bd      	mov	sp, r7
 80048e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ea:	4770      	bx	lr

080048ec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80048ec:	b480      	push	{r7}
 80048ee:	b083      	sub	sp, #12
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
 80048f4:	460b      	mov	r3, r1
 80048f6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80048f8:	bf00      	nop
 80048fa:	370c      	adds	r7, #12
 80048fc:	46bd      	mov	sp, r7
 80048fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004902:	4770      	bx	lr

08004904 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004904:	b5b0      	push	{r4, r5, r7, lr}
 8004906:	b088      	sub	sp, #32
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800490c:	2300      	movs	r3, #0
 800490e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	689a      	ldr	r2, [r3, #8]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	691b      	ldr	r3, [r3, #16]
 8004918:	431a      	orrs	r2, r3
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	695b      	ldr	r3, [r3, #20]
 800491e:	431a      	orrs	r2, r3
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	69db      	ldr	r3, [r3, #28]
 8004924:	4313      	orrs	r3, r2
 8004926:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	681a      	ldr	r2, [r3, #0]
 800492e:	4baa      	ldr	r3, [pc, #680]	; (8004bd8 <UART_SetConfig+0x2d4>)
 8004930:	4013      	ands	r3, r2
 8004932:	687a      	ldr	r2, [r7, #4]
 8004934:	6812      	ldr	r2, [r2, #0]
 8004936:	69f9      	ldr	r1, [r7, #28]
 8004938:	430b      	orrs	r3, r1
 800493a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	68da      	ldr	r2, [r3, #12]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	430a      	orrs	r2, r1
 8004950:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	699b      	ldr	r3, [r3, #24]
 8004956:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a9f      	ldr	r2, [pc, #636]	; (8004bdc <UART_SetConfig+0x2d8>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d004      	beq.n	800496c <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6a1b      	ldr	r3, [r3, #32]
 8004966:	69fa      	ldr	r2, [r7, #28]
 8004968:	4313      	orrs	r3, r2
 800496a:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	689b      	ldr	r3, [r3, #8]
 8004972:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	69fa      	ldr	r2, [r7, #28]
 800497c:	430a      	orrs	r2, r1
 800497e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a96      	ldr	r2, [pc, #600]	; (8004be0 <UART_SetConfig+0x2dc>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d121      	bne.n	80049ce <UART_SetConfig+0xca>
 800498a:	4b96      	ldr	r3, [pc, #600]	; (8004be4 <UART_SetConfig+0x2e0>)
 800498c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004990:	f003 0303 	and.w	r3, r3, #3
 8004994:	2b03      	cmp	r3, #3
 8004996:	d817      	bhi.n	80049c8 <UART_SetConfig+0xc4>
 8004998:	a201      	add	r2, pc, #4	; (adr r2, 80049a0 <UART_SetConfig+0x9c>)
 800499a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800499e:	bf00      	nop
 80049a0:	080049b1 	.word	0x080049b1
 80049a4:	080049bd 	.word	0x080049bd
 80049a8:	080049b7 	.word	0x080049b7
 80049ac:	080049c3 	.word	0x080049c3
 80049b0:	2301      	movs	r3, #1
 80049b2:	76fb      	strb	r3, [r7, #27]
 80049b4:	e096      	b.n	8004ae4 <UART_SetConfig+0x1e0>
 80049b6:	2302      	movs	r3, #2
 80049b8:	76fb      	strb	r3, [r7, #27]
 80049ba:	e093      	b.n	8004ae4 <UART_SetConfig+0x1e0>
 80049bc:	2304      	movs	r3, #4
 80049be:	76fb      	strb	r3, [r7, #27]
 80049c0:	e090      	b.n	8004ae4 <UART_SetConfig+0x1e0>
 80049c2:	2308      	movs	r3, #8
 80049c4:	76fb      	strb	r3, [r7, #27]
 80049c6:	e08d      	b.n	8004ae4 <UART_SetConfig+0x1e0>
 80049c8:	2310      	movs	r3, #16
 80049ca:	76fb      	strb	r3, [r7, #27]
 80049cc:	e08a      	b.n	8004ae4 <UART_SetConfig+0x1e0>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a85      	ldr	r2, [pc, #532]	; (8004be8 <UART_SetConfig+0x2e4>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d132      	bne.n	8004a3e <UART_SetConfig+0x13a>
 80049d8:	4b82      	ldr	r3, [pc, #520]	; (8004be4 <UART_SetConfig+0x2e0>)
 80049da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049de:	f003 030c 	and.w	r3, r3, #12
 80049e2:	2b0c      	cmp	r3, #12
 80049e4:	d828      	bhi.n	8004a38 <UART_SetConfig+0x134>
 80049e6:	a201      	add	r2, pc, #4	; (adr r2, 80049ec <UART_SetConfig+0xe8>)
 80049e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049ec:	08004a21 	.word	0x08004a21
 80049f0:	08004a39 	.word	0x08004a39
 80049f4:	08004a39 	.word	0x08004a39
 80049f8:	08004a39 	.word	0x08004a39
 80049fc:	08004a2d 	.word	0x08004a2d
 8004a00:	08004a39 	.word	0x08004a39
 8004a04:	08004a39 	.word	0x08004a39
 8004a08:	08004a39 	.word	0x08004a39
 8004a0c:	08004a27 	.word	0x08004a27
 8004a10:	08004a39 	.word	0x08004a39
 8004a14:	08004a39 	.word	0x08004a39
 8004a18:	08004a39 	.word	0x08004a39
 8004a1c:	08004a33 	.word	0x08004a33
 8004a20:	2300      	movs	r3, #0
 8004a22:	76fb      	strb	r3, [r7, #27]
 8004a24:	e05e      	b.n	8004ae4 <UART_SetConfig+0x1e0>
 8004a26:	2302      	movs	r3, #2
 8004a28:	76fb      	strb	r3, [r7, #27]
 8004a2a:	e05b      	b.n	8004ae4 <UART_SetConfig+0x1e0>
 8004a2c:	2304      	movs	r3, #4
 8004a2e:	76fb      	strb	r3, [r7, #27]
 8004a30:	e058      	b.n	8004ae4 <UART_SetConfig+0x1e0>
 8004a32:	2308      	movs	r3, #8
 8004a34:	76fb      	strb	r3, [r7, #27]
 8004a36:	e055      	b.n	8004ae4 <UART_SetConfig+0x1e0>
 8004a38:	2310      	movs	r3, #16
 8004a3a:	76fb      	strb	r3, [r7, #27]
 8004a3c:	e052      	b.n	8004ae4 <UART_SetConfig+0x1e0>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a6a      	ldr	r2, [pc, #424]	; (8004bec <UART_SetConfig+0x2e8>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d120      	bne.n	8004a8a <UART_SetConfig+0x186>
 8004a48:	4b66      	ldr	r3, [pc, #408]	; (8004be4 <UART_SetConfig+0x2e0>)
 8004a4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a4e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004a52:	2b30      	cmp	r3, #48	; 0x30
 8004a54:	d013      	beq.n	8004a7e <UART_SetConfig+0x17a>
 8004a56:	2b30      	cmp	r3, #48	; 0x30
 8004a58:	d814      	bhi.n	8004a84 <UART_SetConfig+0x180>
 8004a5a:	2b20      	cmp	r3, #32
 8004a5c:	d009      	beq.n	8004a72 <UART_SetConfig+0x16e>
 8004a5e:	2b20      	cmp	r3, #32
 8004a60:	d810      	bhi.n	8004a84 <UART_SetConfig+0x180>
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d002      	beq.n	8004a6c <UART_SetConfig+0x168>
 8004a66:	2b10      	cmp	r3, #16
 8004a68:	d006      	beq.n	8004a78 <UART_SetConfig+0x174>
 8004a6a:	e00b      	b.n	8004a84 <UART_SetConfig+0x180>
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	76fb      	strb	r3, [r7, #27]
 8004a70:	e038      	b.n	8004ae4 <UART_SetConfig+0x1e0>
 8004a72:	2302      	movs	r3, #2
 8004a74:	76fb      	strb	r3, [r7, #27]
 8004a76:	e035      	b.n	8004ae4 <UART_SetConfig+0x1e0>
 8004a78:	2304      	movs	r3, #4
 8004a7a:	76fb      	strb	r3, [r7, #27]
 8004a7c:	e032      	b.n	8004ae4 <UART_SetConfig+0x1e0>
 8004a7e:	2308      	movs	r3, #8
 8004a80:	76fb      	strb	r3, [r7, #27]
 8004a82:	e02f      	b.n	8004ae4 <UART_SetConfig+0x1e0>
 8004a84:	2310      	movs	r3, #16
 8004a86:	76fb      	strb	r3, [r7, #27]
 8004a88:	e02c      	b.n	8004ae4 <UART_SetConfig+0x1e0>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a53      	ldr	r2, [pc, #332]	; (8004bdc <UART_SetConfig+0x2d8>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d125      	bne.n	8004ae0 <UART_SetConfig+0x1dc>
 8004a94:	4b53      	ldr	r3, [pc, #332]	; (8004be4 <UART_SetConfig+0x2e0>)
 8004a96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a9a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004a9e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004aa2:	d017      	beq.n	8004ad4 <UART_SetConfig+0x1d0>
 8004aa4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004aa8:	d817      	bhi.n	8004ada <UART_SetConfig+0x1d6>
 8004aaa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004aae:	d00b      	beq.n	8004ac8 <UART_SetConfig+0x1c4>
 8004ab0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ab4:	d811      	bhi.n	8004ada <UART_SetConfig+0x1d6>
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d003      	beq.n	8004ac2 <UART_SetConfig+0x1be>
 8004aba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004abe:	d006      	beq.n	8004ace <UART_SetConfig+0x1ca>
 8004ac0:	e00b      	b.n	8004ada <UART_SetConfig+0x1d6>
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	76fb      	strb	r3, [r7, #27]
 8004ac6:	e00d      	b.n	8004ae4 <UART_SetConfig+0x1e0>
 8004ac8:	2302      	movs	r3, #2
 8004aca:	76fb      	strb	r3, [r7, #27]
 8004acc:	e00a      	b.n	8004ae4 <UART_SetConfig+0x1e0>
 8004ace:	2304      	movs	r3, #4
 8004ad0:	76fb      	strb	r3, [r7, #27]
 8004ad2:	e007      	b.n	8004ae4 <UART_SetConfig+0x1e0>
 8004ad4:	2308      	movs	r3, #8
 8004ad6:	76fb      	strb	r3, [r7, #27]
 8004ad8:	e004      	b.n	8004ae4 <UART_SetConfig+0x1e0>
 8004ada:	2310      	movs	r3, #16
 8004adc:	76fb      	strb	r3, [r7, #27]
 8004ade:	e001      	b.n	8004ae4 <UART_SetConfig+0x1e0>
 8004ae0:	2310      	movs	r3, #16
 8004ae2:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a3c      	ldr	r2, [pc, #240]	; (8004bdc <UART_SetConfig+0x2d8>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	f040 8082 	bne.w	8004bf4 <UART_SetConfig+0x2f0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004af0:	7efb      	ldrb	r3, [r7, #27]
 8004af2:	2b08      	cmp	r3, #8
 8004af4:	d823      	bhi.n	8004b3e <UART_SetConfig+0x23a>
 8004af6:	a201      	add	r2, pc, #4	; (adr r2, 8004afc <UART_SetConfig+0x1f8>)
 8004af8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004afc:	08004b21 	.word	0x08004b21
 8004b00:	08004b3f 	.word	0x08004b3f
 8004b04:	08004b29 	.word	0x08004b29
 8004b08:	08004b3f 	.word	0x08004b3f
 8004b0c:	08004b2f 	.word	0x08004b2f
 8004b10:	08004b3f 	.word	0x08004b3f
 8004b14:	08004b3f 	.word	0x08004b3f
 8004b18:	08004b3f 	.word	0x08004b3f
 8004b1c:	08004b37 	.word	0x08004b37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b20:	f7fe fd76 	bl	8003610 <HAL_RCC_GetPCLK1Freq>
 8004b24:	6178      	str	r0, [r7, #20]
        break;
 8004b26:	e00f      	b.n	8004b48 <UART_SetConfig+0x244>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b28:	4b31      	ldr	r3, [pc, #196]	; (8004bf0 <UART_SetConfig+0x2ec>)
 8004b2a:	617b      	str	r3, [r7, #20]
        break;
 8004b2c:	e00c      	b.n	8004b48 <UART_SetConfig+0x244>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b2e:	f7fe fcd7 	bl	80034e0 <HAL_RCC_GetSysClockFreq>
 8004b32:	6178      	str	r0, [r7, #20]
        break;
 8004b34:	e008      	b.n	8004b48 <UART_SetConfig+0x244>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b3a:	617b      	str	r3, [r7, #20]
        break;
 8004b3c:	e004      	b.n	8004b48 <UART_SetConfig+0x244>
      default:
        pclk = 0U;
 8004b3e:	2300      	movs	r3, #0
 8004b40:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004b42:	2301      	movs	r3, #1
 8004b44:	76bb      	strb	r3, [r7, #26]
        break;
 8004b46:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004b48:	697b      	ldr	r3, [r7, #20]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	f000 8100 	beq.w	8004d50 <UART_SetConfig+0x44c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	685a      	ldr	r2, [r3, #4]
 8004b54:	4613      	mov	r3, r2
 8004b56:	005b      	lsls	r3, r3, #1
 8004b58:	4413      	add	r3, r2
 8004b5a:	697a      	ldr	r2, [r7, #20]
 8004b5c:	429a      	cmp	r2, r3
 8004b5e:	d305      	bcc.n	8004b6c <UART_SetConfig+0x268>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004b66:	697a      	ldr	r2, [r7, #20]
 8004b68:	429a      	cmp	r2, r3
 8004b6a:	d902      	bls.n	8004b72 <UART_SetConfig+0x26e>
      {
        ret = HAL_ERROR;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	76bb      	strb	r3, [r7, #26]
 8004b70:	e0ee      	b.n	8004d50 <UART_SetConfig+0x44c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	4618      	mov	r0, r3
 8004b76:	f04f 0100 	mov.w	r1, #0
 8004b7a:	f04f 0200 	mov.w	r2, #0
 8004b7e:	f04f 0300 	mov.w	r3, #0
 8004b82:	020b      	lsls	r3, r1, #8
 8004b84:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004b88:	0202      	lsls	r2, r0, #8
 8004b8a:	6879      	ldr	r1, [r7, #4]
 8004b8c:	6849      	ldr	r1, [r1, #4]
 8004b8e:	0849      	lsrs	r1, r1, #1
 8004b90:	4608      	mov	r0, r1
 8004b92:	f04f 0100 	mov.w	r1, #0
 8004b96:	1814      	adds	r4, r2, r0
 8004b98:	eb43 0501 	adc.w	r5, r3, r1
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	461a      	mov	r2, r3
 8004ba2:	f04f 0300 	mov.w	r3, #0
 8004ba6:	4620      	mov	r0, r4
 8004ba8:	4629      	mov	r1, r5
 8004baa:	f7fb fb61 	bl	8000270 <__aeabi_uldivmod>
 8004bae:	4602      	mov	r2, r0
 8004bb0:	460b      	mov	r3, r1
 8004bb2:	4613      	mov	r3, r2
 8004bb4:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004bb6:	693b      	ldr	r3, [r7, #16]
 8004bb8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004bbc:	d308      	bcc.n	8004bd0 <UART_SetConfig+0x2cc>
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004bc4:	d204      	bcs.n	8004bd0 <UART_SetConfig+0x2cc>
        {
          huart->Instance->BRR = usartdiv;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	693a      	ldr	r2, [r7, #16]
 8004bcc:	60da      	str	r2, [r3, #12]
 8004bce:	e0bf      	b.n	8004d50 <UART_SetConfig+0x44c>
        }
        else
        {
          ret = HAL_ERROR;
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	76bb      	strb	r3, [r7, #26]
 8004bd4:	e0bc      	b.n	8004d50 <UART_SetConfig+0x44c>
 8004bd6:	bf00      	nop
 8004bd8:	efff69f3 	.word	0xefff69f3
 8004bdc:	40008000 	.word	0x40008000
 8004be0:	40013800 	.word	0x40013800
 8004be4:	40021000 	.word	0x40021000
 8004be8:	40004400 	.word	0x40004400
 8004bec:	40004800 	.word	0x40004800
 8004bf0:	00f42400 	.word	0x00f42400
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	69db      	ldr	r3, [r3, #28]
 8004bf8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bfc:	d15c      	bne.n	8004cb8 <UART_SetConfig+0x3b4>
  {
    switch (clocksource)
 8004bfe:	7efb      	ldrb	r3, [r7, #27]
 8004c00:	2b08      	cmp	r3, #8
 8004c02:	d828      	bhi.n	8004c56 <UART_SetConfig+0x352>
 8004c04:	a201      	add	r2, pc, #4	; (adr r2, 8004c0c <UART_SetConfig+0x308>)
 8004c06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c0a:	bf00      	nop
 8004c0c:	08004c31 	.word	0x08004c31
 8004c10:	08004c39 	.word	0x08004c39
 8004c14:	08004c41 	.word	0x08004c41
 8004c18:	08004c57 	.word	0x08004c57
 8004c1c:	08004c47 	.word	0x08004c47
 8004c20:	08004c57 	.word	0x08004c57
 8004c24:	08004c57 	.word	0x08004c57
 8004c28:	08004c57 	.word	0x08004c57
 8004c2c:	08004c4f 	.word	0x08004c4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c30:	f7fe fcee 	bl	8003610 <HAL_RCC_GetPCLK1Freq>
 8004c34:	6178      	str	r0, [r7, #20]
        break;
 8004c36:	e013      	b.n	8004c60 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c38:	f7fe fd00 	bl	800363c <HAL_RCC_GetPCLK2Freq>
 8004c3c:	6178      	str	r0, [r7, #20]
        break;
 8004c3e:	e00f      	b.n	8004c60 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c40:	4b49      	ldr	r3, [pc, #292]	; (8004d68 <UART_SetConfig+0x464>)
 8004c42:	617b      	str	r3, [r7, #20]
        break;
 8004c44:	e00c      	b.n	8004c60 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c46:	f7fe fc4b 	bl	80034e0 <HAL_RCC_GetSysClockFreq>
 8004c4a:	6178      	str	r0, [r7, #20]
        break;
 8004c4c:	e008      	b.n	8004c60 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c52:	617b      	str	r3, [r7, #20]
        break;
 8004c54:	e004      	b.n	8004c60 <UART_SetConfig+0x35c>
      default:
        pclk = 0U;
 8004c56:	2300      	movs	r3, #0
 8004c58:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	76bb      	strb	r3, [r7, #26]
        break;
 8004c5e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d074      	beq.n	8004d50 <UART_SetConfig+0x44c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	005a      	lsls	r2, r3, #1
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	085b      	lsrs	r3, r3, #1
 8004c70:	441a      	add	r2, r3
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c7a:	b29b      	uxth	r3, r3
 8004c7c:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c7e:	693b      	ldr	r3, [r7, #16]
 8004c80:	2b0f      	cmp	r3, #15
 8004c82:	d916      	bls.n	8004cb2 <UART_SetConfig+0x3ae>
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c8a:	d212      	bcs.n	8004cb2 <UART_SetConfig+0x3ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	b29b      	uxth	r3, r3
 8004c90:	f023 030f 	bic.w	r3, r3, #15
 8004c94:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004c96:	693b      	ldr	r3, [r7, #16]
 8004c98:	085b      	lsrs	r3, r3, #1
 8004c9a:	b29b      	uxth	r3, r3
 8004c9c:	f003 0307 	and.w	r3, r3, #7
 8004ca0:	b29a      	uxth	r2, r3
 8004ca2:	89fb      	ldrh	r3, [r7, #14]
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	89fa      	ldrh	r2, [r7, #14]
 8004cae:	60da      	str	r2, [r3, #12]
 8004cb0:	e04e      	b.n	8004d50 <UART_SetConfig+0x44c>
      }
      else
      {
        ret = HAL_ERROR;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	76bb      	strb	r3, [r7, #26]
 8004cb6:	e04b      	b.n	8004d50 <UART_SetConfig+0x44c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004cb8:	7efb      	ldrb	r3, [r7, #27]
 8004cba:	2b08      	cmp	r3, #8
 8004cbc:	d827      	bhi.n	8004d0e <UART_SetConfig+0x40a>
 8004cbe:	a201      	add	r2, pc, #4	; (adr r2, 8004cc4 <UART_SetConfig+0x3c0>)
 8004cc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cc4:	08004ce9 	.word	0x08004ce9
 8004cc8:	08004cf1 	.word	0x08004cf1
 8004ccc:	08004cf9 	.word	0x08004cf9
 8004cd0:	08004d0f 	.word	0x08004d0f
 8004cd4:	08004cff 	.word	0x08004cff
 8004cd8:	08004d0f 	.word	0x08004d0f
 8004cdc:	08004d0f 	.word	0x08004d0f
 8004ce0:	08004d0f 	.word	0x08004d0f
 8004ce4:	08004d07 	.word	0x08004d07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ce8:	f7fe fc92 	bl	8003610 <HAL_RCC_GetPCLK1Freq>
 8004cec:	6178      	str	r0, [r7, #20]
        break;
 8004cee:	e013      	b.n	8004d18 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004cf0:	f7fe fca4 	bl	800363c <HAL_RCC_GetPCLK2Freq>
 8004cf4:	6178      	str	r0, [r7, #20]
        break;
 8004cf6:	e00f      	b.n	8004d18 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004cf8:	4b1b      	ldr	r3, [pc, #108]	; (8004d68 <UART_SetConfig+0x464>)
 8004cfa:	617b      	str	r3, [r7, #20]
        break;
 8004cfc:	e00c      	b.n	8004d18 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004cfe:	f7fe fbef 	bl	80034e0 <HAL_RCC_GetSysClockFreq>
 8004d02:	6178      	str	r0, [r7, #20]
        break;
 8004d04:	e008      	b.n	8004d18 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d0a:	617b      	str	r3, [r7, #20]
        break;
 8004d0c:	e004      	b.n	8004d18 <UART_SetConfig+0x414>
      default:
        pclk = 0U;
 8004d0e:	2300      	movs	r3, #0
 8004d10:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004d12:	2301      	movs	r3, #1
 8004d14:	76bb      	strb	r3, [r7, #26]
        break;
 8004d16:	bf00      	nop
    }

    if (pclk != 0U)
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d018      	beq.n	8004d50 <UART_SetConfig+0x44c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	085a      	lsrs	r2, r3, #1
 8004d24:	697b      	ldr	r3, [r7, #20]
 8004d26:	441a      	add	r2, r3
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d30:	b29b      	uxth	r3, r3
 8004d32:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	2b0f      	cmp	r3, #15
 8004d38:	d908      	bls.n	8004d4c <UART_SetConfig+0x448>
 8004d3a:	693b      	ldr	r3, [r7, #16]
 8004d3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d40:	d204      	bcs.n	8004d4c <UART_SetConfig+0x448>
      {
        huart->Instance->BRR = usartdiv;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	693a      	ldr	r2, [r7, #16]
 8004d48:	60da      	str	r2, [r3, #12]
 8004d4a:	e001      	b.n	8004d50 <UART_SetConfig+0x44c>
      }
      else
      {
        ret = HAL_ERROR;
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2200      	movs	r2, #0
 8004d54:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004d5c:	7ebb      	ldrb	r3, [r7, #26]
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	3720      	adds	r7, #32
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bdb0      	pop	{r4, r5, r7, pc}
 8004d66:	bf00      	nop
 8004d68:	00f42400 	.word	0x00f42400

08004d6c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b083      	sub	sp, #12
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d78:	f003 0301 	and.w	r3, r3, #1
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d00a      	beq.n	8004d96 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	430a      	orrs	r2, r1
 8004d94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d9a:	f003 0302 	and.w	r3, r3, #2
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d00a      	beq.n	8004db8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	430a      	orrs	r2, r1
 8004db6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dbc:	f003 0304 	and.w	r3, r3, #4
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d00a      	beq.n	8004dda <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	430a      	orrs	r2, r1
 8004dd8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dde:	f003 0308 	and.w	r3, r3, #8
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d00a      	beq.n	8004dfc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	430a      	orrs	r2, r1
 8004dfa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e00:	f003 0310 	and.w	r3, r3, #16
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d00a      	beq.n	8004e1e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	689b      	ldr	r3, [r3, #8]
 8004e0e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	430a      	orrs	r2, r1
 8004e1c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e22:	f003 0320 	and.w	r3, r3, #32
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d00a      	beq.n	8004e40 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	689b      	ldr	r3, [r3, #8]
 8004e30:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	430a      	orrs	r2, r1
 8004e3e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d01a      	beq.n	8004e82 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	430a      	orrs	r2, r1
 8004e60:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e6a:	d10a      	bne.n	8004e82 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	430a      	orrs	r2, r1
 8004e80:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d00a      	beq.n	8004ea4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	430a      	orrs	r2, r1
 8004ea2:	605a      	str	r2, [r3, #4]
  }
}
 8004ea4:	bf00      	nop
 8004ea6:	370c      	adds	r7, #12
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eae:	4770      	bx	lr

08004eb0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b086      	sub	sp, #24
 8004eb4:	af02      	add	r7, sp, #8
 8004eb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004ec0:	f7fc fd80 	bl	80019c4 <HAL_GetTick>
 8004ec4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f003 0308 	and.w	r3, r3, #8
 8004ed0:	2b08      	cmp	r3, #8
 8004ed2:	d10e      	bne.n	8004ef2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ed4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004ed8:	9300      	str	r3, [sp, #0]
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	2200      	movs	r2, #0
 8004ede:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004ee2:	6878      	ldr	r0, [r7, #4]
 8004ee4:	f000 f82d 	bl	8004f42 <UART_WaitOnFlagUntilTimeout>
 8004ee8:	4603      	mov	r3, r0
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d001      	beq.n	8004ef2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004eee:	2303      	movs	r3, #3
 8004ef0:	e023      	b.n	8004f3a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f003 0304 	and.w	r3, r3, #4
 8004efc:	2b04      	cmp	r3, #4
 8004efe:	d10e      	bne.n	8004f1e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f00:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004f04:	9300      	str	r3, [sp, #0]
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	f000 f817 	bl	8004f42 <UART_WaitOnFlagUntilTimeout>
 8004f14:	4603      	mov	r3, r0
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d001      	beq.n	8004f1e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f1a:	2303      	movs	r3, #3
 8004f1c:	e00d      	b.n	8004f3a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2220      	movs	r2, #32
 8004f22:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2220      	movs	r2, #32
 8004f28:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2200      	movs	r2, #0
 8004f34:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004f38:	2300      	movs	r3, #0
}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	3710      	adds	r7, #16
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd80      	pop	{r7, pc}

08004f42 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004f42:	b580      	push	{r7, lr}
 8004f44:	b084      	sub	sp, #16
 8004f46:	af00      	add	r7, sp, #0
 8004f48:	60f8      	str	r0, [r7, #12]
 8004f4a:	60b9      	str	r1, [r7, #8]
 8004f4c:	603b      	str	r3, [r7, #0]
 8004f4e:	4613      	mov	r3, r2
 8004f50:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f52:	e05e      	b.n	8005012 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f54:	69bb      	ldr	r3, [r7, #24]
 8004f56:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f5a:	d05a      	beq.n	8005012 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f5c:	f7fc fd32 	bl	80019c4 <HAL_GetTick>
 8004f60:	4602      	mov	r2, r0
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	1ad3      	subs	r3, r2, r3
 8004f66:	69ba      	ldr	r2, [r7, #24]
 8004f68:	429a      	cmp	r2, r3
 8004f6a:	d302      	bcc.n	8004f72 <UART_WaitOnFlagUntilTimeout+0x30>
 8004f6c:	69bb      	ldr	r3, [r7, #24]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d11b      	bne.n	8004faa <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	681a      	ldr	r2, [r3, #0]
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004f80:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	689a      	ldr	r2, [r3, #8]
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f022 0201 	bic.w	r2, r2, #1
 8004f90:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	2220      	movs	r2, #32
 8004f96:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	2220      	movs	r2, #32
 8004f9c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004fa6:	2303      	movs	r3, #3
 8004fa8:	e043      	b.n	8005032 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f003 0304 	and.w	r3, r3, #4
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d02c      	beq.n	8005012 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	69db      	ldr	r3, [r3, #28]
 8004fbe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004fc2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004fc6:	d124      	bne.n	8005012 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004fd0:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	681a      	ldr	r2, [r3, #0]
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004fe0:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	689a      	ldr	r2, [r3, #8]
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f022 0201 	bic.w	r2, r2, #1
 8004ff0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	2220      	movs	r2, #32
 8004ff6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	2220      	movs	r2, #32
 8004ffc:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	2220      	movs	r2, #32
 8005002:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	2200      	movs	r2, #0
 800500a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800500e:	2303      	movs	r3, #3
 8005010:	e00f      	b.n	8005032 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	69da      	ldr	r2, [r3, #28]
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	4013      	ands	r3, r2
 800501c:	68ba      	ldr	r2, [r7, #8]
 800501e:	429a      	cmp	r2, r3
 8005020:	bf0c      	ite	eq
 8005022:	2301      	moveq	r3, #1
 8005024:	2300      	movne	r3, #0
 8005026:	b2db      	uxtb	r3, r3
 8005028:	461a      	mov	r2, r3
 800502a:	79fb      	ldrb	r3, [r7, #7]
 800502c:	429a      	cmp	r2, r3
 800502e:	d091      	beq.n	8004f54 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005030:	2300      	movs	r3, #0
}
 8005032:	4618      	mov	r0, r3
 8005034:	3710      	adds	r7, #16
 8005036:	46bd      	mov	sp, r7
 8005038:	bd80      	pop	{r7, pc}
	...

0800503c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800503c:	b480      	push	{r7}
 800503e:	b085      	sub	sp, #20
 8005040:	af00      	add	r7, sp, #0
 8005042:	60f8      	str	r0, [r7, #12]
 8005044:	60b9      	str	r1, [r7, #8]
 8005046:	4613      	mov	r3, r2
 8005048:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	68ba      	ldr	r2, [r7, #8]
 800504e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	88fa      	ldrh	r2, [r7, #6]
 8005054:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	88fa      	ldrh	r2, [r7, #6]
 800505c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	2200      	movs	r2, #0
 8005064:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	689b      	ldr	r3, [r3, #8]
 800506a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800506e:	d10e      	bne.n	800508e <UART_Start_Receive_IT+0x52>
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	691b      	ldr	r3, [r3, #16]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d105      	bne.n	8005084 <UART_Start_Receive_IT+0x48>
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800507e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005082:	e02d      	b.n	80050e0 <UART_Start_Receive_IT+0xa4>
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	22ff      	movs	r2, #255	; 0xff
 8005088:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800508c:	e028      	b.n	80050e0 <UART_Start_Receive_IT+0xa4>
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	689b      	ldr	r3, [r3, #8]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d10d      	bne.n	80050b2 <UART_Start_Receive_IT+0x76>
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	691b      	ldr	r3, [r3, #16]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d104      	bne.n	80050a8 <UART_Start_Receive_IT+0x6c>
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	22ff      	movs	r2, #255	; 0xff
 80050a2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80050a6:	e01b      	b.n	80050e0 <UART_Start_Receive_IT+0xa4>
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	227f      	movs	r2, #127	; 0x7f
 80050ac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80050b0:	e016      	b.n	80050e0 <UART_Start_Receive_IT+0xa4>
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	689b      	ldr	r3, [r3, #8]
 80050b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80050ba:	d10d      	bne.n	80050d8 <UART_Start_Receive_IT+0x9c>
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	691b      	ldr	r3, [r3, #16]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d104      	bne.n	80050ce <UART_Start_Receive_IT+0x92>
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	227f      	movs	r2, #127	; 0x7f
 80050c8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80050cc:	e008      	b.n	80050e0 <UART_Start_Receive_IT+0xa4>
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	223f      	movs	r2, #63	; 0x3f
 80050d2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80050d6:	e003      	b.n	80050e0 <UART_Start_Receive_IT+0xa4>
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	2200      	movs	r2, #0
 80050dc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	2200      	movs	r2, #0
 80050e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	2222      	movs	r2, #34	; 0x22
 80050ec:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	689a      	ldr	r2, [r3, #8]
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f042 0201 	orr.w	r2, r2, #1
 80050fc:	609a      	str	r2, [r3, #8]
    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	689b      	ldr	r3, [r3, #8]
 8005102:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005106:	d107      	bne.n	8005118 <UART_Start_Receive_IT+0xdc>
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	691b      	ldr	r3, [r3, #16]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d103      	bne.n	8005118 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	4a0c      	ldr	r2, [pc, #48]	; (8005144 <UART_Start_Receive_IT+0x108>)
 8005114:	665a      	str	r2, [r3, #100]	; 0x64
 8005116:	e002      	b.n	800511e <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	4a0b      	ldr	r2, [pc, #44]	; (8005148 <UART_Start_Receive_IT+0x10c>)
 800511c:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	2200      	movs	r2, #0
 8005122:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	681a      	ldr	r2, [r3, #0]
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8005134:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8005136:	2300      	movs	r3, #0
}
 8005138:	4618      	mov	r0, r3
 800513a:	3714      	adds	r7, #20
 800513c:	46bd      	mov	sp, r7
 800513e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005142:	4770      	bx	lr
 8005144:	080052e1 	.word	0x080052e1
 8005148:	08005209 	.word	0x08005209

0800514c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800514c:	b480      	push	{r7}
 800514e:	b083      	sub	sp, #12
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	681a      	ldr	r2, [r3, #0]
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005162:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	689a      	ldr	r2, [r3, #8]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f022 0201 	bic.w	r2, r2, #1
 8005172:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005178:	2b01      	cmp	r3, #1
 800517a:	d107      	bne.n	800518c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	681a      	ldr	r2, [r3, #0]
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f022 0210 	bic.w	r2, r2, #16
 800518a:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2220      	movs	r2, #32
 8005190:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2200      	movs	r2, #0
 8005196:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2200      	movs	r2, #0
 800519c:	665a      	str	r2, [r3, #100]	; 0x64
}
 800519e:	bf00      	nop
 80051a0:	370c      	adds	r7, #12
 80051a2:	46bd      	mov	sp, r7
 80051a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a8:	4770      	bx	lr

080051aa <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80051aa:	b580      	push	{r7, lr}
 80051ac:	b084      	sub	sp, #16
 80051ae:	af00      	add	r7, sp, #0
 80051b0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051b6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	2200      	movs	r2, #0
 80051bc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	2200      	movs	r2, #0
 80051c4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80051c8:	68f8      	ldr	r0, [r7, #12]
 80051ca:	f7ff fb85 	bl	80048d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80051ce:	bf00      	nop
 80051d0:	3710      	adds	r7, #16
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bd80      	pop	{r7, pc}

080051d6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80051d6:	b580      	push	{r7, lr}
 80051d8:	b082      	sub	sp, #8
 80051da:	af00      	add	r7, sp, #0
 80051dc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	681a      	ldr	r2, [r3, #0]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051ec:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2220      	movs	r2, #32
 80051f2:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2200      	movs	r2, #0
 80051f8:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80051fa:	6878      	ldr	r0, [r7, #4]
 80051fc:	f7ff fb58 	bl	80048b0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005200:	bf00      	nop
 8005202:	3708      	adds	r7, #8
 8005204:	46bd      	mov	sp, r7
 8005206:	bd80      	pop	{r7, pc}

08005208 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b084      	sub	sp, #16
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005216:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800521c:	2b22      	cmp	r3, #34	; 0x22
 800521e:	d151      	bne.n	80052c4 <UART_RxISR_8BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005226:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005228:	89bb      	ldrh	r3, [r7, #12]
 800522a:	b2d9      	uxtb	r1, r3
 800522c:	89fb      	ldrh	r3, [r7, #14]
 800522e:	b2da      	uxtb	r2, r3
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005234:	400a      	ands	r2, r1
 8005236:	b2d2      	uxtb	r2, r2
 8005238:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800523e:	1c5a      	adds	r2, r3, #1
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800524a:	b29b      	uxth	r3, r3
 800524c:	3b01      	subs	r3, #1
 800524e:	b29a      	uxth	r2, r3
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800525c:	b29b      	uxth	r3, r3
 800525e:	2b00      	cmp	r3, #0
 8005260:	d13a      	bne.n	80052d8 <UART_RxISR_8BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	681a      	ldr	r2, [r3, #0]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005270:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	689a      	ldr	r2, [r3, #8]
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f022 0201 	bic.w	r2, r2, #1
 8005280:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2220      	movs	r2, #32
 8005286:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2200      	movs	r2, #0
 800528c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005292:	2b01      	cmp	r3, #1
 8005294:	d10f      	bne.n	80052b6 <UART_RxISR_8BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	681a      	ldr	r2, [r3, #0]
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f022 0210 	bic.w	r2, r2, #16
 80052a4:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80052ac:	4619      	mov	r1, r3
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	f7ff fb1c 	bl	80048ec <HAL_UARTEx_RxEventCallback>
 80052b4:	e002      	b.n	80052bc <UART_RxISR_8BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	f7ff fb04 	bl	80048c4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2200      	movs	r2, #0
 80052c0:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80052c2:	e009      	b.n	80052d8 <UART_RxISR_8BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	8b1b      	ldrh	r3, [r3, #24]
 80052ca:	b29a      	uxth	r2, r3
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f042 0208 	orr.w	r2, r2, #8
 80052d4:	b292      	uxth	r2, r2
 80052d6:	831a      	strh	r2, [r3, #24]
}
 80052d8:	bf00      	nop
 80052da:	3710      	adds	r7, #16
 80052dc:	46bd      	mov	sp, r7
 80052de:	bd80      	pop	{r7, pc}

080052e0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b084      	sub	sp, #16
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80052ee:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80052f4:	2b22      	cmp	r3, #34	; 0x22
 80052f6:	d151      	bne.n	800539c <UART_RxISR_16BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80052fe:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005304:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8005306:	89ba      	ldrh	r2, [r7, #12]
 8005308:	89fb      	ldrh	r3, [r7, #14]
 800530a:	4013      	ands	r3, r2
 800530c:	b29a      	uxth	r2, r3
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005316:	1c9a      	adds	r2, r3, #2
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005322:	b29b      	uxth	r3, r3
 8005324:	3b01      	subs	r3, #1
 8005326:	b29a      	uxth	r2, r3
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005334:	b29b      	uxth	r3, r3
 8005336:	2b00      	cmp	r3, #0
 8005338:	d13a      	bne.n	80053b0 <UART_RxISR_16BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	681a      	ldr	r2, [r3, #0]
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005348:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	689a      	ldr	r2, [r3, #8]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f022 0201 	bic.w	r2, r2, #1
 8005358:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2220      	movs	r2, #32
 800535e:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2200      	movs	r2, #0
 8005364:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800536a:	2b01      	cmp	r3, #1
 800536c:	d10f      	bne.n	800538e <UART_RxISR_16BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	681a      	ldr	r2, [r3, #0]
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f022 0210 	bic.w	r2, r2, #16
 800537c:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005384:	4619      	mov	r1, r3
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	f7ff fab0 	bl	80048ec <HAL_UARTEx_RxEventCallback>
 800538c:	e002      	b.n	8005394 <UART_RxISR_16BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800538e:	6878      	ldr	r0, [r7, #4]
 8005390:	f7ff fa98 	bl	80048c4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2200      	movs	r2, #0
 8005398:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800539a:	e009      	b.n	80053b0 <UART_RxISR_16BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	8b1b      	ldrh	r3, [r3, #24]
 80053a2:	b29a      	uxth	r2, r3
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f042 0208 	orr.w	r2, r2, #8
 80053ac:	b292      	uxth	r2, r2
 80053ae:	831a      	strh	r2, [r3, #24]
}
 80053b0:	bf00      	nop
 80053b2:	3710      	adds	r7, #16
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bd80      	pop	{r7, pc}

080053b8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80053b8:	b480      	push	{r7}
 80053ba:	b083      	sub	sp, #12
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80053c0:	bf00      	nop
 80053c2:	370c      	adds	r7, #12
 80053c4:	46bd      	mov	sp, r7
 80053c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ca:	4770      	bx	lr

080053cc <__errno>:
 80053cc:	4b01      	ldr	r3, [pc, #4]	; (80053d4 <__errno+0x8>)
 80053ce:	6818      	ldr	r0, [r3, #0]
 80053d0:	4770      	bx	lr
 80053d2:	bf00      	nop
 80053d4:	20000078 	.word	0x20000078

080053d8 <__libc_init_array>:
 80053d8:	b570      	push	{r4, r5, r6, lr}
 80053da:	4d0d      	ldr	r5, [pc, #52]	; (8005410 <__libc_init_array+0x38>)
 80053dc:	4c0d      	ldr	r4, [pc, #52]	; (8005414 <__libc_init_array+0x3c>)
 80053de:	1b64      	subs	r4, r4, r5
 80053e0:	10a4      	asrs	r4, r4, #2
 80053e2:	2600      	movs	r6, #0
 80053e4:	42a6      	cmp	r6, r4
 80053e6:	d109      	bne.n	80053fc <__libc_init_array+0x24>
 80053e8:	4d0b      	ldr	r5, [pc, #44]	; (8005418 <__libc_init_array+0x40>)
 80053ea:	4c0c      	ldr	r4, [pc, #48]	; (800541c <__libc_init_array+0x44>)
 80053ec:	f000 fc4e 	bl	8005c8c <_init>
 80053f0:	1b64      	subs	r4, r4, r5
 80053f2:	10a4      	asrs	r4, r4, #2
 80053f4:	2600      	movs	r6, #0
 80053f6:	42a6      	cmp	r6, r4
 80053f8:	d105      	bne.n	8005406 <__libc_init_array+0x2e>
 80053fa:	bd70      	pop	{r4, r5, r6, pc}
 80053fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8005400:	4798      	blx	r3
 8005402:	3601      	adds	r6, #1
 8005404:	e7ee      	b.n	80053e4 <__libc_init_array+0xc>
 8005406:	f855 3b04 	ldr.w	r3, [r5], #4
 800540a:	4798      	blx	r3
 800540c:	3601      	adds	r6, #1
 800540e:	e7f2      	b.n	80053f6 <__libc_init_array+0x1e>
 8005410:	0800721c 	.word	0x0800721c
 8005414:	0800721c 	.word	0x0800721c
 8005418:	0800721c 	.word	0x0800721c
 800541c:	08007220 	.word	0x08007220

08005420 <memset>:
 8005420:	4402      	add	r2, r0
 8005422:	4603      	mov	r3, r0
 8005424:	4293      	cmp	r3, r2
 8005426:	d100      	bne.n	800542a <memset+0xa>
 8005428:	4770      	bx	lr
 800542a:	f803 1b01 	strb.w	r1, [r3], #1
 800542e:	e7f9      	b.n	8005424 <memset+0x4>

08005430 <siprintf>:
 8005430:	b40e      	push	{r1, r2, r3}
 8005432:	b500      	push	{lr}
 8005434:	b09c      	sub	sp, #112	; 0x70
 8005436:	ab1d      	add	r3, sp, #116	; 0x74
 8005438:	9002      	str	r0, [sp, #8]
 800543a:	9006      	str	r0, [sp, #24]
 800543c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005440:	4809      	ldr	r0, [pc, #36]	; (8005468 <siprintf+0x38>)
 8005442:	9107      	str	r1, [sp, #28]
 8005444:	9104      	str	r1, [sp, #16]
 8005446:	4909      	ldr	r1, [pc, #36]	; (800546c <siprintf+0x3c>)
 8005448:	f853 2b04 	ldr.w	r2, [r3], #4
 800544c:	9105      	str	r1, [sp, #20]
 800544e:	6800      	ldr	r0, [r0, #0]
 8005450:	9301      	str	r3, [sp, #4]
 8005452:	a902      	add	r1, sp, #8
 8005454:	f000 f868 	bl	8005528 <_svfiprintf_r>
 8005458:	9b02      	ldr	r3, [sp, #8]
 800545a:	2200      	movs	r2, #0
 800545c:	701a      	strb	r2, [r3, #0]
 800545e:	b01c      	add	sp, #112	; 0x70
 8005460:	f85d eb04 	ldr.w	lr, [sp], #4
 8005464:	b003      	add	sp, #12
 8005466:	4770      	bx	lr
 8005468:	20000078 	.word	0x20000078
 800546c:	ffff0208 	.word	0xffff0208

08005470 <__ssputs_r>:
 8005470:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005474:	688e      	ldr	r6, [r1, #8]
 8005476:	429e      	cmp	r6, r3
 8005478:	4682      	mov	sl, r0
 800547a:	460c      	mov	r4, r1
 800547c:	4690      	mov	r8, r2
 800547e:	461f      	mov	r7, r3
 8005480:	d838      	bhi.n	80054f4 <__ssputs_r+0x84>
 8005482:	898a      	ldrh	r2, [r1, #12]
 8005484:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005488:	d032      	beq.n	80054f0 <__ssputs_r+0x80>
 800548a:	6825      	ldr	r5, [r4, #0]
 800548c:	6909      	ldr	r1, [r1, #16]
 800548e:	eba5 0901 	sub.w	r9, r5, r1
 8005492:	6965      	ldr	r5, [r4, #20]
 8005494:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005498:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800549c:	3301      	adds	r3, #1
 800549e:	444b      	add	r3, r9
 80054a0:	106d      	asrs	r5, r5, #1
 80054a2:	429d      	cmp	r5, r3
 80054a4:	bf38      	it	cc
 80054a6:	461d      	movcc	r5, r3
 80054a8:	0553      	lsls	r3, r2, #21
 80054aa:	d531      	bpl.n	8005510 <__ssputs_r+0xa0>
 80054ac:	4629      	mov	r1, r5
 80054ae:	f000 fb47 	bl	8005b40 <_malloc_r>
 80054b2:	4606      	mov	r6, r0
 80054b4:	b950      	cbnz	r0, 80054cc <__ssputs_r+0x5c>
 80054b6:	230c      	movs	r3, #12
 80054b8:	f8ca 3000 	str.w	r3, [sl]
 80054bc:	89a3      	ldrh	r3, [r4, #12]
 80054be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80054c2:	81a3      	strh	r3, [r4, #12]
 80054c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80054c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054cc:	6921      	ldr	r1, [r4, #16]
 80054ce:	464a      	mov	r2, r9
 80054d0:	f000 fabe 	bl	8005a50 <memcpy>
 80054d4:	89a3      	ldrh	r3, [r4, #12]
 80054d6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80054da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054de:	81a3      	strh	r3, [r4, #12]
 80054e0:	6126      	str	r6, [r4, #16]
 80054e2:	6165      	str	r5, [r4, #20]
 80054e4:	444e      	add	r6, r9
 80054e6:	eba5 0509 	sub.w	r5, r5, r9
 80054ea:	6026      	str	r6, [r4, #0]
 80054ec:	60a5      	str	r5, [r4, #8]
 80054ee:	463e      	mov	r6, r7
 80054f0:	42be      	cmp	r6, r7
 80054f2:	d900      	bls.n	80054f6 <__ssputs_r+0x86>
 80054f4:	463e      	mov	r6, r7
 80054f6:	4632      	mov	r2, r6
 80054f8:	6820      	ldr	r0, [r4, #0]
 80054fa:	4641      	mov	r1, r8
 80054fc:	f000 fab6 	bl	8005a6c <memmove>
 8005500:	68a3      	ldr	r3, [r4, #8]
 8005502:	6822      	ldr	r2, [r4, #0]
 8005504:	1b9b      	subs	r3, r3, r6
 8005506:	4432      	add	r2, r6
 8005508:	60a3      	str	r3, [r4, #8]
 800550a:	6022      	str	r2, [r4, #0]
 800550c:	2000      	movs	r0, #0
 800550e:	e7db      	b.n	80054c8 <__ssputs_r+0x58>
 8005510:	462a      	mov	r2, r5
 8005512:	f000 fb6f 	bl	8005bf4 <_realloc_r>
 8005516:	4606      	mov	r6, r0
 8005518:	2800      	cmp	r0, #0
 800551a:	d1e1      	bne.n	80054e0 <__ssputs_r+0x70>
 800551c:	6921      	ldr	r1, [r4, #16]
 800551e:	4650      	mov	r0, sl
 8005520:	f000 fabe 	bl	8005aa0 <_free_r>
 8005524:	e7c7      	b.n	80054b6 <__ssputs_r+0x46>
	...

08005528 <_svfiprintf_r>:
 8005528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800552c:	4698      	mov	r8, r3
 800552e:	898b      	ldrh	r3, [r1, #12]
 8005530:	061b      	lsls	r3, r3, #24
 8005532:	b09d      	sub	sp, #116	; 0x74
 8005534:	4607      	mov	r7, r0
 8005536:	460d      	mov	r5, r1
 8005538:	4614      	mov	r4, r2
 800553a:	d50e      	bpl.n	800555a <_svfiprintf_r+0x32>
 800553c:	690b      	ldr	r3, [r1, #16]
 800553e:	b963      	cbnz	r3, 800555a <_svfiprintf_r+0x32>
 8005540:	2140      	movs	r1, #64	; 0x40
 8005542:	f000 fafd 	bl	8005b40 <_malloc_r>
 8005546:	6028      	str	r0, [r5, #0]
 8005548:	6128      	str	r0, [r5, #16]
 800554a:	b920      	cbnz	r0, 8005556 <_svfiprintf_r+0x2e>
 800554c:	230c      	movs	r3, #12
 800554e:	603b      	str	r3, [r7, #0]
 8005550:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005554:	e0d1      	b.n	80056fa <_svfiprintf_r+0x1d2>
 8005556:	2340      	movs	r3, #64	; 0x40
 8005558:	616b      	str	r3, [r5, #20]
 800555a:	2300      	movs	r3, #0
 800555c:	9309      	str	r3, [sp, #36]	; 0x24
 800555e:	2320      	movs	r3, #32
 8005560:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005564:	f8cd 800c 	str.w	r8, [sp, #12]
 8005568:	2330      	movs	r3, #48	; 0x30
 800556a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005714 <_svfiprintf_r+0x1ec>
 800556e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005572:	f04f 0901 	mov.w	r9, #1
 8005576:	4623      	mov	r3, r4
 8005578:	469a      	mov	sl, r3
 800557a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800557e:	b10a      	cbz	r2, 8005584 <_svfiprintf_r+0x5c>
 8005580:	2a25      	cmp	r2, #37	; 0x25
 8005582:	d1f9      	bne.n	8005578 <_svfiprintf_r+0x50>
 8005584:	ebba 0b04 	subs.w	fp, sl, r4
 8005588:	d00b      	beq.n	80055a2 <_svfiprintf_r+0x7a>
 800558a:	465b      	mov	r3, fp
 800558c:	4622      	mov	r2, r4
 800558e:	4629      	mov	r1, r5
 8005590:	4638      	mov	r0, r7
 8005592:	f7ff ff6d 	bl	8005470 <__ssputs_r>
 8005596:	3001      	adds	r0, #1
 8005598:	f000 80aa 	beq.w	80056f0 <_svfiprintf_r+0x1c8>
 800559c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800559e:	445a      	add	r2, fp
 80055a0:	9209      	str	r2, [sp, #36]	; 0x24
 80055a2:	f89a 3000 	ldrb.w	r3, [sl]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	f000 80a2 	beq.w	80056f0 <_svfiprintf_r+0x1c8>
 80055ac:	2300      	movs	r3, #0
 80055ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80055b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80055b6:	f10a 0a01 	add.w	sl, sl, #1
 80055ba:	9304      	str	r3, [sp, #16]
 80055bc:	9307      	str	r3, [sp, #28]
 80055be:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80055c2:	931a      	str	r3, [sp, #104]	; 0x68
 80055c4:	4654      	mov	r4, sl
 80055c6:	2205      	movs	r2, #5
 80055c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80055cc:	4851      	ldr	r0, [pc, #324]	; (8005714 <_svfiprintf_r+0x1ec>)
 80055ce:	f7fa fdff 	bl	80001d0 <memchr>
 80055d2:	9a04      	ldr	r2, [sp, #16]
 80055d4:	b9d8      	cbnz	r0, 800560e <_svfiprintf_r+0xe6>
 80055d6:	06d0      	lsls	r0, r2, #27
 80055d8:	bf44      	itt	mi
 80055da:	2320      	movmi	r3, #32
 80055dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80055e0:	0711      	lsls	r1, r2, #28
 80055e2:	bf44      	itt	mi
 80055e4:	232b      	movmi	r3, #43	; 0x2b
 80055e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80055ea:	f89a 3000 	ldrb.w	r3, [sl]
 80055ee:	2b2a      	cmp	r3, #42	; 0x2a
 80055f0:	d015      	beq.n	800561e <_svfiprintf_r+0xf6>
 80055f2:	9a07      	ldr	r2, [sp, #28]
 80055f4:	4654      	mov	r4, sl
 80055f6:	2000      	movs	r0, #0
 80055f8:	f04f 0c0a 	mov.w	ip, #10
 80055fc:	4621      	mov	r1, r4
 80055fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005602:	3b30      	subs	r3, #48	; 0x30
 8005604:	2b09      	cmp	r3, #9
 8005606:	d94e      	bls.n	80056a6 <_svfiprintf_r+0x17e>
 8005608:	b1b0      	cbz	r0, 8005638 <_svfiprintf_r+0x110>
 800560a:	9207      	str	r2, [sp, #28]
 800560c:	e014      	b.n	8005638 <_svfiprintf_r+0x110>
 800560e:	eba0 0308 	sub.w	r3, r0, r8
 8005612:	fa09 f303 	lsl.w	r3, r9, r3
 8005616:	4313      	orrs	r3, r2
 8005618:	9304      	str	r3, [sp, #16]
 800561a:	46a2      	mov	sl, r4
 800561c:	e7d2      	b.n	80055c4 <_svfiprintf_r+0x9c>
 800561e:	9b03      	ldr	r3, [sp, #12]
 8005620:	1d19      	adds	r1, r3, #4
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	9103      	str	r1, [sp, #12]
 8005626:	2b00      	cmp	r3, #0
 8005628:	bfbb      	ittet	lt
 800562a:	425b      	neglt	r3, r3
 800562c:	f042 0202 	orrlt.w	r2, r2, #2
 8005630:	9307      	strge	r3, [sp, #28]
 8005632:	9307      	strlt	r3, [sp, #28]
 8005634:	bfb8      	it	lt
 8005636:	9204      	strlt	r2, [sp, #16]
 8005638:	7823      	ldrb	r3, [r4, #0]
 800563a:	2b2e      	cmp	r3, #46	; 0x2e
 800563c:	d10c      	bne.n	8005658 <_svfiprintf_r+0x130>
 800563e:	7863      	ldrb	r3, [r4, #1]
 8005640:	2b2a      	cmp	r3, #42	; 0x2a
 8005642:	d135      	bne.n	80056b0 <_svfiprintf_r+0x188>
 8005644:	9b03      	ldr	r3, [sp, #12]
 8005646:	1d1a      	adds	r2, r3, #4
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	9203      	str	r2, [sp, #12]
 800564c:	2b00      	cmp	r3, #0
 800564e:	bfb8      	it	lt
 8005650:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005654:	3402      	adds	r4, #2
 8005656:	9305      	str	r3, [sp, #20]
 8005658:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005724 <_svfiprintf_r+0x1fc>
 800565c:	7821      	ldrb	r1, [r4, #0]
 800565e:	2203      	movs	r2, #3
 8005660:	4650      	mov	r0, sl
 8005662:	f7fa fdb5 	bl	80001d0 <memchr>
 8005666:	b140      	cbz	r0, 800567a <_svfiprintf_r+0x152>
 8005668:	2340      	movs	r3, #64	; 0x40
 800566a:	eba0 000a 	sub.w	r0, r0, sl
 800566e:	fa03 f000 	lsl.w	r0, r3, r0
 8005672:	9b04      	ldr	r3, [sp, #16]
 8005674:	4303      	orrs	r3, r0
 8005676:	3401      	adds	r4, #1
 8005678:	9304      	str	r3, [sp, #16]
 800567a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800567e:	4826      	ldr	r0, [pc, #152]	; (8005718 <_svfiprintf_r+0x1f0>)
 8005680:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005684:	2206      	movs	r2, #6
 8005686:	f7fa fda3 	bl	80001d0 <memchr>
 800568a:	2800      	cmp	r0, #0
 800568c:	d038      	beq.n	8005700 <_svfiprintf_r+0x1d8>
 800568e:	4b23      	ldr	r3, [pc, #140]	; (800571c <_svfiprintf_r+0x1f4>)
 8005690:	bb1b      	cbnz	r3, 80056da <_svfiprintf_r+0x1b2>
 8005692:	9b03      	ldr	r3, [sp, #12]
 8005694:	3307      	adds	r3, #7
 8005696:	f023 0307 	bic.w	r3, r3, #7
 800569a:	3308      	adds	r3, #8
 800569c:	9303      	str	r3, [sp, #12]
 800569e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056a0:	4433      	add	r3, r6
 80056a2:	9309      	str	r3, [sp, #36]	; 0x24
 80056a4:	e767      	b.n	8005576 <_svfiprintf_r+0x4e>
 80056a6:	fb0c 3202 	mla	r2, ip, r2, r3
 80056aa:	460c      	mov	r4, r1
 80056ac:	2001      	movs	r0, #1
 80056ae:	e7a5      	b.n	80055fc <_svfiprintf_r+0xd4>
 80056b0:	2300      	movs	r3, #0
 80056b2:	3401      	adds	r4, #1
 80056b4:	9305      	str	r3, [sp, #20]
 80056b6:	4619      	mov	r1, r3
 80056b8:	f04f 0c0a 	mov.w	ip, #10
 80056bc:	4620      	mov	r0, r4
 80056be:	f810 2b01 	ldrb.w	r2, [r0], #1
 80056c2:	3a30      	subs	r2, #48	; 0x30
 80056c4:	2a09      	cmp	r2, #9
 80056c6:	d903      	bls.n	80056d0 <_svfiprintf_r+0x1a8>
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d0c5      	beq.n	8005658 <_svfiprintf_r+0x130>
 80056cc:	9105      	str	r1, [sp, #20]
 80056ce:	e7c3      	b.n	8005658 <_svfiprintf_r+0x130>
 80056d0:	fb0c 2101 	mla	r1, ip, r1, r2
 80056d4:	4604      	mov	r4, r0
 80056d6:	2301      	movs	r3, #1
 80056d8:	e7f0      	b.n	80056bc <_svfiprintf_r+0x194>
 80056da:	ab03      	add	r3, sp, #12
 80056dc:	9300      	str	r3, [sp, #0]
 80056de:	462a      	mov	r2, r5
 80056e0:	4b0f      	ldr	r3, [pc, #60]	; (8005720 <_svfiprintf_r+0x1f8>)
 80056e2:	a904      	add	r1, sp, #16
 80056e4:	4638      	mov	r0, r7
 80056e6:	f3af 8000 	nop.w
 80056ea:	1c42      	adds	r2, r0, #1
 80056ec:	4606      	mov	r6, r0
 80056ee:	d1d6      	bne.n	800569e <_svfiprintf_r+0x176>
 80056f0:	89ab      	ldrh	r3, [r5, #12]
 80056f2:	065b      	lsls	r3, r3, #25
 80056f4:	f53f af2c 	bmi.w	8005550 <_svfiprintf_r+0x28>
 80056f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80056fa:	b01d      	add	sp, #116	; 0x74
 80056fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005700:	ab03      	add	r3, sp, #12
 8005702:	9300      	str	r3, [sp, #0]
 8005704:	462a      	mov	r2, r5
 8005706:	4b06      	ldr	r3, [pc, #24]	; (8005720 <_svfiprintf_r+0x1f8>)
 8005708:	a904      	add	r1, sp, #16
 800570a:	4638      	mov	r0, r7
 800570c:	f000 f87a 	bl	8005804 <_printf_i>
 8005710:	e7eb      	b.n	80056ea <_svfiprintf_r+0x1c2>
 8005712:	bf00      	nop
 8005714:	080071e0 	.word	0x080071e0
 8005718:	080071ea 	.word	0x080071ea
 800571c:	00000000 	.word	0x00000000
 8005720:	08005471 	.word	0x08005471
 8005724:	080071e6 	.word	0x080071e6

08005728 <_printf_common>:
 8005728:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800572c:	4616      	mov	r6, r2
 800572e:	4699      	mov	r9, r3
 8005730:	688a      	ldr	r2, [r1, #8]
 8005732:	690b      	ldr	r3, [r1, #16]
 8005734:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005738:	4293      	cmp	r3, r2
 800573a:	bfb8      	it	lt
 800573c:	4613      	movlt	r3, r2
 800573e:	6033      	str	r3, [r6, #0]
 8005740:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005744:	4607      	mov	r7, r0
 8005746:	460c      	mov	r4, r1
 8005748:	b10a      	cbz	r2, 800574e <_printf_common+0x26>
 800574a:	3301      	adds	r3, #1
 800574c:	6033      	str	r3, [r6, #0]
 800574e:	6823      	ldr	r3, [r4, #0]
 8005750:	0699      	lsls	r1, r3, #26
 8005752:	bf42      	ittt	mi
 8005754:	6833      	ldrmi	r3, [r6, #0]
 8005756:	3302      	addmi	r3, #2
 8005758:	6033      	strmi	r3, [r6, #0]
 800575a:	6825      	ldr	r5, [r4, #0]
 800575c:	f015 0506 	ands.w	r5, r5, #6
 8005760:	d106      	bne.n	8005770 <_printf_common+0x48>
 8005762:	f104 0a19 	add.w	sl, r4, #25
 8005766:	68e3      	ldr	r3, [r4, #12]
 8005768:	6832      	ldr	r2, [r6, #0]
 800576a:	1a9b      	subs	r3, r3, r2
 800576c:	42ab      	cmp	r3, r5
 800576e:	dc26      	bgt.n	80057be <_printf_common+0x96>
 8005770:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005774:	1e13      	subs	r3, r2, #0
 8005776:	6822      	ldr	r2, [r4, #0]
 8005778:	bf18      	it	ne
 800577a:	2301      	movne	r3, #1
 800577c:	0692      	lsls	r2, r2, #26
 800577e:	d42b      	bmi.n	80057d8 <_printf_common+0xb0>
 8005780:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005784:	4649      	mov	r1, r9
 8005786:	4638      	mov	r0, r7
 8005788:	47c0      	blx	r8
 800578a:	3001      	adds	r0, #1
 800578c:	d01e      	beq.n	80057cc <_printf_common+0xa4>
 800578e:	6823      	ldr	r3, [r4, #0]
 8005790:	68e5      	ldr	r5, [r4, #12]
 8005792:	6832      	ldr	r2, [r6, #0]
 8005794:	f003 0306 	and.w	r3, r3, #6
 8005798:	2b04      	cmp	r3, #4
 800579a:	bf08      	it	eq
 800579c:	1aad      	subeq	r5, r5, r2
 800579e:	68a3      	ldr	r3, [r4, #8]
 80057a0:	6922      	ldr	r2, [r4, #16]
 80057a2:	bf0c      	ite	eq
 80057a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80057a8:	2500      	movne	r5, #0
 80057aa:	4293      	cmp	r3, r2
 80057ac:	bfc4      	itt	gt
 80057ae:	1a9b      	subgt	r3, r3, r2
 80057b0:	18ed      	addgt	r5, r5, r3
 80057b2:	2600      	movs	r6, #0
 80057b4:	341a      	adds	r4, #26
 80057b6:	42b5      	cmp	r5, r6
 80057b8:	d11a      	bne.n	80057f0 <_printf_common+0xc8>
 80057ba:	2000      	movs	r0, #0
 80057bc:	e008      	b.n	80057d0 <_printf_common+0xa8>
 80057be:	2301      	movs	r3, #1
 80057c0:	4652      	mov	r2, sl
 80057c2:	4649      	mov	r1, r9
 80057c4:	4638      	mov	r0, r7
 80057c6:	47c0      	blx	r8
 80057c8:	3001      	adds	r0, #1
 80057ca:	d103      	bne.n	80057d4 <_printf_common+0xac>
 80057cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80057d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057d4:	3501      	adds	r5, #1
 80057d6:	e7c6      	b.n	8005766 <_printf_common+0x3e>
 80057d8:	18e1      	adds	r1, r4, r3
 80057da:	1c5a      	adds	r2, r3, #1
 80057dc:	2030      	movs	r0, #48	; 0x30
 80057de:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80057e2:	4422      	add	r2, r4
 80057e4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80057e8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80057ec:	3302      	adds	r3, #2
 80057ee:	e7c7      	b.n	8005780 <_printf_common+0x58>
 80057f0:	2301      	movs	r3, #1
 80057f2:	4622      	mov	r2, r4
 80057f4:	4649      	mov	r1, r9
 80057f6:	4638      	mov	r0, r7
 80057f8:	47c0      	blx	r8
 80057fa:	3001      	adds	r0, #1
 80057fc:	d0e6      	beq.n	80057cc <_printf_common+0xa4>
 80057fe:	3601      	adds	r6, #1
 8005800:	e7d9      	b.n	80057b6 <_printf_common+0x8e>
	...

08005804 <_printf_i>:
 8005804:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005808:	460c      	mov	r4, r1
 800580a:	4691      	mov	r9, r2
 800580c:	7e27      	ldrb	r7, [r4, #24]
 800580e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005810:	2f78      	cmp	r7, #120	; 0x78
 8005812:	4680      	mov	r8, r0
 8005814:	469a      	mov	sl, r3
 8005816:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800581a:	d807      	bhi.n	800582c <_printf_i+0x28>
 800581c:	2f62      	cmp	r7, #98	; 0x62
 800581e:	d80a      	bhi.n	8005836 <_printf_i+0x32>
 8005820:	2f00      	cmp	r7, #0
 8005822:	f000 80d8 	beq.w	80059d6 <_printf_i+0x1d2>
 8005826:	2f58      	cmp	r7, #88	; 0x58
 8005828:	f000 80a3 	beq.w	8005972 <_printf_i+0x16e>
 800582c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005830:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005834:	e03a      	b.n	80058ac <_printf_i+0xa8>
 8005836:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800583a:	2b15      	cmp	r3, #21
 800583c:	d8f6      	bhi.n	800582c <_printf_i+0x28>
 800583e:	a001      	add	r0, pc, #4	; (adr r0, 8005844 <_printf_i+0x40>)
 8005840:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005844:	0800589d 	.word	0x0800589d
 8005848:	080058b1 	.word	0x080058b1
 800584c:	0800582d 	.word	0x0800582d
 8005850:	0800582d 	.word	0x0800582d
 8005854:	0800582d 	.word	0x0800582d
 8005858:	0800582d 	.word	0x0800582d
 800585c:	080058b1 	.word	0x080058b1
 8005860:	0800582d 	.word	0x0800582d
 8005864:	0800582d 	.word	0x0800582d
 8005868:	0800582d 	.word	0x0800582d
 800586c:	0800582d 	.word	0x0800582d
 8005870:	080059bd 	.word	0x080059bd
 8005874:	080058e1 	.word	0x080058e1
 8005878:	0800599f 	.word	0x0800599f
 800587c:	0800582d 	.word	0x0800582d
 8005880:	0800582d 	.word	0x0800582d
 8005884:	080059df 	.word	0x080059df
 8005888:	0800582d 	.word	0x0800582d
 800588c:	080058e1 	.word	0x080058e1
 8005890:	0800582d 	.word	0x0800582d
 8005894:	0800582d 	.word	0x0800582d
 8005898:	080059a7 	.word	0x080059a7
 800589c:	680b      	ldr	r3, [r1, #0]
 800589e:	1d1a      	adds	r2, r3, #4
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	600a      	str	r2, [r1, #0]
 80058a4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80058a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80058ac:	2301      	movs	r3, #1
 80058ae:	e0a3      	b.n	80059f8 <_printf_i+0x1f4>
 80058b0:	6825      	ldr	r5, [r4, #0]
 80058b2:	6808      	ldr	r0, [r1, #0]
 80058b4:	062e      	lsls	r6, r5, #24
 80058b6:	f100 0304 	add.w	r3, r0, #4
 80058ba:	d50a      	bpl.n	80058d2 <_printf_i+0xce>
 80058bc:	6805      	ldr	r5, [r0, #0]
 80058be:	600b      	str	r3, [r1, #0]
 80058c0:	2d00      	cmp	r5, #0
 80058c2:	da03      	bge.n	80058cc <_printf_i+0xc8>
 80058c4:	232d      	movs	r3, #45	; 0x2d
 80058c6:	426d      	negs	r5, r5
 80058c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80058cc:	485e      	ldr	r0, [pc, #376]	; (8005a48 <_printf_i+0x244>)
 80058ce:	230a      	movs	r3, #10
 80058d0:	e019      	b.n	8005906 <_printf_i+0x102>
 80058d2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80058d6:	6805      	ldr	r5, [r0, #0]
 80058d8:	600b      	str	r3, [r1, #0]
 80058da:	bf18      	it	ne
 80058dc:	b22d      	sxthne	r5, r5
 80058de:	e7ef      	b.n	80058c0 <_printf_i+0xbc>
 80058e0:	680b      	ldr	r3, [r1, #0]
 80058e2:	6825      	ldr	r5, [r4, #0]
 80058e4:	1d18      	adds	r0, r3, #4
 80058e6:	6008      	str	r0, [r1, #0]
 80058e8:	0628      	lsls	r0, r5, #24
 80058ea:	d501      	bpl.n	80058f0 <_printf_i+0xec>
 80058ec:	681d      	ldr	r5, [r3, #0]
 80058ee:	e002      	b.n	80058f6 <_printf_i+0xf2>
 80058f0:	0669      	lsls	r1, r5, #25
 80058f2:	d5fb      	bpl.n	80058ec <_printf_i+0xe8>
 80058f4:	881d      	ldrh	r5, [r3, #0]
 80058f6:	4854      	ldr	r0, [pc, #336]	; (8005a48 <_printf_i+0x244>)
 80058f8:	2f6f      	cmp	r7, #111	; 0x6f
 80058fa:	bf0c      	ite	eq
 80058fc:	2308      	moveq	r3, #8
 80058fe:	230a      	movne	r3, #10
 8005900:	2100      	movs	r1, #0
 8005902:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005906:	6866      	ldr	r6, [r4, #4]
 8005908:	60a6      	str	r6, [r4, #8]
 800590a:	2e00      	cmp	r6, #0
 800590c:	bfa2      	ittt	ge
 800590e:	6821      	ldrge	r1, [r4, #0]
 8005910:	f021 0104 	bicge.w	r1, r1, #4
 8005914:	6021      	strge	r1, [r4, #0]
 8005916:	b90d      	cbnz	r5, 800591c <_printf_i+0x118>
 8005918:	2e00      	cmp	r6, #0
 800591a:	d04d      	beq.n	80059b8 <_printf_i+0x1b4>
 800591c:	4616      	mov	r6, r2
 800591e:	fbb5 f1f3 	udiv	r1, r5, r3
 8005922:	fb03 5711 	mls	r7, r3, r1, r5
 8005926:	5dc7      	ldrb	r7, [r0, r7]
 8005928:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800592c:	462f      	mov	r7, r5
 800592e:	42bb      	cmp	r3, r7
 8005930:	460d      	mov	r5, r1
 8005932:	d9f4      	bls.n	800591e <_printf_i+0x11a>
 8005934:	2b08      	cmp	r3, #8
 8005936:	d10b      	bne.n	8005950 <_printf_i+0x14c>
 8005938:	6823      	ldr	r3, [r4, #0]
 800593a:	07df      	lsls	r7, r3, #31
 800593c:	d508      	bpl.n	8005950 <_printf_i+0x14c>
 800593e:	6923      	ldr	r3, [r4, #16]
 8005940:	6861      	ldr	r1, [r4, #4]
 8005942:	4299      	cmp	r1, r3
 8005944:	bfde      	ittt	le
 8005946:	2330      	movle	r3, #48	; 0x30
 8005948:	f806 3c01 	strble.w	r3, [r6, #-1]
 800594c:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8005950:	1b92      	subs	r2, r2, r6
 8005952:	6122      	str	r2, [r4, #16]
 8005954:	f8cd a000 	str.w	sl, [sp]
 8005958:	464b      	mov	r3, r9
 800595a:	aa03      	add	r2, sp, #12
 800595c:	4621      	mov	r1, r4
 800595e:	4640      	mov	r0, r8
 8005960:	f7ff fee2 	bl	8005728 <_printf_common>
 8005964:	3001      	adds	r0, #1
 8005966:	d14c      	bne.n	8005a02 <_printf_i+0x1fe>
 8005968:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800596c:	b004      	add	sp, #16
 800596e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005972:	4835      	ldr	r0, [pc, #212]	; (8005a48 <_printf_i+0x244>)
 8005974:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005978:	6823      	ldr	r3, [r4, #0]
 800597a:	680e      	ldr	r6, [r1, #0]
 800597c:	061f      	lsls	r7, r3, #24
 800597e:	f856 5b04 	ldr.w	r5, [r6], #4
 8005982:	600e      	str	r6, [r1, #0]
 8005984:	d514      	bpl.n	80059b0 <_printf_i+0x1ac>
 8005986:	07d9      	lsls	r1, r3, #31
 8005988:	bf44      	itt	mi
 800598a:	f043 0320 	orrmi.w	r3, r3, #32
 800598e:	6023      	strmi	r3, [r4, #0]
 8005990:	b91d      	cbnz	r5, 800599a <_printf_i+0x196>
 8005992:	6823      	ldr	r3, [r4, #0]
 8005994:	f023 0320 	bic.w	r3, r3, #32
 8005998:	6023      	str	r3, [r4, #0]
 800599a:	2310      	movs	r3, #16
 800599c:	e7b0      	b.n	8005900 <_printf_i+0xfc>
 800599e:	6823      	ldr	r3, [r4, #0]
 80059a0:	f043 0320 	orr.w	r3, r3, #32
 80059a4:	6023      	str	r3, [r4, #0]
 80059a6:	2378      	movs	r3, #120	; 0x78
 80059a8:	4828      	ldr	r0, [pc, #160]	; (8005a4c <_printf_i+0x248>)
 80059aa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80059ae:	e7e3      	b.n	8005978 <_printf_i+0x174>
 80059b0:	065e      	lsls	r6, r3, #25
 80059b2:	bf48      	it	mi
 80059b4:	b2ad      	uxthmi	r5, r5
 80059b6:	e7e6      	b.n	8005986 <_printf_i+0x182>
 80059b8:	4616      	mov	r6, r2
 80059ba:	e7bb      	b.n	8005934 <_printf_i+0x130>
 80059bc:	680b      	ldr	r3, [r1, #0]
 80059be:	6826      	ldr	r6, [r4, #0]
 80059c0:	6960      	ldr	r0, [r4, #20]
 80059c2:	1d1d      	adds	r5, r3, #4
 80059c4:	600d      	str	r5, [r1, #0]
 80059c6:	0635      	lsls	r5, r6, #24
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	d501      	bpl.n	80059d0 <_printf_i+0x1cc>
 80059cc:	6018      	str	r0, [r3, #0]
 80059ce:	e002      	b.n	80059d6 <_printf_i+0x1d2>
 80059d0:	0671      	lsls	r1, r6, #25
 80059d2:	d5fb      	bpl.n	80059cc <_printf_i+0x1c8>
 80059d4:	8018      	strh	r0, [r3, #0]
 80059d6:	2300      	movs	r3, #0
 80059d8:	6123      	str	r3, [r4, #16]
 80059da:	4616      	mov	r6, r2
 80059dc:	e7ba      	b.n	8005954 <_printf_i+0x150>
 80059de:	680b      	ldr	r3, [r1, #0]
 80059e0:	1d1a      	adds	r2, r3, #4
 80059e2:	600a      	str	r2, [r1, #0]
 80059e4:	681e      	ldr	r6, [r3, #0]
 80059e6:	6862      	ldr	r2, [r4, #4]
 80059e8:	2100      	movs	r1, #0
 80059ea:	4630      	mov	r0, r6
 80059ec:	f7fa fbf0 	bl	80001d0 <memchr>
 80059f0:	b108      	cbz	r0, 80059f6 <_printf_i+0x1f2>
 80059f2:	1b80      	subs	r0, r0, r6
 80059f4:	6060      	str	r0, [r4, #4]
 80059f6:	6863      	ldr	r3, [r4, #4]
 80059f8:	6123      	str	r3, [r4, #16]
 80059fa:	2300      	movs	r3, #0
 80059fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a00:	e7a8      	b.n	8005954 <_printf_i+0x150>
 8005a02:	6923      	ldr	r3, [r4, #16]
 8005a04:	4632      	mov	r2, r6
 8005a06:	4649      	mov	r1, r9
 8005a08:	4640      	mov	r0, r8
 8005a0a:	47d0      	blx	sl
 8005a0c:	3001      	adds	r0, #1
 8005a0e:	d0ab      	beq.n	8005968 <_printf_i+0x164>
 8005a10:	6823      	ldr	r3, [r4, #0]
 8005a12:	079b      	lsls	r3, r3, #30
 8005a14:	d413      	bmi.n	8005a3e <_printf_i+0x23a>
 8005a16:	68e0      	ldr	r0, [r4, #12]
 8005a18:	9b03      	ldr	r3, [sp, #12]
 8005a1a:	4298      	cmp	r0, r3
 8005a1c:	bfb8      	it	lt
 8005a1e:	4618      	movlt	r0, r3
 8005a20:	e7a4      	b.n	800596c <_printf_i+0x168>
 8005a22:	2301      	movs	r3, #1
 8005a24:	4632      	mov	r2, r6
 8005a26:	4649      	mov	r1, r9
 8005a28:	4640      	mov	r0, r8
 8005a2a:	47d0      	blx	sl
 8005a2c:	3001      	adds	r0, #1
 8005a2e:	d09b      	beq.n	8005968 <_printf_i+0x164>
 8005a30:	3501      	adds	r5, #1
 8005a32:	68e3      	ldr	r3, [r4, #12]
 8005a34:	9903      	ldr	r1, [sp, #12]
 8005a36:	1a5b      	subs	r3, r3, r1
 8005a38:	42ab      	cmp	r3, r5
 8005a3a:	dcf2      	bgt.n	8005a22 <_printf_i+0x21e>
 8005a3c:	e7eb      	b.n	8005a16 <_printf_i+0x212>
 8005a3e:	2500      	movs	r5, #0
 8005a40:	f104 0619 	add.w	r6, r4, #25
 8005a44:	e7f5      	b.n	8005a32 <_printf_i+0x22e>
 8005a46:	bf00      	nop
 8005a48:	080071f1 	.word	0x080071f1
 8005a4c:	08007202 	.word	0x08007202

08005a50 <memcpy>:
 8005a50:	440a      	add	r2, r1
 8005a52:	4291      	cmp	r1, r2
 8005a54:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005a58:	d100      	bne.n	8005a5c <memcpy+0xc>
 8005a5a:	4770      	bx	lr
 8005a5c:	b510      	push	{r4, lr}
 8005a5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005a62:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005a66:	4291      	cmp	r1, r2
 8005a68:	d1f9      	bne.n	8005a5e <memcpy+0xe>
 8005a6a:	bd10      	pop	{r4, pc}

08005a6c <memmove>:
 8005a6c:	4288      	cmp	r0, r1
 8005a6e:	b510      	push	{r4, lr}
 8005a70:	eb01 0402 	add.w	r4, r1, r2
 8005a74:	d902      	bls.n	8005a7c <memmove+0x10>
 8005a76:	4284      	cmp	r4, r0
 8005a78:	4623      	mov	r3, r4
 8005a7a:	d807      	bhi.n	8005a8c <memmove+0x20>
 8005a7c:	1e43      	subs	r3, r0, #1
 8005a7e:	42a1      	cmp	r1, r4
 8005a80:	d008      	beq.n	8005a94 <memmove+0x28>
 8005a82:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005a86:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005a8a:	e7f8      	b.n	8005a7e <memmove+0x12>
 8005a8c:	4402      	add	r2, r0
 8005a8e:	4601      	mov	r1, r0
 8005a90:	428a      	cmp	r2, r1
 8005a92:	d100      	bne.n	8005a96 <memmove+0x2a>
 8005a94:	bd10      	pop	{r4, pc}
 8005a96:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005a9a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005a9e:	e7f7      	b.n	8005a90 <memmove+0x24>

08005aa0 <_free_r>:
 8005aa0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005aa2:	2900      	cmp	r1, #0
 8005aa4:	d048      	beq.n	8005b38 <_free_r+0x98>
 8005aa6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005aaa:	9001      	str	r0, [sp, #4]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	f1a1 0404 	sub.w	r4, r1, #4
 8005ab2:	bfb8      	it	lt
 8005ab4:	18e4      	addlt	r4, r4, r3
 8005ab6:	f000 f8d3 	bl	8005c60 <__malloc_lock>
 8005aba:	4a20      	ldr	r2, [pc, #128]	; (8005b3c <_free_r+0x9c>)
 8005abc:	9801      	ldr	r0, [sp, #4]
 8005abe:	6813      	ldr	r3, [r2, #0]
 8005ac0:	4615      	mov	r5, r2
 8005ac2:	b933      	cbnz	r3, 8005ad2 <_free_r+0x32>
 8005ac4:	6063      	str	r3, [r4, #4]
 8005ac6:	6014      	str	r4, [r2, #0]
 8005ac8:	b003      	add	sp, #12
 8005aca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005ace:	f000 b8cd 	b.w	8005c6c <__malloc_unlock>
 8005ad2:	42a3      	cmp	r3, r4
 8005ad4:	d90b      	bls.n	8005aee <_free_r+0x4e>
 8005ad6:	6821      	ldr	r1, [r4, #0]
 8005ad8:	1862      	adds	r2, r4, r1
 8005ada:	4293      	cmp	r3, r2
 8005adc:	bf04      	itt	eq
 8005ade:	681a      	ldreq	r2, [r3, #0]
 8005ae0:	685b      	ldreq	r3, [r3, #4]
 8005ae2:	6063      	str	r3, [r4, #4]
 8005ae4:	bf04      	itt	eq
 8005ae6:	1852      	addeq	r2, r2, r1
 8005ae8:	6022      	streq	r2, [r4, #0]
 8005aea:	602c      	str	r4, [r5, #0]
 8005aec:	e7ec      	b.n	8005ac8 <_free_r+0x28>
 8005aee:	461a      	mov	r2, r3
 8005af0:	685b      	ldr	r3, [r3, #4]
 8005af2:	b10b      	cbz	r3, 8005af8 <_free_r+0x58>
 8005af4:	42a3      	cmp	r3, r4
 8005af6:	d9fa      	bls.n	8005aee <_free_r+0x4e>
 8005af8:	6811      	ldr	r1, [r2, #0]
 8005afa:	1855      	adds	r5, r2, r1
 8005afc:	42a5      	cmp	r5, r4
 8005afe:	d10b      	bne.n	8005b18 <_free_r+0x78>
 8005b00:	6824      	ldr	r4, [r4, #0]
 8005b02:	4421      	add	r1, r4
 8005b04:	1854      	adds	r4, r2, r1
 8005b06:	42a3      	cmp	r3, r4
 8005b08:	6011      	str	r1, [r2, #0]
 8005b0a:	d1dd      	bne.n	8005ac8 <_free_r+0x28>
 8005b0c:	681c      	ldr	r4, [r3, #0]
 8005b0e:	685b      	ldr	r3, [r3, #4]
 8005b10:	6053      	str	r3, [r2, #4]
 8005b12:	4421      	add	r1, r4
 8005b14:	6011      	str	r1, [r2, #0]
 8005b16:	e7d7      	b.n	8005ac8 <_free_r+0x28>
 8005b18:	d902      	bls.n	8005b20 <_free_r+0x80>
 8005b1a:	230c      	movs	r3, #12
 8005b1c:	6003      	str	r3, [r0, #0]
 8005b1e:	e7d3      	b.n	8005ac8 <_free_r+0x28>
 8005b20:	6825      	ldr	r5, [r4, #0]
 8005b22:	1961      	adds	r1, r4, r5
 8005b24:	428b      	cmp	r3, r1
 8005b26:	bf04      	itt	eq
 8005b28:	6819      	ldreq	r1, [r3, #0]
 8005b2a:	685b      	ldreq	r3, [r3, #4]
 8005b2c:	6063      	str	r3, [r4, #4]
 8005b2e:	bf04      	itt	eq
 8005b30:	1949      	addeq	r1, r1, r5
 8005b32:	6021      	streq	r1, [r4, #0]
 8005b34:	6054      	str	r4, [r2, #4]
 8005b36:	e7c7      	b.n	8005ac8 <_free_r+0x28>
 8005b38:	b003      	add	sp, #12
 8005b3a:	bd30      	pop	{r4, r5, pc}
 8005b3c:	2000051c 	.word	0x2000051c

08005b40 <_malloc_r>:
 8005b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b42:	1ccd      	adds	r5, r1, #3
 8005b44:	f025 0503 	bic.w	r5, r5, #3
 8005b48:	3508      	adds	r5, #8
 8005b4a:	2d0c      	cmp	r5, #12
 8005b4c:	bf38      	it	cc
 8005b4e:	250c      	movcc	r5, #12
 8005b50:	2d00      	cmp	r5, #0
 8005b52:	4606      	mov	r6, r0
 8005b54:	db01      	blt.n	8005b5a <_malloc_r+0x1a>
 8005b56:	42a9      	cmp	r1, r5
 8005b58:	d903      	bls.n	8005b62 <_malloc_r+0x22>
 8005b5a:	230c      	movs	r3, #12
 8005b5c:	6033      	str	r3, [r6, #0]
 8005b5e:	2000      	movs	r0, #0
 8005b60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b62:	f000 f87d 	bl	8005c60 <__malloc_lock>
 8005b66:	4921      	ldr	r1, [pc, #132]	; (8005bec <_malloc_r+0xac>)
 8005b68:	680a      	ldr	r2, [r1, #0]
 8005b6a:	4614      	mov	r4, r2
 8005b6c:	b99c      	cbnz	r4, 8005b96 <_malloc_r+0x56>
 8005b6e:	4f20      	ldr	r7, [pc, #128]	; (8005bf0 <_malloc_r+0xb0>)
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	b923      	cbnz	r3, 8005b7e <_malloc_r+0x3e>
 8005b74:	4621      	mov	r1, r4
 8005b76:	4630      	mov	r0, r6
 8005b78:	f000 f862 	bl	8005c40 <_sbrk_r>
 8005b7c:	6038      	str	r0, [r7, #0]
 8005b7e:	4629      	mov	r1, r5
 8005b80:	4630      	mov	r0, r6
 8005b82:	f000 f85d 	bl	8005c40 <_sbrk_r>
 8005b86:	1c43      	adds	r3, r0, #1
 8005b88:	d123      	bne.n	8005bd2 <_malloc_r+0x92>
 8005b8a:	230c      	movs	r3, #12
 8005b8c:	6033      	str	r3, [r6, #0]
 8005b8e:	4630      	mov	r0, r6
 8005b90:	f000 f86c 	bl	8005c6c <__malloc_unlock>
 8005b94:	e7e3      	b.n	8005b5e <_malloc_r+0x1e>
 8005b96:	6823      	ldr	r3, [r4, #0]
 8005b98:	1b5b      	subs	r3, r3, r5
 8005b9a:	d417      	bmi.n	8005bcc <_malloc_r+0x8c>
 8005b9c:	2b0b      	cmp	r3, #11
 8005b9e:	d903      	bls.n	8005ba8 <_malloc_r+0x68>
 8005ba0:	6023      	str	r3, [r4, #0]
 8005ba2:	441c      	add	r4, r3
 8005ba4:	6025      	str	r5, [r4, #0]
 8005ba6:	e004      	b.n	8005bb2 <_malloc_r+0x72>
 8005ba8:	6863      	ldr	r3, [r4, #4]
 8005baa:	42a2      	cmp	r2, r4
 8005bac:	bf0c      	ite	eq
 8005bae:	600b      	streq	r3, [r1, #0]
 8005bb0:	6053      	strne	r3, [r2, #4]
 8005bb2:	4630      	mov	r0, r6
 8005bb4:	f000 f85a 	bl	8005c6c <__malloc_unlock>
 8005bb8:	f104 000b 	add.w	r0, r4, #11
 8005bbc:	1d23      	adds	r3, r4, #4
 8005bbe:	f020 0007 	bic.w	r0, r0, #7
 8005bc2:	1ac2      	subs	r2, r0, r3
 8005bc4:	d0cc      	beq.n	8005b60 <_malloc_r+0x20>
 8005bc6:	1a1b      	subs	r3, r3, r0
 8005bc8:	50a3      	str	r3, [r4, r2]
 8005bca:	e7c9      	b.n	8005b60 <_malloc_r+0x20>
 8005bcc:	4622      	mov	r2, r4
 8005bce:	6864      	ldr	r4, [r4, #4]
 8005bd0:	e7cc      	b.n	8005b6c <_malloc_r+0x2c>
 8005bd2:	1cc4      	adds	r4, r0, #3
 8005bd4:	f024 0403 	bic.w	r4, r4, #3
 8005bd8:	42a0      	cmp	r0, r4
 8005bda:	d0e3      	beq.n	8005ba4 <_malloc_r+0x64>
 8005bdc:	1a21      	subs	r1, r4, r0
 8005bde:	4630      	mov	r0, r6
 8005be0:	f000 f82e 	bl	8005c40 <_sbrk_r>
 8005be4:	3001      	adds	r0, #1
 8005be6:	d1dd      	bne.n	8005ba4 <_malloc_r+0x64>
 8005be8:	e7cf      	b.n	8005b8a <_malloc_r+0x4a>
 8005bea:	bf00      	nop
 8005bec:	2000051c 	.word	0x2000051c
 8005bf0:	20000520 	.word	0x20000520

08005bf4 <_realloc_r>:
 8005bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bf6:	4607      	mov	r7, r0
 8005bf8:	4614      	mov	r4, r2
 8005bfa:	460e      	mov	r6, r1
 8005bfc:	b921      	cbnz	r1, 8005c08 <_realloc_r+0x14>
 8005bfe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005c02:	4611      	mov	r1, r2
 8005c04:	f7ff bf9c 	b.w	8005b40 <_malloc_r>
 8005c08:	b922      	cbnz	r2, 8005c14 <_realloc_r+0x20>
 8005c0a:	f7ff ff49 	bl	8005aa0 <_free_r>
 8005c0e:	4625      	mov	r5, r4
 8005c10:	4628      	mov	r0, r5
 8005c12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c14:	f000 f830 	bl	8005c78 <_malloc_usable_size_r>
 8005c18:	42a0      	cmp	r0, r4
 8005c1a:	d20f      	bcs.n	8005c3c <_realloc_r+0x48>
 8005c1c:	4621      	mov	r1, r4
 8005c1e:	4638      	mov	r0, r7
 8005c20:	f7ff ff8e 	bl	8005b40 <_malloc_r>
 8005c24:	4605      	mov	r5, r0
 8005c26:	2800      	cmp	r0, #0
 8005c28:	d0f2      	beq.n	8005c10 <_realloc_r+0x1c>
 8005c2a:	4631      	mov	r1, r6
 8005c2c:	4622      	mov	r2, r4
 8005c2e:	f7ff ff0f 	bl	8005a50 <memcpy>
 8005c32:	4631      	mov	r1, r6
 8005c34:	4638      	mov	r0, r7
 8005c36:	f7ff ff33 	bl	8005aa0 <_free_r>
 8005c3a:	e7e9      	b.n	8005c10 <_realloc_r+0x1c>
 8005c3c:	4635      	mov	r5, r6
 8005c3e:	e7e7      	b.n	8005c10 <_realloc_r+0x1c>

08005c40 <_sbrk_r>:
 8005c40:	b538      	push	{r3, r4, r5, lr}
 8005c42:	4d06      	ldr	r5, [pc, #24]	; (8005c5c <_sbrk_r+0x1c>)
 8005c44:	2300      	movs	r3, #0
 8005c46:	4604      	mov	r4, r0
 8005c48:	4608      	mov	r0, r1
 8005c4a:	602b      	str	r3, [r5, #0]
 8005c4c:	f7fb fdc0 	bl	80017d0 <_sbrk>
 8005c50:	1c43      	adds	r3, r0, #1
 8005c52:	d102      	bne.n	8005c5a <_sbrk_r+0x1a>
 8005c54:	682b      	ldr	r3, [r5, #0]
 8005c56:	b103      	cbz	r3, 8005c5a <_sbrk_r+0x1a>
 8005c58:	6023      	str	r3, [r4, #0]
 8005c5a:	bd38      	pop	{r3, r4, r5, pc}
 8005c5c:	20000718 	.word	0x20000718

08005c60 <__malloc_lock>:
 8005c60:	4801      	ldr	r0, [pc, #4]	; (8005c68 <__malloc_lock+0x8>)
 8005c62:	f000 b811 	b.w	8005c88 <__retarget_lock_acquire_recursive>
 8005c66:	bf00      	nop
 8005c68:	20000720 	.word	0x20000720

08005c6c <__malloc_unlock>:
 8005c6c:	4801      	ldr	r0, [pc, #4]	; (8005c74 <__malloc_unlock+0x8>)
 8005c6e:	f000 b80c 	b.w	8005c8a <__retarget_lock_release_recursive>
 8005c72:	bf00      	nop
 8005c74:	20000720 	.word	0x20000720

08005c78 <_malloc_usable_size_r>:
 8005c78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c7c:	1f18      	subs	r0, r3, #4
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	bfbc      	itt	lt
 8005c82:	580b      	ldrlt	r3, [r1, r0]
 8005c84:	18c0      	addlt	r0, r0, r3
 8005c86:	4770      	bx	lr

08005c88 <__retarget_lock_acquire_recursive>:
 8005c88:	4770      	bx	lr

08005c8a <__retarget_lock_release_recursive>:
 8005c8a:	4770      	bx	lr

08005c8c <_init>:
 8005c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c8e:	bf00      	nop
 8005c90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c92:	bc08      	pop	{r3}
 8005c94:	469e      	mov	lr, r3
 8005c96:	4770      	bx	lr

08005c98 <_fini>:
 8005c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c9a:	bf00      	nop
 8005c9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c9e:	bc08      	pop	{r3}
 8005ca0:	469e      	mov	lr, r3
 8005ca2:	4770      	bx	lr
